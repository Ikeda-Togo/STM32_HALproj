
B3M_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b74  08002b74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b74  08002b74  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b74  08002b74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b74  08002b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b78  08002b78  00012b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08002b88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002b88  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1a0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aed  00000000  00000000  0002c1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  0002dcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000580  00000000  00000000  0002e2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174de  00000000  00000000  0002e878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000083fa  00000000  00000000  00045d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007eb4e  00000000  00000000  0004e150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ccc9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017c0  00000000  00000000  000cccf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b24 	.word	0x08002b24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002b24 	.word	0x08002b24

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f931 	bl	8000440 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f002 fb36 	bl	8002854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f93b 	bl	800048e <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f000 f911 	bl	8000456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000028 	.word	0x20000028

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028

08000294 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800029c:	f7ff ffee 	bl	800027c <HAL_GetTick>
 80002a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002ac:	d005      	beq.n	80002ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ae:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <HAL_Delay+0x44>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4413      	add	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002ba:	bf00      	nop
 80002bc:	f7ff ffde 	bl	800027c <HAL_GetTick>
 80002c0:	4602      	mov	r2, r0
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	1ad3      	subs	r3, r2, r3
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d8f7      	bhi.n	80002bc <HAL_Delay+0x28>
  {
  }
}
 80002cc:	bf00      	nop
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000004 	.word	0x20000004

080002dc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f003 0307 	and.w	r3, r3, #7
 80002ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <NVIC_SetPriorityGrouping+0x44>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002f2:	68ba      	ldr	r2, [r7, #8]
 80002f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002f8:	4013      	ands	r3, r2
 80002fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800030c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800030e:	4a04      	ldr	r2, [pc, #16]	; (8000320 <NVIC_SetPriorityGrouping+0x44>)
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	60d3      	str	r3, [r2, #12]
}
 8000314:	bf00      	nop
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	e000ed00 	.word	0xe000ed00

08000324 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000328:	4b04      	ldr	r3, [pc, #16]	; (800033c <NVIC_GetPriorityGrouping+0x18>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	f003 0307 	and.w	r3, r3, #7
}
 8000332:	4618      	mov	r0, r3
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	6039      	str	r1, [r7, #0]
 800034a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800034c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000350:	2b00      	cmp	r3, #0
 8000352:	da0b      	bge.n	800036c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	b2da      	uxtb	r2, r3
 8000358:	490c      	ldr	r1, [pc, #48]	; (800038c <NVIC_SetPriority+0x4c>)
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	f003 030f 	and.w	r3, r3, #15
 8000360:	3b04      	subs	r3, #4
 8000362:	0112      	lsls	r2, r2, #4
 8000364:	b2d2      	uxtb	r2, r2
 8000366:	440b      	add	r3, r1
 8000368:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800036a:	e009      	b.n	8000380 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	b2da      	uxtb	r2, r3
 8000370:	4907      	ldr	r1, [pc, #28]	; (8000390 <NVIC_SetPriority+0x50>)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	0112      	lsls	r2, r2, #4
 8000378:	b2d2      	uxtb	r2, r2
 800037a:	440b      	add	r3, r1
 800037c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	e000ed00 	.word	0xe000ed00
 8000390:	e000e100 	.word	0xe000e100

08000394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000394:	b480      	push	{r7}
 8000396:	b089      	sub	sp, #36	; 0x24
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f003 0307 	and.w	r3, r3, #7
 80003a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003a8:	69fb      	ldr	r3, [r7, #28]
 80003aa:	f1c3 0307 	rsb	r3, r3, #7
 80003ae:	2b04      	cmp	r3, #4
 80003b0:	bf28      	it	cs
 80003b2:	2304      	movcs	r3, #4
 80003b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b6:	69fb      	ldr	r3, [r7, #28]
 80003b8:	3304      	adds	r3, #4
 80003ba:	2b06      	cmp	r3, #6
 80003bc:	d902      	bls.n	80003c4 <NVIC_EncodePriority+0x30>
 80003be:	69fb      	ldr	r3, [r7, #28]
 80003c0:	3b03      	subs	r3, #3
 80003c2:	e000      	b.n	80003c6 <NVIC_EncodePriority+0x32>
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c8:	f04f 32ff 	mov.w	r2, #4294967295
 80003cc:	69bb      	ldr	r3, [r7, #24]
 80003ce:	fa02 f303 	lsl.w	r3, r2, r3
 80003d2:	43da      	mvns	r2, r3
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	401a      	ands	r2, r3
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003dc:	f04f 31ff 	mov.w	r1, #4294967295
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	43d9      	mvns	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ec:	4313      	orrs	r3, r2
         );
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3724      	adds	r7, #36	; 0x24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
	...

080003fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3b01      	subs	r3, #1
 8000408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800040c:	d301      	bcc.n	8000412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040e:	2301      	movs	r3, #1
 8000410:	e00f      	b.n	8000432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000412:	4a0a      	ldr	r2, [pc, #40]	; (800043c <SysTick_Config+0x40>)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3b01      	subs	r3, #1
 8000418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800041a:	210f      	movs	r1, #15
 800041c:	f04f 30ff 	mov.w	r0, #4294967295
 8000420:	f7ff ff8e 	bl	8000340 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <SysTick_Config+0x40>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <SysTick_Config+0x40>)
 800042c:	2207      	movs	r2, #7
 800042e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000430:	2300      	movs	r3, #0
}
 8000432:	4618      	mov	r0, r3
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	e000e010 	.word	0xe000e010

08000440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f7ff ff47 	bl	80002dc <NVIC_SetPriorityGrouping>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b086      	sub	sp, #24
 800045a:	af00      	add	r7, sp, #0
 800045c:	4603      	mov	r3, r0
 800045e:	60b9      	str	r1, [r7, #8]
 8000460:	607a      	str	r2, [r7, #4]
 8000462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000468:	f7ff ff5c 	bl	8000324 <NVIC_GetPriorityGrouping>
 800046c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	68b9      	ldr	r1, [r7, #8]
 8000472:	6978      	ldr	r0, [r7, #20]
 8000474:	f7ff ff8e 	bl	8000394 <NVIC_EncodePriority>
 8000478:	4602      	mov	r2, r0
 800047a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047e:	4611      	mov	r1, r2
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ff5d 	bl	8000340 <NVIC_SetPriority>
}
 8000486:	bf00      	nop
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f7ff ffb0 	bl	80003fc <SysTick_Config>
 800049c:	4603      	mov	r3, r0
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004be:	e14e      	b.n	800075e <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	2101      	movs	r1, #1
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	f000 8140 	beq.w	8000758 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2b02      	cmp	r3, #2
 80004de:	d003      	beq.n	80004e8 <HAL_GPIO_Init+0x40>
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	2b12      	cmp	r3, #18
 80004e6:	d123      	bne.n	8000530 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	08da      	lsrs	r2, r3, #3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3208      	adds	r2, #8
 80004f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	f003 0307 	and.w	r3, r3, #7
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	220f      	movs	r2, #15
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	43db      	mvns	r3, r3
 8000506:	693a      	ldr	r2, [r7, #16]
 8000508:	4013      	ands	r3, r2
 800050a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	691a      	ldr	r2, [r3, #16]
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	f003 0307 	and.w	r3, r3, #7
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	693a      	ldr	r2, [r7, #16]
 800051e:	4313      	orrs	r3, r2
 8000520:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	08da      	lsrs	r2, r3, #3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3208      	adds	r2, #8
 800052a:	6939      	ldr	r1, [r7, #16]
 800052c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	2203      	movs	r2, #3
 800053c:	fa02 f303 	lsl.w	r3, r2, r3
 8000540:	43db      	mvns	r3, r3
 8000542:	693a      	ldr	r2, [r7, #16]
 8000544:	4013      	ands	r3, r2
 8000546:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	f003 0203 	and.w	r2, r3, #3
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	fa02 f303 	lsl.w	r3, r2, r3
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	4313      	orrs	r3, r2
 800055c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	693a      	ldr	r2, [r7, #16]
 8000562:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d00b      	beq.n	8000584 <HAL_GPIO_Init+0xdc>
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	2b02      	cmp	r3, #2
 8000572:	d007      	beq.n	8000584 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000578:	2b11      	cmp	r3, #17
 800057a:	d003      	beq.n	8000584 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	2b12      	cmp	r3, #18
 8000582:	d130      	bne.n	80005e6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2203      	movs	r2, #3
 8000590:	fa02 f303 	lsl.w	r3, r2, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	693a      	ldr	r2, [r7, #16]
 8000598:	4013      	ands	r3, r2
 800059a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	693a      	ldr	r2, [r7, #16]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	693a      	ldr	r2, [r7, #16]
 80005b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005ba:	2201      	movs	r2, #1
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	43db      	mvns	r3, r3
 80005c4:	693a      	ldr	r2, [r7, #16]
 80005c6:	4013      	ands	r3, r2
 80005c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	091b      	lsrs	r3, r3, #4
 80005d0:	f003 0201 	and.w	r2, r3, #1
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	4313      	orrs	r3, r2
 80005de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	2203      	movs	r2, #3
 80005f2:	fa02 f303 	lsl.w	r3, r2, r3
 80005f6:	43db      	mvns	r3, r3
 80005f8:	693a      	ldr	r2, [r7, #16]
 80005fa:	4013      	ands	r3, r2
 80005fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	689a      	ldr	r2, [r3, #8]
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	fa02 f303 	lsl.w	r3, r2, r3
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	4313      	orrs	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 809a 	beq.w	8000758 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000624:	4b55      	ldr	r3, [pc, #340]	; (800077c <HAL_GPIO_Init+0x2d4>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a54      	ldr	r2, [pc, #336]	; (800077c <HAL_GPIO_Init+0x2d4>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b52      	ldr	r3, [pc, #328]	; (800077c <HAL_GPIO_Init+0x2d4>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800063c:	4a50      	ldr	r2, [pc, #320]	; (8000780 <HAL_GPIO_Init+0x2d8>)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	089b      	lsrs	r3, r3, #2
 8000642:	3302      	adds	r3, #2
 8000644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000648:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	f003 0303 	and.w	r3, r3, #3
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	220f      	movs	r2, #15
 8000654:	fa02 f303 	lsl.w	r3, r2, r3
 8000658:	43db      	mvns	r3, r3
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	4013      	ands	r3, r2
 800065e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000666:	d013      	beq.n	8000690 <HAL_GPIO_Init+0x1e8>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a46      	ldr	r2, [pc, #280]	; (8000784 <HAL_GPIO_Init+0x2dc>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d00d      	beq.n	800068c <HAL_GPIO_Init+0x1e4>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a45      	ldr	r2, [pc, #276]	; (8000788 <HAL_GPIO_Init+0x2e0>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d007      	beq.n	8000688 <HAL_GPIO_Init+0x1e0>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a44      	ldr	r2, [pc, #272]	; (800078c <HAL_GPIO_Init+0x2e4>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d101      	bne.n	8000684 <HAL_GPIO_Init+0x1dc>
 8000680:	2303      	movs	r3, #3
 8000682:	e006      	b.n	8000692 <HAL_GPIO_Init+0x1ea>
 8000684:	2305      	movs	r3, #5
 8000686:	e004      	b.n	8000692 <HAL_GPIO_Init+0x1ea>
 8000688:	2302      	movs	r3, #2
 800068a:	e002      	b.n	8000692 <HAL_GPIO_Init+0x1ea>
 800068c:	2301      	movs	r3, #1
 800068e:	e000      	b.n	8000692 <HAL_GPIO_Init+0x1ea>
 8000690:	2300      	movs	r3, #0
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	f002 0203 	and.w	r2, r2, #3
 8000698:	0092      	lsls	r2, r2, #2
 800069a:	4093      	lsls	r3, r2
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	4313      	orrs	r3, r2
 80006a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80006a2:	4937      	ldr	r1, [pc, #220]	; (8000780 <HAL_GPIO_Init+0x2d8>)
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	089b      	lsrs	r3, r3, #2
 80006a8:	3302      	adds	r3, #2
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006b0:	4b37      	ldr	r3, [pc, #220]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	43db      	mvns	r3, r3
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	4013      	ands	r3, r2
 80006be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d003      	beq.n	80006d4 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80006cc:	693a      	ldr	r2, [r7, #16]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006d4:	4a2e      	ldr	r2, [pc, #184]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	43db      	mvns	r3, r3
 80006e4:	693a      	ldr	r2, [r7, #16]
 80006e6:	4013      	ands	r3, r2
 80006e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d003      	beq.n	80006fe <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006fe:	4a24      	ldr	r2, [pc, #144]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	43db      	mvns	r3, r3
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	4013      	ands	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800071c:	2b00      	cmp	r3, #0
 800071e:	d003      	beq.n	8000728 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000720:	693a      	ldr	r2, [r7, #16]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4313      	orrs	r3, r2
 8000726:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000728:	4a19      	ldr	r2, [pc, #100]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	43db      	mvns	r3, r3
 8000738:	693a      	ldr	r2, [r7, #16]
 800073a:	4013      	ands	r3, r2
 800073c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	4313      	orrs	r3, r2
 8000750:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000752:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	3301      	adds	r3, #1
 800075c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	fa22 f303 	lsr.w	r3, r2, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	f47f aea9 	bne.w	80004c0 <HAL_GPIO_Init+0x18>
  }
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	371c      	adds	r7, #28
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	40021000 	.word	0x40021000
 8000780:	40010000 	.word	0x40010000
 8000784:	48000400 	.word	0x48000400
 8000788:	48000800 	.word	0x48000800
 800078c:	48000c00 	.word	0x48000c00
 8000790:	40010400 	.word	0x40010400

08000794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	807b      	strh	r3, [r7, #2]
 80007a0:	4613      	mov	r3, r2
 80007a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007a4:	787b      	ldrb	r3, [r7, #1]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d003      	beq.n	80007b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007aa:	887a      	ldrh	r2, [r7, #2]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007b0:	e002      	b.n	80007b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007b2:	887a      	ldrh	r2, [r7, #2]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d102      	bne.n	80007de <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	f000 beda 	b.w	8001592 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	f000 816e 	beq.w	8000aca <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007ee:	4bb5      	ldr	r3, [pc, #724]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f003 030c 	and.w	r3, r3, #12
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	d00c      	beq.n	8000814 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007fa:	4bb2      	ldr	r3, [pc, #712]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	f003 030c 	and.w	r3, r3, #12
 8000802:	2b08      	cmp	r3, #8
 8000804:	d15a      	bne.n	80008bc <HAL_RCC_OscConfig+0xf8>
 8000806:	4baf      	ldr	r3, [pc, #700]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800080e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000812:	d153      	bne.n	80008bc <HAL_RCC_OscConfig+0xf8>
 8000814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000818:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800081c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000820:	fa93 f3a3 	rbit	r3, r3
 8000824:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000828:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800082c:	fab3 f383 	clz	r3, r3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	b2db      	uxtb	r3, r3
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b01      	cmp	r3, #1
 800083e:	d102      	bne.n	8000846 <HAL_RCC_OscConfig+0x82>
 8000840:	4ba0      	ldr	r3, [pc, #640]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	e015      	b.n	8000872 <HAL_RCC_OscConfig+0xae>
 8000846:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800084a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800084e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000852:	fa93 f3a3 	rbit	r3, r3
 8000856:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800085a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800085e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000862:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000866:	fa93 f3a3 	rbit	r3, r3
 800086a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800086e:	4b95      	ldr	r3, [pc, #596]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 8000870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000872:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000876:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800087a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800087e:	fa92 f2a2 	rbit	r2, r2
 8000882:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000886:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800088a:	fab2 f282 	clz	r2, r2
 800088e:	b252      	sxtb	r2, r2
 8000890:	f042 0220 	orr.w	r2, r2, #32
 8000894:	b252      	sxtb	r2, r2
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	f002 021f 	and.w	r2, r2, #31
 800089c:	2101      	movs	r1, #1
 800089e:	fa01 f202 	lsl.w	r2, r1, r2
 80008a2:	4013      	ands	r3, r2
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	f000 810f 	beq.w	8000ac8 <HAL_RCC_OscConfig+0x304>
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	f040 8109 	bne.w	8000ac8 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	f000 be6b 	b.w	8001592 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c6:	d106      	bne.n	80008d6 <HAL_RCC_OscConfig+0x112>
 80008c8:	4b7e      	ldr	r3, [pc, #504]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a7d      	ldr	r2, [pc, #500]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 80008ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	e030      	b.n	8000938 <HAL_RCC_OscConfig+0x174>
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d10c      	bne.n	80008fa <HAL_RCC_OscConfig+0x136>
 80008e0:	4b78      	ldr	r3, [pc, #480]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a77      	ldr	r2, [pc, #476]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 80008e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	4b75      	ldr	r3, [pc, #468]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a74      	ldr	r2, [pc, #464]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 80008f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	e01e      	b.n	8000938 <HAL_RCC_OscConfig+0x174>
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000904:	d10c      	bne.n	8000920 <HAL_RCC_OscConfig+0x15c>
 8000906:	4b6f      	ldr	r3, [pc, #444]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a6e      	ldr	r2, [pc, #440]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 800090c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000910:	6013      	str	r3, [r2, #0]
 8000912:	4b6c      	ldr	r3, [pc, #432]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a6b      	ldr	r2, [pc, #428]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 8000918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800091c:	6013      	str	r3, [r2, #0]
 800091e:	e00b      	b.n	8000938 <HAL_RCC_OscConfig+0x174>
 8000920:	4b68      	ldr	r3, [pc, #416]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a67      	ldr	r2, [pc, #412]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 8000926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	4b65      	ldr	r3, [pc, #404]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a64      	ldr	r2, [pc, #400]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 8000932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000936:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000938:	4b62      	ldr	r3, [pc, #392]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 800093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093c:	f023 020f 	bic.w	r2, r3, #15
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	495f      	ldr	r1, [pc, #380]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 8000948:	4313      	orrs	r3, r2
 800094a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d05a      	beq.n	8000a0c <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000956:	f7ff fc91 	bl	800027c <HAL_GetTick>
 800095a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095e:	e00a      	b.n	8000976 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000960:	f7ff fc8c 	bl	800027c <HAL_GetTick>
 8000964:	4602      	mov	r2, r0
 8000966:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	2b64      	cmp	r3, #100	; 0x64
 800096e:	d902      	bls.n	8000976 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000970:	2303      	movs	r3, #3
 8000972:	f000 be0e 	b.w	8001592 <HAL_RCC_OscConfig+0xdce>
 8000976:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800097a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800097e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000982:	fa93 f3a3 	rbit	r3, r3
 8000986:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 800098a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098e:	fab3 f383 	clz	r3, r3
 8000992:	b2db      	uxtb	r3, r3
 8000994:	095b      	lsrs	r3, r3, #5
 8000996:	b2db      	uxtb	r3, r3
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d102      	bne.n	80009a8 <HAL_RCC_OscConfig+0x1e4>
 80009a2:	4b48      	ldr	r3, [pc, #288]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	e015      	b.n	80009d4 <HAL_RCC_OscConfig+0x210>
 80009a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009ac:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009b0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80009b4:	fa93 f3a3 	rbit	r3, r3
 80009b8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80009bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009c0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80009c4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80009c8:	fa93 f3a3 	rbit	r3, r3
 80009cc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80009d0:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 80009d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009d8:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80009dc:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80009e0:	fa92 f2a2 	rbit	r2, r2
 80009e4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 80009e8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80009ec:	fab2 f282 	clz	r2, r2
 80009f0:	b252      	sxtb	r2, r2
 80009f2:	f042 0220 	orr.w	r2, r2, #32
 80009f6:	b252      	sxtb	r2, r2
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	f002 021f 	and.w	r2, r2, #31
 80009fe:	2101      	movs	r1, #1
 8000a00:	fa01 f202 	lsl.w	r2, r1, r2
 8000a04:	4013      	ands	r3, r2
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0aa      	beq.n	8000960 <HAL_RCC_OscConfig+0x19c>
 8000a0a:	e05e      	b.n	8000aca <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a0c:	f7ff fc36 	bl	800027c <HAL_GetTick>
 8000a10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a14:	e00a      	b.n	8000a2c <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a16:	f7ff fc31 	bl	800027c <HAL_GetTick>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	2b64      	cmp	r3, #100	; 0x64
 8000a24:	d902      	bls.n	8000a2c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000a26:	2303      	movs	r3, #3
 8000a28:	f000 bdb3 	b.w	8001592 <HAL_RCC_OscConfig+0xdce>
 8000a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a30:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000a38:	fa93 f3a3 	rbit	r3, r3
 8000a3c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000a40:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a44:	fab3 f383 	clz	r3, r3
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	095b      	lsrs	r3, r3, #5
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d102      	bne.n	8000a5e <HAL_RCC_OscConfig+0x29a>
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	e015      	b.n	8000a8a <HAL_RCC_OscConfig+0x2c6>
 8000a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a62:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000a6a:	fa93 f3a3 	rbit	r3, r3
 8000a6e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000a72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a76:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000a7a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000a7e:	fa93 f3a3 	rbit	r3, r3
 8000a82:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <HAL_RCC_OscConfig+0x300>)
 8000a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a8e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000a92:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000a96:	fa92 f2a2 	rbit	r2, r2
 8000a9a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000a9e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b252      	sxtb	r2, r2
 8000aa8:	f042 0220 	orr.w	r2, r2, #32
 8000aac:	b252      	sxtb	r2, r2
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	f002 021f 	and.w	r2, r2, #31
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aba:	4013      	ands	r3, r2
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1aa      	bne.n	8000a16 <HAL_RCC_OscConfig+0x252>
 8000ac0:	e003      	b.n	8000aca <HAL_RCC_OscConfig+0x306>
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f000 8170 	beq.w	8000dba <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ada:	4bd0      	ldr	r3, [pc, #832]	; (8000e1c <HAL_RCC_OscConfig+0x658>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 030c 	and.w	r3, r3, #12
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00b      	beq.n	8000afe <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ae6:	4bcd      	ldr	r3, [pc, #820]	; (8000e1c <HAL_RCC_OscConfig+0x658>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 030c 	and.w	r3, r3, #12
 8000aee:	2b08      	cmp	r3, #8
 8000af0:	d16d      	bne.n	8000bce <HAL_RCC_OscConfig+0x40a>
 8000af2:	4bca      	ldr	r3, [pc, #808]	; (8000e1c <HAL_RCC_OscConfig+0x658>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d167      	bne.n	8000bce <HAL_RCC_OscConfig+0x40a>
 8000afe:	2302      	movs	r3, #2
 8000b00:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b04:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000b08:	fa93 f3a3 	rbit	r3, r3
 8000b0c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000b10:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b14:	fab3 f383 	clz	r3, r3
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d102      	bne.n	8000b2e <HAL_RCC_OscConfig+0x36a>
 8000b28:	4bbc      	ldr	r3, [pc, #752]	; (8000e1c <HAL_RCC_OscConfig+0x658>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	e013      	b.n	8000b56 <HAL_RCC_OscConfig+0x392>
 8000b2e:	2302      	movs	r3, #2
 8000b30:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b34:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000b38:	fa93 f3a3 	rbit	r3, r3
 8000b3c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000b40:	2302      	movs	r3, #2
 8000b42:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000b46:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000b4a:	fa93 f3a3 	rbit	r3, r3
 8000b4e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000b52:	4bb2      	ldr	r3, [pc, #712]	; (8000e1c <HAL_RCC_OscConfig+0x658>)
 8000b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b56:	2202      	movs	r2, #2
 8000b58:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000b5c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000b60:	fa92 f2a2 	rbit	r2, r2
 8000b64:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000b68:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	b252      	sxtb	r2, r2
 8000b72:	f042 0220 	orr.w	r2, r2, #32
 8000b76:	b252      	sxtb	r2, r2
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	f002 021f 	and.w	r2, r2, #31
 8000b7e:	2101      	movs	r1, #1
 8000b80:	fa01 f202 	lsl.w	r2, r1, r2
 8000b84:	4013      	ands	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d007      	beq.n	8000b9a <HAL_RCC_OscConfig+0x3d6>
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d002      	beq.n	8000b9a <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	f000 bcfc 	b.w	8001592 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b9a:	4ba0      	ldr	r3, [pc, #640]	; (8000e1c <HAL_RCC_OscConfig+0x658>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6959      	ldr	r1, [r3, #20]
 8000ba8:	23f8      	movs	r3, #248	; 0xf8
 8000baa:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bae:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000bb2:	fa93 f3a3 	rbit	r3, r3
 8000bb6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000bba:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000bbe:	fab3 f383 	clz	r3, r3
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	4995      	ldr	r1, [pc, #596]	; (8000e1c <HAL_RCC_OscConfig+0x658>)
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bcc:	e0f5      	b.n	8000dba <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	f000 8085 	beq.w	8000ce4 <HAL_RCC_OscConfig+0x520>
 8000bda:	2301      	movs	r3, #1
 8000bdc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000be4:	fa93 f3a3 	rbit	r3, r3
 8000be8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000bec:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bf0:	fab3 f383 	clz	r3, r3
 8000bf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	461a      	mov	r2, r3
 8000c00:	2301      	movs	r3, #1
 8000c02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c04:	f7ff fb3a 	bl	800027c <HAL_GetTick>
 8000c08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0c:	e00a      	b.n	8000c24 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c0e:	f7ff fb35 	bl	800027c <HAL_GetTick>
 8000c12:	4602      	mov	r2, r0
 8000c14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d902      	bls.n	8000c24 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	f000 bcb7 	b.w	8001592 <HAL_RCC_OscConfig+0xdce>
 8000c24:	2302      	movs	r3, #2
 8000c26:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c2a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000c2e:	fa93 f3a3 	rbit	r3, r3
 8000c32:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000c36:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c3a:	fab3 f383 	clz	r3, r3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	095b      	lsrs	r3, r3, #5
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d102      	bne.n	8000c54 <HAL_RCC_OscConfig+0x490>
 8000c4e:	4b73      	ldr	r3, [pc, #460]	; (8000e1c <HAL_RCC_OscConfig+0x658>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	e013      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b8>
 8000c54:	2302      	movs	r3, #2
 8000c56:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000c5e:	fa93 f3a3 	rbit	r3, r3
 8000c62:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000c66:	2302      	movs	r3, #2
 8000c68:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000c6c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000c70:	fa93 f3a3 	rbit	r3, r3
 8000c74:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000c78:	4b68      	ldr	r3, [pc, #416]	; (8000e1c <HAL_RCC_OscConfig+0x658>)
 8000c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000c82:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000c86:	fa92 f2a2 	rbit	r2, r2
 8000c8a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000c8e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	b252      	sxtb	r2, r2
 8000c98:	f042 0220 	orr.w	r2, r2, #32
 8000c9c:	b252      	sxtb	r2, r2
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	f002 021f 	and.w	r2, r2, #31
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8000caa:	4013      	ands	r3, r2
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d0ae      	beq.n	8000c0e <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb0:	4b5a      	ldr	r3, [pc, #360]	; (8000e1c <HAL_RCC_OscConfig+0x658>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6959      	ldr	r1, [r3, #20]
 8000cbe:	23f8      	movs	r3, #248	; 0xf8
 8000cc0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000cc8:	fa93 f3a3 	rbit	r3, r3
 8000ccc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000cd0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000cd4:	fab3 f383 	clz	r3, r3
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	494f      	ldr	r1, [pc, #316]	; (8000e1c <HAL_RCC_OscConfig+0x658>)
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	600b      	str	r3, [r1, #0]
 8000ce2:	e06a      	b.n	8000dba <HAL_RCC_OscConfig+0x5f6>
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cea:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000cee:	fa93 f3a3 	rbit	r3, r3
 8000cf2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000cf6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cfa:	fab3 f383 	clz	r3, r3
 8000cfe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	461a      	mov	r2, r3
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fab5 	bl	800027c <HAL_GetTick>
 8000d12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d16:	e00a      	b.n	8000d2e <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d18:	f7ff fab0 	bl	800027c <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d902      	bls.n	8000d2e <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	f000 bc32 	b.w	8001592 <HAL_RCC_OscConfig+0xdce>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d38:	fa93 f3a3 	rbit	r3, r3
 8000d3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000d40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d44:	fab3 f383 	clz	r3, r3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d102      	bne.n	8000d5e <HAL_RCC_OscConfig+0x59a>
 8000d58:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <HAL_RCC_OscConfig+0x658>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	e013      	b.n	8000d86 <HAL_RCC_OscConfig+0x5c2>
 8000d5e:	2302      	movs	r3, #2
 8000d60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d68:	fa93 f3a3 	rbit	r3, r3
 8000d6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000d70:	2302      	movs	r3, #2
 8000d72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000d76:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d7a:	fa93 f3a3 	rbit	r3, r3
 8000d7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <HAL_RCC_OscConfig+0x658>)
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	2202      	movs	r2, #2
 8000d88:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000d8c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000d90:	fa92 f2a2 	rbit	r2, r2
 8000d94:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000d98:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000d9c:	fab2 f282 	clz	r2, r2
 8000da0:	b252      	sxtb	r2, r2
 8000da2:	f042 0220 	orr.w	r2, r2, #32
 8000da6:	b252      	sxtb	r2, r2
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	f002 021f 	and.w	r2, r2, #31
 8000dae:	2101      	movs	r1, #1
 8000db0:	fa01 f202 	lsl.w	r2, r1, r2
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1ae      	bne.n	8000d18 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 80d8 	beq.w	8000f7a <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d067      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x6e0>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000dde:	fa93 f3a3 	rbit	r3, r3
 8000de2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000de6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dea:	fab3 f383 	clz	r3, r3
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_RCC_OscConfig+0x65c>)
 8000df2:	4413      	add	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	461a      	mov	r2, r3
 8000df8:	2301      	movs	r3, #1
 8000dfa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfc:	f7ff fa3e 	bl	800027c <HAL_GetTick>
 8000e00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e04:	e00e      	b.n	8000e24 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e06:	f7ff fa39 	bl	800027c <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d906      	bls.n	8000e24 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e3bb      	b.n	8001592 <HAL_RCC_OscConfig+0xdce>
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	10908120 	.word	0x10908120
 8000e24:	2302      	movs	r3, #2
 8000e26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000e36:	2302      	movs	r3, #2
 8000e38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e40:	fa93 f2a3 	rbit	r2, r3
 8000e44:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e4e:	2202      	movs	r2, #2
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	fa93 f2a3 	rbit	r2, r3
 8000e5c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000e60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e62:	4ba5      	ldr	r3, [pc, #660]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8000e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e66:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	6019      	str	r1, [r3, #0]
 8000e6e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	fa93 f1a3 	rbit	r1, r3
 8000e78:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e7c:	6019      	str	r1, [r3, #0]
  return(result);
 8000e7e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	fab3 f383 	clz	r3, r3
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	2101      	movs	r1, #1
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0b1      	beq.n	8000e06 <HAL_RCC_OscConfig+0x642>
 8000ea2:	e06a      	b.n	8000f7a <HAL_RCC_OscConfig+0x7b6>
 8000ea4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	fa93 f2a3 	rbit	r2, r3
 8000eb6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000eba:	601a      	str	r2, [r3, #0]
  return(result);
 8000ebc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000ec0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ec2:	fab3 f383 	clz	r3, r3
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b8c      	ldr	r3, [pc, #560]	; (80010fc <HAL_RCC_OscConfig+0x938>)
 8000eca:	4413      	add	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed4:	f7ff f9d2 	bl	800027c <HAL_GetTick>
 8000ed8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000edc:	e009      	b.n	8000ef2 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ede:	f7ff f9cd 	bl	800027c <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e34f      	b.n	8001592 <HAL_RCC_OscConfig+0xdce>
 8000ef2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	fa93 f2a3 	rbit	r2, r3
 8000f04:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f0e:	2202      	movs	r2, #2
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	fa93 f2a3 	rbit	r2, r3
 8000f1c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f26:	2202      	movs	r2, #2
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	fa93 f2a3 	rbit	r2, r3
 8000f34:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3a:	4b6f      	ldr	r3, [pc, #444]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8000f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f42:	2102      	movs	r1, #2
 8000f44:	6019      	str	r1, [r3, #0]
 8000f46:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	fa93 f1a3 	rbit	r1, r3
 8000f50:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f54:	6019      	str	r1, [r3, #0]
  return(result);
 8000f56:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	fab3 f383 	clz	r3, r3
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	f003 031f 	and.w	r3, r3, #31
 8000f6e:	2101      	movs	r1, #1
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	4013      	ands	r3, r2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1b1      	bne.n	8000ede <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 8159 	beq.w	800123c <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f90:	4b59      	ldr	r3, [pc, #356]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d112      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f9c:	4b56      	ldr	r3, [pc, #344]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	4a55      	ldr	r2, [pc, #340]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8000fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	61d3      	str	r3, [r2, #28]
 8000fa8:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc2:	4b4f      	ldr	r3, [pc, #316]	; (8001100 <HAL_RCC_OscConfig+0x93c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11a      	bne.n	8001004 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fce:	4b4c      	ldr	r3, [pc, #304]	; (8001100 <HAL_RCC_OscConfig+0x93c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a4b      	ldr	r2, [pc, #300]	; (8001100 <HAL_RCC_OscConfig+0x93c>)
 8000fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fda:	f7ff f94f 	bl	800027c <HAL_GetTick>
 8000fde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe2:	e009      	b.n	8000ff8 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fe4:	f7ff f94a 	bl	800027c <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b64      	cmp	r3, #100	; 0x64
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e2cc      	b.n	8001592 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff8:	4b41      	ldr	r3, [pc, #260]	; (8001100 <HAL_RCC_OscConfig+0x93c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0ef      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d106      	bne.n	800101c <HAL_RCC_OscConfig+0x858>
 800100e:	4b3a      	ldr	r3, [pc, #232]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a39      	ldr	r2, [pc, #228]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6213      	str	r3, [r2, #32]
 800101a:	e02f      	b.n	800107c <HAL_RCC_OscConfig+0x8b8>
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10c      	bne.n	8001040 <HAL_RCC_OscConfig+0x87c>
 8001026:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	4a33      	ldr	r2, [pc, #204]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 800102c:	f023 0301 	bic.w	r3, r3, #1
 8001030:	6213      	str	r3, [r2, #32]
 8001032:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4a30      	ldr	r2, [pc, #192]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8001038:	f023 0304 	bic.w	r3, r3, #4
 800103c:	6213      	str	r3, [r2, #32]
 800103e:	e01d      	b.n	800107c <HAL_RCC_OscConfig+0x8b8>
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b05      	cmp	r3, #5
 8001048:	d10c      	bne.n	8001064 <HAL_RCC_OscConfig+0x8a0>
 800104a:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4a2a      	ldr	r2, [pc, #168]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6213      	str	r3, [r2, #32]
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	4a27      	ldr	r2, [pc, #156]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6213      	str	r3, [r2, #32]
 8001062:	e00b      	b.n	800107c <HAL_RCC_OscConfig+0x8b8>
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	6213      	str	r3, [r2, #32]
 8001070:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	4a20      	ldr	r2, [pc, #128]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 8001076:	f023 0304 	bic.w	r3, r3, #4
 800107a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d06b      	beq.n	800115e <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001086:	f7ff f8f9 	bl	800027c <HAL_GetTick>
 800108a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108e:	e00b      	b.n	80010a8 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001090:	f7ff f8f4 	bl	800027c <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e274      	b.n	8001592 <HAL_RCC_OscConfig+0xdce>
 80010a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010ac:	2202      	movs	r2, #2
 80010ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	fa93 f2a3 	rbit	r2, r3
 80010ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010c4:	2202      	movs	r2, #2
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	fa93 f2a3 	rbit	r2, r3
 80010d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010d6:	601a      	str	r2, [r3, #0]
  return(result);
 80010d8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010de:	fab3 f383 	clz	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	095b      	lsrs	r3, r3, #5
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d108      	bne.n	8001104 <HAL_RCC_OscConfig+0x940>
 80010f2:	4b01      	ldr	r3, [pc, #4]	; (80010f8 <HAL_RCC_OscConfig+0x934>)
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	e013      	b.n	8001120 <HAL_RCC_OscConfig+0x95c>
 80010f8:	40021000 	.word	0x40021000
 80010fc:	10908120 	.word	0x10908120
 8001100:	40007000 	.word	0x40007000
 8001104:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001108:	2202      	movs	r2, #2
 800110a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	fa93 f2a3 	rbit	r2, r3
 8001116:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	4bbb      	ldr	r3, [pc, #748]	; (800140c <HAL_RCC_OscConfig+0xc48>)
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001124:	2102      	movs	r1, #2
 8001126:	6011      	str	r1, [r2, #0]
 8001128:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	fa92 f1a2 	rbit	r1, r2
 8001132:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001136:	6011      	str	r1, [r2, #0]
  return(result);
 8001138:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	fab2 f282 	clz	r2, r2
 8001142:	b252      	sxtb	r2, r2
 8001144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001148:	b252      	sxtb	r2, r2
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	f002 021f 	and.w	r2, r2, #31
 8001150:	2101      	movs	r1, #1
 8001152:	fa01 f202 	lsl.w	r2, r1, r2
 8001156:	4013      	ands	r3, r2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d099      	beq.n	8001090 <HAL_RCC_OscConfig+0x8cc>
 800115c:	e064      	b.n	8001228 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115e:	f7ff f88d 	bl	800027c <HAL_GetTick>
 8001162:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001166:	e00b      	b.n	8001180 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001168:	f7ff f888 	bl	800027c <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	f241 3288 	movw	r2, #5000	; 0x1388
 8001178:	4293      	cmp	r3, r2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e208      	b.n	8001592 <HAL_RCC_OscConfig+0xdce>
 8001180:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001184:	2202      	movs	r2, #2
 8001186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001188:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	fa93 f2a3 	rbit	r2, r3
 8001192:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800119c:	2202      	movs	r2, #2
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	fa93 f2a3 	rbit	r2, r3
 80011aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011ae:	601a      	str	r2, [r3, #0]
  return(result);
 80011b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b6:	fab3 f383 	clz	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d102      	bne.n	80011d0 <HAL_RCC_OscConfig+0xa0c>
 80011ca:	4b90      	ldr	r3, [pc, #576]	; (800140c <HAL_RCC_OscConfig+0xc48>)
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	e00d      	b.n	80011ec <HAL_RCC_OscConfig+0xa28>
 80011d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011d4:	2202      	movs	r2, #2
 80011d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	fa93 f2a3 	rbit	r2, r3
 80011e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	4b88      	ldr	r3, [pc, #544]	; (800140c <HAL_RCC_OscConfig+0xc48>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011f0:	2102      	movs	r1, #2
 80011f2:	6011      	str	r1, [r2, #0]
 80011f4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	fa92 f1a2 	rbit	r1, r2
 80011fe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001202:	6011      	str	r1, [r2, #0]
  return(result);
 8001204:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	fab2 f282 	clz	r2, r2
 800120e:	b252      	sxtb	r2, r2
 8001210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001214:	b252      	sxtb	r2, r2
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	f002 021f 	and.w	r2, r2, #31
 800121c:	2101      	movs	r1, #1
 800121e:	fa01 f202 	lsl.w	r2, r1, r2
 8001222:	4013      	ands	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d19f      	bne.n	8001168 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001228:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800122c:	2b01      	cmp	r3, #1
 800122e:	d105      	bne.n	800123c <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001230:	4b76      	ldr	r3, [pc, #472]	; (800140c <HAL_RCC_OscConfig+0xc48>)
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	4a75      	ldr	r2, [pc, #468]	; (800140c <HAL_RCC_OscConfig+0xc48>)
 8001236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800123a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 81a4 	beq.w	8001590 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001248:	4b70      	ldr	r3, [pc, #448]	; (800140c <HAL_RCC_OscConfig+0xc48>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b08      	cmp	r3, #8
 8001252:	f000 819b 	beq.w	800158c <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	2b02      	cmp	r3, #2
 800125e:	f040 8113 	bne.w	8001488 <HAL_RCC_OscConfig+0xcc4>
 8001262:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001266:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800126a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	fa93 f2a3 	rbit	r2, r3
 8001276:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800127a:	601a      	str	r2, [r3, #0]
  return(result);
 800127c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001280:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800128a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	461a      	mov	r2, r3
 8001292:	2300      	movs	r3, #0
 8001294:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7fe fff1 	bl	800027c <HAL_GetTick>
 800129a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129e:	e009      	b.n	80012b4 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a0:	f7fe ffec 	bl	800027c <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e16e      	b.n	8001592 <HAL_RCC_OscConfig+0xdce>
 80012b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	fa93 f2a3 	rbit	r2, r3
 80012c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012cc:	601a      	str	r2, [r3, #0]
  return(result);
 80012ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d102      	bne.n	80012ee <HAL_RCC_OscConfig+0xb2a>
 80012e8:	4b48      	ldr	r3, [pc, #288]	; (800140c <HAL_RCC_OscConfig+0xc48>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	e01b      	b.n	8001326 <HAL_RCC_OscConfig+0xb62>
 80012ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	fa93 f2a3 	rbit	r2, r3
 8001302:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800130c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	fa93 f2a3 	rbit	r2, r3
 800131c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	4b3a      	ldr	r3, [pc, #232]	; (800140c <HAL_RCC_OscConfig+0xc48>)
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800132a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800132e:	6011      	str	r1, [r2, #0]
 8001330:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	fa92 f1a2 	rbit	r1, r2
 800133a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800133e:	6011      	str	r1, [r2, #0]
  return(result);
 8001340:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	fab2 f282 	clz	r2, r2
 800134a:	b252      	sxtb	r2, r2
 800134c:	f042 0220 	orr.w	r2, r2, #32
 8001350:	b252      	sxtb	r2, r2
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	f002 021f 	and.w	r2, r2, #31
 8001358:	2101      	movs	r1, #1
 800135a:	fa01 f202 	lsl.w	r2, r1, r2
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d19d      	bne.n	80012a0 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_RCC_OscConfig+0xc48>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	430b      	orrs	r3, r1
 800137a:	4924      	ldr	r1, [pc, #144]	; (800140c <HAL_RCC_OscConfig+0xc48>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
 8001380:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001384:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	fa93 f2a3 	rbit	r2, r3
 8001394:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001398:	601a      	str	r2, [r3, #0]
  return(result);
 800139a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800139e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a0:	fab3 f383 	clz	r3, r3
 80013a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	461a      	mov	r2, r3
 80013b0:	2301      	movs	r3, #1
 80013b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7fe ff62 	bl	800027c <HAL_GetTick>
 80013b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013bc:	e009      	b.n	80013d2 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013be:	f7fe ff5d 	bl	800027c <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e0df      	b.n	8001592 <HAL_RCC_OscConfig+0xdce>
 80013d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	fa93 f2a3 	rbit	r2, r3
 80013e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013ea:	601a      	str	r2, [r3, #0]
  return(result);
 80013ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	095b      	lsrs	r3, r3, #5
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d104      	bne.n	8001410 <HAL_RCC_OscConfig+0xc4c>
 8001406:	4b01      	ldr	r3, [pc, #4]	; (800140c <HAL_RCC_OscConfig+0xc48>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	e01d      	b.n	8001448 <HAL_RCC_OscConfig+0xc84>
 800140c:	40021000 	.word	0x40021000
 8001410:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001414:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	fa93 f2a3 	rbit	r2, r3
 8001424:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800142e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	fa93 f2a3 	rbit	r2, r3
 800143e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	4b55      	ldr	r3, [pc, #340]	; (800159c <HAL_RCC_OscConfig+0xdd8>)
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800144c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001450:	6011      	str	r1, [r2, #0]
 8001452:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	fa92 f1a2 	rbit	r1, r2
 800145c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001460:	6011      	str	r1, [r2, #0]
  return(result);
 8001462:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	fab2 f282 	clz	r2, r2
 800146c:	b252      	sxtb	r2, r2
 800146e:	f042 0220 	orr.w	r2, r2, #32
 8001472:	b252      	sxtb	r2, r2
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	f002 021f 	and.w	r2, r2, #31
 800147a:	2101      	movs	r1, #1
 800147c:	fa01 f202 	lsl.w	r2, r1, r2
 8001480:	4013      	ands	r3, r2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d09b      	beq.n	80013be <HAL_RCC_OscConfig+0xbfa>
 8001486:	e083      	b.n	8001590 <HAL_RCC_OscConfig+0xdcc>
 8001488:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800148c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	fa93 f2a3 	rbit	r2, r3
 800149c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a0:	601a      	str	r2, [r3, #0]
  return(result);
 80014a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a8:	fab3 f383 	clz	r3, r3
 80014ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	461a      	mov	r2, r3
 80014b8:	2300      	movs	r3, #0
 80014ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7fe fede 	bl	800027c <HAL_GetTick>
 80014c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c4:	e009      	b.n	80014da <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c6:	f7fe fed9 	bl	800027c <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e05b      	b.n	8001592 <HAL_RCC_OscConfig+0xdce>
 80014da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	fa93 f2a3 	rbit	r2, r3
 80014ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f2:	601a      	str	r2, [r3, #0]
  return(result);
 80014f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	095b      	lsrs	r3, r3, #5
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d102      	bne.n	8001514 <HAL_RCC_OscConfig+0xd50>
 800150e:	4b23      	ldr	r3, [pc, #140]	; (800159c <HAL_RCC_OscConfig+0xdd8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	e01b      	b.n	800154c <HAL_RCC_OscConfig+0xd88>
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800151c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	fa93 f2a3 	rbit	r2, r3
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	fa93 f2a3 	rbit	r2, r3
 8001542:	f107 0318 	add.w	r3, r7, #24
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_RCC_OscConfig+0xdd8>)
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	f107 0214 	add.w	r2, r7, #20
 8001550:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001554:	6011      	str	r1, [r2, #0]
 8001556:	f107 0214 	add.w	r2, r7, #20
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	fa92 f1a2 	rbit	r1, r2
 8001560:	f107 0210 	add.w	r2, r7, #16
 8001564:	6011      	str	r1, [r2, #0]
  return(result);
 8001566:	f107 0210 	add.w	r2, r7, #16
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	fab2 f282 	clz	r2, r2
 8001570:	b252      	sxtb	r2, r2
 8001572:	f042 0220 	orr.w	r2, r2, #32
 8001576:	b252      	sxtb	r2, r2
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	f002 021f 	and.w	r2, r2, #31
 800157e:	2101      	movs	r1, #1
 8001580:	fa01 f202 	lsl.w	r2, r1, r2
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d19d      	bne.n	80014c6 <HAL_RCC_OscConfig+0xd02>
 800158a:	e001      	b.n	8001590 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40021000 	.word	0x40021000

080015a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b09e      	sub	sp, #120	; 0x78
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e164      	b.n	8001882 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b8:	4b92      	ldr	r3, [pc, #584]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d910      	bls.n	80015e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b8f      	ldr	r3, [pc, #572]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 0207 	bic.w	r2, r3, #7
 80015ce:	498d      	ldr	r1, [pc, #564]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	4b8b      	ldr	r3, [pc, #556]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e14c      	b.n	8001882 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f4:	4b84      	ldr	r3, [pc, #528]	; (8001808 <HAL_RCC_ClockConfig+0x268>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4981      	ldr	r1, [pc, #516]	; (8001808 <HAL_RCC_ClockConfig+0x268>)
 8001602:	4313      	orrs	r3, r2
 8001604:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 80df 	beq.w	80017d2 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d13d      	bne.n	8001698 <HAL_RCC_ClockConfig+0xf8>
 800161c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001620:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800162a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162c:	fab3 f383 	clz	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	b2db      	uxtb	r3, r3
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d102      	bne.n	8001646 <HAL_RCC_ClockConfig+0xa6>
 8001640:	4b71      	ldr	r3, [pc, #452]	; (8001808 <HAL_RCC_ClockConfig+0x268>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	e00f      	b.n	8001666 <HAL_RCC_ClockConfig+0xc6>
 8001646:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800164a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800164e:	fa93 f3a3 	rbit	r3, r3
 8001652:	667b      	str	r3, [r7, #100]	; 0x64
 8001654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001658:	663b      	str	r3, [r7, #96]	; 0x60
 800165a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001662:	4b69      	ldr	r3, [pc, #420]	; (8001808 <HAL_RCC_ClockConfig+0x268>)
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800166a:	65ba      	str	r2, [r7, #88]	; 0x58
 800166c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800166e:	fa92 f2a2 	rbit	r2, r2
 8001672:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001674:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001676:	fab2 f282 	clz	r2, r2
 800167a:	b252      	sxtb	r2, r2
 800167c:	f042 0220 	orr.w	r2, r2, #32
 8001680:	b252      	sxtb	r2, r2
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	f002 021f 	and.w	r2, r2, #31
 8001688:	2101      	movs	r1, #1
 800168a:	fa01 f202 	lsl.w	r2, r1, r2
 800168e:	4013      	ands	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d17d      	bne.n	8001790 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0f4      	b.n	8001882 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d13d      	bne.n	800171c <HAL_RCC_ClockConfig+0x17c>
 80016a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80016ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b0:	fab3 f383 	clz	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d102      	bne.n	80016ca <HAL_RCC_ClockConfig+0x12a>
 80016c4:	4b50      	ldr	r3, [pc, #320]	; (8001808 <HAL_RCC_ClockConfig+0x268>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	e00f      	b.n	80016ea <HAL_RCC_ClockConfig+0x14a>
 80016ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ce:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016d2:	fa93 f3a3 	rbit	r3, r3
 80016d6:	647b      	str	r3, [r7, #68]	; 0x44
 80016d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016dc:	643b      	str	r3, [r7, #64]	; 0x40
 80016de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016e0:	fa93 f3a3 	rbit	r3, r3
 80016e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016e6:	4b48      	ldr	r3, [pc, #288]	; (8001808 <HAL_RCC_ClockConfig+0x268>)
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80016f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016f2:	fa92 f2a2 	rbit	r2, r2
 80016f6:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80016f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016fa:	fab2 f282 	clz	r2, r2
 80016fe:	b252      	sxtb	r2, r2
 8001700:	f042 0220 	orr.w	r2, r2, #32
 8001704:	b252      	sxtb	r2, r2
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	f002 021f 	and.w	r2, r2, #31
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f202 	lsl.w	r2, r1, r2
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d13b      	bne.n	8001790 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0b2      	b.n	8001882 <HAL_RCC_ClockConfig+0x2e2>
 800171c:	2302      	movs	r3, #2
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	095b      	lsrs	r3, r3, #5
 8001732:	b2db      	uxtb	r3, r3
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b01      	cmp	r3, #1
 800173c:	d102      	bne.n	8001744 <HAL_RCC_ClockConfig+0x1a4>
 800173e:	4b32      	ldr	r3, [pc, #200]	; (8001808 <HAL_RCC_ClockConfig+0x268>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	e00d      	b.n	8001760 <HAL_RCC_ClockConfig+0x1c0>
 8001744:	2302      	movs	r3, #2
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174a:	fa93 f3a3 	rbit	r3, r3
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
 8001750:	2302      	movs	r3, #2
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	fa93 f3a3 	rbit	r3, r3
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <HAL_RCC_ClockConfig+0x268>)
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	2202      	movs	r2, #2
 8001762:	61ba      	str	r2, [r7, #24]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	fa92 f2a2 	rbit	r2, r2
 800176a:	617a      	str	r2, [r7, #20]
  return(result);
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	fab2 f282 	clz	r2, r2
 8001772:	b252      	sxtb	r2, r2
 8001774:	f042 0220 	orr.w	r2, r2, #32
 8001778:	b252      	sxtb	r2, r2
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	f002 021f 	and.w	r2, r2, #31
 8001780:	2101      	movs	r1, #1
 8001782:	fa01 f202 	lsl.w	r2, r1, r2
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e078      	b.n	8001882 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <HAL_RCC_ClockConfig+0x268>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f023 0203 	bic.w	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	491a      	ldr	r1, [pc, #104]	; (8001808 <HAL_RCC_ClockConfig+0x268>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a2:	f7fe fd6b 	bl	800027c <HAL_GetTick>
 80017a6:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017aa:	f7fe fd67 	bl	800027c <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e060      	b.n	8001882 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_RCC_ClockConfig+0x268>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 020c 	and.w	r2, r3, #12
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d1eb      	bne.n	80017aa <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d215      	bcs.n	800180c <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 0207 	bic.w	r2, r3, #7
 80017e8:	4906      	ldr	r1, [pc, #24]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d006      	beq.n	800180c <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e03f      	b.n	8001882 <HAL_RCC_ClockConfig+0x2e2>
 8001802:	bf00      	nop
 8001804:	40022000 	.word	0x40022000
 8001808:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001818:	4b1c      	ldr	r3, [pc, #112]	; (800188c <HAL_RCC_ClockConfig+0x2ec>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4919      	ldr	r1, [pc, #100]	; (800188c <HAL_RCC_ClockConfig+0x2ec>)
 8001826:	4313      	orrs	r3, r2
 8001828:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_RCC_ClockConfig+0x2ec>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4911      	ldr	r1, [pc, #68]	; (800188c <HAL_RCC_ClockConfig+0x2ec>)
 8001846:	4313      	orrs	r3, r2
 8001848:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800184a:	f000 f825 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 800184e:	4601      	mov	r1, r0
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_RCC_ClockConfig+0x2ec>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001858:	23f0      	movs	r3, #240	; 0xf0
 800185a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	60fb      	str	r3, [r7, #12]
  return(result);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	fa22 f303 	lsr.w	r3, r2, r3
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <HAL_RCC_ClockConfig+0x2f0>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	fa21 f303 	lsr.w	r3, r1, r3
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_RCC_ClockConfig+0x2f4>)
 8001878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800187a:	2000      	movs	r0, #0
 800187c:	f7fe fcba 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3778      	adds	r7, #120	; 0x78
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	08002b5c 	.word	0x08002b5c
 8001894:	20000008 	.word	0x20000008

08001898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b08b      	sub	sp, #44	; 0x2c
 800189c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80018b2:	4b29      	ldr	r3, [pc, #164]	; (8001958 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d002      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x30>
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d003      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x36>
 80018c6:	e03c      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_RCC_GetSysClockFreq+0xc4>)
 80018ca:	623b      	str	r3, [r7, #32]
      break;
 80018cc:	e03c      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018d4:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80018d8:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	fa93 f3a3 	rbit	r3, r3
 80018e0:	607b      	str	r3, [r7, #4]
  return(result);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ec:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <HAL_RCC_GetSysClockFreq+0xc8>)
 80018ee:	5cd3      	ldrb	r3, [r2, r3]
 80018f0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018f2:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	f003 020f 	and.w	r2, r3, #15
 80018fa:	230f      	movs	r3, #15
 80018fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	60fb      	str	r3, [r7, #12]
  return(result);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001912:	5cd3      	ldrb	r3, [r2, r3]
 8001914:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d008      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001920:	4a0e      	ldr	r2, [pc, #56]	; (800195c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	fbb2 f2f3 	udiv	r2, r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fb02 f303 	mul.w	r3, r2, r3
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
 8001930:	e004      	b.n	800193c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	4a0c      	ldr	r2, [pc, #48]	; (8001968 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	623b      	str	r3, [r7, #32]
      break;
 8001940:	e002      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001944:	623b      	str	r3, [r7, #32]
      break;
 8001946:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001948:	6a3b      	ldr	r3, [r7, #32]
}
 800194a:	4618      	mov	r0, r3
 800194c:	372c      	adds	r7, #44	; 0x2c
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	007a1200 	.word	0x007a1200
 8001960:	08002b3c 	.word	0x08002b3c
 8001964:	08002b4c 	.word	0x08002b4c
 8001968:	003d0900 	.word	0x003d0900

0800196c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_RCC_GetHCLKFreq+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000008 	.word	0x20000008

08001984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800198a:	f7ff ffef 	bl	800196c <HAL_RCC_GetHCLKFreq>
 800198e:	4601      	mov	r1, r0
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001998:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800199c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	603b      	str	r3, [r7, #0]
  return(result);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	08002b6c 	.word	0x08002b6c

080019c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80019ce:	f7ff ffcd 	bl	800196c <HAL_RCC_GetHCLKFreq>
 80019d2:	4601      	mov	r1, r0
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80019dc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019e0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	603b      	str	r3, [r7, #0]
  return(result);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
 80019f4:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <HAL_RCC_GetPCLK2Freq+0x40>)
 80019f6:	5cd3      	ldrb	r3, [r2, r3]
 80019f8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000
 8001a08:	08002b6c 	.word	0x08002b6c

08001a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b092      	sub	sp, #72	; 0x48
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80cf 	beq.w	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a30:	4b86      	ldr	r3, [pc, #536]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10e      	bne.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3c:	4b83      	ldr	r3, [pc, #524]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	4a82      	ldr	r2, [pc, #520]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a46:	61d3      	str	r3, [r2, #28]
 8001a48:	4b80      	ldr	r3, [pc, #512]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5a:	4b7d      	ldr	r3, [pc, #500]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d118      	bne.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a66:	4b7a      	ldr	r3, [pc, #488]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a79      	ldr	r2, [pc, #484]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a72:	f7fe fc03 	bl	800027c <HAL_GetTick>
 8001a76:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	e008      	b.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7a:	f7fe fbff 	bl	800027c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b64      	cmp	r3, #100	; 0x64
 8001a86:	d901      	bls.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e0da      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	4b70      	ldr	r3, [pc, #448]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a98:	4b6c      	ldr	r3, [pc, #432]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d07c      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ab0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d075      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ab6:	4b65      	ldr	r3, [pc, #404]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	461a      	mov	r2, r3
 8001ade:	2301      	movs	r3, #1
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	461a      	mov	r2, r3
 8001b00:	2300      	movs	r3, #0
 8001b02:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b04:	4a51      	ldr	r2, [pc, #324]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b08:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d046      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7fe fbb2 	bl	800027c <HAL_GetTick>
 8001b18:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1c:	f7fe fbae 	bl	800027c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e087      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8001b32:	2302      	movs	r3, #2
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	2302      	movs	r3, #2
 8001b40:	623b      	str	r3, [r7, #32]
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	61fb      	str	r3, [r7, #28]
  return(result);
 8001b4a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f043 0302 	orr.w	r3, r3, #2
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d102      	bne.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8001b60:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	e007      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001b66:	2302      	movs	r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	2202      	movs	r2, #2
 8001b78:	613a      	str	r2, [r7, #16]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	fa92 f2a2 	rbit	r2, r2
 8001b80:	60fa      	str	r2, [r7, #12]
  return(result);
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	b252      	sxtb	r2, r2
 8001b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b8e:	b252      	sxtb	r2, r2
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	f002 021f 	and.w	r2, r2, #31
 8001b96:	2101      	movs	r1, #1
 8001b98:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0bc      	beq.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4927      	ldr	r1, [pc, #156]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbc:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	4a22      	ldr	r2, [pc, #136]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	f023 0203 	bic.w	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	491a      	ldr	r1, [pc, #104]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0320 	and.w	r3, r3, #32
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d008      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bf2:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f023 0210 	bic.w	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	4913      	ldr	r1, [pc, #76]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	490b      	ldr	r1, [pc, #44]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d008      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	4904      	ldr	r1, [pc, #16]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3748      	adds	r7, #72	; 0x48
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40007000 	.word	0x40007000
 8001c54:	10908100 	.word	0x10908100

08001c58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e043      	b.n	8001cf2 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 fe0c 	bl	800289c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2224      	movs	r2, #36	; 0x24
 8001c88:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0201 	bic.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f8b9 	bl	8001e14 <UART_SetConfig>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e022      	b.n	8001cf2 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 fa11 	bl	80020dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cc8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cd8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 fa98 	bl	8002220 <UART_CheckIdleState>
 8001cf0:	4603      	mov	r3, r0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b088      	sub	sp, #32
 8001cfe:	af02      	add	r7, sp, #8
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	4613      	mov	r3, r2
 8001d08:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	d177      	bne.n	8001e0a <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <HAL_UART_Transmit+0x2c>
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e070      	b.n	8001e0c <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_UART_Transmit+0x3e>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e069      	b.n	8001e0c <HAL_UART_Transmit+0x112>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2221      	movs	r2, #33	; 0x21
 8001d4a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001d4e:	f7fe fa95 	bl	800027c <HAL_GetTick>
 8001d52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	88fa      	ldrh	r2, [r7, #6]
 8001d58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	88fa      	ldrh	r2, [r7, #6]
 8001d60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001d64:	e034      	b.n	8001dd0 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2180      	movs	r1, #128	; 0x80
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 fa95 	bl	80022b2 <UART_WaitOnFlagUntilTimeout>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e03c      	b.n	8001e0c <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d9a:	d111      	bne.n	8001dc0 <HAL_UART_Transmit+0xc6>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10d      	bne.n	8001dc0 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	881a      	ldrh	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001db4:	b292      	uxth	r2, r2
 8001db6:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	3302      	adds	r3, #2
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	e007      	b.n	8001dd0 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	60ba      	str	r2, [r7, #8]
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b292      	uxth	r2, r2
 8001dce:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1c4      	bne.n	8001d66 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2200      	movs	r2, #0
 8001de4:	2140      	movs	r1, #64	; 0x40
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 fa63 	bl	80022b2 <UART_WaitOnFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e00a      	b.n	8001e0c <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
  }
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001e20:	2310      	movs	r3, #16
 8001e22:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4b9e      	ldr	r3, [pc, #632]	; (80020c8 <UART_SetConfig+0x2b4>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	68f9      	ldr	r1, [r7, #12]
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699a      	ldr	r2, [r3, #24]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a8d      	ldr	r2, [pc, #564]	; (80020cc <UART_SetConfig+0x2b8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d120      	bne.n	8001ede <UART_SetConfig+0xca>
 8001e9c:	4b8c      	ldr	r3, [pc, #560]	; (80020d0 <UART_SetConfig+0x2bc>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d817      	bhi.n	8001ed8 <UART_SetConfig+0xc4>
 8001ea8:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <UART_SetConfig+0x9c>)
 8001eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eae:	bf00      	nop
 8001eb0:	08001ec1 	.word	0x08001ec1
 8001eb4:	08001ecd 	.word	0x08001ecd
 8001eb8:	08001ed3 	.word	0x08001ed3
 8001ebc:	08001ec7 	.word	0x08001ec7
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	75fb      	strb	r3, [r7, #23]
 8001ec4:	e01d      	b.n	8001f02 <UART_SetConfig+0xee>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	75fb      	strb	r3, [r7, #23]
 8001eca:	e01a      	b.n	8001f02 <UART_SetConfig+0xee>
 8001ecc:	2304      	movs	r3, #4
 8001ece:	75fb      	strb	r3, [r7, #23]
 8001ed0:	e017      	b.n	8001f02 <UART_SetConfig+0xee>
 8001ed2:	2308      	movs	r3, #8
 8001ed4:	75fb      	strb	r3, [r7, #23]
 8001ed6:	e014      	b.n	8001f02 <UART_SetConfig+0xee>
 8001ed8:	2310      	movs	r3, #16
 8001eda:	75fb      	strb	r3, [r7, #23]
 8001edc:	e011      	b.n	8001f02 <UART_SetConfig+0xee>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a7c      	ldr	r2, [pc, #496]	; (80020d4 <UART_SetConfig+0x2c0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d102      	bne.n	8001eee <UART_SetConfig+0xda>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	75fb      	strb	r3, [r7, #23]
 8001eec:	e009      	b.n	8001f02 <UART_SetConfig+0xee>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a79      	ldr	r2, [pc, #484]	; (80020d8 <UART_SetConfig+0x2c4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d102      	bne.n	8001efe <UART_SetConfig+0xea>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	75fb      	strb	r3, [r7, #23]
 8001efc:	e001      	b.n	8001f02 <UART_SetConfig+0xee>
 8001efe:	2310      	movs	r3, #16
 8001f00:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0a:	d16e      	bne.n	8001fea <UART_SetConfig+0x1d6>
  {
    switch (clocksource)
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d856      	bhi.n	8001fc0 <UART_SetConfig+0x1ac>
 8001f12:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <UART_SetConfig+0x104>)
 8001f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f18:	08001f3d 	.word	0x08001f3d
 8001f1c:	08001f59 	.word	0x08001f59
 8001f20:	08001f75 	.word	0x08001f75
 8001f24:	08001fc1 	.word	0x08001fc1
 8001f28:	08001f8f 	.word	0x08001f8f
 8001f2c:	08001fc1 	.word	0x08001fc1
 8001f30:	08001fc1 	.word	0x08001fc1
 8001f34:	08001fc1 	.word	0x08001fc1
 8001f38:	08001fab 	.word	0x08001fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f3c:	f7ff fd22 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 8001f40:	4603      	mov	r3, r0
 8001f42:	005a      	lsls	r2, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	085b      	lsrs	r3, r3, #1
 8001f4a:	441a      	add	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	82bb      	strh	r3, [r7, #20]
        break;
 8001f56:	e036      	b.n	8001fc6 <UART_SetConfig+0x1b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f58:	f7ff fd36 	bl	80019c8 <HAL_RCC_GetPCLK2Freq>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	005a      	lsls	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	441a      	add	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	82bb      	strh	r3, [r7, #20]
        break;
 8001f72:	e028      	b.n	8001fc6 <UART_SetConfig+0x1b2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001f7e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6852      	ldr	r2, [r2, #4]
 8001f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f8a:	82bb      	strh	r3, [r7, #20]
        break;
 8001f8c:	e01b      	b.n	8001fc6 <UART_SetConfig+0x1b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f8e:	f7ff fc83 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 8001f92:	4603      	mov	r3, r0
 8001f94:	005a      	lsls	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	085b      	lsrs	r3, r3, #1
 8001f9c:	441a      	add	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	82bb      	strh	r3, [r7, #20]
        break;
 8001fa8:	e00d      	b.n	8001fc6 <UART_SetConfig+0x1b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	085b      	lsrs	r3, r3, #1
 8001fb0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	82bb      	strh	r3, [r7, #20]
        break;
 8001fbe:	e002      	b.n	8001fc6 <UART_SetConfig+0x1b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	74fb      	strb	r3, [r7, #19]
        break;
 8001fc4:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001fc6:	8abb      	ldrh	r3, [r7, #20]
 8001fc8:	f023 030f 	bic.w	r3, r3, #15
 8001fcc:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001fce:	8abb      	ldrh	r3, [r7, #20]
 8001fd0:	105b      	asrs	r3, r3, #1
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	897b      	ldrh	r3, [r7, #10]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	897a      	ldrh	r2, [r7, #10]
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	e069      	b.n	80020be <UART_SetConfig+0x2aa>
  }
  else
  {
    switch (clocksource)
 8001fea:	7dfb      	ldrb	r3, [r7, #23]
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d863      	bhi.n	80020b8 <UART_SetConfig+0x2a4>
 8001ff0:	a201      	add	r2, pc, #4	; (adr r2, 8001ff8 <UART_SetConfig+0x1e4>)
 8001ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff6:	bf00      	nop
 8001ff8:	0800201d 	.word	0x0800201d
 8001ffc:	0800203d 	.word	0x0800203d
 8002000:	0800205d 	.word	0x0800205d
 8002004:	080020b9 	.word	0x080020b9
 8002008:	0800207d 	.word	0x0800207d
 800200c:	080020b9 	.word	0x080020b9
 8002010:	080020b9 	.word	0x080020b9
 8002014:	080020b9 	.word	0x080020b9
 8002018:	0800209d 	.word	0x0800209d
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800201c:	f7ff fcb2 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 8002020:	4602      	mov	r2, r0
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	441a      	add	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	b29a      	uxth	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60da      	str	r2, [r3, #12]
        break;
 800203a:	e040      	b.n	80020be <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800203c:	f7ff fcc4 	bl	80019c8 <HAL_RCC_GetPCLK2Freq>
 8002040:	4602      	mov	r2, r0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	441a      	add	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	b29a      	uxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60da      	str	r2, [r3, #12]
        break;
 800205a:	e030      	b.n	80020be <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002066:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6852      	ldr	r2, [r2, #4]
 800206e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002072:	b29a      	uxth	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60da      	str	r2, [r3, #12]
        break;
 800207a:	e020      	b.n	80020be <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800207c:	f7ff fc0c 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	085b      	lsrs	r3, r3, #1
 8002088:	441a      	add	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	b29a      	uxth	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60da      	str	r2, [r3, #12]
        break;
 800209a:	e010      	b.n	80020be <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	085b      	lsrs	r3, r3, #1
 80020a2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60da      	str	r2, [r3, #12]
        break;
 80020b6:	e002      	b.n	80020be <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	74fb      	strb	r3, [r7, #19]
        break;
 80020bc:	bf00      	nop
    }
  }

  return ret;
 80020be:	7cfb      	ldrb	r3, [r7, #19]

}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	efff69f3 	.word	0xefff69f3
 80020cc:	40013800 	.word	0x40013800
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40004400 	.word	0x40004400
 80020d8:	40004800 	.word	0x40004800

080020dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01a      	beq.n	80021f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021da:	d10a      	bne.n	80021f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	605a      	str	r2, [r3, #4]
  }
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af02      	add	r7, sp, #8
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002232:	f7fe f823 	bl	800027c <HAL_GetTick>
 8002236:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b08      	cmp	r3, #8
 8002244:	d10e      	bne.n	8002264 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002246:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f82c 	bl	80022b2 <UART_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e022      	b.n	80022aa <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b04      	cmp	r3, #4
 8002270:	d10e      	bne.n	8002290 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002272:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f816 	bl	80022b2 <UART_WaitOnFlagUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e00c      	b.n	80022aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	4613      	mov	r3, r2
 80022c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022c2:	e02c      	b.n	800231e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ca:	d028      	beq.n	800231e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80022d2:	f7fd ffd3 	bl	800027c <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d21d      	bcs.n	800231e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80022f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0201 	bic.w	r2, r2, #1
 8002300:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e00f      	b.n	800233e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4013      	ands	r3, r2
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	429a      	cmp	r2, r3
 800232c:	bf0c      	ite	eq
 800232e:	2301      	moveq	r3, #1
 8002330:	2300      	movne	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	429a      	cmp	r2, r3
 800233a:	d0c3      	beq.n	80022c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <pos.8607>:
  /* USER CODE BEGIN 2 */

  uint8_t txdata[9] = {0};

    void pos(unsigned char id,short deg,unsigned short time)
  {
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]
 8002352:	460b      	mov	r3, r1
 8002354:	81bb      	strh	r3, [r7, #12]
 8002356:	4613      	mov	r3, r2
 8002358:	817b      	strh	r3, [r7, #10]
 800235a:	4664      	mov	r4, ip
 800235c:	f8c7 c004 	str.w	ip, [r7, #4]
      unsigned char deg_l = (unsigned char)(deg)&0x00FF;
 8002360:	89bb      	ldrh	r3, [r7, #12]
 8002362:	75fb      	strb	r3, [r7, #23]
      unsigned char deg_h = (unsigned char)(deg>>8)&0x00FF;
 8002364:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002368:	121b      	asrs	r3, r3, #8
 800236a:	b21b      	sxth	r3, r3
 800236c:	75bb      	strb	r3, [r7, #22]
      unsigned char time_l = (unsigned char)(time)&0x00FF;
 800236e:	897b      	ldrh	r3, [r7, #10]
 8002370:	757b      	strb	r3, [r7, #21]
      unsigned char time_h = (unsigned char)(time>>8)&0x00FF;
 8002372:	897b      	ldrh	r3, [r7, #10]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	b29b      	uxth	r3, r3
 8002378:	753b      	strb	r3, [r7, #20]
      unsigned char sum = (0x09+0x06+id+deg_l+deg_h+time_l+time_h)&0x00FF;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	7dfb      	ldrb	r3, [r7, #23]
 800237e:	4413      	add	r3, r2
 8002380:	b2da      	uxtb	r2, r3
 8002382:	7dbb      	ldrb	r3, [r7, #22]
 8002384:	4413      	add	r3, r2
 8002386:	b2da      	uxtb	r2, r3
 8002388:	7d7b      	ldrb	r3, [r7, #21]
 800238a:	4413      	add	r3, r2
 800238c:	b2da      	uxtb	r2, r3
 800238e:	7d3b      	ldrb	r3, [r7, #20]
 8002390:	4413      	add	r3, r2
 8002392:	b2db      	uxtb	r3, r3
 8002394:	330f      	adds	r3, #15
 8002396:	74fb      	strb	r3, [r7, #19]

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8002398:	2201      	movs	r2, #1
 800239a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800239e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a2:	f7fe f9f7 	bl	8000794 <HAL_GPIO_WritePin>

      txdata[0]=0x09;   //1 SIZE
 80023a6:	2309      	movs	r3, #9
 80023a8:	7023      	strb	r3, [r4, #0]
      txdata[1]=0x06;   //2 COMMAND
 80023aa:	2306      	movs	r3, #6
 80023ac:	7063      	strb	r3, [r4, #1]
      txdata[2]=0x00;   //3 OPTION
 80023ae:	2300      	movs	r3, #0
 80023b0:	70a3      	strb	r3, [r4, #2]
      txdata[3]=id;     //4 ID
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	70e3      	strb	r3, [r4, #3]
      txdata[4]=deg_l;  //5 POS_L
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
 80023b8:	7123      	strb	r3, [r4, #4]
      txdata[5]=deg_h;  //6 POS_H
 80023ba:	7dbb      	ldrb	r3, [r7, #22]
 80023bc:	7163      	strb	r3, [r4, #5]
      txdata[6]=time_l; //7 TIME_L
 80023be:	7d7b      	ldrb	r3, [r7, #21]
 80023c0:	71a3      	strb	r3, [r4, #6]
      txdata[7]=time_h; //8 TIME_H
 80023c2:	7d3b      	ldrb	r3, [r7, #20]
 80023c4:	71e3      	strb	r3, [r4, #7]
      txdata[8]=sum;    //9 SUM
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	7223      	strb	r3, [r4, #8]


  	  HAL_UART_Transmit(&huart1, txdata, 9, 0xFFFF);
 80023ca:	4621      	mov	r1, r4
 80023cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d0:	2209      	movs	r2, #9
 80023d2:	4808      	ldr	r0, [pc, #32]	; (80023f4 <pos.8607+0xac>)
 80023d4:	f7ff fc91 	bl	8001cfa <HAL_UART_Transmit>
      HAL_Delay(0.03);
 80023d8:	2000      	movs	r0, #0
 80023da:	f7fd ff5b 	bl	8000294 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e8:	f7fe f9d4 	bl	8000794 <HAL_GPIO_WritePin>
  }
 80023ec:	bf00      	nop
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd90      	pop	{r4, r7, pc}
 80023f4:	2000002c 	.word	0x2000002c

080023f8 <main>:
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
int main(void)
 80023fe:	f107 0318 	add.w	r3, r7, #24
 8002402:	60fb      	str	r3, [r7, #12]
  HAL_Init();
 8002404:	f7fd fee0 	bl	80001c8 <HAL_Init>
  SystemClock_Config();
 8002408:	f000 f902 	bl	8002610 <SystemClock_Config>
  MX_GPIO_Init();
 800240c:	f000 f9b8 	bl	8002780 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002410:	f000 f956 	bl	80026c0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002414:	f000 f984 	bl	8002720 <MX_USART2_UART_Init>
  uint8_t txdata[9] = {0};
 8002418:	2300      	movs	r3, #0
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	711a      	strb	r2, [r3, #4]
       HAL_Delay(0.03);
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);

    }

	  write(0xFF,0x00,0x28);
 8002424:	463b      	mov	r3, r7
 8002426:	469c      	mov	ip, r3
 8002428:	2228      	movs	r2, #40	; 0x28
 800242a:	2100      	movs	r1, #0
 800242c:	20ff      	movs	r0, #255	; 0xff
 800242e:	f000 f8ab 	bl	8002588 <write.8624>
	  write(0xFF,0x01,0x29);
 8002432:	463b      	mov	r3, r7
 8002434:	469c      	mov	ip, r3
 8002436:	2229      	movs	r2, #41	; 0x29
 8002438:	2101      	movs	r1, #1
 800243a:	20ff      	movs	r0, #255	; 0xff
 800243c:	f000 f8a4 	bl	8002588 <write.8624>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  write(0xFF,0x00,0x28);
 8002440:	463b      	mov	r3, r7
 8002442:	469c      	mov	ip, r3
 8002444:	2228      	movs	r2, #40	; 0x28
 8002446:	2100      	movs	r1, #0
 8002448:	20ff      	movs	r0, #255	; 0xff
 800244a:	f000 f89d 	bl	8002588 <write.8624>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800244e:	2201      	movs	r2, #1
 8002450:	2108      	movs	r1, #8
 8002452:	4826      	ldr	r0, [pc, #152]	; (80024ec <main+0xf4>)
 8002454:	f7fe f99e 	bl	8000794 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1000);
 8002458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800245c:	f7fd ff1a 	bl	8000294 <HAL_Delay>
	  	  write(0xFF,0x01,0x29);
 8002460:	463b      	mov	r3, r7
 8002462:	469c      	mov	ip, r3
 8002464:	2229      	movs	r2, #41	; 0x29
 8002466:	2101      	movs	r1, #1
 8002468:	20ff      	movs	r0, #255	; 0xff
 800246a:	f000 f88d 	bl	8002588 <write.8624>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	2108      	movs	r1, #8
 8002472:	481e      	ldr	r0, [pc, #120]	; (80024ec <main+0xf4>)
 8002474:	f7fe f98e 	bl	8000794 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1000);
 8002478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800247c:	f7fd ff0a 	bl	8000294 <HAL_Delay>

	  	//pos test
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8002480:	2201      	movs	r2, #1
 8002482:	2108      	movs	r1, #8
 8002484:	4819      	ldr	r0, [pc, #100]	; (80024ec <main+0xf4>)
 8002486:	f7fe f985 	bl	8000794 <HAL_GPIO_WritePin>
	  	  pos(0xFF,6000,1000);
 800248a:	463b      	mov	r3, r7
 800248c:	469c      	mov	ip, r3
 800248e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002492:	f241 7170 	movw	r1, #6000	; 0x1770
 8002496:	20ff      	movs	r0, #255	; 0xff
 8002498:	f7ff ff56 	bl	8002348 <pos.8607>
	  	  HAL_Delay(1000);
 800249c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024a0:	f7fd fef8 	bl	8000294 <HAL_Delay>

	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2108      	movs	r1, #8
 80024a8:	4810      	ldr	r0, [pc, #64]	; (80024ec <main+0xf4>)
 80024aa:	f7fe f973 	bl	8000794 <HAL_GPIO_WritePin>
	  	  pos(0xFF,0,1000);
 80024ae:	463b      	mov	r3, r7
 80024b0:	469c      	mov	ip, r3
 80024b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024b6:	2100      	movs	r1, #0
 80024b8:	20ff      	movs	r0, #255	; 0xff
 80024ba:	f7ff ff45 	bl	8002348 <pos.8607>
	  	  HAL_Delay(1000);
 80024be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024c2:	f7fd fee7 	bl	8000294 <HAL_Delay>

	  	//speed test
	  	  write(0xFF,0x04,0x28);
 80024c6:	463b      	mov	r3, r7
 80024c8:	469c      	mov	ip, r3
 80024ca:	2228      	movs	r2, #40	; 0x28
 80024cc:	2104      	movs	r1, #4
 80024ce:	20ff      	movs	r0, #255	; 0xff
 80024d0:	f000 f85a 	bl	8002588 <write.8624>
	  	  speed(0xFF,15000);
 80024d4:	463b      	mov	r3, r7
 80024d6:	469c      	mov	ip, r3
 80024d8:	f643 2198 	movw	r1, #15000	; 0x3a98
 80024dc:	20ff      	movs	r0, #255	; 0xff
 80024de:	f000 f807 	bl	80024f0 <speed.8616>
	  	  HAL_Delay(10000);
 80024e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80024e6:	f7fd fed5 	bl	8000294 <HAL_Delay>
	  	  write(0xFF,0x00,0x28);
 80024ea:	e7a9      	b.n	8002440 <main+0x48>
 80024ec:	48000400 	.word	0x48000400

080024f0 <speed.8616>:
    {
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	460a      	mov	r2, r1
 80024fa:	71fb      	strb	r3, [r7, #7]
 80024fc:	4613      	mov	r3, r2
 80024fe:	80bb      	strh	r3, [r7, #4]
 8002500:	4664      	mov	r4, ip
 8002502:	f8c7 c000 	str.w	ip, [r7]
        unsigned char speed_l = (unsigned char)(speed)&0x00FF;
 8002506:	88bb      	ldrh	r3, [r7, #4]
 8002508:	73fb      	strb	r3, [r7, #15]
        unsigned char speed_h = (unsigned char)(speed>>8)&0x00FF;
 800250a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800250e:	121b      	asrs	r3, r3, #8
 8002510:	b21b      	sxth	r3, r3
 8002512:	73bb      	strb	r3, [r7, #14]
        unsigned char sum = (0x09+0x04+0x00+id+speed_l+speed_h+0x30+0x01)&0x00FF;
 8002514:	79fa      	ldrb	r2, [r7, #7]
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	4413      	add	r3, r2
 800251a:	b2da      	uxtb	r2, r3
 800251c:	7bbb      	ldrb	r3, [r7, #14]
 800251e:	4413      	add	r3, r2
 8002520:	b2db      	uxtb	r3, r3
 8002522:	333e      	adds	r3, #62	; 0x3e
 8002524:	737b      	strb	r3, [r7, #13]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8002526:	2201      	movs	r2, #1
 8002528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800252c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002530:	f7fe f930 	bl	8000794 <HAL_GPIO_WritePin>
        txdata[0]=0x09;//SIZE
 8002534:	2309      	movs	r3, #9
 8002536:	7023      	strb	r3, [r4, #0]
        txdata[1]=0x04;//COMMAND
 8002538:	2304      	movs	r3, #4
 800253a:	7063      	strb	r3, [r4, #1]
        txdata[2]=0x00;//OPTION
 800253c:	2300      	movs	r3, #0
 800253e:	70a3      	strb	r3, [r4, #2]
        txdata[3]=id;//ID
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	70e3      	strb	r3, [r4, #3]
        txdata[4]=speed_l;//SPEED_LOWBYTE
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	7123      	strb	r3, [r4, #4]
        txdata[5]=speed_h;//SPEED_HIGHBYTE
 8002548:	7bbb      	ldrb	r3, [r7, #14]
 800254a:	7163      	strb	r3, [r4, #5]
        txdata[6]=0x30;//ADRESS(SPEED 0x03)
 800254c:	2330      	movs	r3, #48	; 0x30
 800254e:	71a3      	strb	r3, [r4, #6]
        txdata[7]=0x01;//COUNT
 8002550:	2301      	movs	r3, #1
 8002552:	71e3      	strb	r3, [r4, #7]
        txdata[8]=sum;//SUM
 8002554:	7b7b      	ldrb	r3, [r7, #13]
 8002556:	7223      	strb	r3, [r4, #8]
    	HAL_UART_Transmit(&huart1, txdata, 9, 0xFFFF);
 8002558:	4621      	mov	r1, r4
 800255a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800255e:	2209      	movs	r2, #9
 8002560:	4808      	ldr	r0, [pc, #32]	; (8002584 <speed.8616+0x94>)
 8002562:	f7ff fbca 	bl	8001cfa <HAL_UART_Transmit>
        HAL_Delay(0.03);
 8002566:	2000      	movs	r0, #0
 8002568:	f7fd fe94 	bl	8000294 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800256c:	2200      	movs	r2, #0
 800256e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002576:	f7fe f90d 	bl	8000794 <HAL_GPIO_WritePin>
    }
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bd90      	pop	{r4, r7, pc}
 8002582:	bf00      	nop
 8002584:	2000002c 	.word	0x2000002c

08002588 <write.8624>:
    {
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
 8002592:	460b      	mov	r3, r1
 8002594:	71bb      	strb	r3, [r7, #6]
 8002596:	4613      	mov	r3, r2
 8002598:	717b      	strb	r3, [r7, #5]
 800259a:	4664      	mov	r4, ip
 800259c:	f8c7 c000 	str.w	ip, [r7]
        unsigned char sum = (0x08+0x04+0x00+id+data+adress+0x01)&0x00FF;
 80025a0:	79fa      	ldrb	r2, [r7, #7]
 80025a2:	79bb      	ldrb	r3, [r7, #6]
 80025a4:	4413      	add	r3, r2
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	797b      	ldrb	r3, [r7, #5]
 80025aa:	4413      	add	r3, r2
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	330d      	adds	r3, #13
 80025b0:	73fb      	strb	r3, [r7, #15]
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80025b2:	2201      	movs	r2, #1
 80025b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025bc:	f7fe f8ea 	bl	8000794 <HAL_GPIO_WritePin>
       txdata[0]=0x08;   //1 SIZE
 80025c0:	2308      	movs	r3, #8
 80025c2:	7023      	strb	r3, [r4, #0]
       txdata[1]=0x04;   //2 COMMAND
 80025c4:	2304      	movs	r3, #4
 80025c6:	7063      	strb	r3, [r4, #1]
       txdata[2]=0x00;   //3 OPTION
 80025c8:	2300      	movs	r3, #0
 80025ca:	70a3      	strb	r3, [r4, #2]
       txdata[3]=id;     //4 ID
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	70e3      	strb	r3, [r4, #3]
       txdata[4]=data;  //DATA
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	7123      	strb	r3, [r4, #4]
       txdata[5]=adress;  //ADRESS
 80025d4:	797b      	ldrb	r3, [r7, #5]
 80025d6:	7163      	strb	r3, [r4, #5]
       txdata[6]=0x01; //COUNT
 80025d8:	2301      	movs	r3, #1
 80025da:	71a3      	strb	r3, [r4, #6]
       txdata[7]=sum;    //9 SUM
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	71e3      	strb	r3, [r4, #7]
       HAL_UART_Transmit(&huart1, txdata, 8, 0xFFFF);
 80025e0:	4621      	mov	r1, r4
 80025e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e6:	2208      	movs	r2, #8
 80025e8:	4808      	ldr	r0, [pc, #32]	; (800260c <write.8624+0x84>)
 80025ea:	f7ff fb86 	bl	8001cfa <HAL_UART_Transmit>
       HAL_Delay(0.03);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7fd fe50 	bl	8000294 <HAL_Delay>
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025fe:	f7fe f8c9 	bl	8000794 <HAL_GPIO_WritePin>
    }
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bd90      	pop	{r4, r7, pc}
 800260a:	bf00      	nop
 800260c:	2000002c 	.word	0x2000002c

08002610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b096      	sub	sp, #88	; 0x58
 8002614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002616:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800261a:	2228      	movs	r2, #40	; 0x28
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fa78 	bl	8002b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]
 8002640:	611a      	str	r2, [r3, #16]
 8002642:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002644:	2302      	movs	r3, #2
 8002646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002648:	2301      	movs	r3, #1
 800264a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800264c:	2310      	movs	r3, #16
 800264e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002650:	2302      	movs	r3, #2
 8002652:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002654:	2300      	movs	r3, #0
 8002656:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002658:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800265c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800265e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe f8ae 	bl	80007c4 <HAL_RCC_OscConfig>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800266e:	f000 f8e9 	bl	8002844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002672:	230f      	movs	r3, #15
 8002674:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002676:	2302      	movs	r3, #2
 8002678:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800267e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002684:	2300      	movs	r3, #0
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002688:	f107 031c 	add.w	r3, r7, #28
 800268c:	2102      	movs	r1, #2
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe ff86 	bl	80015a0 <HAL_RCC_ClockConfig>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800269a:	f000 f8d3 	bl	8002844 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800269e:	2301      	movs	r3, #1
 80026a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff f9af 	bl	8001a0c <HAL_RCCEx_PeriphCLKConfig>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80026b4:	f000 f8c6 	bl	8002844 <Error_Handler>
  }
}
 80026b8:	bf00      	nop
 80026ba:	3758      	adds	r7, #88	; 0x58
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026c4:	4b13      	ldr	r3, [pc, #76]	; (8002714 <MX_USART1_UART_Init+0x54>)
 80026c6:	4a14      	ldr	r2, [pc, #80]	; (8002718 <MX_USART1_UART_Init+0x58>)
 80026c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1500000;
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <MX_USART1_UART_Init+0x54>)
 80026cc:	4a13      	ldr	r2, [pc, #76]	; (800271c <MX_USART1_UART_Init+0x5c>)
 80026ce:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <MX_USART1_UART_Init+0x54>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <MX_USART1_UART_Init+0x54>)
 80026d8:	2200      	movs	r2, #0
 80026da:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <MX_USART1_UART_Init+0x54>)
 80026de:	2200      	movs	r2, #0
 80026e0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <MX_USART1_UART_Init+0x54>)
 80026e4:	220c      	movs	r2, #12
 80026e6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <MX_USART1_UART_Init+0x54>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <MX_USART1_UART_Init+0x54>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <MX_USART1_UART_Init+0x54>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <MX_USART1_UART_Init+0x54>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002700:	4804      	ldr	r0, [pc, #16]	; (8002714 <MX_USART1_UART_Init+0x54>)
 8002702:	f7ff faa9 	bl	8001c58 <HAL_UART_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 800270c:	f000 f89a 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	2000002c 	.word	0x2000002c
 8002718:	40013800 	.word	0x40013800
 800271c:	0016e360 	.word	0x0016e360

08002720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002724:	4b14      	ldr	r3, [pc, #80]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002726:	4a15      	ldr	r2, [pc, #84]	; (800277c <MX_USART2_UART_Init+0x5c>)
 8002728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <MX_USART2_UART_Init+0x58>)
 800272c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <MX_USART2_UART_Init+0x58>)
 800273a:	2200      	movs	r2, #0
 800273c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002746:	220c      	movs	r2, #12
 8002748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <MX_USART2_UART_Init+0x58>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002752:	2200      	movs	r2, #0
 8002754:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002758:	2200      	movs	r2, #0
 800275a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <MX_USART2_UART_Init+0x58>)
 800275e:	2200      	movs	r2, #0
 8002760:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002762:	4805      	ldr	r0, [pc, #20]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002764:	f7ff fa78 	bl	8001c58 <HAL_UART_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800276e:	f000 f869 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	2000009c 	.word	0x2000009c
 800277c:	40004400 	.word	0x40004400

08002780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002786:	f107 030c 	add.w	r3, r7, #12
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]
 8002794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002796:	4b29      	ldr	r3, [pc, #164]	; (800283c <MX_GPIO_Init+0xbc>)
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	4a28      	ldr	r2, [pc, #160]	; (800283c <MX_GPIO_Init+0xbc>)
 800279c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027a0:	6153      	str	r3, [r2, #20]
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <MX_GPIO_Init+0xbc>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ae:	4b23      	ldr	r3, [pc, #140]	; (800283c <MX_GPIO_Init+0xbc>)
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	4a22      	ldr	r2, [pc, #136]	; (800283c <MX_GPIO_Init+0xbc>)
 80027b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b8:	6153      	str	r3, [r2, #20]
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <MX_GPIO_Init+0xbc>)
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <MX_GPIO_Init+0xbc>)
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	4a1c      	ldr	r2, [pc, #112]	; (800283c <MX_GPIO_Init+0xbc>)
 80027cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d0:	6153      	str	r3, [r2, #20]
 80027d2:	4b1a      	ldr	r3, [pc, #104]	; (800283c <MX_GPIO_Init+0xbc>)
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80027de:	2200      	movs	r2, #0
 80027e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e8:	f7fd ffd4 	bl	8000794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2108      	movs	r1, #8
 80027f0:	4813      	ldr	r0, [pc, #76]	; (8002840 <MX_GPIO_Init+0xc0>)
 80027f2:	f7fd ffcf 	bl	8000794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fc:	2301      	movs	r3, #1
 80027fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	f107 030c 	add.w	r3, r7, #12
 800280c:	4619      	mov	r1, r3
 800280e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002812:	f7fd fe49 	bl	80004a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002816:	2308      	movs	r3, #8
 8002818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800281a:	2301      	movs	r3, #1
 800281c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002826:	f107 030c 	add.w	r3, r7, #12
 800282a:	4619      	mov	r1, r3
 800282c:	4804      	ldr	r0, [pc, #16]	; (8002840 <MX_GPIO_Init+0xc0>)
 800282e:	f7fd fe3b 	bl	80004a8 <HAL_GPIO_Init>

}
 8002832:	bf00      	nop
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	48000400 	.word	0x48000400

08002844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285a:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <HAL_MspInit+0x44>)
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	4a0e      	ldr	r2, [pc, #56]	; (8002898 <HAL_MspInit+0x44>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6193      	str	r3, [r2, #24]
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <HAL_MspInit+0x44>)
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_MspInit+0x44>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	4a08      	ldr	r2, [pc, #32]	; (8002898 <HAL_MspInit+0x44>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287c:	61d3      	str	r3, [r2, #28]
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_MspInit+0x44>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000

0800289c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08c      	sub	sp, #48	; 0x30
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 031c 	add.w	r3, r7, #28
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a30      	ldr	r2, [pc, #192]	; (800297c <HAL_UART_MspInit+0xe0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d12a      	bne.n	8002914 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_UART_MspInit+0xe4>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	4a2f      	ldr	r2, [pc, #188]	; (8002980 <HAL_UART_MspInit+0xe4>)
 80028c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c8:	6193      	str	r3, [r2, #24]
 80028ca:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <HAL_UART_MspInit+0xe4>)
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d6:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <HAL_UART_MspInit+0xe4>)
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	4a29      	ldr	r2, [pc, #164]	; (8002980 <HAL_UART_MspInit+0xe4>)
 80028dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e0:	6153      	str	r3, [r2, #20]
 80028e2:	4b27      	ldr	r3, [pc, #156]	; (8002980 <HAL_UART_MspInit+0xe4>)
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002900:	2307      	movs	r3, #7
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002904:	f107 031c 	add.w	r3, r7, #28
 8002908:	4619      	mov	r1, r3
 800290a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800290e:	f7fd fdcb 	bl	80004a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002912:	e02e      	b.n	8002972 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1a      	ldr	r2, [pc, #104]	; (8002984 <HAL_UART_MspInit+0xe8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d129      	bne.n	8002972 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <HAL_UART_MspInit+0xe4>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	4a17      	ldr	r2, [pc, #92]	; (8002980 <HAL_UART_MspInit+0xe4>)
 8002924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002928:	61d3      	str	r3, [r2, #28]
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <HAL_UART_MspInit+0xe4>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_UART_MspInit+0xe4>)
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	4a11      	ldr	r2, [pc, #68]	; (8002980 <HAL_UART_MspInit+0xe4>)
 800293c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002940:	6153      	str	r3, [r2, #20]
 8002942:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <HAL_UART_MspInit+0xe4>)
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800294e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002954:	2302      	movs	r3, #2
 8002956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800295c:	2303      	movs	r3, #3
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002960:	2307      	movs	r3, #7
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002964:	f107 031c 	add.w	r3, r7, #28
 8002968:	4619      	mov	r1, r3
 800296a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800296e:	f7fd fd9b 	bl	80004a8 <HAL_GPIO_Init>
}
 8002972:	bf00      	nop
 8002974:	3730      	adds	r7, #48	; 0x30
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40013800 	.word	0x40013800
 8002980:	40021000 	.word	0x40021000
 8002984:	40004400 	.word	0x40004400

08002988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800299a:	e7fe      	b.n	800299a <HardFault_Handler+0x4>

0800299c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a0:	e7fe      	b.n	80029a0 <MemManage_Handler+0x4>

080029a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a6:	e7fe      	b.n	80029a6 <BusFault_Handler+0x4>

080029a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ac:	e7fe      	b.n	80029ac <UsageFault_Handler+0x4>

080029ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029dc:	f7fd fc3a 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e8:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <SystemInit+0x84>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	4a1e      	ldr	r2, [pc, #120]	; (8002a68 <SystemInit+0x84>)
 80029f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80029f8:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <SystemInit+0x88>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <SystemInit+0x88>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <SystemInit+0x88>)
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	4918      	ldr	r1, [pc, #96]	; (8002a6c <SystemInit+0x88>)
 8002a0a:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <SystemInit+0x8c>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002a10:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <SystemInit+0x88>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a15      	ldr	r2, [pc, #84]	; (8002a6c <SystemInit+0x88>)
 8002a16:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <SystemInit+0x88>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a11      	ldr	r2, [pc, #68]	; (8002a6c <SystemInit+0x88>)
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <SystemInit+0x88>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4a0e      	ldr	r2, [pc, #56]	; (8002a6c <SystemInit+0x88>)
 8002a32:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002a36:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <SystemInit+0x88>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <SystemInit+0x88>)
 8002a3e:	f023 030f 	bic.w	r3, r3, #15
 8002a42:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <SystemInit+0x88>)
 8002a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a48:	4908      	ldr	r1, [pc, #32]	; (8002a6c <SystemInit+0x88>)
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <SystemInit+0x90>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <SystemInit+0x88>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a56:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <SystemInit+0x84>)
 8002a58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a5c:	609a      	str	r2, [r3, #8]
#endif
}
 8002a5e:	bf00      	nop
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	f87fc00c 	.word	0xf87fc00c
 8002a74:	ff00fccc 	.word	0xff00fccc

08002a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ab0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a7e:	e003      	b.n	8002a88 <LoopCopyDataInit>

08002a80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002a82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a86:	3104      	adds	r1, #4

08002a88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a88:	480b      	ldr	r0, [pc, #44]	; (8002ab8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <LoopForever+0xe>)
	adds	r2, r0, r1
 8002a8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a90:	d3f6      	bcc.n	8002a80 <CopyDataInit>
	ldr	r2, =_sbss
 8002a92:	4a0b      	ldr	r2, [pc, #44]	; (8002ac0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002a94:	e002      	b.n	8002a9c <LoopFillZerobss>

08002a96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a98:	f842 3b04 	str.w	r3, [r2], #4

08002a9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <LoopForever+0x16>)
	cmp	r2, r3
 8002a9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002aa0:	d3f9      	bcc.n	8002a96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002aa2:	f7ff ff9f 	bl	80029e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aa6:	f000 f811 	bl	8002acc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002aaa:	f7ff fca5 	bl	80023f8 <main>

08002aae <LoopForever>:

LoopForever:
    b LoopForever
 8002aae:	e7fe      	b.n	8002aae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ab0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002ab4:	08002b7c 	.word	0x08002b7c
	ldr	r0, =_sdata
 8002ab8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002abc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002ac0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002ac4:	2000010c 	.word	0x2000010c

08002ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ac8:	e7fe      	b.n	8002ac8 <ADC1_2_IRQHandler>
	...

08002acc <__libc_init_array>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	4d0d      	ldr	r5, [pc, #52]	; (8002b04 <__libc_init_array+0x38>)
 8002ad0:	4c0d      	ldr	r4, [pc, #52]	; (8002b08 <__libc_init_array+0x3c>)
 8002ad2:	1b64      	subs	r4, r4, r5
 8002ad4:	10a4      	asrs	r4, r4, #2
 8002ad6:	2600      	movs	r6, #0
 8002ad8:	42a6      	cmp	r6, r4
 8002ada:	d109      	bne.n	8002af0 <__libc_init_array+0x24>
 8002adc:	4d0b      	ldr	r5, [pc, #44]	; (8002b0c <__libc_init_array+0x40>)
 8002ade:	4c0c      	ldr	r4, [pc, #48]	; (8002b10 <__libc_init_array+0x44>)
 8002ae0:	f000 f820 	bl	8002b24 <_init>
 8002ae4:	1b64      	subs	r4, r4, r5
 8002ae6:	10a4      	asrs	r4, r4, #2
 8002ae8:	2600      	movs	r6, #0
 8002aea:	42a6      	cmp	r6, r4
 8002aec:	d105      	bne.n	8002afa <__libc_init_array+0x2e>
 8002aee:	bd70      	pop	{r4, r5, r6, pc}
 8002af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af4:	4798      	blx	r3
 8002af6:	3601      	adds	r6, #1
 8002af8:	e7ee      	b.n	8002ad8 <__libc_init_array+0xc>
 8002afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afe:	4798      	blx	r3
 8002b00:	3601      	adds	r6, #1
 8002b02:	e7f2      	b.n	8002aea <__libc_init_array+0x1e>
 8002b04:	08002b74 	.word	0x08002b74
 8002b08:	08002b74 	.word	0x08002b74
 8002b0c:	08002b74 	.word	0x08002b74
 8002b10:	08002b78 	.word	0x08002b78

08002b14 <memset>:
 8002b14:	4402      	add	r2, r0
 8002b16:	4603      	mov	r3, r0
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d100      	bne.n	8002b1e <memset+0xa>
 8002b1c:	4770      	bx	lr
 8002b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b22:	e7f9      	b.n	8002b18 <memset+0x4>

08002b24 <_init>:
 8002b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b26:	bf00      	nop
 8002b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2a:	bc08      	pop	{r3}
 8002b2c:	469e      	mov	lr, r3
 8002b2e:	4770      	bx	lr

08002b30 <_fini>:
 8002b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b32:	bf00      	nop
 8002b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b36:	bc08      	pop	{r3}
 8002b38:	469e      	mov	lr, r3
 8002b3a:	4770      	bx	lr
