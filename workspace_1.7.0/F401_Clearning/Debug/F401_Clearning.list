
F401_Clearning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c4c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003de0  08003de0  00013de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e7c  08003e7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e7c  08003e7c  00013e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e84  08003e84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e88  08003e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  08003efc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003efc  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebac  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d94  00000000  00000000  0002ec4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  000309e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00031650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017124  00000000  00000000  00032218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d653  00000000  00000000  0004933c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eab8  00000000  00000000  0005698f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5447  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac4  00000000  00000000  000e549c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003dc8 	.word	0x08003dc8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08003dc8 	.word	0x08003dc8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t stop;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0)
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d11a      	bne.n	8000512 <HAL_GPIO_EXTI_Callback+0x46>
  {
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80004dc:	2101      	movs	r1, #1
 80004de:	480f      	ldr	r0, [pc, #60]	; (800051c <HAL_GPIO_EXTI_Callback+0x50>)
 80004e0:	f001 f8dc 	bl	800169c <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d006      	beq.n	80004f8 <HAL_GPIO_EXTI_Callback+0x2c>
    {
//      HAL_GPIO_WritePin(GPIOA, DIR_Pin, 1);
      printf("on\r\n");
 80004ea:	480d      	ldr	r0, [pc, #52]	; (8000520 <HAL_GPIO_EXTI_Callback+0x54>)
 80004ec:	f003 f814 	bl	8003518 <puts>
      stop=0;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <HAL_GPIO_EXTI_Callback+0x58>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
//      HAL_GPIO_WritePin(GPIOA, DIR_Pin, 0);
      printf("off\r\n");
      stop=1;
    }
  }
}
 80004f6:	e00c      	b.n	8000512 <HAL_GPIO_EXTI_Callback+0x46>
    else if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80004f8:	2101      	movs	r1, #1
 80004fa:	4808      	ldr	r0, [pc, #32]	; (800051c <HAL_GPIO_EXTI_Callback+0x50>)
 80004fc:	f001 f8ce 	bl	800169c <HAL_GPIO_ReadPin>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d105      	bne.n	8000512 <HAL_GPIO_EXTI_Callback+0x46>
      printf("off\r\n");
 8000506:	4808      	ldr	r0, [pc, #32]	; (8000528 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000508:	f003 f806 	bl	8003518 <puts>
      stop=1;
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <HAL_GPIO_EXTI_Callback+0x58>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020000 	.word	0x40020000
 8000520:	08003de0 	.word	0x08003de0
 8000524:	200001b0 	.word	0x200001b0
 8000528:	08003de4 	.word	0x08003de4

0800052c <delay_us.9082>:
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
  HAL_TIM_Base_Start(&htim2);

  void delay_us (uint32_t us)
  {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	f8c7 c000 	str.w	ip, [r7]
  	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <delay_us.9082+0x30>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2200      	movs	r2, #0
 800053e:	625a      	str	r2, [r3, #36]	; 0x24
  	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8000540:	bf00      	nop
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <delay_us.9082+0x30>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	429a      	cmp	r2, r3
 800054c:	d8f9      	bhi.n	8000542 <delay_us.9082+0x16>
  }
 800054e:	bf00      	nop
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	20000124 	.word	0x20000124

08000560 <main>:
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
int main(void)
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	60fb      	str	r3, [r7, #12]
  HAL_Init();
 800056c:	f000 fd6a 	bl	8001044 <HAL_Init>
  SystemClock_Config();
 8000570:	f000 f8e8 	bl	8000744 <SystemClock_Config>
  MX_GPIO_Init();
 8000574:	f000 fa9c 	bl	8000ab0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000578:	f000 fa46 	bl	8000a08 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800057c:	f000 fa6e 	bl	8000a5c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000580:	f000 f94a 	bl	8000818 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000584:	f000 f9f4 	bl	8000970 <MX_TIM2_Init>
  printf("start\r\n");
 8000588:	4823      	ldr	r0, [pc, #140]	; (8000618 <main+0xb8>)
 800058a:	f002 ffc5 	bl	8003518 <puts>
  uint8_t txdata[9] = {0};
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	711a      	strb	r2, [r3, #4]
  short duty=10;
 800059a:	230a      	movs	r3, #10
 800059c:	827b      	strh	r3, [r7, #18]
  int count = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80005a2:	2100      	movs	r1, #0
 80005a4:	481d      	ldr	r0, [pc, #116]	; (800061c <main+0xbc>)
 80005a6:	f001 fe3b 	bl	8002220 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80005aa:	2104      	movs	r1, #4
 80005ac:	481b      	ldr	r0, [pc, #108]	; (800061c <main+0xbc>)
 80005ae:	f001 fe37 	bl	8002220 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);
 80005b2:	481b      	ldr	r0, [pc, #108]	; (8000620 <main+0xc0>)
 80005b4:	f001 fd80 	bl	80020b8 <HAL_TIM_Base_Start>
       HAL_Delay(0.03);
       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);

    }

  	  write(0xFF,0x04,0x28);
 80005b8:	463b      	mov	r3, r7
 80005ba:	469c      	mov	ip, r3
 80005bc:	2228      	movs	r2, #40	; 0x28
 80005be:	2104      	movs	r1, #4
 80005c0:	20ff      	movs	r0, #255	; 0xff
 80005c2:	f000 f87d 	bl	80006c0 <write.9107>
  	  write(0xFF,0x01,0x29);
 80005c6:	463b      	mov	r3, r7
 80005c8:	469c      	mov	ip, r3
 80005ca:	2229      	movs	r2, #41	; 0x29
 80005cc:	2101      	movs	r1, #1
 80005ce:	20ff      	movs	r0, #255	; 0xff
 80005d0:	f000 f876 	bl	80006c0 <write.9107>
  	  speed(0xFF,15000);
 80005d4:	463b      	mov	r3, r7
 80005d6:	469c      	mov	ip, r3
 80005d8:	f643 2198 	movw	r1, #15000	; 0x3a98
 80005dc:	20ff      	movs	r0, #255	; 0xff
 80005de:	f000 f825 	bl	800062c <speed.9099>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(1){
		  if(count % 1000 == 0){
 80005e2:	697a      	ldr	r2, [r7, #20]
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <main+0xc4>)
 80005e6:	fb83 1302 	smull	r1, r3, r3, r2
 80005ea:	1199      	asrs	r1, r3, #6
 80005ec:	17d3      	asrs	r3, r2, #31
 80005ee:	1acb      	subs	r3, r1, r3
 80005f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005f4:	fb01 f303 	mul.w	r3, r1, r3
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d102      	bne.n	8000604 <main+0xa4>
			  printf("test_us\r\n");
 80005fe:	480a      	ldr	r0, [pc, #40]	; (8000628 <main+0xc8>)
 8000600:	f002 ff8a 	bl	8003518 <puts>

		  }
		  delay_us(1000);
 8000604:	463b      	mov	r3, r7
 8000606:	469c      	mov	ip, r3
 8000608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060c:	f7ff ff8e 	bl	800052c <delay_us.9082>
		  count++;
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	3301      	adds	r3, #1
 8000614:	617b      	str	r3, [r7, #20]
		  if(count % 1000 == 0){
 8000616:	e7e4      	b.n	80005e2 <main+0x82>
 8000618:	08003dec 	.word	0x08003dec
 800061c:	20000098 	.word	0x20000098
 8000620:	20000124 	.word	0x20000124
 8000624:	10624dd3 	.word	0x10624dd3
 8000628:	08003df4 	.word	0x08003df4

0800062c <speed.9099>:
    {
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	460a      	mov	r2, r1
 8000636:	71fb      	strb	r3, [r7, #7]
 8000638:	4613      	mov	r3, r2
 800063a:	80bb      	strh	r3, [r7, #4]
 800063c:	4664      	mov	r4, ip
 800063e:	f8c7 c000 	str.w	ip, [r7]
        unsigned char speed_l = (unsigned char)(speed)&0x00FF;
 8000642:	88bb      	ldrh	r3, [r7, #4]
 8000644:	73fb      	strb	r3, [r7, #15]
        unsigned char speed_h = (unsigned char)(speed>>8)&0x00FF;
 8000646:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800064a:	121b      	asrs	r3, r3, #8
 800064c:	b21b      	sxth	r3, r3
 800064e:	73bb      	strb	r3, [r7, #14]
        unsigned char sum = (0x09+0x04+0x00+id+speed_l+speed_h+0x30+0x01)&0x00FF;
 8000650:	79fa      	ldrb	r2, [r7, #7]
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	4413      	add	r3, r2
 8000656:	b2da      	uxtb	r2, r3
 8000658:	7bbb      	ldrb	r3, [r7, #14]
 800065a:	4413      	add	r3, r2
 800065c:	b2db      	uxtb	r3, r3
 800065e:	333e      	adds	r3, #62	; 0x3e
 8000660:	737b      	strb	r3, [r7, #13]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	2104      	movs	r1, #4
 8000666:	4814      	ldr	r0, [pc, #80]	; (80006b8 <speed.9099+0x8c>)
 8000668:	f001 f830 	bl	80016cc <HAL_GPIO_WritePin>
        txdata[0]=0x09;//SIZE
 800066c:	2309      	movs	r3, #9
 800066e:	7023      	strb	r3, [r4, #0]
        txdata[1]=0x04;//COMMAND
 8000670:	2304      	movs	r3, #4
 8000672:	7063      	strb	r3, [r4, #1]
        txdata[2]=0x00;//OPTION
 8000674:	2300      	movs	r3, #0
 8000676:	70a3      	strb	r3, [r4, #2]
        txdata[3]=id;//ID
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	70e3      	strb	r3, [r4, #3]
        txdata[4]=speed_l;//SPEED_LOWBYTE
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	7123      	strb	r3, [r4, #4]
        txdata[5]=speed_h;//SPEED_HIGHBYTE
 8000680:	7bbb      	ldrb	r3, [r7, #14]
 8000682:	7163      	strb	r3, [r4, #5]
        txdata[6]=0x30;//ADRESS(SPEED 0x03)
 8000684:	2330      	movs	r3, #48	; 0x30
 8000686:	71a3      	strb	r3, [r4, #6]
        txdata[7]=0x01;//COUNT
 8000688:	2301      	movs	r3, #1
 800068a:	71e3      	strb	r3, [r4, #7]
        txdata[8]=sum;//SUM
 800068c:	7b7b      	ldrb	r3, [r7, #13]
 800068e:	7223      	strb	r3, [r4, #8]
        HAL_UART_Transmit(&huart6, txdata, 9, 0xFFFF);
 8000690:	4621      	mov	r1, r4
 8000692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000696:	2209      	movs	r2, #9
 8000698:	4808      	ldr	r0, [pc, #32]	; (80006bc <speed.9099+0x90>)
 800069a:	f002 fbd4 	bl	8002e46 <HAL_UART_Transmit>
        HAL_Delay(0.03);
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 fd42 	bl	8001128 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2104      	movs	r1, #4
 80006a8:	4803      	ldr	r0, [pc, #12]	; (80006b8 <speed.9099+0x8c>)
 80006aa:	f001 f80f 	bl	80016cc <HAL_GPIO_WritePin>
    }
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd90      	pop	{r4, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40020400 	.word	0x40020400
 80006bc:	200000e0 	.word	0x200000e0

080006c0 <write.9107>:
    {
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
 80006ca:	460b      	mov	r3, r1
 80006cc:	71bb      	strb	r3, [r7, #6]
 80006ce:	4613      	mov	r3, r2
 80006d0:	717b      	strb	r3, [r7, #5]
 80006d2:	4664      	mov	r4, ip
 80006d4:	f8c7 c000 	str.w	ip, [r7]
        unsigned char sum = (0x08+0x04+0x00+id+data+adress+0x01)&0x00FF;
 80006d8:	79fa      	ldrb	r2, [r7, #7]
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	4413      	add	r3, r2
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	797b      	ldrb	r3, [r7, #5]
 80006e2:	4413      	add	r3, r2
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	330d      	adds	r3, #13
 80006e8:	73fb      	strb	r3, [r7, #15]
       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2104      	movs	r1, #4
 80006ee:	4813      	ldr	r0, [pc, #76]	; (800073c <write.9107+0x7c>)
 80006f0:	f000 ffec 	bl	80016cc <HAL_GPIO_WritePin>
       txdata[0]=0x08;   //1 SIZE
 80006f4:	2308      	movs	r3, #8
 80006f6:	7023      	strb	r3, [r4, #0]
       txdata[1]=0x04;   //2 COMMAND
 80006f8:	2304      	movs	r3, #4
 80006fa:	7063      	strb	r3, [r4, #1]
       txdata[2]=0x00;   //3 OPTION
 80006fc:	2300      	movs	r3, #0
 80006fe:	70a3      	strb	r3, [r4, #2]
       txdata[3]=id;     //4 ID
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	70e3      	strb	r3, [r4, #3]
       txdata[4]=data;  //DATA
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	7123      	strb	r3, [r4, #4]
       txdata[5]=adress;  //ADRESS
 8000708:	797b      	ldrb	r3, [r7, #5]
 800070a:	7163      	strb	r3, [r4, #5]
       txdata[6]=0x01; //COUNT
 800070c:	2301      	movs	r3, #1
 800070e:	71a3      	strb	r3, [r4, #6]
       txdata[7]=sum;    //9 SUM
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	71e3      	strb	r3, [r4, #7]
       HAL_UART_Transmit(&huart6, txdata, 8, 0xFFFF);
 8000714:	4621      	mov	r1, r4
 8000716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800071a:	2208      	movs	r2, #8
 800071c:	4808      	ldr	r0, [pc, #32]	; (8000740 <write.9107+0x80>)
 800071e:	f002 fb92 	bl	8002e46 <HAL_UART_Transmit>
       HAL_Delay(0.03);
 8000722:	2000      	movs	r0, #0
 8000724:	f000 fd00 	bl	8001128 <HAL_Delay>
       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2104      	movs	r1, #4
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <write.9107+0x7c>)
 800072e:	f000 ffcd 	bl	80016cc <HAL_GPIO_WritePin>
    }
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	bf00      	nop
 800073c:	40020400 	.word	0x40020400
 8000740:	200000e0 	.word	0x200000e0

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	; 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fe6a 	bl	800342c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a27      	ldr	r2, [pc, #156]	; (8000810 <SystemClock_Config+0xcc>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b25      	ldr	r3, [pc, #148]	; (8000810 <SystemClock_Config+0xcc>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <SystemClock_Config+0xd0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000790:	4a20      	ldr	r2, [pc, #128]	; (8000814 <SystemClock_Config+0xd0>)
 8000792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <SystemClock_Config+0xd0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ac:	2310      	movs	r3, #16
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b8:	2308      	movs	r3, #8
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c4:	2307      	movs	r3, #7
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 ffaf 	bl	8001730 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007d8:	f000 fa1e 	bl	8000c18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80007e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80007ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2102      	movs	r1, #2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 fa11 	bl	8001c20 <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000804:	f000 fa08 	bl	8000c18 <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	3750      	adds	r7, #80	; 0x50
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b096      	sub	sp, #88	; 0x58
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2220      	movs	r2, #32
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f002 fdeb 	bl	800342c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000856:	4b44      	ldr	r3, [pc, #272]	; (8000968 <MX_TIM1_Init+0x150>)
 8000858:	4a44      	ldr	r2, [pc, #272]	; (800096c <MX_TIM1_Init+0x154>)
 800085a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4999;
 800085c:	4b42      	ldr	r3, [pc, #264]	; (8000968 <MX_TIM1_Init+0x150>)
 800085e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000862:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000864:	4b40      	ldr	r3, [pc, #256]	; (8000968 <MX_TIM1_Init+0x150>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800086a:	4b3f      	ldr	r3, [pc, #252]	; (8000968 <MX_TIM1_Init+0x150>)
 800086c:	22ff      	movs	r2, #255	; 0xff
 800086e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <MX_TIM1_Init+0x150>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000876:	4b3c      	ldr	r3, [pc, #240]	; (8000968 <MX_TIM1_Init+0x150>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <MX_TIM1_Init+0x150>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000882:	4839      	ldr	r0, [pc, #228]	; (8000968 <MX_TIM1_Init+0x150>)
 8000884:	f001 fbc8 	bl	8002018 <HAL_TIM_Base_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800088e:	f000 f9c3 	bl	8000c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000896:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000898:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800089c:	4619      	mov	r1, r3
 800089e:	4832      	ldr	r0, [pc, #200]	; (8000968 <MX_TIM1_Init+0x150>)
 80008a0:	f001 fe30 	bl	8002504 <HAL_TIM_ConfigClockSource>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008aa:	f000 f9b5 	bl	8000c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008ae:	482e      	ldr	r0, [pc, #184]	; (8000968 <MX_TIM1_Init+0x150>)
 80008b0:	f001 fc5c 	bl	800216c <HAL_TIM_PWM_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008ba:	f000 f9ad 	bl	8000c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ca:	4619      	mov	r1, r3
 80008cc:	4826      	ldr	r0, [pc, #152]	; (8000968 <MX_TIM1_Init+0x150>)
 80008ce:	f002 f9ad 	bl	8002c2c <HAL_TIMEx_MasterConfigSynchronization>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80008d8:	f000 f99e 	bl	8000c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008dc:	2360      	movs	r3, #96	; 0x60
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008e8:	2300      	movs	r3, #0
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	2200      	movs	r2, #0
 80008fe:	4619      	mov	r1, r3
 8000900:	4819      	ldr	r0, [pc, #100]	; (8000968 <MX_TIM1_Init+0x150>)
 8000902:	f001 fd3d 	bl	8002380 <HAL_TIM_PWM_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800090c:	f000 f984 	bl	8000c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000914:	2204      	movs	r2, #4
 8000916:	4619      	mov	r1, r3
 8000918:	4813      	ldr	r0, [pc, #76]	; (8000968 <MX_TIM1_Init+0x150>)
 800091a:	f001 fd31 	bl	8002380 <HAL_TIM_PWM_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000924:	f000 f978 	bl	8000c18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800093c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000940:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <MX_TIM1_Init+0x150>)
 800094c:	f002 f9dc 	bl	8002d08 <HAL_TIMEx_ConfigBreakDeadTime>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000956:	f000 f95f 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800095a:	4803      	ldr	r0, [pc, #12]	; (8000968 <MX_TIM1_Init+0x150>)
 800095c:	f000 f9c0 	bl	8000ce0 <HAL_TIM_MspPostInit>

}
 8000960:	bf00      	nop
 8000962:	3758      	adds	r7, #88	; 0x58
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000098 	.word	0x20000098
 800096c:	40010000 	.word	0x40010000

08000970 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	463b      	mov	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800098c:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <MX_TIM2_Init+0x94>)
 800098e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000992:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_TIM2_Init+0x94>)
 8000996:	2207      	movs	r2, #7
 8000998:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_TIM2_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_TIM2_Init+0x94>)
 80009a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80009a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_TIM2_Init+0x94>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_TIM2_Init+0x94>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009b4:	4813      	ldr	r0, [pc, #76]	; (8000a04 <MX_TIM2_Init+0x94>)
 80009b6:	f001 fb2f 	bl	8002018 <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009c0:	f000 f92a 	bl	8000c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	4619      	mov	r1, r3
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_TIM2_Init+0x94>)
 80009d2:	f001 fd97 	bl	8002504 <HAL_TIM_ConfigClockSource>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009dc:	f000 f91c 	bl	8000c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e8:	463b      	mov	r3, r7
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_TIM2_Init+0x94>)
 80009ee:	f002 f91d 	bl	8002c2c <HAL_TIMEx_MasterConfigSynchronization>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009f8:	f000 f90e 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000124 	.word	0x20000124

08000a08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <MX_USART2_UART_Init+0x50>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a40:	f002 f9b4 	bl	8002dac <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a4a:	f000 f8e5 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000016c 	.word	0x2000016c
 8000a58:	40004400 	.word	0x40004400

08000a5c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <MX_USART6_UART_Init+0x48>)
 8000a62:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <MX_USART6_UART_Init+0x4c>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 1500000;
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_USART6_UART_Init+0x48>)
 8000a68:	4a10      	ldr	r2, [pc, #64]	; (8000aac <MX_USART6_UART_Init+0x50>)
 8000a6a:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <MX_USART6_UART_Init+0x48>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_USART6_UART_Init+0x48>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <MX_USART6_UART_Init+0x48>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_USART6_UART_Init+0x48>)
 8000a80:	220c      	movs	r2, #12
 8000a82:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <MX_USART6_UART_Init+0x48>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_USART6_UART_Init+0x48>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_USART6_UART_Init+0x48>)
 8000a92:	f002 f98b 	bl	8002dac <HAL_UART_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 8000a9c:	f000 f8bc 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000e0 	.word	0x200000e0
 8000aa8:	40011400 	.word	0x40011400
 8000aac:	0016e360 	.word	0x0016e360

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b45      	ldr	r3, [pc, #276]	; (8000be0 <MX_GPIO_Init+0x130>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a44      	ldr	r2, [pc, #272]	; (8000be0 <MX_GPIO_Init+0x130>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b42      	ldr	r3, [pc, #264]	; (8000be0 <MX_GPIO_Init+0x130>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b3e      	ldr	r3, [pc, #248]	; (8000be0 <MX_GPIO_Init+0x130>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a3d      	ldr	r2, [pc, #244]	; (8000be0 <MX_GPIO_Init+0x130>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b3b      	ldr	r3, [pc, #236]	; (8000be0 <MX_GPIO_Init+0x130>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	4b37      	ldr	r3, [pc, #220]	; (8000be0 <MX_GPIO_Init+0x130>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a36      	ldr	r2, [pc, #216]	; (8000be0 <MX_GPIO_Init+0x130>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b34      	ldr	r3, [pc, #208]	; (8000be0 <MX_GPIO_Init+0x130>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <MX_GPIO_Init+0x130>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a2f      	ldr	r2, [pc, #188]	; (8000be0 <MX_GPIO_Init+0x130>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_GPIO_Init+0x130>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Step_Pin|DIR_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	21e0      	movs	r1, #224	; 0xe0
 8000b3a:	482a      	ldr	r0, [pc, #168]	; (8000be4 <MX_GPIO_Init+0x134>)
 8000b3c:	f000 fdc6 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2104      	movs	r1, #4
 8000b44:	4828      	ldr	r0, [pc, #160]	; (8000be8 <MX_GPIO_Init+0x138>)
 8000b46:	f000 fdc1 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b50:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4822      	ldr	r0, [pc, #136]	; (8000bec <MX_GPIO_Init+0x13c>)
 8000b62:	f000 fc17 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b66:	2301      	movs	r3, #1
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b6a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	481a      	ldr	r0, [pc, #104]	; (8000be4 <MX_GPIO_Init+0x134>)
 8000b7c:	f000 fc0a 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Step_Pin DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Step_Pin|DIR_Pin;
 8000b80:	23e0      	movs	r3, #224	; 0xe0
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	4813      	ldr	r0, [pc, #76]	; (8000be4 <MX_GPIO_Init+0x134>)
 8000b98:	f000 fbfc 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <MX_GPIO_Init+0x138>)
 8000bb4:	f000 fbee 	bl	8001394 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2006      	movs	r0, #6
 8000bbe:	f000 fbb2 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bc2:	2006      	movs	r0, #6
 8000bc4:	f000 fbcb 	bl	800135e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2028      	movs	r0, #40	; 0x28
 8000bce:	f000 fbaa 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd2:	2028      	movs	r0, #40	; 0x28
 8000bd4:	f000 fbc3 	bl	800135e <HAL_NVIC_EnableIRQ>

}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	; 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40020400 	.word	0x40020400
 8000bec:	40020800 	.word	0x40020800

08000bf0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	230a      	movs	r3, #10
 8000c02:	68b9      	ldr	r1, [r7, #8]
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <_write+0x24>)
 8000c06:	f002 f91e 	bl	8002e46 <HAL_UART_Transmit>
  return len;
 8000c0a:	687b      	ldr	r3, [r7, #4]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000016c 	.word	0x2000016c

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>
	...

08000c24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c38:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c62:	2007      	movs	r0, #7
 8000c64:	f000 fb54 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <HAL_TIM_Base_MspInit+0x64>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d10e      	bne.n	8000ca4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_TIM_Base_MspInit+0x68>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <HAL_TIM_Base_MspInit+0x68>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_TIM_Base_MspInit+0x68>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ca2:	e012      	b.n	8000cca <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cac:	d10d      	bne.n	8000cca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_TIM_Base_MspInit+0x68>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <HAL_TIM_Base_MspInit+0x68>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <HAL_TIM_Base_MspInit+0x68>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40010000 	.word	0x40010000
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <HAL_TIM_MspPostInit+0x68>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d11e      	bne.n	8000d40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_TIM_MspPostInit+0x6c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <HAL_TIM_MspPostInit+0x6c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_TIM_MspPostInit+0x6c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_TIM_MspPostInit+0x70>)
 8000d3c:	f000 fb2a 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3720      	adds	r7, #32
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40010000 	.word	0x40010000
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000

08000d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a32      	ldr	r2, [pc, #200]	; (8000e3c <HAL_UART_MspInit+0xe8>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12c      	bne.n	8000dd0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a30      	ldr	r2, [pc, #192]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	61bb      	str	r3, [r7, #24]
 8000d90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a29      	ldr	r2, [pc, #164]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dae:	230c      	movs	r3, #12
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481e      	ldr	r0, [pc, #120]	; (8000e44 <HAL_UART_MspInit+0xf0>)
 8000dca:	f000 fae3 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000dce:	e031      	b.n	8000e34 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <HAL_UART_MspInit+0xf4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d12c      	bne.n	8000e34 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000de4:	f043 0320 	orr.w	r3, r3, #32
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f003 0320 	and.w	r3, r3, #32
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e12:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e24:	2308      	movs	r3, #8
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <HAL_UART_MspInit+0xf0>)
 8000e30:	f000 fab0 	bl	8001394 <HAL_GPIO_Init>
}
 8000e34:	bf00      	nop
 8000e36:	3730      	adds	r7, #48	; 0x30
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40004400 	.word	0x40004400
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40011400 	.word	0x40011400

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <NMI_Handler+0x4>

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f000 f926 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f000 fc2b 	bl	8001700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}

08000eae <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000eb2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000eb6:	f000 fc23 	bl	8001700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	e00a      	b.n	8000ee6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ed0:	f3af 8000 	nop.w
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	60ba      	str	r2, [r7, #8]
 8000edc:	b2ca      	uxtb	r2, r1
 8000ede:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dbf0      	blt.n	8000ed0 <_read+0x12>
	}

return len;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	return -1;
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f20:	605a      	str	r2, [r3, #4]
	return 0;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_isatty>:

int _isatty(int file)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	return 1;
 8000f38:	2301      	movs	r3, #1
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
	return 0;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <_sbrk+0x5c>)
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <_sbrk+0x60>)
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <_sbrk+0x64>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <_sbrk+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d207      	bcs.n	8000fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f90:	f002 fa22 	bl	80033d8 <__errno>
 8000f94:	4603      	mov	r3, r0
 8000f96:	220c      	movs	r2, #12
 8000f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	e009      	b.n	8000fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <_sbrk+0x64>)
 8000fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20018000 	.word	0x20018000
 8000fc0:	00000400 	.word	0x00000400
 8000fc4:	2000008c 	.word	0x2000008c
 8000fc8:	200001c8 	.word	0x200001c8

08000fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001028 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ff6:	490e      	ldr	r1, [pc, #56]	; (8001030 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff8:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800100c:	4c0b      	ldr	r4, [pc, #44]	; (800103c <LoopFillZerobss+0x26>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800101a:	f7ff ffd7 	bl	8000fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101e:	f002 f9e1 	bl	80033e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001022:	f7ff fa9d 	bl	8000560 <main>
  bx  lr    
 8001026:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001028:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001034:	08003e8c 	.word	0x08003e8c
  ldr r2, =_sbss
 8001038:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800103c:	200001c8 	.word	0x200001c8

08001040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC_IRQHandler>
	...

08001044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <HAL_Init+0x40>)
 800104e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_Init+0x40>)
 800105a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <HAL_Init+0x40>)
 8001066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f000 f94f 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001072:	2000      	movs	r0, #0
 8001074:	f000 f808 	bl	8001088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001078:	f7ff fdd4 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023c00 	.word	0x40023c00

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x54>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x58>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f967 	bl	800137a <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 f92f 	bl	8001326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_InitTick+0x5c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000004 	.word	0x20000004

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008
 800110c:	200001b4 	.word	0x200001b4

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200001b4 	.word	0x200001b4

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_Delay+0x44>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800114e:	bf00      	nop
 8001150:	f7ff ffde 	bl	8001110 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800119c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4907      	ldr	r1, [pc, #28]	; (800120c <__NVIC_EnableIRQ+0x38>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012dc:	d301      	bcc.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e00f      	b.n	8001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <SysTick_Config+0x40>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	210f      	movs	r1, #15
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f7ff ff8e 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <SysTick_Config+0x40>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <SysTick_Config+0x40>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff29 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001338:	f7ff ff3e 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 800133c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff ff8e 	bl	8001264 <NVIC_EncodePriority>
 8001348:	4602      	mov	r2, r0
 800134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff5d 	bl	8001210 <__NVIC_SetPriority>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff31 	bl	80011d4 <__NVIC_EnableIRQ>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa2 	bl	80012cc <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	e159      	b.n	8001664 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b0:	2201      	movs	r2, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	f040 8148 	bne.w	800165e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d005      	beq.n	80013e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d130      	bne.n	8001448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141c:	2201      	movs	r2, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 0201 	and.w	r2, r3, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b03      	cmp	r3, #3
 8001452:	d017      	beq.n	8001484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d123      	bne.n	80014d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	08da      	lsrs	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3208      	adds	r2, #8
 8001498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3208      	adds	r2, #8
 80014d2:	69b9      	ldr	r1, [r7, #24]
 80014d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0203 	and.w	r2, r3, #3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80a2 	beq.w	800165e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b57      	ldr	r3, [pc, #348]	; (800167c <HAL_GPIO_Init+0x2e8>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a56      	ldr	r2, [pc, #344]	; (800167c <HAL_GPIO_Init+0x2e8>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b54      	ldr	r3, [pc, #336]	; (800167c <HAL_GPIO_Init+0x2e8>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001536:	4a52      	ldr	r2, [pc, #328]	; (8001680 <HAL_GPIO_Init+0x2ec>)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a49      	ldr	r2, [pc, #292]	; (8001684 <HAL_GPIO_Init+0x2f0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x202>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a48      	ldr	r2, [pc, #288]	; (8001688 <HAL_GPIO_Init+0x2f4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x1fe>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a47      	ldr	r2, [pc, #284]	; (800168c <HAL_GPIO_Init+0x2f8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x1fa>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a46      	ldr	r2, [pc, #280]	; (8001690 <HAL_GPIO_Init+0x2fc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x1f6>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a45      	ldr	r2, [pc, #276]	; (8001694 <HAL_GPIO_Init+0x300>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x1f2>
 8001582:	2304      	movs	r3, #4
 8001584:	e008      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001586:	2307      	movs	r3, #7
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x204>
 800158a:	2303      	movs	r3, #3
 800158c:	e004      	b.n	8001598 <HAL_GPIO_Init+0x204>
 800158e:	2302      	movs	r3, #2
 8001590:	e002      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001596:	2300      	movs	r3, #0
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	f002 0203 	and.w	r2, r2, #3
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	4093      	lsls	r3, r2
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a8:	4935      	ldr	r1, [pc, #212]	; (8001680 <HAL_GPIO_Init+0x2ec>)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_GPIO_Init+0x304>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015da:	4a2f      	ldr	r2, [pc, #188]	; (8001698 <HAL_GPIO_Init+0x304>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_GPIO_Init+0x304>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001604:	4a24      	ldr	r2, [pc, #144]	; (8001698 <HAL_GPIO_Init+0x304>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <HAL_GPIO_Init+0x304>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800162e:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_GPIO_Init+0x304>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_GPIO_Init+0x304>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001658:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_GPIO_Init+0x304>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3301      	adds	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2b0f      	cmp	r3, #15
 8001668:	f67f aea2 	bls.w	80013b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40013800 	.word	0x40013800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40013c00 	.word	0x40013c00

0800169c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e001      	b.n	80016be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016dc:	787b      	ldrb	r3, [r7, #1]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016e8:	e003      	b.n	80016f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	041a      	lsls	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	619a      	str	r2, [r3, #24]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	4013      	ands	r3, r2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fed4 	bl	80004cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40013c00 	.word	0x40013c00

08001730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e264      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d075      	beq.n	800183a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800174e:	4ba3      	ldr	r3, [pc, #652]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b04      	cmp	r3, #4
 8001758:	d00c      	beq.n	8001774 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175a:	4ba0      	ldr	r3, [pc, #640]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001762:	2b08      	cmp	r3, #8
 8001764:	d112      	bne.n	800178c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001766:	4b9d      	ldr	r3, [pc, #628]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001772:	d10b      	bne.n	800178c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	4b99      	ldr	r3, [pc, #612]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d05b      	beq.n	8001838 <HAL_RCC_OscConfig+0x108>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d157      	bne.n	8001838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e23f      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001794:	d106      	bne.n	80017a4 <HAL_RCC_OscConfig+0x74>
 8001796:	4b91      	ldr	r3, [pc, #580]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a90      	ldr	r2, [pc, #576]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e01d      	b.n	80017e0 <HAL_RCC_OscConfig+0xb0>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x98>
 80017ae:	4b8b      	ldr	r3, [pc, #556]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a8a      	ldr	r2, [pc, #552]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b88      	ldr	r3, [pc, #544]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a87      	ldr	r2, [pc, #540]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e00b      	b.n	80017e0 <HAL_RCC_OscConfig+0xb0>
 80017c8:	4b84      	ldr	r3, [pc, #528]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a83      	ldr	r2, [pc, #524]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b81      	ldr	r3, [pc, #516]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a80      	ldr	r2, [pc, #512]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d013      	beq.n	8001810 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fc92 	bl	8001110 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fc8e 	bl	8001110 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e204      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	4b76      	ldr	r3, [pc, #472]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0xc0>
 800180e:	e014      	b.n	800183a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fc7e 	bl	8001110 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff fc7a 	bl	8001110 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	; 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e1f0      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182a:	4b6c      	ldr	r3, [pc, #432]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0xe8>
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d063      	beq.n	800190e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001846:	4b65      	ldr	r3, [pc, #404]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00b      	beq.n	800186a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001852:	4b62      	ldr	r3, [pc, #392]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800185a:	2b08      	cmp	r3, #8
 800185c:	d11c      	bne.n	8001898 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800185e:	4b5f      	ldr	r3, [pc, #380]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d116      	bne.n	8001898 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	4b5c      	ldr	r3, [pc, #368]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d005      	beq.n	8001882 <HAL_RCC_OscConfig+0x152>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d001      	beq.n	8001882 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e1c4      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001882:	4b56      	ldr	r3, [pc, #344]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4952      	ldr	r1, [pc, #328]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001896:	e03a      	b.n	800190e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d020      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a0:	4b4f      	ldr	r3, [pc, #316]	; (80019e0 <HAL_RCC_OscConfig+0x2b0>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a6:	f7ff fc33 	bl	8001110 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ae:	f7ff fc2f 	bl	8001110 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e1a5      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	4b46      	ldr	r3, [pc, #280]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018cc:	4b43      	ldr	r3, [pc, #268]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4940      	ldr	r1, [pc, #256]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	600b      	str	r3, [r1, #0]
 80018e0:	e015      	b.n	800190e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e2:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <HAL_RCC_OscConfig+0x2b0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff fc12 	bl	8001110 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f0:	f7ff fc0e 	bl	8001110 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e184      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	4b36      	ldr	r3, [pc, #216]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d030      	beq.n	800197c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d016      	beq.n	8001950 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001922:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_RCC_OscConfig+0x2b4>)
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff fbf2 	bl	8001110 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001930:	f7ff fbee 	bl	8001110 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e164      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x200>
 800194e:	e015      	b.n	800197c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_RCC_OscConfig+0x2b4>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001956:	f7ff fbdb 	bl	8001110 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800195e:	f7ff fbd7 	bl	8001110 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e14d      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80a0 	beq.w	8001aca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10f      	bne.n	80019ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_OscConfig+0x2b8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d121      	bne.n	8001a0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_RCC_OscConfig+0x2b8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_RCC_OscConfig+0x2b8>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d2:	f7ff fb9d 	bl	8001110 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	e011      	b.n	80019fe <HAL_RCC_OscConfig+0x2ce>
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	42470000 	.word	0x42470000
 80019e4:	42470e80 	.word	0x42470e80
 80019e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ec:	f7ff fb90 	bl	8001110 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e106      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fe:	4b85      	ldr	r3, [pc, #532]	; (8001c14 <HAL_RCC_OscConfig+0x4e4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d106      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2f0>
 8001a12:	4b81      	ldr	r3, [pc, #516]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a16:	4a80      	ldr	r2, [pc, #512]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1e:	e01c      	b.n	8001a5a <HAL_RCC_OscConfig+0x32a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d10c      	bne.n	8001a42 <HAL_RCC_OscConfig+0x312>
 8001a28:	4b7b      	ldr	r3, [pc, #492]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2c:	4a7a      	ldr	r2, [pc, #488]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6713      	str	r3, [r2, #112]	; 0x70
 8001a34:	4b78      	ldr	r3, [pc, #480]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a38:	4a77      	ldr	r2, [pc, #476]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a40:	e00b      	b.n	8001a5a <HAL_RCC_OscConfig+0x32a>
 8001a42:	4b75      	ldr	r3, [pc, #468]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a46:	4a74      	ldr	r2, [pc, #464]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4e:	4b72      	ldr	r3, [pc, #456]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	4a71      	ldr	r2, [pc, #452]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d015      	beq.n	8001a8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff fb55 	bl	8001110 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fb51 	bl	8001110 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0c5      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	4b65      	ldr	r3, [pc, #404]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ee      	beq.n	8001a6a <HAL_RCC_OscConfig+0x33a>
 8001a8c:	e014      	b.n	8001ab8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fb3f 	bl	8001110 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff fb3b 	bl	8001110 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0af      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aac:	4b5a      	ldr	r3, [pc, #360]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d105      	bne.n	8001aca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abe:	4b56      	ldr	r3, [pc, #344]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a55      	ldr	r2, [pc, #340]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 809b 	beq.w	8001c0a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ad4:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d05c      	beq.n	8001b9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d141      	bne.n	8001b6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <HAL_RCC_OscConfig+0x4ec>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff fb0f 	bl	8001110 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff fb0b 	bl	8001110 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e081      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b08:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	019b      	lsls	r3, r3, #6
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	085b      	lsrs	r3, r3, #1
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	041b      	lsls	r3, r3, #16
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	061b      	lsls	r3, r3, #24
 8001b38:	4937      	ldr	r1, [pc, #220]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <HAL_RCC_OscConfig+0x4ec>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fae4 	bl	8001110 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff fae0 	bl	8001110 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e056      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x41c>
 8001b6a:	e04e      	b.n	8001c0a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <HAL_RCC_OscConfig+0x4ec>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff facd 	bl	8001110 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff fac9 	bl	8001110 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e03f      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x44a>
 8001b98:	e037      	b.n	8001c0a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e032      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d028      	beq.n	8001c06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d121      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d11a      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bdc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d111      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40007000 	.word	0x40007000
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	42470060 	.word	0x42470060

08001c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0cc      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c34:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d90c      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b65      	ldr	r3, [pc, #404]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b63      	ldr	r3, [pc, #396]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0b8      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c8c:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a52      	ldr	r2, [pc, #328]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	494d      	ldr	r1, [pc, #308]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d044      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d119      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e07f      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d003      	beq.n	8001cde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cde:	4b3f      	ldr	r3, [pc, #252]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e06f      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cee:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e067      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cfe:	4b37      	ldr	r3, [pc, #220]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f023 0203 	bic.w	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4934      	ldr	r1, [pc, #208]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d10:	f7ff f9fe 	bl	8001110 <HAL_GetTick>
 8001d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d18:	f7ff f9fa 	bl	8001110 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e04f      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2e:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 020c 	and.w	r2, r3, #12
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d1eb      	bne.n	8001d18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d20c      	bcs.n	8001d68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e032      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4916      	ldr	r1, [pc, #88]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	490e      	ldr	r1, [pc, #56]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001da6:	f000 f821 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	490a      	ldr	r1, [pc, #40]	; (8001de0 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	5ccb      	ldrb	r3, [r1, r3]
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f95e 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023c00 	.word	0x40023c00
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	08003e00 	.word	0x08003e00
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e04:	4b67      	ldr	r3, [pc, #412]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d00d      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x40>
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	f200 80bd 	bhi.w	8001f90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x34>
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d003      	beq.n	8001e26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e1e:	e0b7      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e20:	4b61      	ldr	r3, [pc, #388]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e22:	60bb      	str	r3, [r7, #8]
       break;
 8001e24:	e0b7      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e26:	4b61      	ldr	r3, [pc, #388]	; (8001fac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001e28:	60bb      	str	r3, [r7, #8]
      break;
 8001e2a:	e0b4      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e2c:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e36:	4b5b      	ldr	r3, [pc, #364]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d04d      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e42:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	099b      	lsrs	r3, r3, #6
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e52:	f04f 0100 	mov.w	r1, #0
 8001e56:	ea02 0800 	and.w	r8, r2, r0
 8001e5a:	ea03 0901 	and.w	r9, r3, r1
 8001e5e:	4640      	mov	r0, r8
 8001e60:	4649      	mov	r1, r9
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	014b      	lsls	r3, r1, #5
 8001e6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e70:	0142      	lsls	r2, r0, #5
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	ebb0 0008 	subs.w	r0, r0, r8
 8001e7a:	eb61 0109 	sbc.w	r1, r1, r9
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	018b      	lsls	r3, r1, #6
 8001e88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e8c:	0182      	lsls	r2, r0, #6
 8001e8e:	1a12      	subs	r2, r2, r0
 8001e90:	eb63 0301 	sbc.w	r3, r3, r1
 8001e94:	f04f 0000 	mov.w	r0, #0
 8001e98:	f04f 0100 	mov.w	r1, #0
 8001e9c:	00d9      	lsls	r1, r3, #3
 8001e9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ea2:	00d0      	lsls	r0, r2, #3
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	eb12 0208 	adds.w	r2, r2, r8
 8001eac:	eb43 0309 	adc.w	r3, r3, r9
 8001eb0:	f04f 0000 	mov.w	r0, #0
 8001eb4:	f04f 0100 	mov.w	r1, #0
 8001eb8:	0259      	lsls	r1, r3, #9
 8001eba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ebe:	0250      	lsls	r0, r2, #9
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	f7fe f980 	bl	80001d4 <__aeabi_uldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4613      	mov	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	e04a      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ede:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	099b      	lsrs	r3, r3, #6
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001eee:	f04f 0100 	mov.w	r1, #0
 8001ef2:	ea02 0400 	and.w	r4, r2, r0
 8001ef6:	ea03 0501 	and.w	r5, r3, r1
 8001efa:	4620      	mov	r0, r4
 8001efc:	4629      	mov	r1, r5
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	014b      	lsls	r3, r1, #5
 8001f08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f0c:	0142      	lsls	r2, r0, #5
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	1b00      	subs	r0, r0, r4
 8001f14:	eb61 0105 	sbc.w	r1, r1, r5
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	018b      	lsls	r3, r1, #6
 8001f22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f26:	0182      	lsls	r2, r0, #6
 8001f28:	1a12      	subs	r2, r2, r0
 8001f2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f2e:	f04f 0000 	mov.w	r0, #0
 8001f32:	f04f 0100 	mov.w	r1, #0
 8001f36:	00d9      	lsls	r1, r3, #3
 8001f38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f3c:	00d0      	lsls	r0, r2, #3
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	1912      	adds	r2, r2, r4
 8001f44:	eb45 0303 	adc.w	r3, r5, r3
 8001f48:	f04f 0000 	mov.w	r0, #0
 8001f4c:	f04f 0100 	mov.w	r1, #0
 8001f50:	0299      	lsls	r1, r3, #10
 8001f52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f56:	0290      	lsls	r0, r2, #10
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	461a      	mov	r2, r3
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	f7fe f934 	bl	80001d4 <__aeabi_uldivmod>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4613      	mov	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8c:	60bb      	str	r3, [r7, #8]
      break;
 8001f8e:	e002      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f92:	60bb      	str	r3, [r7, #8]
      break;
 8001f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f96:	68bb      	ldr	r3, [r7, #8]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	00f42400 	.word	0x00f42400
 8001fac:	007a1200 	.word	0x007a1200

08001fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000000 	.word	0x20000000

08001fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fcc:	f7ff fff0 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	0a9b      	lsrs	r3, r3, #10
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4903      	ldr	r1, [pc, #12]	; (8001fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	08003e10 	.word	0x08003e10

08001ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ff4:	f7ff ffdc 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0b5b      	lsrs	r3, r3, #13
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4903      	ldr	r1, [pc, #12]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	08003e10 	.word	0x08003e10

08002018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e041      	b.n	80020ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fe18 	bl	8000c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3304      	adds	r3, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f000 fb1c 	bl	8002694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d001      	beq.n	80020d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e03c      	b.n	800214a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_TIM_Base_Start+0xa0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d018      	beq.n	8002114 <HAL_TIM_Base_Start+0x5c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ea:	d013      	beq.n	8002114 <HAL_TIM_Base_Start+0x5c>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1a      	ldr	r2, [pc, #104]	; (800215c <HAL_TIM_Base_Start+0xa4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00e      	beq.n	8002114 <HAL_TIM_Base_Start+0x5c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a19      	ldr	r2, [pc, #100]	; (8002160 <HAL_TIM_Base_Start+0xa8>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d009      	beq.n	8002114 <HAL_TIM_Base_Start+0x5c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_TIM_Base_Start+0xac>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d004      	beq.n	8002114 <HAL_TIM_Base_Start+0x5c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a16      	ldr	r2, [pc, #88]	; (8002168 <HAL_TIM_Base_Start+0xb0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d111      	bne.n	8002138 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b06      	cmp	r3, #6
 8002124:	d010      	beq.n	8002148 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0201 	orr.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002136:	e007      	b.n	8002148 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40010000 	.word	0x40010000
 800215c:	40000400 	.word	0x40000400
 8002160:	40000800 	.word	0x40000800
 8002164:	40000c00 	.word	0x40000c00
 8002168:	40014000 	.word	0x40014000

0800216c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e041      	b.n	8002202 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f839 	bl	800220a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3304      	adds	r3, #4
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f000 fa72 	bl	8002694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d109      	bne.n	8002244 <HAL_TIM_PWM_Start+0x24>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	bf14      	ite	ne
 800223c:	2301      	movne	r3, #1
 800223e:	2300      	moveq	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	e022      	b.n	800228a <HAL_TIM_PWM_Start+0x6a>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	2b04      	cmp	r3, #4
 8002248:	d109      	bne.n	800225e <HAL_TIM_PWM_Start+0x3e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b01      	cmp	r3, #1
 8002254:	bf14      	ite	ne
 8002256:	2301      	movne	r3, #1
 8002258:	2300      	moveq	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	e015      	b.n	800228a <HAL_TIM_PWM_Start+0x6a>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d109      	bne.n	8002278 <HAL_TIM_PWM_Start+0x58>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	e008      	b.n	800228a <HAL_TIM_PWM_Start+0x6a>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	bf14      	ite	ne
 8002284:	2301      	movne	r3, #1
 8002286:	2300      	moveq	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e068      	b.n	8002364 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d104      	bne.n	80022a2 <HAL_TIM_PWM_Start+0x82>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022a0:	e013      	b.n	80022ca <HAL_TIM_PWM_Start+0xaa>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d104      	bne.n	80022b2 <HAL_TIM_PWM_Start+0x92>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022b0:	e00b      	b.n	80022ca <HAL_TIM_PWM_Start+0xaa>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d104      	bne.n	80022c2 <HAL_TIM_PWM_Start+0xa2>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022c0:	e003      	b.n	80022ca <HAL_TIM_PWM_Start+0xaa>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2201      	movs	r2, #1
 80022d0:	6839      	ldr	r1, [r7, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 fc84 	bl	8002be0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a23      	ldr	r2, [pc, #140]	; (800236c <HAL_TIM_PWM_Start+0x14c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d107      	bne.n	80022f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1d      	ldr	r2, [pc, #116]	; (800236c <HAL_TIM_PWM_Start+0x14c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d018      	beq.n	800232e <HAL_TIM_PWM_Start+0x10e>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002304:	d013      	beq.n	800232e <HAL_TIM_PWM_Start+0x10e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a19      	ldr	r2, [pc, #100]	; (8002370 <HAL_TIM_PWM_Start+0x150>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d00e      	beq.n	800232e <HAL_TIM_PWM_Start+0x10e>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a17      	ldr	r2, [pc, #92]	; (8002374 <HAL_TIM_PWM_Start+0x154>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d009      	beq.n	800232e <HAL_TIM_PWM_Start+0x10e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a16      	ldr	r2, [pc, #88]	; (8002378 <HAL_TIM_PWM_Start+0x158>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d004      	beq.n	800232e <HAL_TIM_PWM_Start+0x10e>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <HAL_TIM_PWM_Start+0x15c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d111      	bne.n	8002352 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b06      	cmp	r3, #6
 800233e:	d010      	beq.n	8002362 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002350:	e007      	b.n	8002362 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 0201 	orr.w	r2, r2, #1
 8002360:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40010000 	.word	0x40010000
 8002370:	40000400 	.word	0x40000400
 8002374:	40000800 	.word	0x40000800
 8002378:	40000c00 	.word	0x40000c00
 800237c:	40014000 	.word	0x40014000

08002380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800239a:	2302      	movs	r3, #2
 800239c:	e0ae      	b.n	80024fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b0c      	cmp	r3, #12
 80023aa:	f200 809f 	bhi.w	80024ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80023ae:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b4:	080023e9 	.word	0x080023e9
 80023b8:	080024ed 	.word	0x080024ed
 80023bc:	080024ed 	.word	0x080024ed
 80023c0:	080024ed 	.word	0x080024ed
 80023c4:	08002429 	.word	0x08002429
 80023c8:	080024ed 	.word	0x080024ed
 80023cc:	080024ed 	.word	0x080024ed
 80023d0:	080024ed 	.word	0x080024ed
 80023d4:	0800246b 	.word	0x0800246b
 80023d8:	080024ed 	.word	0x080024ed
 80023dc:	080024ed 	.word	0x080024ed
 80023e0:	080024ed 	.word	0x080024ed
 80023e4:	080024ab 	.word	0x080024ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f9d0 	bl	8002794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0208 	orr.w	r2, r2, #8
 8002402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0204 	bic.w	r2, r2, #4
 8002412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6999      	ldr	r1, [r3, #24]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	619a      	str	r2, [r3, #24]
      break;
 8002426:	e064      	b.n	80024f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fa16 	bl	8002860 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699a      	ldr	r2, [r3, #24]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6999      	ldr	r1, [r3, #24]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	021a      	lsls	r2, r3, #8
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	619a      	str	r2, [r3, #24]
      break;
 8002468:	e043      	b.n	80024f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fa61 	bl	8002938 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0208 	orr.w	r2, r2, #8
 8002484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	69da      	ldr	r2, [r3, #28]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0204 	bic.w	r2, r2, #4
 8002494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69d9      	ldr	r1, [r3, #28]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	61da      	str	r2, [r3, #28]
      break;
 80024a8:	e023      	b.n	80024f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68b9      	ldr	r1, [r7, #8]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 faab 	bl	8002a0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69da      	ldr	r2, [r3, #28]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	69d9      	ldr	r1, [r3, #28]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	021a      	lsls	r2, r3, #8
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	61da      	str	r2, [r3, #28]
      break;
 80024ea:	e002      	b.n	80024f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	75fb      	strb	r3, [r7, #23]
      break;
 80024f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_TIM_ConfigClockSource+0x1c>
 800251c:	2302      	movs	r3, #2
 800251e:	e0b4      	b.n	800268a <HAL_TIM_ConfigClockSource+0x186>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800253e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002558:	d03e      	beq.n	80025d8 <HAL_TIM_ConfigClockSource+0xd4>
 800255a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800255e:	f200 8087 	bhi.w	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002566:	f000 8086 	beq.w	8002676 <HAL_TIM_ConfigClockSource+0x172>
 800256a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256e:	d87f      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002570:	2b70      	cmp	r3, #112	; 0x70
 8002572:	d01a      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0xa6>
 8002574:	2b70      	cmp	r3, #112	; 0x70
 8002576:	d87b      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002578:	2b60      	cmp	r3, #96	; 0x60
 800257a:	d050      	beq.n	800261e <HAL_TIM_ConfigClockSource+0x11a>
 800257c:	2b60      	cmp	r3, #96	; 0x60
 800257e:	d877      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002580:	2b50      	cmp	r3, #80	; 0x50
 8002582:	d03c      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0xfa>
 8002584:	2b50      	cmp	r3, #80	; 0x50
 8002586:	d873      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002588:	2b40      	cmp	r3, #64	; 0x40
 800258a:	d058      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x13a>
 800258c:	2b40      	cmp	r3, #64	; 0x40
 800258e:	d86f      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002590:	2b30      	cmp	r3, #48	; 0x30
 8002592:	d064      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x15a>
 8002594:	2b30      	cmp	r3, #48	; 0x30
 8002596:	d86b      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002598:	2b20      	cmp	r3, #32
 800259a:	d060      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x15a>
 800259c:	2b20      	cmp	r3, #32
 800259e:	d867      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d05c      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x15a>
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d05a      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x15a>
 80025a8:	e062      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6899      	ldr	r1, [r3, #8]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f000 faf1 	bl	8002ba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	609a      	str	r2, [r3, #8]
      break;
 80025d6:	e04f      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6899      	ldr	r1, [r3, #8]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f000 fada 	bl	8002ba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025fa:	609a      	str	r2, [r3, #8]
      break;
 80025fc:	e03c      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6859      	ldr	r1, [r3, #4]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	461a      	mov	r2, r3
 800260c:	f000 fa4e 	bl	8002aac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2150      	movs	r1, #80	; 0x50
 8002616:	4618      	mov	r0, r3
 8002618:	f000 faa7 	bl	8002b6a <TIM_ITRx_SetConfig>
      break;
 800261c:	e02c      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6859      	ldr	r1, [r3, #4]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	461a      	mov	r2, r3
 800262c:	f000 fa6d 	bl	8002b0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2160      	movs	r1, #96	; 0x60
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fa97 	bl	8002b6a <TIM_ITRx_SetConfig>
      break;
 800263c:	e01c      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	461a      	mov	r2, r3
 800264c:	f000 fa2e 	bl	8002aac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2140      	movs	r1, #64	; 0x40
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fa87 	bl	8002b6a <TIM_ITRx_SetConfig>
      break;
 800265c:	e00c      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4619      	mov	r1, r3
 8002668:	4610      	mov	r0, r2
 800266a:	f000 fa7e 	bl	8002b6a <TIM_ITRx_SetConfig>
      break;
 800266e:	e003      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
      break;
 8002674:	e000      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002676:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a34      	ldr	r2, [pc, #208]	; (8002778 <TIM_Base_SetConfig+0xe4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00f      	beq.n	80026cc <TIM_Base_SetConfig+0x38>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b2:	d00b      	beq.n	80026cc <TIM_Base_SetConfig+0x38>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a31      	ldr	r2, [pc, #196]	; (800277c <TIM_Base_SetConfig+0xe8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d007      	beq.n	80026cc <TIM_Base_SetConfig+0x38>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a30      	ldr	r2, [pc, #192]	; (8002780 <TIM_Base_SetConfig+0xec>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d003      	beq.n	80026cc <TIM_Base_SetConfig+0x38>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a2f      	ldr	r2, [pc, #188]	; (8002784 <TIM_Base_SetConfig+0xf0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d108      	bne.n	80026de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a25      	ldr	r2, [pc, #148]	; (8002778 <TIM_Base_SetConfig+0xe4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01b      	beq.n	800271e <TIM_Base_SetConfig+0x8a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ec:	d017      	beq.n	800271e <TIM_Base_SetConfig+0x8a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a22      	ldr	r2, [pc, #136]	; (800277c <TIM_Base_SetConfig+0xe8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <TIM_Base_SetConfig+0x8a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a21      	ldr	r2, [pc, #132]	; (8002780 <TIM_Base_SetConfig+0xec>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00f      	beq.n	800271e <TIM_Base_SetConfig+0x8a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a20      	ldr	r2, [pc, #128]	; (8002784 <TIM_Base_SetConfig+0xf0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00b      	beq.n	800271e <TIM_Base_SetConfig+0x8a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <TIM_Base_SetConfig+0xf4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <TIM_Base_SetConfig+0x8a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a1e      	ldr	r2, [pc, #120]	; (800278c <TIM_Base_SetConfig+0xf8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d003      	beq.n	800271e <TIM_Base_SetConfig+0x8a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <TIM_Base_SetConfig+0xfc>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d108      	bne.n	8002730 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a08      	ldr	r2, [pc, #32]	; (8002778 <TIM_Base_SetConfig+0xe4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d103      	bne.n	8002764 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	615a      	str	r2, [r3, #20]
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40010000 	.word	0x40010000
 800277c:	40000400 	.word	0x40000400
 8002780:	40000800 	.word	0x40000800
 8002784:	40000c00 	.word	0x40000c00
 8002788:	40014000 	.word	0x40014000
 800278c:	40014400 	.word	0x40014400
 8002790:	40014800 	.word	0x40014800

08002794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f023 0201 	bic.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f023 0303 	bic.w	r3, r3, #3
 80027ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f023 0302 	bic.w	r3, r3, #2
 80027dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a1c      	ldr	r2, [pc, #112]	; (800285c <TIM_OC1_SetConfig+0xc8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d10c      	bne.n	800280a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f023 0308 	bic.w	r3, r3, #8
 80027f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a13      	ldr	r2, [pc, #76]	; (800285c <TIM_OC1_SetConfig+0xc8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d111      	bne.n	8002836 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	621a      	str	r2, [r3, #32]
}
 8002850:	bf00      	nop
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	40010000 	.word	0x40010000

08002860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0210 	bic.w	r2, r3, #16
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800288e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f023 0320 	bic.w	r3, r3, #32
 80028aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <TIM_OC2_SetConfig+0xd4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d10d      	bne.n	80028dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a15      	ldr	r2, [pc, #84]	; (8002934 <TIM_OC2_SetConfig+0xd4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d113      	bne.n	800290c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	621a      	str	r2, [r3, #32]
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40010000 	.word	0x40010000

08002938 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <TIM_OC3_SetConfig+0xd0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d10d      	bne.n	80029b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800299c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <TIM_OC3_SetConfig+0xd0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d113      	bne.n	80029e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	621a      	str	r2, [r3, #32]
}
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	40010000 	.word	0x40010000

08002a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	021b      	lsls	r3, r3, #8
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	031b      	lsls	r3, r3, #12
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <TIM_OC4_SetConfig+0x9c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d109      	bne.n	8002a80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	019b      	lsls	r3, r3, #6
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	621a      	str	r2, [r3, #32]
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40010000 	.word	0x40010000

08002aac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f023 0201 	bic.w	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f023 030a 	bic.w	r3, r3, #10
 8002ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	621a      	str	r2, [r3, #32]
}
 8002afe:	bf00      	nop
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b087      	sub	sp, #28
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	f023 0210 	bic.w	r2, r3, #16
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	031b      	lsls	r3, r3, #12
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	621a      	str	r2, [r3, #32]
}
 8002b5e:	bf00      	nop
 8002b60:	371c      	adds	r7, #28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f043 0307 	orr.w	r3, r3, #7
 8002b8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	609a      	str	r2, [r3, #8]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	021a      	lsls	r2, r3, #8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	609a      	str	r2, [r3, #8]
}
 8002bd4:	bf00      	nop
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f003 031f 	and.w	r3, r3, #31
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a1a      	ldr	r2, [r3, #32]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	401a      	ands	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a1a      	ldr	r2, [r3, #32]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f003 031f 	and.w	r3, r3, #31
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	621a      	str	r2, [r3, #32]
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e050      	b.n	8002ce6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1c      	ldr	r2, [pc, #112]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d018      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c90:	d013      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00e      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a16      	ldr	r2, [pc, #88]	; (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d009      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d004      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a13      	ldr	r2, [pc, #76]	; (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40000800 	.word	0x40000800
 8002d00:	40000c00 	.word	0x40000c00
 8002d04:	40014000 	.word	0x40014000

08002d08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e03d      	b.n	8002da0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e03f      	b.n	8002e3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fd ffbe 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2224      	movs	r2, #36	; 0x24
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f929 	bl	8003048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b08a      	sub	sp, #40	; 0x28
 8002e4a:	af02      	add	r7, sp, #8
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d17c      	bne.n	8002f60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <HAL_UART_Transmit+0x2c>
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e075      	b.n	8002f62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_UART_Transmit+0x3e>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e06e      	b.n	8002f62 <HAL_UART_Transmit+0x11c>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2221      	movs	r2, #33	; 0x21
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e9a:	f7fe f939 	bl	8001110 <HAL_GetTick>
 8002e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	88fa      	ldrh	r2, [r7, #6]
 8002ea4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	88fa      	ldrh	r2, [r7, #6]
 8002eaa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb4:	d108      	bne.n	8002ec8 <HAL_UART_Transmit+0x82>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d104      	bne.n	8002ec8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	e003      	b.n	8002ed0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ed8:	e02a      	b.n	8002f30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2180      	movs	r1, #128	; 0x80
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f840 	bl	8002f6a <UART_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e036      	b.n	8002f62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10b      	bne.n	8002f12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	e007      	b.n	8002f22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1cf      	bne.n	8002eda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2200      	movs	r2, #0
 8002f42:	2140      	movs	r1, #64	; 0x40
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f810 	bl	8002f6a <UART_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e006      	b.n	8002f62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e000      	b.n	8002f62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f60:	2302      	movs	r3, #2
  }
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3720      	adds	r7, #32
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b090      	sub	sp, #64	; 0x40
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	4613      	mov	r3, r2
 8002f78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f7a:	e050      	b.n	800301e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f82:	d04c      	beq.n	800301e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x30>
 8002f8a:	f7fe f8c1 	bl	8001110 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d241      	bcs.n	800301e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	330c      	adds	r3, #12
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	e853 3f00 	ldrex	r3, [r3]
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	330c      	adds	r3, #12
 8002fb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fba:	637a      	str	r2, [r7, #52]	; 0x34
 8002fbc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fc2:	e841 2300 	strex	r3, r2, [r1]
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1e5      	bne.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3314      	adds	r3, #20
 8002fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	e853 3f00 	ldrex	r3, [r3]
 8002fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3314      	adds	r3, #20
 8002fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fee:	623a      	str	r2, [r7, #32]
 8002ff0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff2:	69f9      	ldr	r1, [r7, #28]
 8002ff4:	6a3a      	ldr	r2, [r7, #32]
 8002ff6:	e841 2300 	strex	r3, r2, [r1]
 8002ffa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1e5      	bne.n	8002fce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e00f      	b.n	800303e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4013      	ands	r3, r2
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	429a      	cmp	r2, r3
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	429a      	cmp	r2, r3
 800303a:	d09f      	beq.n	8002f7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3740      	adds	r7, #64	; 0x40
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800304c:	b09f      	sub	sp, #124	; 0x7c
 800304e:	af00      	add	r7, sp, #0
 8003050:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800305c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305e:	68d9      	ldr	r1, [r3, #12]
 8003060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	ea40 0301 	orr.w	r3, r0, r1
 8003068:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800306a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	431a      	orrs	r2, r3
 8003074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	431a      	orrs	r2, r3
 800307a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	4313      	orrs	r3, r2
 8003080:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800308c:	f021 010c 	bic.w	r1, r1, #12
 8003090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003096:	430b      	orrs	r3, r1
 8003098:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800309a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a6:	6999      	ldr	r1, [r3, #24]
 80030a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	ea40 0301 	orr.w	r3, r0, r1
 80030b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4bc5      	ldr	r3, [pc, #788]	; (80033cc <UART_SetConfig+0x384>)
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d004      	beq.n	80030c6 <UART_SetConfig+0x7e>
 80030bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4bc3      	ldr	r3, [pc, #780]	; (80033d0 <UART_SetConfig+0x388>)
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d103      	bne.n	80030ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030c6:	f7fe ff93 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 80030ca:	6778      	str	r0, [r7, #116]	; 0x74
 80030cc:	e002      	b.n	80030d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030ce:	f7fe ff7b 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 80030d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030dc:	f040 80b6 	bne.w	800324c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030e2:	461c      	mov	r4, r3
 80030e4:	f04f 0500 	mov.w	r5, #0
 80030e8:	4622      	mov	r2, r4
 80030ea:	462b      	mov	r3, r5
 80030ec:	1891      	adds	r1, r2, r2
 80030ee:	6439      	str	r1, [r7, #64]	; 0x40
 80030f0:	415b      	adcs	r3, r3
 80030f2:	647b      	str	r3, [r7, #68]	; 0x44
 80030f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030f8:	1912      	adds	r2, r2, r4
 80030fa:	eb45 0303 	adc.w	r3, r5, r3
 80030fe:	f04f 0000 	mov.w	r0, #0
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	00d9      	lsls	r1, r3, #3
 8003108:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800310c:	00d0      	lsls	r0, r2, #3
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	1911      	adds	r1, r2, r4
 8003114:	6639      	str	r1, [r7, #96]	; 0x60
 8003116:	416b      	adcs	r3, r5
 8003118:	667b      	str	r3, [r7, #100]	; 0x64
 800311a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	461a      	mov	r2, r3
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	1891      	adds	r1, r2, r2
 8003126:	63b9      	str	r1, [r7, #56]	; 0x38
 8003128:	415b      	adcs	r3, r3
 800312a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800312c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003130:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003134:	f7fd f84e 	bl	80001d4 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4ba5      	ldr	r3, [pc, #660]	; (80033d4 <UART_SetConfig+0x38c>)
 800313e:	fba3 2302 	umull	r2, r3, r3, r2
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	011e      	lsls	r6, r3, #4
 8003146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003148:	461c      	mov	r4, r3
 800314a:	f04f 0500 	mov.w	r5, #0
 800314e:	4622      	mov	r2, r4
 8003150:	462b      	mov	r3, r5
 8003152:	1891      	adds	r1, r2, r2
 8003154:	6339      	str	r1, [r7, #48]	; 0x30
 8003156:	415b      	adcs	r3, r3
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
 800315a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800315e:	1912      	adds	r2, r2, r4
 8003160:	eb45 0303 	adc.w	r3, r5, r3
 8003164:	f04f 0000 	mov.w	r0, #0
 8003168:	f04f 0100 	mov.w	r1, #0
 800316c:	00d9      	lsls	r1, r3, #3
 800316e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003172:	00d0      	lsls	r0, r2, #3
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	1911      	adds	r1, r2, r4
 800317a:	65b9      	str	r1, [r7, #88]	; 0x58
 800317c:	416b      	adcs	r3, r5
 800317e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	461a      	mov	r2, r3
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	1891      	adds	r1, r2, r2
 800318c:	62b9      	str	r1, [r7, #40]	; 0x28
 800318e:	415b      	adcs	r3, r3
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003192:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003196:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800319a:	f7fd f81b 	bl	80001d4 <__aeabi_uldivmod>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4b8c      	ldr	r3, [pc, #560]	; (80033d4 <UART_SetConfig+0x38c>)
 80031a4:	fba3 1302 	umull	r1, r3, r3, r2
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	2164      	movs	r1, #100	; 0x64
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	3332      	adds	r3, #50	; 0x32
 80031b6:	4a87      	ldr	r2, [pc, #540]	; (80033d4 <UART_SetConfig+0x38c>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031c4:	441e      	add	r6, r3
 80031c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031c8:	4618      	mov	r0, r3
 80031ca:	f04f 0100 	mov.w	r1, #0
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	1894      	adds	r4, r2, r2
 80031d4:	623c      	str	r4, [r7, #32]
 80031d6:	415b      	adcs	r3, r3
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
 80031da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031de:	1812      	adds	r2, r2, r0
 80031e0:	eb41 0303 	adc.w	r3, r1, r3
 80031e4:	f04f 0400 	mov.w	r4, #0
 80031e8:	f04f 0500 	mov.w	r5, #0
 80031ec:	00dd      	lsls	r5, r3, #3
 80031ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031f2:	00d4      	lsls	r4, r2, #3
 80031f4:	4622      	mov	r2, r4
 80031f6:	462b      	mov	r3, r5
 80031f8:	1814      	adds	r4, r2, r0
 80031fa:	653c      	str	r4, [r7, #80]	; 0x50
 80031fc:	414b      	adcs	r3, r1
 80031fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	461a      	mov	r2, r3
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	1891      	adds	r1, r2, r2
 800320c:	61b9      	str	r1, [r7, #24]
 800320e:	415b      	adcs	r3, r3
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003216:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800321a:	f7fc ffdb 	bl	80001d4 <__aeabi_uldivmod>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4b6c      	ldr	r3, [pc, #432]	; (80033d4 <UART_SetConfig+0x38c>)
 8003224:	fba3 1302 	umull	r1, r3, r3, r2
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	2164      	movs	r1, #100	; 0x64
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	3332      	adds	r3, #50	; 0x32
 8003236:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <UART_SetConfig+0x38c>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	f003 0207 	and.w	r2, r3, #7
 8003242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4432      	add	r2, r6
 8003248:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800324a:	e0b9      	b.n	80033c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800324c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800324e:	461c      	mov	r4, r3
 8003250:	f04f 0500 	mov.w	r5, #0
 8003254:	4622      	mov	r2, r4
 8003256:	462b      	mov	r3, r5
 8003258:	1891      	adds	r1, r2, r2
 800325a:	6139      	str	r1, [r7, #16]
 800325c:	415b      	adcs	r3, r3
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003264:	1912      	adds	r2, r2, r4
 8003266:	eb45 0303 	adc.w	r3, r5, r3
 800326a:	f04f 0000 	mov.w	r0, #0
 800326e:	f04f 0100 	mov.w	r1, #0
 8003272:	00d9      	lsls	r1, r3, #3
 8003274:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003278:	00d0      	lsls	r0, r2, #3
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	eb12 0804 	adds.w	r8, r2, r4
 8003282:	eb43 0905 	adc.w	r9, r3, r5
 8003286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4618      	mov	r0, r3
 800328c:	f04f 0100 	mov.w	r1, #0
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	008b      	lsls	r3, r1, #2
 800329a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800329e:	0082      	lsls	r2, r0, #2
 80032a0:	4640      	mov	r0, r8
 80032a2:	4649      	mov	r1, r9
 80032a4:	f7fc ff96 	bl	80001d4 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4b49      	ldr	r3, [pc, #292]	; (80033d4 <UART_SetConfig+0x38c>)
 80032ae:	fba3 2302 	umull	r2, r3, r3, r2
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	011e      	lsls	r6, r3, #4
 80032b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032b8:	4618      	mov	r0, r3
 80032ba:	f04f 0100 	mov.w	r1, #0
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	1894      	adds	r4, r2, r2
 80032c4:	60bc      	str	r4, [r7, #8]
 80032c6:	415b      	adcs	r3, r3
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ce:	1812      	adds	r2, r2, r0
 80032d0:	eb41 0303 	adc.w	r3, r1, r3
 80032d4:	f04f 0400 	mov.w	r4, #0
 80032d8:	f04f 0500 	mov.w	r5, #0
 80032dc:	00dd      	lsls	r5, r3, #3
 80032de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032e2:	00d4      	lsls	r4, r2, #3
 80032e4:	4622      	mov	r2, r4
 80032e6:	462b      	mov	r3, r5
 80032e8:	1814      	adds	r4, r2, r0
 80032ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80032ec:	414b      	adcs	r3, r1
 80032ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f04f 0100 	mov.w	r1, #0
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	008b      	lsls	r3, r1, #2
 8003304:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003308:	0082      	lsls	r2, r0, #2
 800330a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800330e:	f7fc ff61 	bl	80001d4 <__aeabi_uldivmod>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4b2f      	ldr	r3, [pc, #188]	; (80033d4 <UART_SetConfig+0x38c>)
 8003318:	fba3 1302 	umull	r1, r3, r3, r2
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	2164      	movs	r1, #100	; 0x64
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	3332      	adds	r3, #50	; 0x32
 800332a:	4a2a      	ldr	r2, [pc, #168]	; (80033d4 <UART_SetConfig+0x38c>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003336:	441e      	add	r6, r3
 8003338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800333a:	4618      	mov	r0, r3
 800333c:	f04f 0100 	mov.w	r1, #0
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	1894      	adds	r4, r2, r2
 8003346:	603c      	str	r4, [r7, #0]
 8003348:	415b      	adcs	r3, r3
 800334a:	607b      	str	r3, [r7, #4]
 800334c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003350:	1812      	adds	r2, r2, r0
 8003352:	eb41 0303 	adc.w	r3, r1, r3
 8003356:	f04f 0400 	mov.w	r4, #0
 800335a:	f04f 0500 	mov.w	r5, #0
 800335e:	00dd      	lsls	r5, r3, #3
 8003360:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003364:	00d4      	lsls	r4, r2, #3
 8003366:	4622      	mov	r2, r4
 8003368:	462b      	mov	r3, r5
 800336a:	eb12 0a00 	adds.w	sl, r2, r0
 800336e:	eb43 0b01 	adc.w	fp, r3, r1
 8003372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4618      	mov	r0, r3
 8003378:	f04f 0100 	mov.w	r1, #0
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	008b      	lsls	r3, r1, #2
 8003386:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800338a:	0082      	lsls	r2, r0, #2
 800338c:	4650      	mov	r0, sl
 800338e:	4659      	mov	r1, fp
 8003390:	f7fc ff20 	bl	80001d4 <__aeabi_uldivmod>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <UART_SetConfig+0x38c>)
 800339a:	fba3 1302 	umull	r1, r3, r3, r2
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2164      	movs	r1, #100	; 0x64
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	3332      	adds	r3, #50	; 0x32
 80033ac:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <UART_SetConfig+0x38c>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	f003 020f 	and.w	r2, r3, #15
 80033b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4432      	add	r2, r6
 80033be:	609a      	str	r2, [r3, #8]
}
 80033c0:	bf00      	nop
 80033c2:	377c      	adds	r7, #124	; 0x7c
 80033c4:	46bd      	mov	sp, r7
 80033c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ca:	bf00      	nop
 80033cc:	40011000 	.word	0x40011000
 80033d0:	40011400 	.word	0x40011400
 80033d4:	51eb851f 	.word	0x51eb851f

080033d8 <__errno>:
 80033d8:	4b01      	ldr	r3, [pc, #4]	; (80033e0 <__errno+0x8>)
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	2000000c 	.word	0x2000000c

080033e4 <__libc_init_array>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	4d0d      	ldr	r5, [pc, #52]	; (800341c <__libc_init_array+0x38>)
 80033e8:	4c0d      	ldr	r4, [pc, #52]	; (8003420 <__libc_init_array+0x3c>)
 80033ea:	1b64      	subs	r4, r4, r5
 80033ec:	10a4      	asrs	r4, r4, #2
 80033ee:	2600      	movs	r6, #0
 80033f0:	42a6      	cmp	r6, r4
 80033f2:	d109      	bne.n	8003408 <__libc_init_array+0x24>
 80033f4:	4d0b      	ldr	r5, [pc, #44]	; (8003424 <__libc_init_array+0x40>)
 80033f6:	4c0c      	ldr	r4, [pc, #48]	; (8003428 <__libc_init_array+0x44>)
 80033f8:	f000 fce6 	bl	8003dc8 <_init>
 80033fc:	1b64      	subs	r4, r4, r5
 80033fe:	10a4      	asrs	r4, r4, #2
 8003400:	2600      	movs	r6, #0
 8003402:	42a6      	cmp	r6, r4
 8003404:	d105      	bne.n	8003412 <__libc_init_array+0x2e>
 8003406:	bd70      	pop	{r4, r5, r6, pc}
 8003408:	f855 3b04 	ldr.w	r3, [r5], #4
 800340c:	4798      	blx	r3
 800340e:	3601      	adds	r6, #1
 8003410:	e7ee      	b.n	80033f0 <__libc_init_array+0xc>
 8003412:	f855 3b04 	ldr.w	r3, [r5], #4
 8003416:	4798      	blx	r3
 8003418:	3601      	adds	r6, #1
 800341a:	e7f2      	b.n	8003402 <__libc_init_array+0x1e>
 800341c:	08003e84 	.word	0x08003e84
 8003420:	08003e84 	.word	0x08003e84
 8003424:	08003e84 	.word	0x08003e84
 8003428:	08003e88 	.word	0x08003e88

0800342c <memset>:
 800342c:	4402      	add	r2, r0
 800342e:	4603      	mov	r3, r0
 8003430:	4293      	cmp	r3, r2
 8003432:	d100      	bne.n	8003436 <memset+0xa>
 8003434:	4770      	bx	lr
 8003436:	f803 1b01 	strb.w	r1, [r3], #1
 800343a:	e7f9      	b.n	8003430 <memset+0x4>

0800343c <_puts_r>:
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	460e      	mov	r6, r1
 8003440:	4605      	mov	r5, r0
 8003442:	b118      	cbz	r0, 800344c <_puts_r+0x10>
 8003444:	6983      	ldr	r3, [r0, #24]
 8003446:	b90b      	cbnz	r3, 800344c <_puts_r+0x10>
 8003448:	f000 fa48 	bl	80038dc <__sinit>
 800344c:	69ab      	ldr	r3, [r5, #24]
 800344e:	68ac      	ldr	r4, [r5, #8]
 8003450:	b913      	cbnz	r3, 8003458 <_puts_r+0x1c>
 8003452:	4628      	mov	r0, r5
 8003454:	f000 fa42 	bl	80038dc <__sinit>
 8003458:	4b2c      	ldr	r3, [pc, #176]	; (800350c <_puts_r+0xd0>)
 800345a:	429c      	cmp	r4, r3
 800345c:	d120      	bne.n	80034a0 <_puts_r+0x64>
 800345e:	686c      	ldr	r4, [r5, #4]
 8003460:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003462:	07db      	lsls	r3, r3, #31
 8003464:	d405      	bmi.n	8003472 <_puts_r+0x36>
 8003466:	89a3      	ldrh	r3, [r4, #12]
 8003468:	0598      	lsls	r0, r3, #22
 800346a:	d402      	bmi.n	8003472 <_puts_r+0x36>
 800346c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800346e:	f000 fad3 	bl	8003a18 <__retarget_lock_acquire_recursive>
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	0719      	lsls	r1, r3, #28
 8003476:	d51d      	bpl.n	80034b4 <_puts_r+0x78>
 8003478:	6923      	ldr	r3, [r4, #16]
 800347a:	b1db      	cbz	r3, 80034b4 <_puts_r+0x78>
 800347c:	3e01      	subs	r6, #1
 800347e:	68a3      	ldr	r3, [r4, #8]
 8003480:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003484:	3b01      	subs	r3, #1
 8003486:	60a3      	str	r3, [r4, #8]
 8003488:	bb39      	cbnz	r1, 80034da <_puts_r+0x9e>
 800348a:	2b00      	cmp	r3, #0
 800348c:	da38      	bge.n	8003500 <_puts_r+0xc4>
 800348e:	4622      	mov	r2, r4
 8003490:	210a      	movs	r1, #10
 8003492:	4628      	mov	r0, r5
 8003494:	f000 f848 	bl	8003528 <__swbuf_r>
 8003498:	3001      	adds	r0, #1
 800349a:	d011      	beq.n	80034c0 <_puts_r+0x84>
 800349c:	250a      	movs	r5, #10
 800349e:	e011      	b.n	80034c4 <_puts_r+0x88>
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <_puts_r+0xd4>)
 80034a2:	429c      	cmp	r4, r3
 80034a4:	d101      	bne.n	80034aa <_puts_r+0x6e>
 80034a6:	68ac      	ldr	r4, [r5, #8]
 80034a8:	e7da      	b.n	8003460 <_puts_r+0x24>
 80034aa:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <_puts_r+0xd8>)
 80034ac:	429c      	cmp	r4, r3
 80034ae:	bf08      	it	eq
 80034b0:	68ec      	ldreq	r4, [r5, #12]
 80034b2:	e7d5      	b.n	8003460 <_puts_r+0x24>
 80034b4:	4621      	mov	r1, r4
 80034b6:	4628      	mov	r0, r5
 80034b8:	f000 f888 	bl	80035cc <__swsetup_r>
 80034bc:	2800      	cmp	r0, #0
 80034be:	d0dd      	beq.n	800347c <_puts_r+0x40>
 80034c0:	f04f 35ff 	mov.w	r5, #4294967295
 80034c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034c6:	07da      	lsls	r2, r3, #31
 80034c8:	d405      	bmi.n	80034d6 <_puts_r+0x9a>
 80034ca:	89a3      	ldrh	r3, [r4, #12]
 80034cc:	059b      	lsls	r3, r3, #22
 80034ce:	d402      	bmi.n	80034d6 <_puts_r+0x9a>
 80034d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034d2:	f000 faa2 	bl	8003a1a <__retarget_lock_release_recursive>
 80034d6:	4628      	mov	r0, r5
 80034d8:	bd70      	pop	{r4, r5, r6, pc}
 80034da:	2b00      	cmp	r3, #0
 80034dc:	da04      	bge.n	80034e8 <_puts_r+0xac>
 80034de:	69a2      	ldr	r2, [r4, #24]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	dc06      	bgt.n	80034f2 <_puts_r+0xb6>
 80034e4:	290a      	cmp	r1, #10
 80034e6:	d004      	beq.n	80034f2 <_puts_r+0xb6>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	6022      	str	r2, [r4, #0]
 80034ee:	7019      	strb	r1, [r3, #0]
 80034f0:	e7c5      	b.n	800347e <_puts_r+0x42>
 80034f2:	4622      	mov	r2, r4
 80034f4:	4628      	mov	r0, r5
 80034f6:	f000 f817 	bl	8003528 <__swbuf_r>
 80034fa:	3001      	adds	r0, #1
 80034fc:	d1bf      	bne.n	800347e <_puts_r+0x42>
 80034fe:	e7df      	b.n	80034c0 <_puts_r+0x84>
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	250a      	movs	r5, #10
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	6022      	str	r2, [r4, #0]
 8003508:	701d      	strb	r5, [r3, #0]
 800350a:	e7db      	b.n	80034c4 <_puts_r+0x88>
 800350c:	08003e3c 	.word	0x08003e3c
 8003510:	08003e5c 	.word	0x08003e5c
 8003514:	08003e1c 	.word	0x08003e1c

08003518 <puts>:
 8003518:	4b02      	ldr	r3, [pc, #8]	; (8003524 <puts+0xc>)
 800351a:	4601      	mov	r1, r0
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	f7ff bf8d 	b.w	800343c <_puts_r>
 8003522:	bf00      	nop
 8003524:	2000000c 	.word	0x2000000c

08003528 <__swbuf_r>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	460e      	mov	r6, r1
 800352c:	4614      	mov	r4, r2
 800352e:	4605      	mov	r5, r0
 8003530:	b118      	cbz	r0, 800353a <__swbuf_r+0x12>
 8003532:	6983      	ldr	r3, [r0, #24]
 8003534:	b90b      	cbnz	r3, 800353a <__swbuf_r+0x12>
 8003536:	f000 f9d1 	bl	80038dc <__sinit>
 800353a:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <__swbuf_r+0x98>)
 800353c:	429c      	cmp	r4, r3
 800353e:	d12b      	bne.n	8003598 <__swbuf_r+0x70>
 8003540:	686c      	ldr	r4, [r5, #4]
 8003542:	69a3      	ldr	r3, [r4, #24]
 8003544:	60a3      	str	r3, [r4, #8]
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	071a      	lsls	r2, r3, #28
 800354a:	d52f      	bpl.n	80035ac <__swbuf_r+0x84>
 800354c:	6923      	ldr	r3, [r4, #16]
 800354e:	b36b      	cbz	r3, 80035ac <__swbuf_r+0x84>
 8003550:	6923      	ldr	r3, [r4, #16]
 8003552:	6820      	ldr	r0, [r4, #0]
 8003554:	1ac0      	subs	r0, r0, r3
 8003556:	6963      	ldr	r3, [r4, #20]
 8003558:	b2f6      	uxtb	r6, r6
 800355a:	4283      	cmp	r3, r0
 800355c:	4637      	mov	r7, r6
 800355e:	dc04      	bgt.n	800356a <__swbuf_r+0x42>
 8003560:	4621      	mov	r1, r4
 8003562:	4628      	mov	r0, r5
 8003564:	f000 f926 	bl	80037b4 <_fflush_r>
 8003568:	bb30      	cbnz	r0, 80035b8 <__swbuf_r+0x90>
 800356a:	68a3      	ldr	r3, [r4, #8]
 800356c:	3b01      	subs	r3, #1
 800356e:	60a3      	str	r3, [r4, #8]
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	6022      	str	r2, [r4, #0]
 8003576:	701e      	strb	r6, [r3, #0]
 8003578:	6963      	ldr	r3, [r4, #20]
 800357a:	3001      	adds	r0, #1
 800357c:	4283      	cmp	r3, r0
 800357e:	d004      	beq.n	800358a <__swbuf_r+0x62>
 8003580:	89a3      	ldrh	r3, [r4, #12]
 8003582:	07db      	lsls	r3, r3, #31
 8003584:	d506      	bpl.n	8003594 <__swbuf_r+0x6c>
 8003586:	2e0a      	cmp	r6, #10
 8003588:	d104      	bne.n	8003594 <__swbuf_r+0x6c>
 800358a:	4621      	mov	r1, r4
 800358c:	4628      	mov	r0, r5
 800358e:	f000 f911 	bl	80037b4 <_fflush_r>
 8003592:	b988      	cbnz	r0, 80035b8 <__swbuf_r+0x90>
 8003594:	4638      	mov	r0, r7
 8003596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <__swbuf_r+0x9c>)
 800359a:	429c      	cmp	r4, r3
 800359c:	d101      	bne.n	80035a2 <__swbuf_r+0x7a>
 800359e:	68ac      	ldr	r4, [r5, #8]
 80035a0:	e7cf      	b.n	8003542 <__swbuf_r+0x1a>
 80035a2:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <__swbuf_r+0xa0>)
 80035a4:	429c      	cmp	r4, r3
 80035a6:	bf08      	it	eq
 80035a8:	68ec      	ldreq	r4, [r5, #12]
 80035aa:	e7ca      	b.n	8003542 <__swbuf_r+0x1a>
 80035ac:	4621      	mov	r1, r4
 80035ae:	4628      	mov	r0, r5
 80035b0:	f000 f80c 	bl	80035cc <__swsetup_r>
 80035b4:	2800      	cmp	r0, #0
 80035b6:	d0cb      	beq.n	8003550 <__swbuf_r+0x28>
 80035b8:	f04f 37ff 	mov.w	r7, #4294967295
 80035bc:	e7ea      	b.n	8003594 <__swbuf_r+0x6c>
 80035be:	bf00      	nop
 80035c0:	08003e3c 	.word	0x08003e3c
 80035c4:	08003e5c 	.word	0x08003e5c
 80035c8:	08003e1c 	.word	0x08003e1c

080035cc <__swsetup_r>:
 80035cc:	4b32      	ldr	r3, [pc, #200]	; (8003698 <__swsetup_r+0xcc>)
 80035ce:	b570      	push	{r4, r5, r6, lr}
 80035d0:	681d      	ldr	r5, [r3, #0]
 80035d2:	4606      	mov	r6, r0
 80035d4:	460c      	mov	r4, r1
 80035d6:	b125      	cbz	r5, 80035e2 <__swsetup_r+0x16>
 80035d8:	69ab      	ldr	r3, [r5, #24]
 80035da:	b913      	cbnz	r3, 80035e2 <__swsetup_r+0x16>
 80035dc:	4628      	mov	r0, r5
 80035de:	f000 f97d 	bl	80038dc <__sinit>
 80035e2:	4b2e      	ldr	r3, [pc, #184]	; (800369c <__swsetup_r+0xd0>)
 80035e4:	429c      	cmp	r4, r3
 80035e6:	d10f      	bne.n	8003608 <__swsetup_r+0x3c>
 80035e8:	686c      	ldr	r4, [r5, #4]
 80035ea:	89a3      	ldrh	r3, [r4, #12]
 80035ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035f0:	0719      	lsls	r1, r3, #28
 80035f2:	d42c      	bmi.n	800364e <__swsetup_r+0x82>
 80035f4:	06dd      	lsls	r5, r3, #27
 80035f6:	d411      	bmi.n	800361c <__swsetup_r+0x50>
 80035f8:	2309      	movs	r3, #9
 80035fa:	6033      	str	r3, [r6, #0]
 80035fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003600:	81a3      	strh	r3, [r4, #12]
 8003602:	f04f 30ff 	mov.w	r0, #4294967295
 8003606:	e03e      	b.n	8003686 <__swsetup_r+0xba>
 8003608:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <__swsetup_r+0xd4>)
 800360a:	429c      	cmp	r4, r3
 800360c:	d101      	bne.n	8003612 <__swsetup_r+0x46>
 800360e:	68ac      	ldr	r4, [r5, #8]
 8003610:	e7eb      	b.n	80035ea <__swsetup_r+0x1e>
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <__swsetup_r+0xd8>)
 8003614:	429c      	cmp	r4, r3
 8003616:	bf08      	it	eq
 8003618:	68ec      	ldreq	r4, [r5, #12]
 800361a:	e7e6      	b.n	80035ea <__swsetup_r+0x1e>
 800361c:	0758      	lsls	r0, r3, #29
 800361e:	d512      	bpl.n	8003646 <__swsetup_r+0x7a>
 8003620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003622:	b141      	cbz	r1, 8003636 <__swsetup_r+0x6a>
 8003624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003628:	4299      	cmp	r1, r3
 800362a:	d002      	beq.n	8003632 <__swsetup_r+0x66>
 800362c:	4630      	mov	r0, r6
 800362e:	f000 fa59 	bl	8003ae4 <_free_r>
 8003632:	2300      	movs	r3, #0
 8003634:	6363      	str	r3, [r4, #52]	; 0x34
 8003636:	89a3      	ldrh	r3, [r4, #12]
 8003638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800363c:	81a3      	strh	r3, [r4, #12]
 800363e:	2300      	movs	r3, #0
 8003640:	6063      	str	r3, [r4, #4]
 8003642:	6923      	ldr	r3, [r4, #16]
 8003644:	6023      	str	r3, [r4, #0]
 8003646:	89a3      	ldrh	r3, [r4, #12]
 8003648:	f043 0308 	orr.w	r3, r3, #8
 800364c:	81a3      	strh	r3, [r4, #12]
 800364e:	6923      	ldr	r3, [r4, #16]
 8003650:	b94b      	cbnz	r3, 8003666 <__swsetup_r+0x9a>
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	d003      	beq.n	8003666 <__swsetup_r+0x9a>
 800365e:	4621      	mov	r1, r4
 8003660:	4630      	mov	r0, r6
 8003662:	f000 f9ff 	bl	8003a64 <__smakebuf_r>
 8003666:	89a0      	ldrh	r0, [r4, #12]
 8003668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800366c:	f010 0301 	ands.w	r3, r0, #1
 8003670:	d00a      	beq.n	8003688 <__swsetup_r+0xbc>
 8003672:	2300      	movs	r3, #0
 8003674:	60a3      	str	r3, [r4, #8]
 8003676:	6963      	ldr	r3, [r4, #20]
 8003678:	425b      	negs	r3, r3
 800367a:	61a3      	str	r3, [r4, #24]
 800367c:	6923      	ldr	r3, [r4, #16]
 800367e:	b943      	cbnz	r3, 8003692 <__swsetup_r+0xc6>
 8003680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003684:	d1ba      	bne.n	80035fc <__swsetup_r+0x30>
 8003686:	bd70      	pop	{r4, r5, r6, pc}
 8003688:	0781      	lsls	r1, r0, #30
 800368a:	bf58      	it	pl
 800368c:	6963      	ldrpl	r3, [r4, #20]
 800368e:	60a3      	str	r3, [r4, #8]
 8003690:	e7f4      	b.n	800367c <__swsetup_r+0xb0>
 8003692:	2000      	movs	r0, #0
 8003694:	e7f7      	b.n	8003686 <__swsetup_r+0xba>
 8003696:	bf00      	nop
 8003698:	2000000c 	.word	0x2000000c
 800369c:	08003e3c 	.word	0x08003e3c
 80036a0:	08003e5c 	.word	0x08003e5c
 80036a4:	08003e1c 	.word	0x08003e1c

080036a8 <__sflush_r>:
 80036a8:	898a      	ldrh	r2, [r1, #12]
 80036aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ae:	4605      	mov	r5, r0
 80036b0:	0710      	lsls	r0, r2, #28
 80036b2:	460c      	mov	r4, r1
 80036b4:	d458      	bmi.n	8003768 <__sflush_r+0xc0>
 80036b6:	684b      	ldr	r3, [r1, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	dc05      	bgt.n	80036c8 <__sflush_r+0x20>
 80036bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	dc02      	bgt.n	80036c8 <__sflush_r+0x20>
 80036c2:	2000      	movs	r0, #0
 80036c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036ca:	2e00      	cmp	r6, #0
 80036cc:	d0f9      	beq.n	80036c2 <__sflush_r+0x1a>
 80036ce:	2300      	movs	r3, #0
 80036d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036d4:	682f      	ldr	r7, [r5, #0]
 80036d6:	602b      	str	r3, [r5, #0]
 80036d8:	d032      	beq.n	8003740 <__sflush_r+0x98>
 80036da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036dc:	89a3      	ldrh	r3, [r4, #12]
 80036de:	075a      	lsls	r2, r3, #29
 80036e0:	d505      	bpl.n	80036ee <__sflush_r+0x46>
 80036e2:	6863      	ldr	r3, [r4, #4]
 80036e4:	1ac0      	subs	r0, r0, r3
 80036e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036e8:	b10b      	cbz	r3, 80036ee <__sflush_r+0x46>
 80036ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036ec:	1ac0      	subs	r0, r0, r3
 80036ee:	2300      	movs	r3, #0
 80036f0:	4602      	mov	r2, r0
 80036f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036f4:	6a21      	ldr	r1, [r4, #32]
 80036f6:	4628      	mov	r0, r5
 80036f8:	47b0      	blx	r6
 80036fa:	1c43      	adds	r3, r0, #1
 80036fc:	89a3      	ldrh	r3, [r4, #12]
 80036fe:	d106      	bne.n	800370e <__sflush_r+0x66>
 8003700:	6829      	ldr	r1, [r5, #0]
 8003702:	291d      	cmp	r1, #29
 8003704:	d82c      	bhi.n	8003760 <__sflush_r+0xb8>
 8003706:	4a2a      	ldr	r2, [pc, #168]	; (80037b0 <__sflush_r+0x108>)
 8003708:	40ca      	lsrs	r2, r1
 800370a:	07d6      	lsls	r6, r2, #31
 800370c:	d528      	bpl.n	8003760 <__sflush_r+0xb8>
 800370e:	2200      	movs	r2, #0
 8003710:	6062      	str	r2, [r4, #4]
 8003712:	04d9      	lsls	r1, r3, #19
 8003714:	6922      	ldr	r2, [r4, #16]
 8003716:	6022      	str	r2, [r4, #0]
 8003718:	d504      	bpl.n	8003724 <__sflush_r+0x7c>
 800371a:	1c42      	adds	r2, r0, #1
 800371c:	d101      	bne.n	8003722 <__sflush_r+0x7a>
 800371e:	682b      	ldr	r3, [r5, #0]
 8003720:	b903      	cbnz	r3, 8003724 <__sflush_r+0x7c>
 8003722:	6560      	str	r0, [r4, #84]	; 0x54
 8003724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003726:	602f      	str	r7, [r5, #0]
 8003728:	2900      	cmp	r1, #0
 800372a:	d0ca      	beq.n	80036c2 <__sflush_r+0x1a>
 800372c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003730:	4299      	cmp	r1, r3
 8003732:	d002      	beq.n	800373a <__sflush_r+0x92>
 8003734:	4628      	mov	r0, r5
 8003736:	f000 f9d5 	bl	8003ae4 <_free_r>
 800373a:	2000      	movs	r0, #0
 800373c:	6360      	str	r0, [r4, #52]	; 0x34
 800373e:	e7c1      	b.n	80036c4 <__sflush_r+0x1c>
 8003740:	6a21      	ldr	r1, [r4, #32]
 8003742:	2301      	movs	r3, #1
 8003744:	4628      	mov	r0, r5
 8003746:	47b0      	blx	r6
 8003748:	1c41      	adds	r1, r0, #1
 800374a:	d1c7      	bne.n	80036dc <__sflush_r+0x34>
 800374c:	682b      	ldr	r3, [r5, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0c4      	beq.n	80036dc <__sflush_r+0x34>
 8003752:	2b1d      	cmp	r3, #29
 8003754:	d001      	beq.n	800375a <__sflush_r+0xb2>
 8003756:	2b16      	cmp	r3, #22
 8003758:	d101      	bne.n	800375e <__sflush_r+0xb6>
 800375a:	602f      	str	r7, [r5, #0]
 800375c:	e7b1      	b.n	80036c2 <__sflush_r+0x1a>
 800375e:	89a3      	ldrh	r3, [r4, #12]
 8003760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003764:	81a3      	strh	r3, [r4, #12]
 8003766:	e7ad      	b.n	80036c4 <__sflush_r+0x1c>
 8003768:	690f      	ldr	r7, [r1, #16]
 800376a:	2f00      	cmp	r7, #0
 800376c:	d0a9      	beq.n	80036c2 <__sflush_r+0x1a>
 800376e:	0793      	lsls	r3, r2, #30
 8003770:	680e      	ldr	r6, [r1, #0]
 8003772:	bf08      	it	eq
 8003774:	694b      	ldreq	r3, [r1, #20]
 8003776:	600f      	str	r7, [r1, #0]
 8003778:	bf18      	it	ne
 800377a:	2300      	movne	r3, #0
 800377c:	eba6 0807 	sub.w	r8, r6, r7
 8003780:	608b      	str	r3, [r1, #8]
 8003782:	f1b8 0f00 	cmp.w	r8, #0
 8003786:	dd9c      	ble.n	80036c2 <__sflush_r+0x1a>
 8003788:	6a21      	ldr	r1, [r4, #32]
 800378a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800378c:	4643      	mov	r3, r8
 800378e:	463a      	mov	r2, r7
 8003790:	4628      	mov	r0, r5
 8003792:	47b0      	blx	r6
 8003794:	2800      	cmp	r0, #0
 8003796:	dc06      	bgt.n	80037a6 <__sflush_r+0xfe>
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800379e:	81a3      	strh	r3, [r4, #12]
 80037a0:	f04f 30ff 	mov.w	r0, #4294967295
 80037a4:	e78e      	b.n	80036c4 <__sflush_r+0x1c>
 80037a6:	4407      	add	r7, r0
 80037a8:	eba8 0800 	sub.w	r8, r8, r0
 80037ac:	e7e9      	b.n	8003782 <__sflush_r+0xda>
 80037ae:	bf00      	nop
 80037b0:	20400001 	.word	0x20400001

080037b4 <_fflush_r>:
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	690b      	ldr	r3, [r1, #16]
 80037b8:	4605      	mov	r5, r0
 80037ba:	460c      	mov	r4, r1
 80037bc:	b913      	cbnz	r3, 80037c4 <_fflush_r+0x10>
 80037be:	2500      	movs	r5, #0
 80037c0:	4628      	mov	r0, r5
 80037c2:	bd38      	pop	{r3, r4, r5, pc}
 80037c4:	b118      	cbz	r0, 80037ce <_fflush_r+0x1a>
 80037c6:	6983      	ldr	r3, [r0, #24]
 80037c8:	b90b      	cbnz	r3, 80037ce <_fflush_r+0x1a>
 80037ca:	f000 f887 	bl	80038dc <__sinit>
 80037ce:	4b14      	ldr	r3, [pc, #80]	; (8003820 <_fflush_r+0x6c>)
 80037d0:	429c      	cmp	r4, r3
 80037d2:	d11b      	bne.n	800380c <_fflush_r+0x58>
 80037d4:	686c      	ldr	r4, [r5, #4]
 80037d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0ef      	beq.n	80037be <_fflush_r+0xa>
 80037de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037e0:	07d0      	lsls	r0, r2, #31
 80037e2:	d404      	bmi.n	80037ee <_fflush_r+0x3a>
 80037e4:	0599      	lsls	r1, r3, #22
 80037e6:	d402      	bmi.n	80037ee <_fflush_r+0x3a>
 80037e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037ea:	f000 f915 	bl	8003a18 <__retarget_lock_acquire_recursive>
 80037ee:	4628      	mov	r0, r5
 80037f0:	4621      	mov	r1, r4
 80037f2:	f7ff ff59 	bl	80036a8 <__sflush_r>
 80037f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037f8:	07da      	lsls	r2, r3, #31
 80037fa:	4605      	mov	r5, r0
 80037fc:	d4e0      	bmi.n	80037c0 <_fflush_r+0xc>
 80037fe:	89a3      	ldrh	r3, [r4, #12]
 8003800:	059b      	lsls	r3, r3, #22
 8003802:	d4dd      	bmi.n	80037c0 <_fflush_r+0xc>
 8003804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003806:	f000 f908 	bl	8003a1a <__retarget_lock_release_recursive>
 800380a:	e7d9      	b.n	80037c0 <_fflush_r+0xc>
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <_fflush_r+0x70>)
 800380e:	429c      	cmp	r4, r3
 8003810:	d101      	bne.n	8003816 <_fflush_r+0x62>
 8003812:	68ac      	ldr	r4, [r5, #8]
 8003814:	e7df      	b.n	80037d6 <_fflush_r+0x22>
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <_fflush_r+0x74>)
 8003818:	429c      	cmp	r4, r3
 800381a:	bf08      	it	eq
 800381c:	68ec      	ldreq	r4, [r5, #12]
 800381e:	e7da      	b.n	80037d6 <_fflush_r+0x22>
 8003820:	08003e3c 	.word	0x08003e3c
 8003824:	08003e5c 	.word	0x08003e5c
 8003828:	08003e1c 	.word	0x08003e1c

0800382c <std>:
 800382c:	2300      	movs	r3, #0
 800382e:	b510      	push	{r4, lr}
 8003830:	4604      	mov	r4, r0
 8003832:	e9c0 3300 	strd	r3, r3, [r0]
 8003836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800383a:	6083      	str	r3, [r0, #8]
 800383c:	8181      	strh	r1, [r0, #12]
 800383e:	6643      	str	r3, [r0, #100]	; 0x64
 8003840:	81c2      	strh	r2, [r0, #14]
 8003842:	6183      	str	r3, [r0, #24]
 8003844:	4619      	mov	r1, r3
 8003846:	2208      	movs	r2, #8
 8003848:	305c      	adds	r0, #92	; 0x5c
 800384a:	f7ff fdef 	bl	800342c <memset>
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <std+0x38>)
 8003850:	6263      	str	r3, [r4, #36]	; 0x24
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <std+0x3c>)
 8003854:	62a3      	str	r3, [r4, #40]	; 0x28
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <std+0x40>)
 8003858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <std+0x44>)
 800385c:	6224      	str	r4, [r4, #32]
 800385e:	6323      	str	r3, [r4, #48]	; 0x30
 8003860:	bd10      	pop	{r4, pc}
 8003862:	bf00      	nop
 8003864:	08003c59 	.word	0x08003c59
 8003868:	08003c7b 	.word	0x08003c7b
 800386c:	08003cb3 	.word	0x08003cb3
 8003870:	08003cd7 	.word	0x08003cd7

08003874 <_cleanup_r>:
 8003874:	4901      	ldr	r1, [pc, #4]	; (800387c <_cleanup_r+0x8>)
 8003876:	f000 b8af 	b.w	80039d8 <_fwalk_reent>
 800387a:	bf00      	nop
 800387c:	080037b5 	.word	0x080037b5

08003880 <__sfmoreglue>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	1e4a      	subs	r2, r1, #1
 8003884:	2568      	movs	r5, #104	; 0x68
 8003886:	4355      	muls	r5, r2
 8003888:	460e      	mov	r6, r1
 800388a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800388e:	f000 f979 	bl	8003b84 <_malloc_r>
 8003892:	4604      	mov	r4, r0
 8003894:	b140      	cbz	r0, 80038a8 <__sfmoreglue+0x28>
 8003896:	2100      	movs	r1, #0
 8003898:	e9c0 1600 	strd	r1, r6, [r0]
 800389c:	300c      	adds	r0, #12
 800389e:	60a0      	str	r0, [r4, #8]
 80038a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80038a4:	f7ff fdc2 	bl	800342c <memset>
 80038a8:	4620      	mov	r0, r4
 80038aa:	bd70      	pop	{r4, r5, r6, pc}

080038ac <__sfp_lock_acquire>:
 80038ac:	4801      	ldr	r0, [pc, #4]	; (80038b4 <__sfp_lock_acquire+0x8>)
 80038ae:	f000 b8b3 	b.w	8003a18 <__retarget_lock_acquire_recursive>
 80038b2:	bf00      	nop
 80038b4:	200001c0 	.word	0x200001c0

080038b8 <__sfp_lock_release>:
 80038b8:	4801      	ldr	r0, [pc, #4]	; (80038c0 <__sfp_lock_release+0x8>)
 80038ba:	f000 b8ae 	b.w	8003a1a <__retarget_lock_release_recursive>
 80038be:	bf00      	nop
 80038c0:	200001c0 	.word	0x200001c0

080038c4 <__sinit_lock_acquire>:
 80038c4:	4801      	ldr	r0, [pc, #4]	; (80038cc <__sinit_lock_acquire+0x8>)
 80038c6:	f000 b8a7 	b.w	8003a18 <__retarget_lock_acquire_recursive>
 80038ca:	bf00      	nop
 80038cc:	200001bb 	.word	0x200001bb

080038d0 <__sinit_lock_release>:
 80038d0:	4801      	ldr	r0, [pc, #4]	; (80038d8 <__sinit_lock_release+0x8>)
 80038d2:	f000 b8a2 	b.w	8003a1a <__retarget_lock_release_recursive>
 80038d6:	bf00      	nop
 80038d8:	200001bb 	.word	0x200001bb

080038dc <__sinit>:
 80038dc:	b510      	push	{r4, lr}
 80038de:	4604      	mov	r4, r0
 80038e0:	f7ff fff0 	bl	80038c4 <__sinit_lock_acquire>
 80038e4:	69a3      	ldr	r3, [r4, #24]
 80038e6:	b11b      	cbz	r3, 80038f0 <__sinit+0x14>
 80038e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038ec:	f7ff bff0 	b.w	80038d0 <__sinit_lock_release>
 80038f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80038f4:	6523      	str	r3, [r4, #80]	; 0x50
 80038f6:	4b13      	ldr	r3, [pc, #76]	; (8003944 <__sinit+0x68>)
 80038f8:	4a13      	ldr	r2, [pc, #76]	; (8003948 <__sinit+0x6c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80038fe:	42a3      	cmp	r3, r4
 8003900:	bf04      	itt	eq
 8003902:	2301      	moveq	r3, #1
 8003904:	61a3      	streq	r3, [r4, #24]
 8003906:	4620      	mov	r0, r4
 8003908:	f000 f820 	bl	800394c <__sfp>
 800390c:	6060      	str	r0, [r4, #4]
 800390e:	4620      	mov	r0, r4
 8003910:	f000 f81c 	bl	800394c <__sfp>
 8003914:	60a0      	str	r0, [r4, #8]
 8003916:	4620      	mov	r0, r4
 8003918:	f000 f818 	bl	800394c <__sfp>
 800391c:	2200      	movs	r2, #0
 800391e:	60e0      	str	r0, [r4, #12]
 8003920:	2104      	movs	r1, #4
 8003922:	6860      	ldr	r0, [r4, #4]
 8003924:	f7ff ff82 	bl	800382c <std>
 8003928:	68a0      	ldr	r0, [r4, #8]
 800392a:	2201      	movs	r2, #1
 800392c:	2109      	movs	r1, #9
 800392e:	f7ff ff7d 	bl	800382c <std>
 8003932:	68e0      	ldr	r0, [r4, #12]
 8003934:	2202      	movs	r2, #2
 8003936:	2112      	movs	r1, #18
 8003938:	f7ff ff78 	bl	800382c <std>
 800393c:	2301      	movs	r3, #1
 800393e:	61a3      	str	r3, [r4, #24]
 8003940:	e7d2      	b.n	80038e8 <__sinit+0xc>
 8003942:	bf00      	nop
 8003944:	08003e18 	.word	0x08003e18
 8003948:	08003875 	.word	0x08003875

0800394c <__sfp>:
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	4607      	mov	r7, r0
 8003950:	f7ff ffac 	bl	80038ac <__sfp_lock_acquire>
 8003954:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <__sfp+0x84>)
 8003956:	681e      	ldr	r6, [r3, #0]
 8003958:	69b3      	ldr	r3, [r6, #24]
 800395a:	b913      	cbnz	r3, 8003962 <__sfp+0x16>
 800395c:	4630      	mov	r0, r6
 800395e:	f7ff ffbd 	bl	80038dc <__sinit>
 8003962:	3648      	adds	r6, #72	; 0x48
 8003964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003968:	3b01      	subs	r3, #1
 800396a:	d503      	bpl.n	8003974 <__sfp+0x28>
 800396c:	6833      	ldr	r3, [r6, #0]
 800396e:	b30b      	cbz	r3, 80039b4 <__sfp+0x68>
 8003970:	6836      	ldr	r6, [r6, #0]
 8003972:	e7f7      	b.n	8003964 <__sfp+0x18>
 8003974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003978:	b9d5      	cbnz	r5, 80039b0 <__sfp+0x64>
 800397a:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <__sfp+0x88>)
 800397c:	60e3      	str	r3, [r4, #12]
 800397e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003982:	6665      	str	r5, [r4, #100]	; 0x64
 8003984:	f000 f847 	bl	8003a16 <__retarget_lock_init_recursive>
 8003988:	f7ff ff96 	bl	80038b8 <__sfp_lock_release>
 800398c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003990:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003994:	6025      	str	r5, [r4, #0]
 8003996:	61a5      	str	r5, [r4, #24]
 8003998:	2208      	movs	r2, #8
 800399a:	4629      	mov	r1, r5
 800399c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039a0:	f7ff fd44 	bl	800342c <memset>
 80039a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039ac:	4620      	mov	r0, r4
 80039ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b0:	3468      	adds	r4, #104	; 0x68
 80039b2:	e7d9      	b.n	8003968 <__sfp+0x1c>
 80039b4:	2104      	movs	r1, #4
 80039b6:	4638      	mov	r0, r7
 80039b8:	f7ff ff62 	bl	8003880 <__sfmoreglue>
 80039bc:	4604      	mov	r4, r0
 80039be:	6030      	str	r0, [r6, #0]
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d1d5      	bne.n	8003970 <__sfp+0x24>
 80039c4:	f7ff ff78 	bl	80038b8 <__sfp_lock_release>
 80039c8:	230c      	movs	r3, #12
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	e7ee      	b.n	80039ac <__sfp+0x60>
 80039ce:	bf00      	nop
 80039d0:	08003e18 	.word	0x08003e18
 80039d4:	ffff0001 	.word	0xffff0001

080039d8 <_fwalk_reent>:
 80039d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039dc:	4606      	mov	r6, r0
 80039de:	4688      	mov	r8, r1
 80039e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80039e4:	2700      	movs	r7, #0
 80039e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039ea:	f1b9 0901 	subs.w	r9, r9, #1
 80039ee:	d505      	bpl.n	80039fc <_fwalk_reent+0x24>
 80039f0:	6824      	ldr	r4, [r4, #0]
 80039f2:	2c00      	cmp	r4, #0
 80039f4:	d1f7      	bne.n	80039e6 <_fwalk_reent+0xe>
 80039f6:	4638      	mov	r0, r7
 80039f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039fc:	89ab      	ldrh	r3, [r5, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d907      	bls.n	8003a12 <_fwalk_reent+0x3a>
 8003a02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a06:	3301      	adds	r3, #1
 8003a08:	d003      	beq.n	8003a12 <_fwalk_reent+0x3a>
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	4630      	mov	r0, r6
 8003a0e:	47c0      	blx	r8
 8003a10:	4307      	orrs	r7, r0
 8003a12:	3568      	adds	r5, #104	; 0x68
 8003a14:	e7e9      	b.n	80039ea <_fwalk_reent+0x12>

08003a16 <__retarget_lock_init_recursive>:
 8003a16:	4770      	bx	lr

08003a18 <__retarget_lock_acquire_recursive>:
 8003a18:	4770      	bx	lr

08003a1a <__retarget_lock_release_recursive>:
 8003a1a:	4770      	bx	lr

08003a1c <__swhatbuf_r>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	460e      	mov	r6, r1
 8003a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a24:	2900      	cmp	r1, #0
 8003a26:	b096      	sub	sp, #88	; 0x58
 8003a28:	4614      	mov	r4, r2
 8003a2a:	461d      	mov	r5, r3
 8003a2c:	da07      	bge.n	8003a3e <__swhatbuf_r+0x22>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	602b      	str	r3, [r5, #0]
 8003a32:	89b3      	ldrh	r3, [r6, #12]
 8003a34:	061a      	lsls	r2, r3, #24
 8003a36:	d410      	bmi.n	8003a5a <__swhatbuf_r+0x3e>
 8003a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a3c:	e00e      	b.n	8003a5c <__swhatbuf_r+0x40>
 8003a3e:	466a      	mov	r2, sp
 8003a40:	f000 f970 	bl	8003d24 <_fstat_r>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	dbf2      	blt.n	8003a2e <__swhatbuf_r+0x12>
 8003a48:	9a01      	ldr	r2, [sp, #4]
 8003a4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a52:	425a      	negs	r2, r3
 8003a54:	415a      	adcs	r2, r3
 8003a56:	602a      	str	r2, [r5, #0]
 8003a58:	e7ee      	b.n	8003a38 <__swhatbuf_r+0x1c>
 8003a5a:	2340      	movs	r3, #64	; 0x40
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	6023      	str	r3, [r4, #0]
 8003a60:	b016      	add	sp, #88	; 0x58
 8003a62:	bd70      	pop	{r4, r5, r6, pc}

08003a64 <__smakebuf_r>:
 8003a64:	898b      	ldrh	r3, [r1, #12]
 8003a66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a68:	079d      	lsls	r5, r3, #30
 8003a6a:	4606      	mov	r6, r0
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	d507      	bpl.n	8003a80 <__smakebuf_r+0x1c>
 8003a70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a74:	6023      	str	r3, [r4, #0]
 8003a76:	6123      	str	r3, [r4, #16]
 8003a78:	2301      	movs	r3, #1
 8003a7a:	6163      	str	r3, [r4, #20]
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}
 8003a80:	ab01      	add	r3, sp, #4
 8003a82:	466a      	mov	r2, sp
 8003a84:	f7ff ffca 	bl	8003a1c <__swhatbuf_r>
 8003a88:	9900      	ldr	r1, [sp, #0]
 8003a8a:	4605      	mov	r5, r0
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	f000 f879 	bl	8003b84 <_malloc_r>
 8003a92:	b948      	cbnz	r0, 8003aa8 <__smakebuf_r+0x44>
 8003a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a98:	059a      	lsls	r2, r3, #22
 8003a9a:	d4ef      	bmi.n	8003a7c <__smakebuf_r+0x18>
 8003a9c:	f023 0303 	bic.w	r3, r3, #3
 8003aa0:	f043 0302 	orr.w	r3, r3, #2
 8003aa4:	81a3      	strh	r3, [r4, #12]
 8003aa6:	e7e3      	b.n	8003a70 <__smakebuf_r+0xc>
 8003aa8:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <__smakebuf_r+0x7c>)
 8003aaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8003aac:	89a3      	ldrh	r3, [r4, #12]
 8003aae:	6020      	str	r0, [r4, #0]
 8003ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab4:	81a3      	strh	r3, [r4, #12]
 8003ab6:	9b00      	ldr	r3, [sp, #0]
 8003ab8:	6163      	str	r3, [r4, #20]
 8003aba:	9b01      	ldr	r3, [sp, #4]
 8003abc:	6120      	str	r0, [r4, #16]
 8003abe:	b15b      	cbz	r3, 8003ad8 <__smakebuf_r+0x74>
 8003ac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	f000 f93f 	bl	8003d48 <_isatty_r>
 8003aca:	b128      	cbz	r0, 8003ad8 <__smakebuf_r+0x74>
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	f023 0303 	bic.w	r3, r3, #3
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	81a3      	strh	r3, [r4, #12]
 8003ad8:	89a0      	ldrh	r0, [r4, #12]
 8003ada:	4305      	orrs	r5, r0
 8003adc:	81a5      	strh	r5, [r4, #12]
 8003ade:	e7cd      	b.n	8003a7c <__smakebuf_r+0x18>
 8003ae0:	08003875 	.word	0x08003875

08003ae4 <_free_r>:
 8003ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ae6:	2900      	cmp	r1, #0
 8003ae8:	d048      	beq.n	8003b7c <_free_r+0x98>
 8003aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aee:	9001      	str	r0, [sp, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f1a1 0404 	sub.w	r4, r1, #4
 8003af6:	bfb8      	it	lt
 8003af8:	18e4      	addlt	r4, r4, r3
 8003afa:	f000 f947 	bl	8003d8c <__malloc_lock>
 8003afe:	4a20      	ldr	r2, [pc, #128]	; (8003b80 <_free_r+0x9c>)
 8003b00:	9801      	ldr	r0, [sp, #4]
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	4615      	mov	r5, r2
 8003b06:	b933      	cbnz	r3, 8003b16 <_free_r+0x32>
 8003b08:	6063      	str	r3, [r4, #4]
 8003b0a:	6014      	str	r4, [r2, #0]
 8003b0c:	b003      	add	sp, #12
 8003b0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b12:	f000 b941 	b.w	8003d98 <__malloc_unlock>
 8003b16:	42a3      	cmp	r3, r4
 8003b18:	d90b      	bls.n	8003b32 <_free_r+0x4e>
 8003b1a:	6821      	ldr	r1, [r4, #0]
 8003b1c:	1862      	adds	r2, r4, r1
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	bf04      	itt	eq
 8003b22:	681a      	ldreq	r2, [r3, #0]
 8003b24:	685b      	ldreq	r3, [r3, #4]
 8003b26:	6063      	str	r3, [r4, #4]
 8003b28:	bf04      	itt	eq
 8003b2a:	1852      	addeq	r2, r2, r1
 8003b2c:	6022      	streq	r2, [r4, #0]
 8003b2e:	602c      	str	r4, [r5, #0]
 8003b30:	e7ec      	b.n	8003b0c <_free_r+0x28>
 8003b32:	461a      	mov	r2, r3
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	b10b      	cbz	r3, 8003b3c <_free_r+0x58>
 8003b38:	42a3      	cmp	r3, r4
 8003b3a:	d9fa      	bls.n	8003b32 <_free_r+0x4e>
 8003b3c:	6811      	ldr	r1, [r2, #0]
 8003b3e:	1855      	adds	r5, r2, r1
 8003b40:	42a5      	cmp	r5, r4
 8003b42:	d10b      	bne.n	8003b5c <_free_r+0x78>
 8003b44:	6824      	ldr	r4, [r4, #0]
 8003b46:	4421      	add	r1, r4
 8003b48:	1854      	adds	r4, r2, r1
 8003b4a:	42a3      	cmp	r3, r4
 8003b4c:	6011      	str	r1, [r2, #0]
 8003b4e:	d1dd      	bne.n	8003b0c <_free_r+0x28>
 8003b50:	681c      	ldr	r4, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	6053      	str	r3, [r2, #4]
 8003b56:	4421      	add	r1, r4
 8003b58:	6011      	str	r1, [r2, #0]
 8003b5a:	e7d7      	b.n	8003b0c <_free_r+0x28>
 8003b5c:	d902      	bls.n	8003b64 <_free_r+0x80>
 8003b5e:	230c      	movs	r3, #12
 8003b60:	6003      	str	r3, [r0, #0]
 8003b62:	e7d3      	b.n	8003b0c <_free_r+0x28>
 8003b64:	6825      	ldr	r5, [r4, #0]
 8003b66:	1961      	adds	r1, r4, r5
 8003b68:	428b      	cmp	r3, r1
 8003b6a:	bf04      	itt	eq
 8003b6c:	6819      	ldreq	r1, [r3, #0]
 8003b6e:	685b      	ldreq	r3, [r3, #4]
 8003b70:	6063      	str	r3, [r4, #4]
 8003b72:	bf04      	itt	eq
 8003b74:	1949      	addeq	r1, r1, r5
 8003b76:	6021      	streq	r1, [r4, #0]
 8003b78:	6054      	str	r4, [r2, #4]
 8003b7a:	e7c7      	b.n	8003b0c <_free_r+0x28>
 8003b7c:	b003      	add	sp, #12
 8003b7e:	bd30      	pop	{r4, r5, pc}
 8003b80:	20000090 	.word	0x20000090

08003b84 <_malloc_r>:
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	1ccd      	adds	r5, r1, #3
 8003b88:	f025 0503 	bic.w	r5, r5, #3
 8003b8c:	3508      	adds	r5, #8
 8003b8e:	2d0c      	cmp	r5, #12
 8003b90:	bf38      	it	cc
 8003b92:	250c      	movcc	r5, #12
 8003b94:	2d00      	cmp	r5, #0
 8003b96:	4606      	mov	r6, r0
 8003b98:	db01      	blt.n	8003b9e <_malloc_r+0x1a>
 8003b9a:	42a9      	cmp	r1, r5
 8003b9c:	d903      	bls.n	8003ba6 <_malloc_r+0x22>
 8003b9e:	230c      	movs	r3, #12
 8003ba0:	6033      	str	r3, [r6, #0]
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ba6:	f000 f8f1 	bl	8003d8c <__malloc_lock>
 8003baa:	4921      	ldr	r1, [pc, #132]	; (8003c30 <_malloc_r+0xac>)
 8003bac:	680a      	ldr	r2, [r1, #0]
 8003bae:	4614      	mov	r4, r2
 8003bb0:	b99c      	cbnz	r4, 8003bda <_malloc_r+0x56>
 8003bb2:	4f20      	ldr	r7, [pc, #128]	; (8003c34 <_malloc_r+0xb0>)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	b923      	cbnz	r3, 8003bc2 <_malloc_r+0x3e>
 8003bb8:	4621      	mov	r1, r4
 8003bba:	4630      	mov	r0, r6
 8003bbc:	f000 f83c 	bl	8003c38 <_sbrk_r>
 8003bc0:	6038      	str	r0, [r7, #0]
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	f000 f837 	bl	8003c38 <_sbrk_r>
 8003bca:	1c43      	adds	r3, r0, #1
 8003bcc:	d123      	bne.n	8003c16 <_malloc_r+0x92>
 8003bce:	230c      	movs	r3, #12
 8003bd0:	6033      	str	r3, [r6, #0]
 8003bd2:	4630      	mov	r0, r6
 8003bd4:	f000 f8e0 	bl	8003d98 <__malloc_unlock>
 8003bd8:	e7e3      	b.n	8003ba2 <_malloc_r+0x1e>
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	1b5b      	subs	r3, r3, r5
 8003bde:	d417      	bmi.n	8003c10 <_malloc_r+0x8c>
 8003be0:	2b0b      	cmp	r3, #11
 8003be2:	d903      	bls.n	8003bec <_malloc_r+0x68>
 8003be4:	6023      	str	r3, [r4, #0]
 8003be6:	441c      	add	r4, r3
 8003be8:	6025      	str	r5, [r4, #0]
 8003bea:	e004      	b.n	8003bf6 <_malloc_r+0x72>
 8003bec:	6863      	ldr	r3, [r4, #4]
 8003bee:	42a2      	cmp	r2, r4
 8003bf0:	bf0c      	ite	eq
 8003bf2:	600b      	streq	r3, [r1, #0]
 8003bf4:	6053      	strne	r3, [r2, #4]
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f000 f8ce 	bl	8003d98 <__malloc_unlock>
 8003bfc:	f104 000b 	add.w	r0, r4, #11
 8003c00:	1d23      	adds	r3, r4, #4
 8003c02:	f020 0007 	bic.w	r0, r0, #7
 8003c06:	1ac2      	subs	r2, r0, r3
 8003c08:	d0cc      	beq.n	8003ba4 <_malloc_r+0x20>
 8003c0a:	1a1b      	subs	r3, r3, r0
 8003c0c:	50a3      	str	r3, [r4, r2]
 8003c0e:	e7c9      	b.n	8003ba4 <_malloc_r+0x20>
 8003c10:	4622      	mov	r2, r4
 8003c12:	6864      	ldr	r4, [r4, #4]
 8003c14:	e7cc      	b.n	8003bb0 <_malloc_r+0x2c>
 8003c16:	1cc4      	adds	r4, r0, #3
 8003c18:	f024 0403 	bic.w	r4, r4, #3
 8003c1c:	42a0      	cmp	r0, r4
 8003c1e:	d0e3      	beq.n	8003be8 <_malloc_r+0x64>
 8003c20:	1a21      	subs	r1, r4, r0
 8003c22:	4630      	mov	r0, r6
 8003c24:	f000 f808 	bl	8003c38 <_sbrk_r>
 8003c28:	3001      	adds	r0, #1
 8003c2a:	d1dd      	bne.n	8003be8 <_malloc_r+0x64>
 8003c2c:	e7cf      	b.n	8003bce <_malloc_r+0x4a>
 8003c2e:	bf00      	nop
 8003c30:	20000090 	.word	0x20000090
 8003c34:	20000094 	.word	0x20000094

08003c38 <_sbrk_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	4d06      	ldr	r5, [pc, #24]	; (8003c54 <_sbrk_r+0x1c>)
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	4604      	mov	r4, r0
 8003c40:	4608      	mov	r0, r1
 8003c42:	602b      	str	r3, [r5, #0]
 8003c44:	f7fd f98c 	bl	8000f60 <_sbrk>
 8003c48:	1c43      	adds	r3, r0, #1
 8003c4a:	d102      	bne.n	8003c52 <_sbrk_r+0x1a>
 8003c4c:	682b      	ldr	r3, [r5, #0]
 8003c4e:	b103      	cbz	r3, 8003c52 <_sbrk_r+0x1a>
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	bd38      	pop	{r3, r4, r5, pc}
 8003c54:	200001c4 	.word	0x200001c4

08003c58 <__sread>:
 8003c58:	b510      	push	{r4, lr}
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c60:	f000 f8a0 	bl	8003da4 <_read_r>
 8003c64:	2800      	cmp	r0, #0
 8003c66:	bfab      	itete	ge
 8003c68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c6a:	89a3      	ldrhlt	r3, [r4, #12]
 8003c6c:	181b      	addge	r3, r3, r0
 8003c6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c72:	bfac      	ite	ge
 8003c74:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c76:	81a3      	strhlt	r3, [r4, #12]
 8003c78:	bd10      	pop	{r4, pc}

08003c7a <__swrite>:
 8003c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c7e:	461f      	mov	r7, r3
 8003c80:	898b      	ldrh	r3, [r1, #12]
 8003c82:	05db      	lsls	r3, r3, #23
 8003c84:	4605      	mov	r5, r0
 8003c86:	460c      	mov	r4, r1
 8003c88:	4616      	mov	r6, r2
 8003c8a:	d505      	bpl.n	8003c98 <__swrite+0x1e>
 8003c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c90:	2302      	movs	r3, #2
 8003c92:	2200      	movs	r2, #0
 8003c94:	f000 f868 	bl	8003d68 <_lseek_r>
 8003c98:	89a3      	ldrh	r3, [r4, #12]
 8003c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ca2:	81a3      	strh	r3, [r4, #12]
 8003ca4:	4632      	mov	r2, r6
 8003ca6:	463b      	mov	r3, r7
 8003ca8:	4628      	mov	r0, r5
 8003caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cae:	f000 b817 	b.w	8003ce0 <_write_r>

08003cb2 <__sseek>:
 8003cb2:	b510      	push	{r4, lr}
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cba:	f000 f855 	bl	8003d68 <_lseek_r>
 8003cbe:	1c43      	adds	r3, r0, #1
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	bf15      	itete	ne
 8003cc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003cc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cce:	81a3      	strheq	r3, [r4, #12]
 8003cd0:	bf18      	it	ne
 8003cd2:	81a3      	strhne	r3, [r4, #12]
 8003cd4:	bd10      	pop	{r4, pc}

08003cd6 <__sclose>:
 8003cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cda:	f000 b813 	b.w	8003d04 <_close_r>
	...

08003ce0 <_write_r>:
 8003ce0:	b538      	push	{r3, r4, r5, lr}
 8003ce2:	4d07      	ldr	r5, [pc, #28]	; (8003d00 <_write_r+0x20>)
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	4608      	mov	r0, r1
 8003ce8:	4611      	mov	r1, r2
 8003cea:	2200      	movs	r2, #0
 8003cec:	602a      	str	r2, [r5, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f7fc ff7e 	bl	8000bf0 <_write>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d102      	bne.n	8003cfe <_write_r+0x1e>
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	b103      	cbz	r3, 8003cfe <_write_r+0x1e>
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	bd38      	pop	{r3, r4, r5, pc}
 8003d00:	200001c4 	.word	0x200001c4

08003d04 <_close_r>:
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	4d06      	ldr	r5, [pc, #24]	; (8003d20 <_close_r+0x1c>)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	602b      	str	r3, [r5, #0]
 8003d10:	f7fd f8f2 	bl	8000ef8 <_close>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d102      	bne.n	8003d1e <_close_r+0x1a>
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	b103      	cbz	r3, 8003d1e <_close_r+0x1a>
 8003d1c:	6023      	str	r3, [r4, #0]
 8003d1e:	bd38      	pop	{r3, r4, r5, pc}
 8003d20:	200001c4 	.word	0x200001c4

08003d24 <_fstat_r>:
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	4d07      	ldr	r5, [pc, #28]	; (8003d44 <_fstat_r+0x20>)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	602b      	str	r3, [r5, #0]
 8003d32:	f7fd f8ed 	bl	8000f10 <_fstat>
 8003d36:	1c43      	adds	r3, r0, #1
 8003d38:	d102      	bne.n	8003d40 <_fstat_r+0x1c>
 8003d3a:	682b      	ldr	r3, [r5, #0]
 8003d3c:	b103      	cbz	r3, 8003d40 <_fstat_r+0x1c>
 8003d3e:	6023      	str	r3, [r4, #0]
 8003d40:	bd38      	pop	{r3, r4, r5, pc}
 8003d42:	bf00      	nop
 8003d44:	200001c4 	.word	0x200001c4

08003d48 <_isatty_r>:
 8003d48:	b538      	push	{r3, r4, r5, lr}
 8003d4a:	4d06      	ldr	r5, [pc, #24]	; (8003d64 <_isatty_r+0x1c>)
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	4604      	mov	r4, r0
 8003d50:	4608      	mov	r0, r1
 8003d52:	602b      	str	r3, [r5, #0]
 8003d54:	f7fd f8ec 	bl	8000f30 <_isatty>
 8003d58:	1c43      	adds	r3, r0, #1
 8003d5a:	d102      	bne.n	8003d62 <_isatty_r+0x1a>
 8003d5c:	682b      	ldr	r3, [r5, #0]
 8003d5e:	b103      	cbz	r3, 8003d62 <_isatty_r+0x1a>
 8003d60:	6023      	str	r3, [r4, #0]
 8003d62:	bd38      	pop	{r3, r4, r5, pc}
 8003d64:	200001c4 	.word	0x200001c4

08003d68 <_lseek_r>:
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	4d07      	ldr	r5, [pc, #28]	; (8003d88 <_lseek_r+0x20>)
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	4608      	mov	r0, r1
 8003d70:	4611      	mov	r1, r2
 8003d72:	2200      	movs	r2, #0
 8003d74:	602a      	str	r2, [r5, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f7fd f8e5 	bl	8000f46 <_lseek>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d102      	bne.n	8003d86 <_lseek_r+0x1e>
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	b103      	cbz	r3, 8003d86 <_lseek_r+0x1e>
 8003d84:	6023      	str	r3, [r4, #0]
 8003d86:	bd38      	pop	{r3, r4, r5, pc}
 8003d88:	200001c4 	.word	0x200001c4

08003d8c <__malloc_lock>:
 8003d8c:	4801      	ldr	r0, [pc, #4]	; (8003d94 <__malloc_lock+0x8>)
 8003d8e:	f7ff be43 	b.w	8003a18 <__retarget_lock_acquire_recursive>
 8003d92:	bf00      	nop
 8003d94:	200001bc 	.word	0x200001bc

08003d98 <__malloc_unlock>:
 8003d98:	4801      	ldr	r0, [pc, #4]	; (8003da0 <__malloc_unlock+0x8>)
 8003d9a:	f7ff be3e 	b.w	8003a1a <__retarget_lock_release_recursive>
 8003d9e:	bf00      	nop
 8003da0:	200001bc 	.word	0x200001bc

08003da4 <_read_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	4d07      	ldr	r5, [pc, #28]	; (8003dc4 <_read_r+0x20>)
 8003da8:	4604      	mov	r4, r0
 8003daa:	4608      	mov	r0, r1
 8003dac:	4611      	mov	r1, r2
 8003dae:	2200      	movs	r2, #0
 8003db0:	602a      	str	r2, [r5, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f7fd f883 	bl	8000ebe <_read>
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	d102      	bne.n	8003dc2 <_read_r+0x1e>
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	b103      	cbz	r3, 8003dc2 <_read_r+0x1e>
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	bd38      	pop	{r3, r4, r5, pc}
 8003dc4:	200001c4 	.word	0x200001c4

08003dc8 <_init>:
 8003dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dca:	bf00      	nop
 8003dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dce:	bc08      	pop	{r3}
 8003dd0:	469e      	mov	lr, r3
 8003dd2:	4770      	bx	lr

08003dd4 <_fini>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	bf00      	nop
 8003dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dda:	bc08      	pop	{r3}
 8003ddc:	469e      	mov	lr, r3
 8003dde:	4770      	bx	lr
