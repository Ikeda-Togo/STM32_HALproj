
F401_Clearning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004608  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b0  080048b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080048b0  080048b0  000148b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048b8  080048b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048bc  080048bc  000148bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  08004930  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08004930  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eca5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de6  00000000  00000000  0002ed45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00030b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  000317b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001715b  00000000  00000000  00032398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7dd  00000000  00000000  000494f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb98  00000000  00000000  00056cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5868  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb4  00000000  00000000  000e58bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004790 	.word	0x08004790

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004790 	.word	0x08004790

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <delay_us>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t stop;

void delay_us (uint32_t us)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <delay_us+0x2c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2200      	movs	r2, #0
 8000586:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8000588:	bf00      	nop
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <delay_us+0x2c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	429a      	cmp	r2, r3
 8000594:	d8f9      	bhi.n	800058a <delay_us+0x12>
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	20000124 	.word	0x20000124

080005a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0)
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d11a      	bne.n	80005ee <HAL_GPIO_EXTI_Callback+0x46>
  {
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80005b8:	2101      	movs	r1, #1
 80005ba:	480f      	ldr	r0, [pc, #60]	; (80005f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80005bc:	f001 fa44 	bl	8001a48 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d006      	beq.n	80005d4 <HAL_GPIO_EXTI_Callback+0x2c>
    {
//      HAL_GPIO_WritePin(GPIOA, DIR_Pin, 1);
      printf("off\r\n");
 80005c6:	480d      	ldr	r0, [pc, #52]	; (80005fc <HAL_GPIO_EXTI_Callback+0x54>)
 80005c8:	f003 f99c 	bl	8003904 <puts>
      stop=0;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <HAL_GPIO_EXTI_Callback+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
//      HAL_GPIO_WritePin(GPIOA, DIR_Pin, 0);
      printf("on\r\n");
      stop=1;
    }
  }
}
 80005d2:	e00c      	b.n	80005ee <HAL_GPIO_EXTI_Callback+0x46>
    else if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80005d4:	2101      	movs	r1, #1
 80005d6:	4808      	ldr	r0, [pc, #32]	; (80005f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80005d8:	f001 fa36 	bl	8001a48 <HAL_GPIO_ReadPin>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d105      	bne.n	80005ee <HAL_GPIO_EXTI_Callback+0x46>
      printf("on\r\n");
 80005e2:	4808      	ldr	r0, [pc, #32]	; (8000604 <HAL_GPIO_EXTI_Callback+0x5c>)
 80005e4:	f003 f98e 	bl	8003904 <puts>
      stop=1;
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <HAL_GPIO_EXTI_Callback+0x58>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40020000 	.word	0x40020000
 80005fc:	080047a8 	.word	0x080047a8
 8000600:	200001b0 	.word	0x200001b0
 8000604:	080047b0 	.word	0x080047b0

08000608 <init_motion.9089>:
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
  HAL_TIM_Base_Start_IT(&htim2);
//  HAL_TIM_Base_Start(&htim2);

  void init_motion(){
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	f8c7 c004 	str.w	ip, [r7, #4]
	  printf("init motion...\r\n");
 8000612:	4829      	ldr	r0, [pc, #164]	; (80006b8 <init_motion.9089+0xb0>)
 8000614:	f003 f976 	bl	8003904 <puts>
	  HAL_GPIO_WritePin(EN_step_GPIO_Port, EN_step_Pin, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	2110      	movs	r1, #16
 800061c:	4827      	ldr	r0, [pc, #156]	; (80006bc <init_motion.9089+0xb4>)
 800061e:	f001 fa2b 	bl	8001a78 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000622:	2101      	movs	r1, #1
 8000624:	4826      	ldr	r0, [pc, #152]	; (80006c0 <init_motion.9089+0xb8>)
 8000626:	f001 fa0f 	bl	8001a48 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d01b      	beq.n	8000668 <init_motion.9089+0x60>
	  {
	    HAL_GPIO_WritePin(GPIOA, DIR_Pin, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	4822      	ldr	r0, [pc, #136]	; (80006c0 <init_motion.9089+0xb8>)
 8000636:	f001 fa1f 	bl	8001a78 <HAL_GPIO_WritePin>
	    while(1){
		  HAL_GPIO_WritePin(GPIOA, Step_Pin, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	2140      	movs	r1, #64	; 0x40
 800063e:	4820      	ldr	r0, [pc, #128]	; (80006c0 <init_motion.9089+0xb8>)
 8000640:	f001 fa1a 	bl	8001a78 <HAL_GPIO_WritePin>
//		  HAL_Delay(0.4);
		  delay_us(800);
 8000644:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000648:	f7ff ff96 	bl	8000578 <delay_us>
		  HAL_GPIO_WritePin(GPIOA, Step_Pin, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	2140      	movs	r1, #64	; 0x40
 8000650:	481b      	ldr	r0, [pc, #108]	; (80006c0 <init_motion.9089+0xb8>)
 8000652:	f001 fa11 	bl	8001a78 <HAL_GPIO_WritePin>
//		  HAL_Delay(0.01);
		  delay_us(200);
 8000656:	20c8      	movs	r0, #200	; 0xc8
 8000658:	f7ff ff8e 	bl	8000578 <delay_us>
		  if(stop == 1){
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <init_motion.9089+0xbc>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d000      	beq.n	8000666 <init_motion.9089+0x5e>
		  HAL_GPIO_WritePin(GPIOA, Step_Pin, 1);
 8000664:	e7e9      	b.n	800063a <init_motion.9089+0x32>
			  break;
 8000666:	bf00      	nop
		  }
	    }
	  }
	  HAL_GPIO_WritePin(GPIOA, DIR_Pin, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	2180      	movs	r1, #128	; 0x80
 800066c:	4814      	ldr	r0, [pc, #80]	; (80006c0 <init_motion.9089+0xb8>)
 800066e:	f001 fa03 	bl	8001a78 <HAL_GPIO_WritePin>
	  for(int i=0;i<200;i++){
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	e012      	b.n	800069e <init_motion.9089+0x96>
		  HAL_GPIO_WritePin(GPIOA, Step_Pin, 1);
 8000678:	2201      	movs	r2, #1
 800067a:	2140      	movs	r1, #64	; 0x40
 800067c:	4810      	ldr	r0, [pc, #64]	; (80006c0 <init_motion.9089+0xb8>)
 800067e:	f001 f9fb 	bl	8001a78 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1);
 8000682:	2001      	movs	r0, #1
 8000684:	f000 ff26 	bl	80014d4 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOA, Step_Pin, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2140      	movs	r1, #64	; 0x40
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <init_motion.9089+0xb8>)
 800068e:	f001 f9f3 	bl	8001a78 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1);
 8000692:	2001      	movs	r0, #1
 8000694:	f000 ff1e 	bl	80014d4 <HAL_Delay>
	  for(int i=0;i<200;i++){
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	3301      	adds	r3, #1
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2bc7      	cmp	r3, #199	; 0xc7
 80006a2:	dde9      	ble.n	8000678 <init_motion.9089+0x70>
	  }
	  HAL_GPIO_WritePin(EN_step_GPIO_Port, EN_step_Pin, 1);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2110      	movs	r1, #16
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <init_motion.9089+0xb4>)
 80006aa:	f001 f9e5 	bl	8001a78 <HAL_GPIO_WritePin>


  }
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	080047b4 	.word	0x080047b4
 80006bc:	40020800 	.word	0x40020800
 80006c0:	40020000 	.word	0x40020000
 80006c4:	200001b0 	.word	0x200001b0

080006c8 <main>:
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
int main(void)
 80006ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d2:	60fb      	str	r3, [r7, #12]
  HAL_Init();
 80006d4:	f000 fe8c 	bl	80013f0 <HAL_Init>
  SystemClock_Config();
 80006d8:	f000 f9f6 	bl	8000ac8 <SystemClock_Config>
  MX_GPIO_Init();
 80006dc:	f000 fbaa 	bl	8000e34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e0:	f000 fb54 	bl	8000d8c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80006e4:	f000 fb7c 	bl	8000de0 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80006e8:	f000 fa58 	bl	8000b9c <MX_TIM1_Init>
  MX_TIM2_Init();
 80006ec:	f000 fb02 	bl	8000cf4 <MX_TIM2_Init>
  printf("start\r\n");
 80006f0:	482a      	ldr	r0, [pc, #168]	; (800079c <main+0xd4>)
 80006f2:	f003 f907 	bl	8003904 <puts>
  uint8_t txdata[9] = {0};
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <main+0xd8>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	807b      	strh	r3, [r7, #2]
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	f8c3 2003 	str.w	r2, [r3, #3]
  short duty=10;
 8000706:	230a      	movs	r3, #10
 8000708:	803b      	strh	r3, [r7, #0]
  int out_range_count = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
  int in_range_count = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  bool clearning_handler= false;
 8000712:	2300      	movs	r3, #0
 8000714:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000716:	2100      	movs	r1, #0
 8000718:	4822      	ldr	r0, [pc, #136]	; (80007a4 <main+0xdc>)
 800071a:	f001 ff5f 	bl	80025dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800071e:	2104      	movs	r1, #4
 8000720:	4820      	ldr	r0, [pc, #128]	; (80007a4 <main+0xdc>)
 8000722:	f001 ff5b 	bl	80025dc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000726:	4820      	ldr	r0, [pc, #128]	; (80007a8 <main+0xe0>)
 8000728:	f001 fe9c 	bl	8002464 <HAL_TIM_Base_Start_IT>

//  	  write(0xFF,0x04,0x28);
//  	  write(0xFF,0x01,0x29);
//  	  speed(0xFF,15000);

  	init_motion();
 800072c:	463b      	mov	r3, r7
 800072e:	469c      	mov	ip, r3
 8000730:	f7ff ff6a 	bl	8000608 <init_motion.9089>
    /* USER CODE BEGIN 3 */

/*------------------sonic_sense test------------------------*/

	  while(1){
		  int distance = sonic_sense();
 8000734:	463b      	mov	r3, r7
 8000736:	469c      	mov	ip, r3
 8000738:	f000 f83a 	bl	80007b0 <sonic_sense.9097>
 800073c:	6138      	str	r0, [r7, #16]
		  printf("distance=%d\r\n",distance);
 800073e:	6939      	ldr	r1, [r7, #16]
 8000740:	481a      	ldr	r0, [pc, #104]	; (80007ac <main+0xe4>)
 8000742:	f003 f859 	bl	80037f8 <iprintf>
		  HAL_Delay(500);
 8000746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800074a:	f000 fec3 	bl	80014d4 <HAL_Delay>

		  if(distance>5000){         //いない時間の計測
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	f241 3288 	movw	r2, #5000	; 0x1388
 8000754:	4293      	cmp	r3, r2
 8000756:	dd05      	ble.n	8000764 <main+0x9c>
			  out_range_count++;
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	3301      	adds	r3, #1
 800075c:	61fb      	str	r3, [r7, #28]
			  in_range_count=0;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	e009      	b.n	8000778 <main+0xb0>
		  }
		  else{                     //いる時間の計測
			  out_range_count=0;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
			  in_range_count++;
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	3301      	adds	r3, #1
 800076c:	61bb      	str	r3, [r7, #24]
			  if (in_range_count>10){ //滞在時間の設定
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	2b0a      	cmp	r3, #10
 8000772:	dd01      	ble.n	8000778 <main+0xb0>
				  clearning_handler= true;
 8000774:	2301      	movs	r3, #1
 8000776:	75fb      	strb	r3, [r7, #23]
			  }
		  }

		  if(clearning_handler== true && out_range_count > 5){ //いない時間の設定
 8000778:	7dfb      	ldrb	r3, [r7, #23]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0da      	beq.n	8000734 <main+0x6c>
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	2b05      	cmp	r3, #5
 8000782:	ddd7      	ble.n	8000734 <main+0x6c>
			  clearning_motion();
 8000784:	463b      	mov	r3, r7
 8000786:	469c      	mov	ip, r3
 8000788:	f000 f8f8 	bl	800097c <clearning_motion.9130>
			  init_motion();
 800078c:	463b      	mov	r3, r7
 800078e:	469c      	mov	ip, r3
 8000790:	f7ff ff3a 	bl	8000608 <init_motion.9089>
			  clearning_handler= false;
 8000794:	2300      	movs	r3, #0
 8000796:	75fb      	strb	r3, [r7, #23]
	  while(1){
 8000798:	e7cc      	b.n	8000734 <main+0x6c>
 800079a:	bf00      	nop
 800079c:	080047c4 	.word	0x080047c4
 80007a0:	080047dc 	.word	0x080047dc
 80007a4:	20000098 	.word	0x20000098
 80007a8:	20000124 	.word	0x20000124
 80007ac:	080047cc 	.word	0x080047cc

080007b0 <sonic_sense.9097>:
  int sonic_sense(){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	f8c7 c004 	str.w	ip, [r7, #4]
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007ba:	2302      	movs	r3, #2
 80007bc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	4619      	mov	r1, r3
 80007d0:	4822      	ldr	r0, [pc, #136]	; (800085c <sonic_sense.9097+0xac>)
 80007d2:	f000 ffb5 	bl	8001740 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2102      	movs	r1, #2
 80007da:	4820      	ldr	r0, [pc, #128]	; (800085c <sonic_sense.9097+0xac>)
 80007dc:	f001 f94c 	bl	8001a78 <HAL_GPIO_WritePin>
	  delay_us(2);
 80007e0:	2002      	movs	r0, #2
 80007e2:	f7ff fec9 	bl	8000578 <delay_us>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2102      	movs	r1, #2
 80007ea:	481c      	ldr	r0, [pc, #112]	; (800085c <sonic_sense.9097+0xac>)
 80007ec:	f001 f944 	bl	8001a78 <HAL_GPIO_WritePin>
	  delay_us(5);
 80007f0:	2005      	movs	r0, #5
 80007f2:	f7ff fec1 	bl	8000578 <delay_us>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2102      	movs	r1, #2
 80007fa:	4818      	ldr	r0, [pc, #96]	; (800085c <sonic_sense.9097+0xac>)
 80007fc:	f001 f93c 	bl	8001a78 <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000800:	2302      	movs	r3, #2
 8000802:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // digital Input
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	4619      	mov	r1, r3
 8000812:	4812      	ldr	r0, [pc, #72]	; (800085c <sonic_sense.9097+0xac>)
 8000814:	f000 ff94 	bl	8001740 <HAL_GPIO_Init>
	  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_RESET);
 8000818:	bf00      	nop
 800081a:	2102      	movs	r1, #2
 800081c:	480f      	ldr	r0, [pc, #60]	; (800085c <sonic_sense.9097+0xac>)
 800081e:	f001 f913 	bl	8001a48 <HAL_GPIO_ReadPin>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0f8      	beq.n	800081a <sonic_sense.9097+0x6a>
	  __HAL_TIM_SET_COUNTER(&htim2,0);
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <sonic_sense.9097+0xb0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
	  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_SET);
 8000830:	bf00      	nop
 8000832:	2102      	movs	r1, #2
 8000834:	4809      	ldr	r0, [pc, #36]	; (800085c <sonic_sense.9097+0xac>)
 8000836:	f001 f907 	bl	8001a48 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d0f8      	beq.n	8000832 <sonic_sense.9097+0x82>
	  int counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <sonic_sense.9097+0xb0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000846:	61fb      	str	r3, [r7, #28]
	  delay_us(500);
 8000848:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800084c:	f7ff fe94 	bl	8000578 <delay_us>
	  return(counter);
 8000850:	69fb      	ldr	r3, [r7, #28]
  }
 8000852:	4618      	mov	r0, r3
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40020000 	.word	0x40020000
 8000860:	20000124 	.word	0x20000124

08000864 <speed.9119>:
    {
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	460a      	mov	r2, r1
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	4613      	mov	r3, r2
 8000872:	80bb      	strh	r3, [r7, #4]
 8000874:	4664      	mov	r4, ip
 8000876:	f8c7 c000 	str.w	ip, [r7]
        unsigned char speed_l = (unsigned char)(speed)&0x00FF;
 800087a:	88bb      	ldrh	r3, [r7, #4]
 800087c:	73fb      	strb	r3, [r7, #15]
        unsigned char speed_h = (unsigned char)(speed>>8)&0x00FF;
 800087e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000882:	121b      	asrs	r3, r3, #8
 8000884:	b21b      	sxth	r3, r3
 8000886:	73bb      	strb	r3, [r7, #14]
        unsigned char sum = (0x09+0x04+0x00+id+speed_l+speed_h+0x30+0x01)&0x00FF;
 8000888:	79fa      	ldrb	r2, [r7, #7]
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	4413      	add	r3, r2
 800088e:	b2da      	uxtb	r2, r3
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	4413      	add	r3, r2
 8000894:	b2db      	uxtb	r3, r3
 8000896:	333e      	adds	r3, #62	; 0x3e
 8000898:	737b      	strb	r3, [r7, #13]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800089a:	2201      	movs	r2, #1
 800089c:	2104      	movs	r1, #4
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <speed.9119+0x8c>)
 80008a0:	f001 f8ea 	bl	8001a78 <HAL_GPIO_WritePin>
        txdata[0]=0x09;//SIZE
 80008a4:	2309      	movs	r3, #9
 80008a6:	70a3      	strb	r3, [r4, #2]
        txdata[1]=0x04;//COMMAND
 80008a8:	2304      	movs	r3, #4
 80008aa:	70e3      	strb	r3, [r4, #3]
        txdata[2]=0x00;//OPTION
 80008ac:	2300      	movs	r3, #0
 80008ae:	7123      	strb	r3, [r4, #4]
        txdata[3]=id;//ID
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	7163      	strb	r3, [r4, #5]
        txdata[4]=speed_l;//SPEED_LOWBYTE
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	71a3      	strb	r3, [r4, #6]
        txdata[5]=speed_h;//SPEED_HIGHBYTE
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	71e3      	strb	r3, [r4, #7]
        txdata[6]=0x30;//ADRESS(SPEED 0x03)
 80008bc:	2330      	movs	r3, #48	; 0x30
 80008be:	7223      	strb	r3, [r4, #8]
        txdata[7]=0x01;//COUNT
 80008c0:	2301      	movs	r3, #1
 80008c2:	7263      	strb	r3, [r4, #9]
        txdata[8]=sum;//SUM
 80008c4:	7b7b      	ldrb	r3, [r7, #13]
 80008c6:	72a3      	strb	r3, [r4, #10]
        HAL_UART_Transmit(&huart6, txdata, 9, 0xFFFF);
 80008c8:	1ca1      	adds	r1, r4, #2
 80008ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ce:	2209      	movs	r2, #9
 80008d0:	4808      	ldr	r0, [pc, #32]	; (80008f4 <speed.9119+0x90>)
 80008d2:	f002 fc96 	bl	8003202 <HAL_UART_Transmit>
        HAL_Delay(0.03);
 80008d6:	2000      	movs	r0, #0
 80008d8:	f000 fdfc 	bl	80014d4 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2104      	movs	r1, #4
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <speed.9119+0x8c>)
 80008e2:	f001 f8c9 	bl	8001a78 <HAL_GPIO_WritePin>
    }
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd90      	pop	{r4, r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40020400 	.word	0x40020400
 80008f4:	200000e0 	.word	0x200000e0

080008f8 <write.9127>:
    {
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
 8000902:	460b      	mov	r3, r1
 8000904:	71bb      	strb	r3, [r7, #6]
 8000906:	4613      	mov	r3, r2
 8000908:	717b      	strb	r3, [r7, #5]
 800090a:	4664      	mov	r4, ip
 800090c:	f8c7 c000 	str.w	ip, [r7]
        unsigned char sum = (0x08+0x04+0x00+id+data+adress+0x01)&0x00FF;
 8000910:	79fa      	ldrb	r2, [r7, #7]
 8000912:	79bb      	ldrb	r3, [r7, #6]
 8000914:	4413      	add	r3, r2
 8000916:	b2da      	uxtb	r2, r3
 8000918:	797b      	ldrb	r3, [r7, #5]
 800091a:	4413      	add	r3, r2
 800091c:	b2db      	uxtb	r3, r3
 800091e:	330d      	adds	r3, #13
 8000920:	73fb      	strb	r3, [r7, #15]
       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000922:	2201      	movs	r2, #1
 8000924:	2104      	movs	r1, #4
 8000926:	4813      	ldr	r0, [pc, #76]	; (8000974 <write.9127+0x7c>)
 8000928:	f001 f8a6 	bl	8001a78 <HAL_GPIO_WritePin>
       txdata[0]=0x08;   //1 SIZE
 800092c:	2308      	movs	r3, #8
 800092e:	70a3      	strb	r3, [r4, #2]
       txdata[1]=0x04;   //2 COMMAND
 8000930:	2304      	movs	r3, #4
 8000932:	70e3      	strb	r3, [r4, #3]
       txdata[2]=0x00;   //3 OPTION
 8000934:	2300      	movs	r3, #0
 8000936:	7123      	strb	r3, [r4, #4]
       txdata[3]=id;     //4 ID
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	7163      	strb	r3, [r4, #5]
       txdata[4]=data;  //DATA
 800093c:	79bb      	ldrb	r3, [r7, #6]
 800093e:	71a3      	strb	r3, [r4, #6]
       txdata[5]=adress;  //ADRESS
 8000940:	797b      	ldrb	r3, [r7, #5]
 8000942:	71e3      	strb	r3, [r4, #7]
       txdata[6]=0x01; //COUNT
 8000944:	2301      	movs	r3, #1
 8000946:	7223      	strb	r3, [r4, #8]
       txdata[7]=sum;    //9 SUM
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	7263      	strb	r3, [r4, #9]
       HAL_UART_Transmit(&huart6, txdata, 8, 0xFFFF);
 800094c:	1ca1      	adds	r1, r4, #2
 800094e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000952:	2208      	movs	r2, #8
 8000954:	4808      	ldr	r0, [pc, #32]	; (8000978 <write.9127+0x80>)
 8000956:	f002 fc54 	bl	8003202 <HAL_UART_Transmit>
       HAL_Delay(0.03);
 800095a:	2000      	movs	r0, #0
 800095c:	f000 fdba 	bl	80014d4 <HAL_Delay>
       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2104      	movs	r1, #4
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <write.9127+0x7c>)
 8000966:	f001 f887 	bl	8001a78 <HAL_GPIO_WritePin>
    }
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bd90      	pop	{r4, r7, pc}
 8000972:	bf00      	nop
 8000974:	40020400 	.word	0x40020400
 8000978:	200000e0 	.word	0x200000e0

0800097c <clearning_motion.9130>:
    void clearning_motion(){
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	4664      	mov	r4, ip
 8000984:	f8c7 c004 	str.w	ip, [r7, #4]
      printf("clearning motion...\r\n");
 8000988:	484a      	ldr	r0, [pc, #296]	; (8000ab4 <clearning_motion.9130+0x138>)
 800098a:	f002 ffbb 	bl	8003904 <puts>
      write(0xFF,0x04,0x28);
 800098e:	46a4      	mov	ip, r4
 8000990:	2228      	movs	r2, #40	; 0x28
 8000992:	2104      	movs	r1, #4
 8000994:	20ff      	movs	r0, #255	; 0xff
 8000996:	f7ff ffaf 	bl	80008f8 <write.9127>
      write(0xFF,0x01,0x29);
 800099a:	46a4      	mov	ip, r4
 800099c:	2229      	movs	r2, #41	; 0x29
 800099e:	2101      	movs	r1, #1
 80009a0:	20ff      	movs	r0, #255	; 0xff
 80009a2:	f7ff ffa9 	bl	80008f8 <write.9127>
   	  speed(0xFF,15000);
 80009a6:	46a4      	mov	ip, r4
 80009a8:	f643 2198 	movw	r1, #15000	; 0x3a98
 80009ac:	20ff      	movs	r0, #255	; 0xff
 80009ae:	f7ff ff59 	bl	8000864 <speed.9119>
  	  HAL_Delay(1000);
 80009b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b6:	f000 fd8d 	bl	80014d4 <HAL_Delay>
  	  HAL_GPIO_WritePin(EN_step_GPIO_Port, EN_step_Pin, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2110      	movs	r1, #16
 80009be:	483e      	ldr	r0, [pc, #248]	; (8000ab8 <clearning_motion.9130+0x13c>)
 80009c0:	f001 f85a 	bl	8001a78 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOA, DIR_Pin, 1);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2180      	movs	r1, #128	; 0x80
 80009c8:	483c      	ldr	r0, [pc, #240]	; (8000abc <clearning_motion.9130+0x140>)
 80009ca:	f001 f855 	bl	8001a78 <HAL_GPIO_WritePin>
  	  for(int i=0;i<10000;i++){
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	e014      	b.n	80009fe <clearning_motion.9130+0x82>
  		  HAL_GPIO_WritePin(GPIOA, Step_Pin, 1);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2140      	movs	r1, #64	; 0x40
 80009d8:	4838      	ldr	r0, [pc, #224]	; (8000abc <clearning_motion.9130+0x140>)
 80009da:	f001 f84d 	bl	8001a78 <HAL_GPIO_WritePin>
  		  delay_us(400);
 80009de:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80009e2:	f7ff fdc9 	bl	8000578 <delay_us>
  	  	  HAL_GPIO_WritePin(GPIOA, Step_Pin, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2140      	movs	r1, #64	; 0x40
 80009ea:	4834      	ldr	r0, [pc, #208]	; (8000abc <clearning_motion.9130+0x140>)
 80009ec:	f001 f844 	bl	8001a78 <HAL_GPIO_WritePin>
  	  	  delay_us(400);
 80009f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80009f4:	f7ff fdc0 	bl	8000578 <delay_us>
  	  for(int i=0;i<10000;i++){
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3301      	adds	r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a04:	4293      	cmp	r3, r2
 8000a06:	dde5      	ble.n	80009d4 <clearning_motion.9130+0x58>
  	  HAL_GPIO_WritePin(GPIOA, DIR_Pin, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2180      	movs	r1, #128	; 0x80
 8000a0c:	482b      	ldr	r0, [pc, #172]	; (8000abc <clearning_motion.9130+0x140>)
 8000a0e:	f001 f833 	bl	8001a78 <HAL_GPIO_WritePin>
  	  for(int i=0;i<10000;i++){
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	e018      	b.n	8000a4a <clearning_motion.9130+0xce>
  		  HAL_GPIO_WritePin(GPIOA, Step_Pin, 1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2140      	movs	r1, #64	; 0x40
 8000a1c:	4827      	ldr	r0, [pc, #156]	; (8000abc <clearning_motion.9130+0x140>)
 8000a1e:	f001 f82b 	bl	8001a78 <HAL_GPIO_WritePin>
  		  delay_us(400);
 8000a22:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a26:	f7ff fda7 	bl	8000578 <delay_us>
  	  	  HAL_GPIO_WritePin(GPIOA, Step_Pin, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2140      	movs	r1, #64	; 0x40
 8000a2e:	4823      	ldr	r0, [pc, #140]	; (8000abc <clearning_motion.9130+0x140>)
 8000a30:	f001 f822 	bl	8001a78 <HAL_GPIO_WritePin>
  	  	  delay_us(400);
 8000a34:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a38:	f7ff fd9e 	bl	8000578 <delay_us>
  	  	  if (stop ==1){
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <clearning_motion.9130+0x144>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d008      	beq.n	8000a56 <clearning_motion.9130+0xda>
  	  for(int i=0;i<10000;i++){
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	3301      	adds	r3, #1
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a50:	4293      	cmp	r3, r2
 8000a52:	dde1      	ble.n	8000a18 <clearning_motion.9130+0x9c>
 8000a54:	e000      	b.n	8000a58 <clearning_motion.9130+0xdc>
  	  		  break;
 8000a56:	bf00      	nop
  	  HAL_GPIO_WritePin(EN_step_GPIO_Port, EN_step_Pin, 1);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	4816      	ldr	r0, [pc, #88]	; (8000ab8 <clearning_motion.9130+0x13c>)
 8000a5e:	f001 f80b 	bl	8001a78 <HAL_GPIO_WritePin>
  	  duty=12;
 8000a62:	230c      	movs	r3, #12
 8000a64:	8023      	strh	r3, [r4, #0]
  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <clearning_motion.9130+0x148>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8000a6e:	635a      	str	r2, [r3, #52]	; 0x34
  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,30-duty);
 8000a70:	f9b4 3000 	ldrsh.w	r3, [r4]
 8000a74:	f1c3 021e 	rsb	r2, r3, #30
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <clearning_motion.9130+0x148>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	639a      	str	r2, [r3, #56]	; 0x38
  	  HAL_Delay(1000);
 8000a7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a82:	f000 fd27 	bl	80014d4 <HAL_Delay>
  	  duty=21;
 8000a86:	2315      	movs	r3, #21
 8000a88:	8023      	strh	r3, [r4, #0]
  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <clearning_motion.9130+0x148>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8000a92:	635a      	str	r2, [r3, #52]	; 0x34
  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,30-duty);
 8000a94:	f9b4 3000 	ldrsh.w	r3, [r4]
 8000a98:	f1c3 021e 	rsb	r2, r3, #30
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <clearning_motion.9130+0x148>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	639a      	str	r2, [r3, #56]	; 0x38
  	  HAL_Delay(1000);
 8000aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa6:	f000 fd15 	bl	80014d4 <HAL_Delay>
    }
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd90      	pop	{r4, r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	080047e8 	.word	0x080047e8
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	200001b0 	.word	0x200001b0
 8000ac4:	20000098 	.word	0x20000098

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b094      	sub	sp, #80	; 0x50
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0320 	add.w	r3, r7, #32
 8000ad2:	2230      	movs	r2, #48	; 0x30
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 fe86 	bl	80037e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <SystemClock_Config+0xcc>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a27      	ldr	r2, [pc, #156]	; (8000b94 <SystemClock_Config+0xcc>)
 8000af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <SystemClock_Config+0xcc>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b14:	4a20      	ldr	r2, [pc, #128]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b30:	2310      	movs	r3, #16
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b34:	2302      	movs	r3, #2
 8000b36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000b40:	2340      	movs	r3, #64	; 0x40
 8000b42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 0320 	add.w	r3, r7, #32
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 ffc3 	bl	8001adc <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b5c:	f000 fa32 	bl	8000fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	230f      	movs	r3, #15
 8000b62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b64:	2302      	movs	r3, #2
 8000b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000b6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 fa25 	bl	8001fcc <HAL_RCC_ClockConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b88:	f000 fa1c 	bl	8000fc4 <Error_Handler>
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3750      	adds	r7, #80	; 0x50
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40007000 	.word	0x40007000

08000b9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b096      	sub	sp, #88	; 0x58
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
 8000bca:	615a      	str	r2, [r3, #20]
 8000bcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2220      	movs	r2, #32
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 fe07 	bl	80037e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bda:	4b44      	ldr	r3, [pc, #272]	; (8000cec <MX_TIM1_Init+0x150>)
 8000bdc:	4a44      	ldr	r2, [pc, #272]	; (8000cf0 <MX_TIM1_Init+0x154>)
 8000bde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4999;
 8000be0:	4b42      	ldr	r3, [pc, #264]	; (8000cec <MX_TIM1_Init+0x150>)
 8000be2:	f241 3287 	movw	r2, #4999	; 0x1387
 8000be6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b40      	ldr	r3, [pc, #256]	; (8000cec <MX_TIM1_Init+0x150>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000bee:	4b3f      	ldr	r3, [pc, #252]	; (8000cec <MX_TIM1_Init+0x150>)
 8000bf0:	22ff      	movs	r2, #255	; 0xff
 8000bf2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf4:	4b3d      	ldr	r3, [pc, #244]	; (8000cec <MX_TIM1_Init+0x150>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bfa:	4b3c      	ldr	r3, [pc, #240]	; (8000cec <MX_TIM1_Init+0x150>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c00:	4b3a      	ldr	r3, [pc, #232]	; (8000cec <MX_TIM1_Init+0x150>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c06:	4839      	ldr	r0, [pc, #228]	; (8000cec <MX_TIM1_Init+0x150>)
 8000c08:	f001 fbdc 	bl	80023c4 <HAL_TIM_Base_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c12:	f000 f9d7 	bl	8000fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c20:	4619      	mov	r1, r3
 8000c22:	4832      	ldr	r0, [pc, #200]	; (8000cec <MX_TIM1_Init+0x150>)
 8000c24:	f001 fe4c 	bl	80028c0 <HAL_TIM_ConfigClockSource>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c2e:	f000 f9c9 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c32:	482e      	ldr	r0, [pc, #184]	; (8000cec <MX_TIM1_Init+0x150>)
 8000c34:	f001 fc78 	bl	8002528 <HAL_TIM_PWM_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c3e:	f000 f9c1 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4826      	ldr	r0, [pc, #152]	; (8000cec <MX_TIM1_Init+0x150>)
 8000c52:	f002 f9c9 	bl	8002fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c5c:	f000 f9b2 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c60:	2360      	movs	r3, #96	; 0x60
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c74:	2300      	movs	r3, #0
 8000c76:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c80:	2200      	movs	r2, #0
 8000c82:	4619      	mov	r1, r3
 8000c84:	4819      	ldr	r0, [pc, #100]	; (8000cec <MX_TIM1_Init+0x150>)
 8000c86:	f001 fd59 	bl	800273c <HAL_TIM_PWM_ConfigChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000c90:	f000 f998 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	2204      	movs	r2, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4813      	ldr	r0, [pc, #76]	; (8000cec <MX_TIM1_Init+0x150>)
 8000c9e:	f001 fd4d 	bl	800273c <HAL_TIM_PWM_ConfigChannel>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000ca8:	f000 f98c 	bl	8000fc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4807      	ldr	r0, [pc, #28]	; (8000cec <MX_TIM1_Init+0x150>)
 8000cd0:	f002 f9f8 	bl	80030c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000cda:	f000 f973 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cde:	4803      	ldr	r0, [pc, #12]	; (8000cec <MX_TIM1_Init+0x150>)
 8000ce0:	f000 f9d4 	bl	800108c <HAL_TIM_MspPostInit>

}
 8000ce4:	bf00      	nop
 8000ce6:	3758      	adds	r7, #88	; 0x58
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000098 	.word	0x20000098
 8000cf0:	40010000 	.word	0x40010000

08000cf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d1a:	2207      	movs	r2, #7
 8000d1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d26:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d38:	4813      	ldr	r0, [pc, #76]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d3a:	f001 fb43 	bl	80023c4 <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d44:	f000 f93e 	bl	8000fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	4619      	mov	r1, r3
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d56:	f001 fdb3 	bl	80028c0 <HAL_TIM_ConfigClockSource>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d60:	f000 f930 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d72:	f002 f939 	bl	8002fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 f922 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000124 	.word	0x20000124

08000d8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MX_USART2_UART_Init+0x50>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	f002 f9d0 	bl	8003168 <HAL_UART_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dce:	f000 f8f9 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000016c 	.word	0x2000016c
 8000ddc:	40004400 	.word	0x40004400

08000de0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_USART6_UART_Init+0x48>)
 8000de6:	4a11      	ldr	r2, [pc, #68]	; (8000e2c <MX_USART6_UART_Init+0x4c>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 1500000;
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_USART6_UART_Init+0x48>)
 8000dec:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <MX_USART6_UART_Init+0x50>)
 8000dee:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <MX_USART6_UART_Init+0x48>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_USART6_UART_Init+0x48>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <MX_USART6_UART_Init+0x48>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_USART6_UART_Init+0x48>)
 8000e04:	220c      	movs	r2, #12
 8000e06:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <MX_USART6_UART_Init+0x48>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_USART6_UART_Init+0x48>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_USART6_UART_Init+0x48>)
 8000e16:	f002 f9a7 	bl	8003168 <HAL_UART_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 8000e20:	f000 f8d0 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200000e0 	.word	0x200000e0
 8000e2c:	40011400 	.word	0x40011400
 8000e30:	0016e360 	.word	0x0016e360

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b4f      	ldr	r3, [pc, #316]	; (8000f8c <MX_GPIO_Init+0x158>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a4e      	ldr	r2, [pc, #312]	; (8000f8c <MX_GPIO_Init+0x158>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b4c      	ldr	r3, [pc, #304]	; (8000f8c <MX_GPIO_Init+0x158>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <MX_GPIO_Init+0x158>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a47      	ldr	r2, [pc, #284]	; (8000f8c <MX_GPIO_Init+0x158>)
 8000e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b45      	ldr	r3, [pc, #276]	; (8000f8c <MX_GPIO_Init+0x158>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b41      	ldr	r3, [pc, #260]	; (8000f8c <MX_GPIO_Init+0x158>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a40      	ldr	r2, [pc, #256]	; (8000f8c <MX_GPIO_Init+0x158>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b3e      	ldr	r3, [pc, #248]	; (8000f8c <MX_GPIO_Init+0x158>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b3a      	ldr	r3, [pc, #232]	; (8000f8c <MX_GPIO_Init+0x158>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a39      	ldr	r2, [pc, #228]	; (8000f8c <MX_GPIO_Init+0x158>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <MX_GPIO_Init+0x158>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|Step_Pin|DIR_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	21e2      	movs	r1, #226	; 0xe2
 8000ebe:	4834      	ldr	r0, [pc, #208]	; (8000f90 <MX_GPIO_Init+0x15c>)
 8000ec0:	f000 fdda 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_step_GPIO_Port, EN_step_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	4832      	ldr	r0, [pc, #200]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000eca:	f000 fdd5 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	4831      	ldr	r0, [pc, #196]	; (8000f98 <MX_GPIO_Init+0x164>)
 8000ed4:	f000 fdd0 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ede:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	4829      	ldr	r0, [pc, #164]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000ef0:	f000 fc26 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ef8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4821      	ldr	r0, [pc, #132]	; (8000f90 <MX_GPIO_Init+0x15c>)
 8000f0a:	f000 fc19 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin Step_Pin DIR_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|Step_Pin|DIR_Pin;
 8000f0e:	23e2      	movs	r3, #226	; 0xe2
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	481a      	ldr	r0, [pc, #104]	; (8000f90 <MX_GPIO_Init+0x15c>)
 8000f26:	f000 fc0b 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_step_Pin */
  GPIO_InitStruct.Pin = EN_step_Pin;
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_step_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4814      	ldr	r0, [pc, #80]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000f42:	f000 fbfd 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f46:	2304      	movs	r3, #4
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480e      	ldr	r0, [pc, #56]	; (8000f98 <MX_GPIO_Init+0x164>)
 8000f5e:	f000 fbef 	bl	8001740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2006      	movs	r0, #6
 8000f68:	f000 fbb3 	bl	80016d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f6c:	2006      	movs	r0, #6
 8000f6e:	f000 fbcc 	bl	800170a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	2028      	movs	r0, #40	; 0x28
 8000f78:	f000 fbab 	bl	80016d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f7c:	2028      	movs	r0, #40	; 0x28
 8000f7e:	f000 fbc4 	bl	800170a <HAL_NVIC_EnableIRQ>

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020400 	.word	0x40020400

08000f9c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	230a      	movs	r3, #10
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <_write+0x24>)
 8000fb2:	f002 f926 	bl	8003202 <HAL_UART_Transmit>
  return len;
 8000fb6:	687b      	ldr	r3, [r7, #4]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000016c 	.word	0x2000016c

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <Error_Handler+0x8>
	...

08000fd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <HAL_MspInit+0x4c>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a0f      	ldr	r2, [pc, #60]	; (800101c <HAL_MspInit+0x4c>)
 8000fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <HAL_MspInit+0x4c>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_MspInit+0x4c>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_MspInit+0x4c>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_MspInit+0x4c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800100e:	2007      	movs	r0, #7
 8001010:	f000 fb54 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800

08001020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a15      	ldr	r2, [pc, #84]	; (8001084 <HAL_TIM_Base_MspInit+0x64>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10e      	bne.n	8001050 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_TIM_Base_MspInit+0x68>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a13      	ldr	r2, [pc, #76]	; (8001088 <HAL_TIM_Base_MspInit+0x68>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_TIM_Base_MspInit+0x68>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800104e:	e012      	b.n	8001076 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001058:	d10d      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_TIM_Base_MspInit+0x68>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	4a09      	ldr	r2, [pc, #36]	; (8001088 <HAL_TIM_Base_MspInit+0x68>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <HAL_TIM_Base_MspInit+0x68>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40010000 	.word	0x40010000
 8001088:	40023800 	.word	0x40023800

0800108c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <HAL_TIM_MspPostInit+0x68>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d11e      	bne.n	80010ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_TIM_MspPostInit+0x6c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <HAL_TIM_MspPostInit+0x6c>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_TIM_MspPostInit+0x6c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010dc:	2301      	movs	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4619      	mov	r1, r3
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_TIM_MspPostInit+0x70>)
 80010e8:	f000 fb2a 	bl	8001740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40010000 	.word	0x40010000
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020000 	.word	0x40020000

08001100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a32      	ldr	r2, [pc, #200]	; (80011e8 <HAL_UART_MspInit+0xe8>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d12c      	bne.n	800117c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <HAL_UART_MspInit+0xec>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a30      	ldr	r2, [pc, #192]	; (80011ec <HAL_UART_MspInit+0xec>)
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <HAL_UART_MspInit+0xec>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <HAL_UART_MspInit+0xec>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a29      	ldr	r2, [pc, #164]	; (80011ec <HAL_UART_MspInit+0xec>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b27      	ldr	r3, [pc, #156]	; (80011ec <HAL_UART_MspInit+0xec>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800115a:	230c      	movs	r3, #12
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800116a:	2307      	movs	r3, #7
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	481e      	ldr	r0, [pc, #120]	; (80011f0 <HAL_UART_MspInit+0xf0>)
 8001176:	f000 fae3 	bl	8001740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800117a:	e031      	b.n	80011e0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a1c      	ldr	r2, [pc, #112]	; (80011f4 <HAL_UART_MspInit+0xf4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d12c      	bne.n	80011e0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_UART_MspInit+0xec>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_UART_MspInit+0xec>)
 8001190:	f043 0320 	orr.w	r3, r3, #32
 8001194:	6453      	str	r3, [r2, #68]	; 0x44
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_UART_MspInit+0xec>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f003 0320 	and.w	r3, r3, #32
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_UART_MspInit+0xec>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <HAL_UART_MspInit+0xec>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_UART_MspInit+0xec>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011d0:	2308      	movs	r3, #8
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <HAL_UART_MspInit+0xf0>)
 80011dc:	f000 fab0 	bl	8001740 <HAL_GPIO_Init>
}
 80011e0:	bf00      	nop
 80011e2:	3730      	adds	r7, #48	; 0x30
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40004400 	.word	0x40004400
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40011400 	.word	0x40011400

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <NMI_Handler+0x4>

080011fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <MemManage_Handler+0x4>

0800120a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <UsageFault_Handler+0x4>

08001216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001244:	f000 f926 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001250:	2001      	movs	r0, #1
 8001252:	f000 fc2b 	bl	8001aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}

0800125a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800125e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001262:	f000 fc23 	bl	8001aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}

0800126a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	e00a      	b.n	8001292 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800127c:	f3af 8000 	nop.w
 8001280:	4601      	mov	r1, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	60ba      	str	r2, [r7, #8]
 8001288:	b2ca      	uxtb	r2, r1
 800128a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3301      	adds	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	429a      	cmp	r2, r3
 8001298:	dbf0      	blt.n	800127c <_read+0x12>
	}

return len;
 800129a:	687b      	ldr	r3, [r7, #4]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_close>:
	}
	return len;
}

int _close(int file)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	return -1;
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012cc:	605a      	str	r2, [r3, #4]
	return 0;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <_isatty>:

int _isatty(int file)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	return 1;
 80012e4:	2301      	movs	r3, #1
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b085      	sub	sp, #20
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60f8      	str	r0, [r7, #12]
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
	return 0;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001314:	4a14      	ldr	r2, [pc, #80]	; (8001368 <_sbrk+0x5c>)
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <_sbrk+0x60>)
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <_sbrk+0x64>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <_sbrk+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	429a      	cmp	r2, r3
 800133a:	d207      	bcs.n	800134c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800133c:	f002 fa2a 	bl	8003794 <__errno>
 8001340:	4603      	mov	r3, r0
 8001342:	220c      	movs	r2, #12
 8001344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	e009      	b.n	8001360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <_sbrk+0x64>)
 800135c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20018000 	.word	0x20018000
 800136c:	00000400 	.word	0x00000400
 8001370:	2000008c 	.word	0x2000008c
 8001374:	200001c8 	.word	0x200001c8

08001378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SystemInit+0x20>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <SystemInit+0x20>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013a2:	490e      	ldr	r1, [pc, #56]	; (80013dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013a4:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013b8:	4c0b      	ldr	r4, [pc, #44]	; (80013e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013c6:	f7ff ffd7 	bl	8001378 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ca:	f002 f9e9 	bl	80037a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ce:	f7ff f97b 	bl	80006c8 <main>
  bx  lr    
 80013d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013e0:	080048c0 	.word	0x080048c0
  ldr r2, =_sbss
 80013e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013e8:	200001c8 	.word	0x200001c8

080013ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <HAL_Init+0x40>)
 80013fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_Init+0x40>)
 8001406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_Init+0x40>)
 8001412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f94f 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141e:	2000      	movs	r0, #0
 8001420:	f000 f808 	bl	8001434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001424:	f7ff fdd4 	bl	8000fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023c00 	.word	0x40023c00

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x54>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x58>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f967 	bl	8001726 <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e00e      	b.n	8001480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d80a      	bhi.n	800147e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 f92f 	bl	80016d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <HAL_InitTick+0x5c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000000 	.word	0x20000000
 800148c:	20000008 	.word	0x20000008
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008
 80014b8:	200001b4 	.word	0x200001b4

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	200001b4 	.word	0x200001b4

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff ffee 	bl	80014bc <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_Delay+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014fa:	bf00      	nop
 80014fc:	f7ff ffde 	bl	80014bc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000008 	.word	0x20000008

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff29 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff3e 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff8e 	bl	8001610 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5d 	bl	80015bc <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff31 	bl	8001580 <__NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffa2 	bl	8001678 <SysTick_Config>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	e159      	b.n	8001a10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800175c:	2201      	movs	r2, #1
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	429a      	cmp	r2, r3
 8001776:	f040 8148 	bne.w	8001a0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b01      	cmp	r3, #1
 8001784:	d005      	beq.n	8001792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178e:	2b02      	cmp	r3, #2
 8001790:	d130      	bne.n	80017f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c8:	2201      	movs	r2, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 0201 	and.w	r2, r3, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d017      	beq.n	8001830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2203      	movs	r2, #3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d123      	bne.n	8001884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	08da      	lsrs	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3208      	adds	r2, #8
 8001844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	08da      	lsrs	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3208      	adds	r2, #8
 800187e:	69b9      	ldr	r1, [r7, #24]
 8001880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0203 	and.w	r2, r3, #3
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80a2 	beq.w	8001a0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b57      	ldr	r3, [pc, #348]	; (8001a28 <HAL_GPIO_Init+0x2e8>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a56      	ldr	r2, [pc, #344]	; (8001a28 <HAL_GPIO_Init+0x2e8>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b54      	ldr	r3, [pc, #336]	; (8001a28 <HAL_GPIO_Init+0x2e8>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018e2:	4a52      	ldr	r2, [pc, #328]	; (8001a2c <HAL_GPIO_Init+0x2ec>)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a49      	ldr	r2, [pc, #292]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d019      	beq.n	8001942 <HAL_GPIO_Init+0x202>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a48      	ldr	r2, [pc, #288]	; (8001a34 <HAL_GPIO_Init+0x2f4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <HAL_GPIO_Init+0x1fe>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a47      	ldr	r2, [pc, #284]	; (8001a38 <HAL_GPIO_Init+0x2f8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00d      	beq.n	800193a <HAL_GPIO_Init+0x1fa>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a46      	ldr	r2, [pc, #280]	; (8001a3c <HAL_GPIO_Init+0x2fc>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d007      	beq.n	8001936 <HAL_GPIO_Init+0x1f6>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a45      	ldr	r2, [pc, #276]	; (8001a40 <HAL_GPIO_Init+0x300>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d101      	bne.n	8001932 <HAL_GPIO_Init+0x1f2>
 800192e:	2304      	movs	r3, #4
 8001930:	e008      	b.n	8001944 <HAL_GPIO_Init+0x204>
 8001932:	2307      	movs	r3, #7
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x204>
 8001936:	2303      	movs	r3, #3
 8001938:	e004      	b.n	8001944 <HAL_GPIO_Init+0x204>
 800193a:	2302      	movs	r3, #2
 800193c:	e002      	b.n	8001944 <HAL_GPIO_Init+0x204>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x204>
 8001942:	2300      	movs	r3, #0
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	f002 0203 	and.w	r2, r2, #3
 800194a:	0092      	lsls	r2, r2, #2
 800194c:	4093      	lsls	r3, r2
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001954:	4935      	ldr	r1, [pc, #212]	; (8001a2c <HAL_GPIO_Init+0x2ec>)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001962:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <HAL_GPIO_Init+0x304>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001986:	4a2f      	ldr	r2, [pc, #188]	; (8001a44 <HAL_GPIO_Init+0x304>)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800198c:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <HAL_GPIO_Init+0x304>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019b0:	4a24      	ldr	r2, [pc, #144]	; (8001a44 <HAL_GPIO_Init+0x304>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b6:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <HAL_GPIO_Init+0x304>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019da:	4a1a      	ldr	r2, [pc, #104]	; (8001a44 <HAL_GPIO_Init+0x304>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_GPIO_Init+0x304>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a04:	4a0f      	ldr	r2, [pc, #60]	; (8001a44 <HAL_GPIO_Init+0x304>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2b0f      	cmp	r3, #15
 8001a14:	f67f aea2 	bls.w	800175c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40013800 	.word	0x40013800
 8001a30:	40020000 	.word	0x40020000
 8001a34:	40020400 	.word	0x40020400
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	40020c00 	.word	0x40020c00
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40013c00 	.word	0x40013c00

08001a48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e001      	b.n	8001a6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a88:	787b      	ldrb	r3, [r7, #1]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a94:	e003      	b.n	8001a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	041a      	lsls	r2, r3, #16
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	619a      	str	r2, [r3, #24]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd6c 	bl	80005a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e264      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d075      	beq.n	8001be6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001afa:	4ba3      	ldr	r3, [pc, #652]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d00c      	beq.n	8001b20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b06:	4ba0      	ldr	r3, [pc, #640]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d112      	bne.n	8001b38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b12:	4b9d      	ldr	r3, [pc, #628]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b1e:	d10b      	bne.n	8001b38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b20:	4b99      	ldr	r3, [pc, #612]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d05b      	beq.n	8001be4 <HAL_RCC_OscConfig+0x108>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d157      	bne.n	8001be4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e23f      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b40:	d106      	bne.n	8001b50 <HAL_RCC_OscConfig+0x74>
 8001b42:	4b91      	ldr	r3, [pc, #580]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a90      	ldr	r2, [pc, #576]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e01d      	b.n	8001b8c <HAL_RCC_OscConfig+0xb0>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x98>
 8001b5a:	4b8b      	ldr	r3, [pc, #556]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a8a      	ldr	r2, [pc, #552]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b88      	ldr	r3, [pc, #544]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a87      	ldr	r2, [pc, #540]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0xb0>
 8001b74:	4b84      	ldr	r3, [pc, #528]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a83      	ldr	r2, [pc, #524]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b81      	ldr	r3, [pc, #516]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a80      	ldr	r2, [pc, #512]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d013      	beq.n	8001bbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fc92 	bl	80014bc <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fc8e 	bl	80014bc <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e204      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	4b76      	ldr	r3, [pc, #472]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0xc0>
 8001bba:	e014      	b.n	8001be6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fc7e 	bl	80014bc <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fc7a 	bl	80014bc <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1f0      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd6:	4b6c      	ldr	r3, [pc, #432]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xe8>
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d063      	beq.n	8001cba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf2:	4b65      	ldr	r3, [pc, #404]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfe:	4b62      	ldr	r3, [pc, #392]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d11c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0a:	4b5f      	ldr	r3, [pc, #380]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d116      	bne.n	8001c44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c16:	4b5c      	ldr	r3, [pc, #368]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_RCC_OscConfig+0x152>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d001      	beq.n	8001c2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e1c4      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2e:	4b56      	ldr	r3, [pc, #344]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4952      	ldr	r1, [pc, #328]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	e03a      	b.n	8001cba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4c:	4b4f      	ldr	r3, [pc, #316]	; (8001d8c <HAL_RCC_OscConfig+0x2b0>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff fc33 	bl	80014bc <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7ff fc2f 	bl	80014bc <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e1a5      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6c:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4940      	ldr	r1, [pc, #256]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
 8001c8c:	e015      	b.n	8001cba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8e:	4b3f      	ldr	r3, [pc, #252]	; (8001d8c <HAL_RCC_OscConfig+0x2b0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff fc12 	bl	80014bc <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fc0e 	bl	80014bc <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e184      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cae:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d030      	beq.n	8001d28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d016      	beq.n	8001cfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cce:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <HAL_RCC_OscConfig+0x2b4>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fbf2 	bl	80014bc <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fbee 	bl	80014bc <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e164      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x200>
 8001cfa:	e015      	b.n	8001d28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfc:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <HAL_RCC_OscConfig+0x2b4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7ff fbdb 	bl	80014bc <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fbd7 	bl	80014bc <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e14d      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80a0 	beq.w	8001e76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10f      	bne.n	8001d66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d62:	2301      	movs	r3, #1
 8001d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_RCC_OscConfig+0x2b8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d121      	bne.n	8001db6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_RCC_OscConfig+0x2b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_RCC_OscConfig+0x2b8>)
 8001d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff fb9d 	bl	80014bc <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	e011      	b.n	8001daa <HAL_RCC_OscConfig+0x2ce>
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	42470000 	.word	0x42470000
 8001d90:	42470e80 	.word	0x42470e80
 8001d94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d98:	f7ff fb90 	bl	80014bc <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e106      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001daa:	4b85      	ldr	r3, [pc, #532]	; (8001fc0 <HAL_RCC_OscConfig+0x4e4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d106      	bne.n	8001dcc <HAL_RCC_OscConfig+0x2f0>
 8001dbe:	4b81      	ldr	r3, [pc, #516]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a80      	ldr	r2, [pc, #512]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	e01c      	b.n	8001e06 <HAL_RCC_OscConfig+0x32a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_OscConfig+0x312>
 8001dd4:	4b7b      	ldr	r3, [pc, #492]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	4a7a      	ldr	r2, [pc, #488]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6713      	str	r3, [r2, #112]	; 0x70
 8001de0:	4b78      	ldr	r3, [pc, #480]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	4a77      	ldr	r2, [pc, #476]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6713      	str	r3, [r2, #112]	; 0x70
 8001dec:	e00b      	b.n	8001e06 <HAL_RCC_OscConfig+0x32a>
 8001dee:	4b75      	ldr	r3, [pc, #468]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	4a74      	ldr	r2, [pc, #464]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfa:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	4a71      	ldr	r2, [pc, #452]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d015      	beq.n	8001e3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fb55 	bl	80014bc <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff fb51 	bl	80014bc <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0c5      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	4b65      	ldr	r3, [pc, #404]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ee      	beq.n	8001e16 <HAL_RCC_OscConfig+0x33a>
 8001e38:	e014      	b.n	8001e64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fb3f 	bl	80014bc <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7ff fb3b 	bl	80014bc <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e0af      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	4b5a      	ldr	r3, [pc, #360]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ee      	bne.n	8001e42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d105      	bne.n	8001e76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b56      	ldr	r3, [pc, #344]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a55      	ldr	r2, [pc, #340]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 809b 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d05c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d141      	bne.n	8001f18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b4c      	ldr	r3, [pc, #304]	; (8001fc8 <HAL_RCC_OscConfig+0x4ec>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fb0f 	bl	80014bc <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff fb0b 	bl	80014bc <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e081      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb4:	4b43      	ldr	r3, [pc, #268]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	019b      	lsls	r3, r3, #6
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	085b      	lsrs	r3, r3, #1
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	061b      	lsls	r3, r3, #24
 8001ee4:	4937      	ldr	r1, [pc, #220]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eea:	4b37      	ldr	r3, [pc, #220]	; (8001fc8 <HAL_RCC_OscConfig+0x4ec>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fae4 	bl	80014bc <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff fae0 	bl	80014bc <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e056      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	4b2e      	ldr	r3, [pc, #184]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x41c>
 8001f16:	e04e      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <HAL_RCC_OscConfig+0x4ec>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff facd 	bl	80014bc <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff fac9 	bl	80014bc <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e03f      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x44a>
 8001f44:	e037      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e032      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d028      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d121      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d11a      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f82:	4013      	ands	r3, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d111      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	085b      	lsrs	r3, r3, #1
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	42470060 	.word	0x42470060

08001fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0cc      	b.n	800217a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b68      	ldr	r3, [pc, #416]	; (8002184 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d90c      	bls.n	8002008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b65      	ldr	r3, [pc, #404]	; (8002184 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b63      	ldr	r3, [pc, #396]	; (8002184 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0b8      	b.n	800217a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002020:	4b59      	ldr	r3, [pc, #356]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4a58      	ldr	r2, [pc, #352]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800202a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002038:	4b53      	ldr	r3, [pc, #332]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4a52      	ldr	r2, [pc, #328]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002044:	4b50      	ldr	r3, [pc, #320]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	494d      	ldr	r1, [pc, #308]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d044      	beq.n	80020ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d119      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e07f      	b.n	800217a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d003      	beq.n	800208a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002086:	2b03      	cmp	r3, #3
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208a:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e06f      	b.n	800217a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209a:	4b3b      	ldr	r3, [pc, #236]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e067      	b.n	800217a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020aa:	4b37      	ldr	r3, [pc, #220]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f023 0203 	bic.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4934      	ldr	r1, [pc, #208]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020bc:	f7ff f9fe 	bl	80014bc <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	e00a      	b.n	80020da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7ff f9fa 	bl	80014bc <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e04f      	b.n	800217a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 020c 	and.w	r2, r3, #12
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1eb      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ec:	4b25      	ldr	r3, [pc, #148]	; (8002184 <HAL_RCC_ClockConfig+0x1b8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d20c      	bcs.n	8002114 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_RCC_ClockConfig+0x1b8>)
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e032      	b.n	800217a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4916      	ldr	r1, [pc, #88]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	490e      	ldr	r1, [pc, #56]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	4313      	orrs	r3, r2
 8002150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002152:	f000 f821 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8002156:	4602      	mov	r2, r0
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	490a      	ldr	r1, [pc, #40]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	5ccb      	ldrb	r3, [r1, r3]
 8002166:	fa22 f303 	lsr.w	r3, r2, r3
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1c8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff f95e 	bl	8001434 <HAL_InitTick>

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023c00 	.word	0x40023c00
 8002188:	40023800 	.word	0x40023800
 800218c:	08004800 	.word	0x08004800
 8002190:	20000000 	.word	0x20000000
 8002194:	20000004 	.word	0x20000004

08002198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002198:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	2300      	movs	r3, #0
 80021aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021b0:	4b67      	ldr	r3, [pc, #412]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d00d      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x40>
 80021bc:	2b08      	cmp	r3, #8
 80021be:	f200 80bd 	bhi.w	800233c <HAL_RCC_GetSysClockFreq+0x1a4>
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x34>
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d003      	beq.n	80021d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ca:	e0b7      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021cc:	4b61      	ldr	r3, [pc, #388]	; (8002354 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021ce:	60bb      	str	r3, [r7, #8]
       break;
 80021d0:	e0b7      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021d2:	4b61      	ldr	r3, [pc, #388]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80021d4:	60bb      	str	r3, [r7, #8]
      break;
 80021d6:	e0b4      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021d8:	4b5d      	ldr	r3, [pc, #372]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021e2:	4b5b      	ldr	r3, [pc, #364]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d04d      	beq.n	800228a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ee:	4b58      	ldr	r3, [pc, #352]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	099b      	lsrs	r3, r3, #6
 80021f4:	461a      	mov	r2, r3
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	ea02 0800 	and.w	r8, r2, r0
 8002206:	ea03 0901 	and.w	r9, r3, r1
 800220a:	4640      	mov	r0, r8
 800220c:	4649      	mov	r1, r9
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	014b      	lsls	r3, r1, #5
 8002218:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800221c:	0142      	lsls	r2, r0, #5
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	ebb0 0008 	subs.w	r0, r0, r8
 8002226:	eb61 0109 	sbc.w	r1, r1, r9
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	018b      	lsls	r3, r1, #6
 8002234:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002238:	0182      	lsls	r2, r0, #6
 800223a:	1a12      	subs	r2, r2, r0
 800223c:	eb63 0301 	sbc.w	r3, r3, r1
 8002240:	f04f 0000 	mov.w	r0, #0
 8002244:	f04f 0100 	mov.w	r1, #0
 8002248:	00d9      	lsls	r1, r3, #3
 800224a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800224e:	00d0      	lsls	r0, r2, #3
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	eb12 0208 	adds.w	r2, r2, r8
 8002258:	eb43 0309 	adc.w	r3, r3, r9
 800225c:	f04f 0000 	mov.w	r0, #0
 8002260:	f04f 0100 	mov.w	r1, #0
 8002264:	0259      	lsls	r1, r3, #9
 8002266:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800226a:	0250      	lsls	r0, r2, #9
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	461a      	mov	r2, r3
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	f7fe f800 	bl	8000280 <__aeabi_uldivmod>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4613      	mov	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	e04a      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228a:	4b31      	ldr	r3, [pc, #196]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	099b      	lsrs	r3, r3, #6
 8002290:	461a      	mov	r2, r3
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	f240 10ff 	movw	r0, #511	; 0x1ff
 800229a:	f04f 0100 	mov.w	r1, #0
 800229e:	ea02 0400 	and.w	r4, r2, r0
 80022a2:	ea03 0501 	and.w	r5, r3, r1
 80022a6:	4620      	mov	r0, r4
 80022a8:	4629      	mov	r1, r5
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	014b      	lsls	r3, r1, #5
 80022b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022b8:	0142      	lsls	r2, r0, #5
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	1b00      	subs	r0, r0, r4
 80022c0:	eb61 0105 	sbc.w	r1, r1, r5
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	018b      	lsls	r3, r1, #6
 80022ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022d2:	0182      	lsls	r2, r0, #6
 80022d4:	1a12      	subs	r2, r2, r0
 80022d6:	eb63 0301 	sbc.w	r3, r3, r1
 80022da:	f04f 0000 	mov.w	r0, #0
 80022de:	f04f 0100 	mov.w	r1, #0
 80022e2:	00d9      	lsls	r1, r3, #3
 80022e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022e8:	00d0      	lsls	r0, r2, #3
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	1912      	adds	r2, r2, r4
 80022f0:	eb45 0303 	adc.w	r3, r5, r3
 80022f4:	f04f 0000 	mov.w	r0, #0
 80022f8:	f04f 0100 	mov.w	r1, #0
 80022fc:	0299      	lsls	r1, r3, #10
 80022fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002302:	0290      	lsls	r0, r2, #10
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	461a      	mov	r2, r3
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	f7fd ffb4 	bl	8000280 <__aeabi_uldivmod>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4613      	mov	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	3301      	adds	r3, #1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	fbb2 f3f3 	udiv	r3, r2, r3
 8002338:	60bb      	str	r3, [r7, #8]
      break;
 800233a:	e002      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800233e:	60bb      	str	r3, [r7, #8]
      break;
 8002340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002342:	68bb      	ldr	r3, [r7, #8]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
 8002354:	00f42400 	.word	0x00f42400
 8002358:	007a1200 	.word	0x007a1200

0800235c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <HAL_RCC_GetHCLKFreq+0x14>)
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000000 	.word	0x20000000

08002374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002378:	f7ff fff0 	bl	800235c <HAL_RCC_GetHCLKFreq>
 800237c:	4602      	mov	r2, r0
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	0a9b      	lsrs	r3, r3, #10
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4903      	ldr	r1, [pc, #12]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800238a:	5ccb      	ldrb	r3, [r1, r3]
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40023800 	.word	0x40023800
 8002398:	08004810 	.word	0x08004810

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023a0:	f7ff ffdc 	bl	800235c <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	0b5b      	lsrs	r3, r3, #13
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4903      	ldr	r1, [pc, #12]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40023800 	.word	0x40023800
 80023c0:	08004810 	.word	0x08004810

080023c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e041      	b.n	800245a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe fe18 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3304      	adds	r3, #4
 8002400:	4619      	mov	r1, r3
 8002402:	4610      	mov	r0, r2
 8002404:	f000 fb24 	bl	8002a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d001      	beq.n	800247c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e044      	b.n	8002506 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1e      	ldr	r2, [pc, #120]	; (8002514 <HAL_TIM_Base_Start_IT+0xb0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d018      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x6c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a6:	d013      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x6c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <HAL_TIM_Base_Start_IT+0xb4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00e      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x6c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a19      	ldr	r2, [pc, #100]	; (800251c <HAL_TIM_Base_Start_IT+0xb8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d009      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x6c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a17      	ldr	r2, [pc, #92]	; (8002520 <HAL_TIM_Base_Start_IT+0xbc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d004      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x6c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a16      	ldr	r2, [pc, #88]	; (8002524 <HAL_TIM_Base_Start_IT+0xc0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d111      	bne.n	80024f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d010      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f2:	e007      	b.n	8002504 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40010000 	.word	0x40010000
 8002518:	40000400 	.word	0x40000400
 800251c:	40000800 	.word	0x40000800
 8002520:	40000c00 	.word	0x40000c00
 8002524:	40014000 	.word	0x40014000

08002528 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e041      	b.n	80025be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f839 	bl	80025c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3304      	adds	r3, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f000 fa72 	bl	8002a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d109      	bne.n	8002600 <HAL_TIM_PWM_Start+0x24>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	e022      	b.n	8002646 <HAL_TIM_PWM_Start+0x6a>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2b04      	cmp	r3, #4
 8002604:	d109      	bne.n	800261a <HAL_TIM_PWM_Start+0x3e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	bf14      	ite	ne
 8002612:	2301      	movne	r3, #1
 8002614:	2300      	moveq	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	e015      	b.n	8002646 <HAL_TIM_PWM_Start+0x6a>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b08      	cmp	r3, #8
 800261e:	d109      	bne.n	8002634 <HAL_TIM_PWM_Start+0x58>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	e008      	b.n	8002646 <HAL_TIM_PWM_Start+0x6a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	bf14      	ite	ne
 8002640:	2301      	movne	r3, #1
 8002642:	2300      	moveq	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e068      	b.n	8002720 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d104      	bne.n	800265e <HAL_TIM_PWM_Start+0x82>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800265c:	e013      	b.n	8002686 <HAL_TIM_PWM_Start+0xaa>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b04      	cmp	r3, #4
 8002662:	d104      	bne.n	800266e <HAL_TIM_PWM_Start+0x92>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800266c:	e00b      	b.n	8002686 <HAL_TIM_PWM_Start+0xaa>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d104      	bne.n	800267e <HAL_TIM_PWM_Start+0xa2>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800267c:	e003      	b.n	8002686 <HAL_TIM_PWM_Start+0xaa>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2202      	movs	r2, #2
 8002682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2201      	movs	r2, #1
 800268c:	6839      	ldr	r1, [r7, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fc84 	bl	8002f9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a23      	ldr	r2, [pc, #140]	; (8002728 <HAL_TIM_PWM_Start+0x14c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d107      	bne.n	80026ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <HAL_TIM_PWM_Start+0x14c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d018      	beq.n	80026ea <HAL_TIM_PWM_Start+0x10e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c0:	d013      	beq.n	80026ea <HAL_TIM_PWM_Start+0x10e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a19      	ldr	r2, [pc, #100]	; (800272c <HAL_TIM_PWM_Start+0x150>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d00e      	beq.n	80026ea <HAL_TIM_PWM_Start+0x10e>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a17      	ldr	r2, [pc, #92]	; (8002730 <HAL_TIM_PWM_Start+0x154>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d009      	beq.n	80026ea <HAL_TIM_PWM_Start+0x10e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a16      	ldr	r2, [pc, #88]	; (8002734 <HAL_TIM_PWM_Start+0x158>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d004      	beq.n	80026ea <HAL_TIM_PWM_Start+0x10e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <HAL_TIM_PWM_Start+0x15c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d111      	bne.n	800270e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b06      	cmp	r3, #6
 80026fa:	d010      	beq.n	800271e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270c:	e007      	b.n	800271e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40010000 	.word	0x40010000
 800272c:	40000400 	.word	0x40000400
 8002730:	40000800 	.word	0x40000800
 8002734:	40000c00 	.word	0x40000c00
 8002738:	40014000 	.word	0x40014000

0800273c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002756:	2302      	movs	r3, #2
 8002758:	e0ae      	b.n	80028b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b0c      	cmp	r3, #12
 8002766:	f200 809f 	bhi.w	80028a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800276a:	a201      	add	r2, pc, #4	; (adr r2, 8002770 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800276c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002770:	080027a5 	.word	0x080027a5
 8002774:	080028a9 	.word	0x080028a9
 8002778:	080028a9 	.word	0x080028a9
 800277c:	080028a9 	.word	0x080028a9
 8002780:	080027e5 	.word	0x080027e5
 8002784:	080028a9 	.word	0x080028a9
 8002788:	080028a9 	.word	0x080028a9
 800278c:	080028a9 	.word	0x080028a9
 8002790:	08002827 	.word	0x08002827
 8002794:	080028a9 	.word	0x080028a9
 8002798:	080028a9 	.word	0x080028a9
 800279c:	080028a9 	.word	0x080028a9
 80027a0:	08002867 	.word	0x08002867
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f9d0 	bl	8002b50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0208 	orr.w	r2, r2, #8
 80027be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0204 	bic.w	r2, r2, #4
 80027ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6999      	ldr	r1, [r3, #24]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	619a      	str	r2, [r3, #24]
      break;
 80027e2:	e064      	b.n	80028ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fa16 	bl	8002c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699a      	ldr	r2, [r3, #24]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699a      	ldr	r2, [r3, #24]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6999      	ldr	r1, [r3, #24]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	021a      	lsls	r2, r3, #8
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	619a      	str	r2, [r3, #24]
      break;
 8002824:	e043      	b.n	80028ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	4618      	mov	r0, r3
 800282e:	f000 fa61 	bl	8002cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0208 	orr.w	r2, r2, #8
 8002840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0204 	bic.w	r2, r2, #4
 8002850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	69d9      	ldr	r1, [r3, #28]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	61da      	str	r2, [r3, #28]
      break;
 8002864:	e023      	b.n	80028ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	4618      	mov	r0, r3
 800286e:	f000 faab 	bl	8002dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	69d9      	ldr	r1, [r3, #28]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	021a      	lsls	r2, r3, #8
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	61da      	str	r2, [r3, #28]
      break;
 80028a6:	e002      	b.n	80028ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	75fb      	strb	r3, [r7, #23]
      break;
 80028ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_TIM_ConfigClockSource+0x1c>
 80028d8:	2302      	movs	r3, #2
 80028da:	e0b4      	b.n	8002a46 <HAL_TIM_ConfigClockSource+0x186>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002902:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002914:	d03e      	beq.n	8002994 <HAL_TIM_ConfigClockSource+0xd4>
 8002916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291a:	f200 8087 	bhi.w	8002a2c <HAL_TIM_ConfigClockSource+0x16c>
 800291e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002922:	f000 8086 	beq.w	8002a32 <HAL_TIM_ConfigClockSource+0x172>
 8002926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292a:	d87f      	bhi.n	8002a2c <HAL_TIM_ConfigClockSource+0x16c>
 800292c:	2b70      	cmp	r3, #112	; 0x70
 800292e:	d01a      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0xa6>
 8002930:	2b70      	cmp	r3, #112	; 0x70
 8002932:	d87b      	bhi.n	8002a2c <HAL_TIM_ConfigClockSource+0x16c>
 8002934:	2b60      	cmp	r3, #96	; 0x60
 8002936:	d050      	beq.n	80029da <HAL_TIM_ConfigClockSource+0x11a>
 8002938:	2b60      	cmp	r3, #96	; 0x60
 800293a:	d877      	bhi.n	8002a2c <HAL_TIM_ConfigClockSource+0x16c>
 800293c:	2b50      	cmp	r3, #80	; 0x50
 800293e:	d03c      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0xfa>
 8002940:	2b50      	cmp	r3, #80	; 0x50
 8002942:	d873      	bhi.n	8002a2c <HAL_TIM_ConfigClockSource+0x16c>
 8002944:	2b40      	cmp	r3, #64	; 0x40
 8002946:	d058      	beq.n	80029fa <HAL_TIM_ConfigClockSource+0x13a>
 8002948:	2b40      	cmp	r3, #64	; 0x40
 800294a:	d86f      	bhi.n	8002a2c <HAL_TIM_ConfigClockSource+0x16c>
 800294c:	2b30      	cmp	r3, #48	; 0x30
 800294e:	d064      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0x15a>
 8002950:	2b30      	cmp	r3, #48	; 0x30
 8002952:	d86b      	bhi.n	8002a2c <HAL_TIM_ConfigClockSource+0x16c>
 8002954:	2b20      	cmp	r3, #32
 8002956:	d060      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0x15a>
 8002958:	2b20      	cmp	r3, #32
 800295a:	d867      	bhi.n	8002a2c <HAL_TIM_ConfigClockSource+0x16c>
 800295c:	2b00      	cmp	r3, #0
 800295e:	d05c      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0x15a>
 8002960:	2b10      	cmp	r3, #16
 8002962:	d05a      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0x15a>
 8002964:	e062      	b.n	8002a2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6899      	ldr	r1, [r3, #8]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f000 faf1 	bl	8002f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002988:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	609a      	str	r2, [r3, #8]
      break;
 8002992:	e04f      	b.n	8002a34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6899      	ldr	r1, [r3, #8]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f000 fada 	bl	8002f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029b6:	609a      	str	r2, [r3, #8]
      break;
 80029b8:	e03c      	b.n	8002a34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6859      	ldr	r1, [r3, #4]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	461a      	mov	r2, r3
 80029c8:	f000 fa4e 	bl	8002e68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2150      	movs	r1, #80	; 0x50
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 faa7 	bl	8002f26 <TIM_ITRx_SetConfig>
      break;
 80029d8:	e02c      	b.n	8002a34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6859      	ldr	r1, [r3, #4]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	461a      	mov	r2, r3
 80029e8:	f000 fa6d 	bl	8002ec6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2160      	movs	r1, #96	; 0x60
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fa97 	bl	8002f26 <TIM_ITRx_SetConfig>
      break;
 80029f8:	e01c      	b.n	8002a34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6859      	ldr	r1, [r3, #4]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	461a      	mov	r2, r3
 8002a08:	f000 fa2e 	bl	8002e68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2140      	movs	r1, #64	; 0x40
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fa87 	bl	8002f26 <TIM_ITRx_SetConfig>
      break;
 8002a18:	e00c      	b.n	8002a34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4619      	mov	r1, r3
 8002a24:	4610      	mov	r0, r2
 8002a26:	f000 fa7e 	bl	8002f26 <TIM_ITRx_SetConfig>
      break;
 8002a2a:	e003      	b.n	8002a34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a30:	e000      	b.n	8002a34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a34      	ldr	r2, [pc, #208]	; (8002b34 <TIM_Base_SetConfig+0xe4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00f      	beq.n	8002a88 <TIM_Base_SetConfig+0x38>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d00b      	beq.n	8002a88 <TIM_Base_SetConfig+0x38>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a31      	ldr	r2, [pc, #196]	; (8002b38 <TIM_Base_SetConfig+0xe8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d007      	beq.n	8002a88 <TIM_Base_SetConfig+0x38>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a30      	ldr	r2, [pc, #192]	; (8002b3c <TIM_Base_SetConfig+0xec>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d003      	beq.n	8002a88 <TIM_Base_SetConfig+0x38>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a2f      	ldr	r2, [pc, #188]	; (8002b40 <TIM_Base_SetConfig+0xf0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d108      	bne.n	8002a9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a25      	ldr	r2, [pc, #148]	; (8002b34 <TIM_Base_SetConfig+0xe4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01b      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa8:	d017      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <TIM_Base_SetConfig+0xe8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <TIM_Base_SetConfig+0xec>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00f      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <TIM_Base_SetConfig+0xf0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00b      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a1f      	ldr	r2, [pc, #124]	; (8002b44 <TIM_Base_SetConfig+0xf4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d007      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a1e      	ldr	r2, [pc, #120]	; (8002b48 <TIM_Base_SetConfig+0xf8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d003      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <TIM_Base_SetConfig+0xfc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d108      	bne.n	8002aec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <TIM_Base_SetConfig+0xe4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d103      	bne.n	8002b20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	615a      	str	r2, [r3, #20]
}
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40010000 	.word	0x40010000
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40000800 	.word	0x40000800
 8002b40:	40000c00 	.word	0x40000c00
 8002b44:	40014000 	.word	0x40014000
 8002b48:	40014400 	.word	0x40014400
 8002b4c:	40014800 	.word	0x40014800

08002b50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f023 0201 	bic.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0303 	bic.w	r3, r3, #3
 8002b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f023 0302 	bic.w	r3, r3, #2
 8002b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a1c      	ldr	r2, [pc, #112]	; (8002c18 <TIM_OC1_SetConfig+0xc8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d10c      	bne.n	8002bc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f023 0308 	bic.w	r3, r3, #8
 8002bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <TIM_OC1_SetConfig+0xc8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d111      	bne.n	8002bf2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	621a      	str	r2, [r3, #32]
}
 8002c0c:	bf00      	nop
 8002c0e:	371c      	adds	r7, #28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40010000 	.word	0x40010000

08002c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f023 0210 	bic.w	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f023 0320 	bic.w	r3, r3, #32
 8002c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <TIM_OC2_SetConfig+0xd4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d10d      	bne.n	8002c98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <TIM_OC2_SetConfig+0xd4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d113      	bne.n	8002cc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	621a      	str	r2, [r3, #32]
}
 8002ce2:	bf00      	nop
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40010000 	.word	0x40010000

08002cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0303 	bic.w	r3, r3, #3
 8002d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a1d      	ldr	r2, [pc, #116]	; (8002dc4 <TIM_OC3_SetConfig+0xd0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d10d      	bne.n	8002d6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <TIM_OC3_SetConfig+0xd0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d113      	bne.n	8002d9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	621a      	str	r2, [r3, #32]
}
 8002db8:	bf00      	nop
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	40010000 	.word	0x40010000

08002dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	031b      	lsls	r3, r3, #12
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <TIM_OC4_SetConfig+0x9c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d109      	bne.n	8002e3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	019b      	lsls	r3, r3, #6
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	621a      	str	r2, [r3, #32]
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40010000 	.word	0x40010000

08002e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	f023 0201 	bic.w	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f023 030a 	bic.w	r3, r3, #10
 8002ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	621a      	str	r2, [r3, #32]
}
 8002eba:	bf00      	nop
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b087      	sub	sp, #28
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f023 0210 	bic.w	r2, r3, #16
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	031b      	lsls	r3, r3, #12
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f043 0307 	orr.w	r3, r3, #7
 8002f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	609a      	str	r2, [r3, #8]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	021a      	lsls	r2, r3, #8
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	609a      	str	r2, [r3, #8]
}
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	2201      	movs	r2, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a1a      	ldr	r2, [r3, #32]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e050      	b.n	80030a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d018      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304c:	d013      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a16      	ldr	r2, [pc, #88]	; (80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a15      	ldr	r2, [pc, #84]	; (80030bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10c      	bne.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800307c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	4313      	orrs	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40010000 	.word	0x40010000
 80030b4:	40000400 	.word	0x40000400
 80030b8:	40000800 	.word	0x40000800
 80030bc:	40000c00 	.word	0x40000c00
 80030c0:	40014000 	.word	0x40014000

080030c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80030dc:	2302      	movs	r3, #2
 80030de:	e03d      	b.n	800315c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4313      	orrs	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e03f      	b.n	80031fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fd ffb6 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	; 0x24
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f929 	bl	8003404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b08a      	sub	sp, #40	; 0x28
 8003206:	af02      	add	r7, sp, #8
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	603b      	str	r3, [r7, #0]
 800320e:	4613      	mov	r3, r2
 8003210:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b20      	cmp	r3, #32
 8003220:	d17c      	bne.n	800331c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_UART_Transmit+0x2c>
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e075      	b.n	800331e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_UART_Transmit+0x3e>
 800323c:	2302      	movs	r3, #2
 800323e:	e06e      	b.n	800331e <HAL_UART_Transmit+0x11c>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2221      	movs	r2, #33	; 0x21
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003256:	f7fe f931 	bl	80014bc <HAL_GetTick>
 800325a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	88fa      	ldrh	r2, [r7, #6]
 8003260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	88fa      	ldrh	r2, [r7, #6]
 8003266:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003270:	d108      	bne.n	8003284 <HAL_UART_Transmit+0x82>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d104      	bne.n	8003284 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	e003      	b.n	800328c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003288:	2300      	movs	r3, #0
 800328a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003294:	e02a      	b.n	80032ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2200      	movs	r2, #0
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f840 	bl	8003326 <UART_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e036      	b.n	800331e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10b      	bne.n	80032ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	3302      	adds	r3, #2
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	e007      	b.n	80032de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	781a      	ldrb	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	3301      	adds	r3, #1
 80032dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1cf      	bne.n	8003296 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2140      	movs	r1, #64	; 0x40
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f810 	bl	8003326 <UART_WaitOnFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e006      	b.n	800331e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	e000      	b.n	800331e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800331c:	2302      	movs	r3, #2
  }
}
 800331e:	4618      	mov	r0, r3
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b090      	sub	sp, #64	; 0x40
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	603b      	str	r3, [r7, #0]
 8003332:	4613      	mov	r3, r2
 8003334:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003336:	e050      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800333a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333e:	d04c      	beq.n	80033da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0x30>
 8003346:	f7fe f8b9 	bl	80014bc <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003352:	429a      	cmp	r2, r3
 8003354:	d241      	bcs.n	80033da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	330c      	adds	r3, #12
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	e853 3f00 	ldrex	r3, [r3]
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800336c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	330c      	adds	r3, #12
 8003374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003376:	637a      	str	r2, [r7, #52]	; 0x34
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800337c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e5      	bne.n	8003356 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3314      	adds	r3, #20
 8003390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	613b      	str	r3, [r7, #16]
   return(result);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3314      	adds	r3, #20
 80033a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033aa:	623a      	str	r2, [r7, #32]
 80033ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ae:	69f9      	ldr	r1, [r7, #28]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1e5      	bne.n	800338a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e00f      	b.n	80033fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4013      	ands	r3, r2
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	bf0c      	ite	eq
 80033ea:	2301      	moveq	r3, #1
 80033ec:	2300      	movne	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d09f      	beq.n	8003338 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3740      	adds	r7, #64	; 0x40
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003408:	b09f      	sub	sp, #124	; 0x7c
 800340a:	af00      	add	r7, sp, #0
 800340c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800340e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341a:	68d9      	ldr	r1, [r3, #12]
 800341c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	ea40 0301 	orr.w	r3, r0, r1
 8003424:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	431a      	orrs	r2, r3
 8003430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	431a      	orrs	r2, r3
 8003436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4313      	orrs	r3, r2
 800343c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800343e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003448:	f021 010c 	bic.w	r1, r1, #12
 800344c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003452:	430b      	orrs	r3, r1
 8003454:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003462:	6999      	ldr	r1, [r3, #24]
 8003464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	ea40 0301 	orr.w	r3, r0, r1
 800346c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800346e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	4bc5      	ldr	r3, [pc, #788]	; (8003788 <UART_SetConfig+0x384>)
 8003474:	429a      	cmp	r2, r3
 8003476:	d004      	beq.n	8003482 <UART_SetConfig+0x7e>
 8003478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4bc3      	ldr	r3, [pc, #780]	; (800378c <UART_SetConfig+0x388>)
 800347e:	429a      	cmp	r2, r3
 8003480:	d103      	bne.n	800348a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003482:	f7fe ff8b 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8003486:	6778      	str	r0, [r7, #116]	; 0x74
 8003488:	e002      	b.n	8003490 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800348a:	f7fe ff73 	bl	8002374 <HAL_RCC_GetPCLK1Freq>
 800348e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003498:	f040 80b6 	bne.w	8003608 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800349c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349e:	461c      	mov	r4, r3
 80034a0:	f04f 0500 	mov.w	r5, #0
 80034a4:	4622      	mov	r2, r4
 80034a6:	462b      	mov	r3, r5
 80034a8:	1891      	adds	r1, r2, r2
 80034aa:	6439      	str	r1, [r7, #64]	; 0x40
 80034ac:	415b      	adcs	r3, r3
 80034ae:	647b      	str	r3, [r7, #68]	; 0x44
 80034b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034b4:	1912      	adds	r2, r2, r4
 80034b6:	eb45 0303 	adc.w	r3, r5, r3
 80034ba:	f04f 0000 	mov.w	r0, #0
 80034be:	f04f 0100 	mov.w	r1, #0
 80034c2:	00d9      	lsls	r1, r3, #3
 80034c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034c8:	00d0      	lsls	r0, r2, #3
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	1911      	adds	r1, r2, r4
 80034d0:	6639      	str	r1, [r7, #96]	; 0x60
 80034d2:	416b      	adcs	r3, r5
 80034d4:	667b      	str	r3, [r7, #100]	; 0x64
 80034d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	461a      	mov	r2, r3
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	1891      	adds	r1, r2, r2
 80034e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80034e4:	415b      	adcs	r3, r3
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80034f0:	f7fc fec6 	bl	8000280 <__aeabi_uldivmod>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4ba5      	ldr	r3, [pc, #660]	; (8003790 <UART_SetConfig+0x38c>)
 80034fa:	fba3 2302 	umull	r2, r3, r3, r2
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	011e      	lsls	r6, r3, #4
 8003502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003504:	461c      	mov	r4, r3
 8003506:	f04f 0500 	mov.w	r5, #0
 800350a:	4622      	mov	r2, r4
 800350c:	462b      	mov	r3, r5
 800350e:	1891      	adds	r1, r2, r2
 8003510:	6339      	str	r1, [r7, #48]	; 0x30
 8003512:	415b      	adcs	r3, r3
 8003514:	637b      	str	r3, [r7, #52]	; 0x34
 8003516:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800351a:	1912      	adds	r2, r2, r4
 800351c:	eb45 0303 	adc.w	r3, r5, r3
 8003520:	f04f 0000 	mov.w	r0, #0
 8003524:	f04f 0100 	mov.w	r1, #0
 8003528:	00d9      	lsls	r1, r3, #3
 800352a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800352e:	00d0      	lsls	r0, r2, #3
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	1911      	adds	r1, r2, r4
 8003536:	65b9      	str	r1, [r7, #88]	; 0x58
 8003538:	416b      	adcs	r3, r5
 800353a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800353c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	461a      	mov	r2, r3
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	1891      	adds	r1, r2, r2
 8003548:	62b9      	str	r1, [r7, #40]	; 0x28
 800354a:	415b      	adcs	r3, r3
 800354c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800354e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003552:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003556:	f7fc fe93 	bl	8000280 <__aeabi_uldivmod>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4b8c      	ldr	r3, [pc, #560]	; (8003790 <UART_SetConfig+0x38c>)
 8003560:	fba3 1302 	umull	r1, r3, r3, r2
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	2164      	movs	r1, #100	; 0x64
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	3332      	adds	r3, #50	; 0x32
 8003572:	4a87      	ldr	r2, [pc, #540]	; (8003790 <UART_SetConfig+0x38c>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003580:	441e      	add	r6, r3
 8003582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003584:	4618      	mov	r0, r3
 8003586:	f04f 0100 	mov.w	r1, #0
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	1894      	adds	r4, r2, r2
 8003590:	623c      	str	r4, [r7, #32]
 8003592:	415b      	adcs	r3, r3
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
 8003596:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800359a:	1812      	adds	r2, r2, r0
 800359c:	eb41 0303 	adc.w	r3, r1, r3
 80035a0:	f04f 0400 	mov.w	r4, #0
 80035a4:	f04f 0500 	mov.w	r5, #0
 80035a8:	00dd      	lsls	r5, r3, #3
 80035aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80035ae:	00d4      	lsls	r4, r2, #3
 80035b0:	4622      	mov	r2, r4
 80035b2:	462b      	mov	r3, r5
 80035b4:	1814      	adds	r4, r2, r0
 80035b6:	653c      	str	r4, [r7, #80]	; 0x50
 80035b8:	414b      	adcs	r3, r1
 80035ba:	657b      	str	r3, [r7, #84]	; 0x54
 80035bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	461a      	mov	r2, r3
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	1891      	adds	r1, r2, r2
 80035c8:	61b9      	str	r1, [r7, #24]
 80035ca:	415b      	adcs	r3, r3
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80035d6:	f7fc fe53 	bl	8000280 <__aeabi_uldivmod>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4b6c      	ldr	r3, [pc, #432]	; (8003790 <UART_SetConfig+0x38c>)
 80035e0:	fba3 1302 	umull	r1, r3, r3, r2
 80035e4:	095b      	lsrs	r3, r3, #5
 80035e6:	2164      	movs	r1, #100	; 0x64
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	3332      	adds	r3, #50	; 0x32
 80035f2:	4a67      	ldr	r2, [pc, #412]	; (8003790 <UART_SetConfig+0x38c>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	f003 0207 	and.w	r2, r3, #7
 80035fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4432      	add	r2, r6
 8003604:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003606:	e0b9      	b.n	800377c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800360a:	461c      	mov	r4, r3
 800360c:	f04f 0500 	mov.w	r5, #0
 8003610:	4622      	mov	r2, r4
 8003612:	462b      	mov	r3, r5
 8003614:	1891      	adds	r1, r2, r2
 8003616:	6139      	str	r1, [r7, #16]
 8003618:	415b      	adcs	r3, r3
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003620:	1912      	adds	r2, r2, r4
 8003622:	eb45 0303 	adc.w	r3, r5, r3
 8003626:	f04f 0000 	mov.w	r0, #0
 800362a:	f04f 0100 	mov.w	r1, #0
 800362e:	00d9      	lsls	r1, r3, #3
 8003630:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003634:	00d0      	lsls	r0, r2, #3
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	eb12 0804 	adds.w	r8, r2, r4
 800363e:	eb43 0905 	adc.w	r9, r3, r5
 8003642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4618      	mov	r0, r3
 8003648:	f04f 0100 	mov.w	r1, #0
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	008b      	lsls	r3, r1, #2
 8003656:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800365a:	0082      	lsls	r2, r0, #2
 800365c:	4640      	mov	r0, r8
 800365e:	4649      	mov	r1, r9
 8003660:	f7fc fe0e 	bl	8000280 <__aeabi_uldivmod>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4b49      	ldr	r3, [pc, #292]	; (8003790 <UART_SetConfig+0x38c>)
 800366a:	fba3 2302 	umull	r2, r3, r3, r2
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	011e      	lsls	r6, r3, #4
 8003672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003674:	4618      	mov	r0, r3
 8003676:	f04f 0100 	mov.w	r1, #0
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	1894      	adds	r4, r2, r2
 8003680:	60bc      	str	r4, [r7, #8]
 8003682:	415b      	adcs	r3, r3
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800368a:	1812      	adds	r2, r2, r0
 800368c:	eb41 0303 	adc.w	r3, r1, r3
 8003690:	f04f 0400 	mov.w	r4, #0
 8003694:	f04f 0500 	mov.w	r5, #0
 8003698:	00dd      	lsls	r5, r3, #3
 800369a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800369e:	00d4      	lsls	r4, r2, #3
 80036a0:	4622      	mov	r2, r4
 80036a2:	462b      	mov	r3, r5
 80036a4:	1814      	adds	r4, r2, r0
 80036a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80036a8:	414b      	adcs	r3, r1
 80036aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f04f 0100 	mov.w	r1, #0
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	008b      	lsls	r3, r1, #2
 80036c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036c4:	0082      	lsls	r2, r0, #2
 80036c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80036ca:	f7fc fdd9 	bl	8000280 <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4b2f      	ldr	r3, [pc, #188]	; (8003790 <UART_SetConfig+0x38c>)
 80036d4:	fba3 1302 	umull	r1, r3, r3, r2
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	2164      	movs	r1, #100	; 0x64
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	3332      	adds	r3, #50	; 0x32
 80036e6:	4a2a      	ldr	r2, [pc, #168]	; (8003790 <UART_SetConfig+0x38c>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036f2:	441e      	add	r6, r3
 80036f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f6:	4618      	mov	r0, r3
 80036f8:	f04f 0100 	mov.w	r1, #0
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	1894      	adds	r4, r2, r2
 8003702:	603c      	str	r4, [r7, #0]
 8003704:	415b      	adcs	r3, r3
 8003706:	607b      	str	r3, [r7, #4]
 8003708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800370c:	1812      	adds	r2, r2, r0
 800370e:	eb41 0303 	adc.w	r3, r1, r3
 8003712:	f04f 0400 	mov.w	r4, #0
 8003716:	f04f 0500 	mov.w	r5, #0
 800371a:	00dd      	lsls	r5, r3, #3
 800371c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003720:	00d4      	lsls	r4, r2, #3
 8003722:	4622      	mov	r2, r4
 8003724:	462b      	mov	r3, r5
 8003726:	eb12 0a00 	adds.w	sl, r2, r0
 800372a:	eb43 0b01 	adc.w	fp, r3, r1
 800372e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4618      	mov	r0, r3
 8003734:	f04f 0100 	mov.w	r1, #0
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	008b      	lsls	r3, r1, #2
 8003742:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003746:	0082      	lsls	r2, r0, #2
 8003748:	4650      	mov	r0, sl
 800374a:	4659      	mov	r1, fp
 800374c:	f7fc fd98 	bl	8000280 <__aeabi_uldivmod>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <UART_SetConfig+0x38c>)
 8003756:	fba3 1302 	umull	r1, r3, r3, r2
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	2164      	movs	r1, #100	; 0x64
 800375e:	fb01 f303 	mul.w	r3, r1, r3
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	3332      	adds	r3, #50	; 0x32
 8003768:	4a09      	ldr	r2, [pc, #36]	; (8003790 <UART_SetConfig+0x38c>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	f003 020f 	and.w	r2, r3, #15
 8003774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4432      	add	r2, r6
 800377a:	609a      	str	r2, [r3, #8]
}
 800377c:	bf00      	nop
 800377e:	377c      	adds	r7, #124	; 0x7c
 8003780:	46bd      	mov	sp, r7
 8003782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003786:	bf00      	nop
 8003788:	40011000 	.word	0x40011000
 800378c:	40011400 	.word	0x40011400
 8003790:	51eb851f 	.word	0x51eb851f

08003794 <__errno>:
 8003794:	4b01      	ldr	r3, [pc, #4]	; (800379c <__errno+0x8>)
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	2000000c 	.word	0x2000000c

080037a0 <__libc_init_array>:
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	4d0d      	ldr	r5, [pc, #52]	; (80037d8 <__libc_init_array+0x38>)
 80037a4:	4c0d      	ldr	r4, [pc, #52]	; (80037dc <__libc_init_array+0x3c>)
 80037a6:	1b64      	subs	r4, r4, r5
 80037a8:	10a4      	asrs	r4, r4, #2
 80037aa:	2600      	movs	r6, #0
 80037ac:	42a6      	cmp	r6, r4
 80037ae:	d109      	bne.n	80037c4 <__libc_init_array+0x24>
 80037b0:	4d0b      	ldr	r5, [pc, #44]	; (80037e0 <__libc_init_array+0x40>)
 80037b2:	4c0c      	ldr	r4, [pc, #48]	; (80037e4 <__libc_init_array+0x44>)
 80037b4:	f000 ffec 	bl	8004790 <_init>
 80037b8:	1b64      	subs	r4, r4, r5
 80037ba:	10a4      	asrs	r4, r4, #2
 80037bc:	2600      	movs	r6, #0
 80037be:	42a6      	cmp	r6, r4
 80037c0:	d105      	bne.n	80037ce <__libc_init_array+0x2e>
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
 80037c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c8:	4798      	blx	r3
 80037ca:	3601      	adds	r6, #1
 80037cc:	e7ee      	b.n	80037ac <__libc_init_array+0xc>
 80037ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d2:	4798      	blx	r3
 80037d4:	3601      	adds	r6, #1
 80037d6:	e7f2      	b.n	80037be <__libc_init_array+0x1e>
 80037d8:	080048b8 	.word	0x080048b8
 80037dc:	080048b8 	.word	0x080048b8
 80037e0:	080048b8 	.word	0x080048b8
 80037e4:	080048bc 	.word	0x080048bc

080037e8 <memset>:
 80037e8:	4402      	add	r2, r0
 80037ea:	4603      	mov	r3, r0
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d100      	bne.n	80037f2 <memset+0xa>
 80037f0:	4770      	bx	lr
 80037f2:	f803 1b01 	strb.w	r1, [r3], #1
 80037f6:	e7f9      	b.n	80037ec <memset+0x4>

080037f8 <iprintf>:
 80037f8:	b40f      	push	{r0, r1, r2, r3}
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <iprintf+0x2c>)
 80037fc:	b513      	push	{r0, r1, r4, lr}
 80037fe:	681c      	ldr	r4, [r3, #0]
 8003800:	b124      	cbz	r4, 800380c <iprintf+0x14>
 8003802:	69a3      	ldr	r3, [r4, #24]
 8003804:	b913      	cbnz	r3, 800380c <iprintf+0x14>
 8003806:	4620      	mov	r0, r4
 8003808:	f000 fa5e 	bl	8003cc8 <__sinit>
 800380c:	ab05      	add	r3, sp, #20
 800380e:	9a04      	ldr	r2, [sp, #16]
 8003810:	68a1      	ldr	r1, [r4, #8]
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	4620      	mov	r0, r4
 8003816:	f000 fc2f 	bl	8004078 <_vfiprintf_r>
 800381a:	b002      	add	sp, #8
 800381c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003820:	b004      	add	sp, #16
 8003822:	4770      	bx	lr
 8003824:	2000000c 	.word	0x2000000c

08003828 <_puts_r>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	460e      	mov	r6, r1
 800382c:	4605      	mov	r5, r0
 800382e:	b118      	cbz	r0, 8003838 <_puts_r+0x10>
 8003830:	6983      	ldr	r3, [r0, #24]
 8003832:	b90b      	cbnz	r3, 8003838 <_puts_r+0x10>
 8003834:	f000 fa48 	bl	8003cc8 <__sinit>
 8003838:	69ab      	ldr	r3, [r5, #24]
 800383a:	68ac      	ldr	r4, [r5, #8]
 800383c:	b913      	cbnz	r3, 8003844 <_puts_r+0x1c>
 800383e:	4628      	mov	r0, r5
 8003840:	f000 fa42 	bl	8003cc8 <__sinit>
 8003844:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <_puts_r+0xd0>)
 8003846:	429c      	cmp	r4, r3
 8003848:	d120      	bne.n	800388c <_puts_r+0x64>
 800384a:	686c      	ldr	r4, [r5, #4]
 800384c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800384e:	07db      	lsls	r3, r3, #31
 8003850:	d405      	bmi.n	800385e <_puts_r+0x36>
 8003852:	89a3      	ldrh	r3, [r4, #12]
 8003854:	0598      	lsls	r0, r3, #22
 8003856:	d402      	bmi.n	800385e <_puts_r+0x36>
 8003858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800385a:	f000 fad3 	bl	8003e04 <__retarget_lock_acquire_recursive>
 800385e:	89a3      	ldrh	r3, [r4, #12]
 8003860:	0719      	lsls	r1, r3, #28
 8003862:	d51d      	bpl.n	80038a0 <_puts_r+0x78>
 8003864:	6923      	ldr	r3, [r4, #16]
 8003866:	b1db      	cbz	r3, 80038a0 <_puts_r+0x78>
 8003868:	3e01      	subs	r6, #1
 800386a:	68a3      	ldr	r3, [r4, #8]
 800386c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003870:	3b01      	subs	r3, #1
 8003872:	60a3      	str	r3, [r4, #8]
 8003874:	bb39      	cbnz	r1, 80038c6 <_puts_r+0x9e>
 8003876:	2b00      	cmp	r3, #0
 8003878:	da38      	bge.n	80038ec <_puts_r+0xc4>
 800387a:	4622      	mov	r2, r4
 800387c:	210a      	movs	r1, #10
 800387e:	4628      	mov	r0, r5
 8003880:	f000 f848 	bl	8003914 <__swbuf_r>
 8003884:	3001      	adds	r0, #1
 8003886:	d011      	beq.n	80038ac <_puts_r+0x84>
 8003888:	250a      	movs	r5, #10
 800388a:	e011      	b.n	80038b0 <_puts_r+0x88>
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <_puts_r+0xd4>)
 800388e:	429c      	cmp	r4, r3
 8003890:	d101      	bne.n	8003896 <_puts_r+0x6e>
 8003892:	68ac      	ldr	r4, [r5, #8]
 8003894:	e7da      	b.n	800384c <_puts_r+0x24>
 8003896:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <_puts_r+0xd8>)
 8003898:	429c      	cmp	r4, r3
 800389a:	bf08      	it	eq
 800389c:	68ec      	ldreq	r4, [r5, #12]
 800389e:	e7d5      	b.n	800384c <_puts_r+0x24>
 80038a0:	4621      	mov	r1, r4
 80038a2:	4628      	mov	r0, r5
 80038a4:	f000 f888 	bl	80039b8 <__swsetup_r>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d0dd      	beq.n	8003868 <_puts_r+0x40>
 80038ac:	f04f 35ff 	mov.w	r5, #4294967295
 80038b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038b2:	07da      	lsls	r2, r3, #31
 80038b4:	d405      	bmi.n	80038c2 <_puts_r+0x9a>
 80038b6:	89a3      	ldrh	r3, [r4, #12]
 80038b8:	059b      	lsls	r3, r3, #22
 80038ba:	d402      	bmi.n	80038c2 <_puts_r+0x9a>
 80038bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038be:	f000 faa2 	bl	8003e06 <__retarget_lock_release_recursive>
 80038c2:	4628      	mov	r0, r5
 80038c4:	bd70      	pop	{r4, r5, r6, pc}
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	da04      	bge.n	80038d4 <_puts_r+0xac>
 80038ca:	69a2      	ldr	r2, [r4, #24]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	dc06      	bgt.n	80038de <_puts_r+0xb6>
 80038d0:	290a      	cmp	r1, #10
 80038d2:	d004      	beq.n	80038de <_puts_r+0xb6>
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	6022      	str	r2, [r4, #0]
 80038da:	7019      	strb	r1, [r3, #0]
 80038dc:	e7c5      	b.n	800386a <_puts_r+0x42>
 80038de:	4622      	mov	r2, r4
 80038e0:	4628      	mov	r0, r5
 80038e2:	f000 f817 	bl	8003914 <__swbuf_r>
 80038e6:	3001      	adds	r0, #1
 80038e8:	d1bf      	bne.n	800386a <_puts_r+0x42>
 80038ea:	e7df      	b.n	80038ac <_puts_r+0x84>
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	250a      	movs	r5, #10
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	6022      	str	r2, [r4, #0]
 80038f4:	701d      	strb	r5, [r3, #0]
 80038f6:	e7db      	b.n	80038b0 <_puts_r+0x88>
 80038f8:	0800483c 	.word	0x0800483c
 80038fc:	0800485c 	.word	0x0800485c
 8003900:	0800481c 	.word	0x0800481c

08003904 <puts>:
 8003904:	4b02      	ldr	r3, [pc, #8]	; (8003910 <puts+0xc>)
 8003906:	4601      	mov	r1, r0
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	f7ff bf8d 	b.w	8003828 <_puts_r>
 800390e:	bf00      	nop
 8003910:	2000000c 	.word	0x2000000c

08003914 <__swbuf_r>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	460e      	mov	r6, r1
 8003918:	4614      	mov	r4, r2
 800391a:	4605      	mov	r5, r0
 800391c:	b118      	cbz	r0, 8003926 <__swbuf_r+0x12>
 800391e:	6983      	ldr	r3, [r0, #24]
 8003920:	b90b      	cbnz	r3, 8003926 <__swbuf_r+0x12>
 8003922:	f000 f9d1 	bl	8003cc8 <__sinit>
 8003926:	4b21      	ldr	r3, [pc, #132]	; (80039ac <__swbuf_r+0x98>)
 8003928:	429c      	cmp	r4, r3
 800392a:	d12b      	bne.n	8003984 <__swbuf_r+0x70>
 800392c:	686c      	ldr	r4, [r5, #4]
 800392e:	69a3      	ldr	r3, [r4, #24]
 8003930:	60a3      	str	r3, [r4, #8]
 8003932:	89a3      	ldrh	r3, [r4, #12]
 8003934:	071a      	lsls	r2, r3, #28
 8003936:	d52f      	bpl.n	8003998 <__swbuf_r+0x84>
 8003938:	6923      	ldr	r3, [r4, #16]
 800393a:	b36b      	cbz	r3, 8003998 <__swbuf_r+0x84>
 800393c:	6923      	ldr	r3, [r4, #16]
 800393e:	6820      	ldr	r0, [r4, #0]
 8003940:	1ac0      	subs	r0, r0, r3
 8003942:	6963      	ldr	r3, [r4, #20]
 8003944:	b2f6      	uxtb	r6, r6
 8003946:	4283      	cmp	r3, r0
 8003948:	4637      	mov	r7, r6
 800394a:	dc04      	bgt.n	8003956 <__swbuf_r+0x42>
 800394c:	4621      	mov	r1, r4
 800394e:	4628      	mov	r0, r5
 8003950:	f000 f926 	bl	8003ba0 <_fflush_r>
 8003954:	bb30      	cbnz	r0, 80039a4 <__swbuf_r+0x90>
 8003956:	68a3      	ldr	r3, [r4, #8]
 8003958:	3b01      	subs	r3, #1
 800395a:	60a3      	str	r3, [r4, #8]
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	6022      	str	r2, [r4, #0]
 8003962:	701e      	strb	r6, [r3, #0]
 8003964:	6963      	ldr	r3, [r4, #20]
 8003966:	3001      	adds	r0, #1
 8003968:	4283      	cmp	r3, r0
 800396a:	d004      	beq.n	8003976 <__swbuf_r+0x62>
 800396c:	89a3      	ldrh	r3, [r4, #12]
 800396e:	07db      	lsls	r3, r3, #31
 8003970:	d506      	bpl.n	8003980 <__swbuf_r+0x6c>
 8003972:	2e0a      	cmp	r6, #10
 8003974:	d104      	bne.n	8003980 <__swbuf_r+0x6c>
 8003976:	4621      	mov	r1, r4
 8003978:	4628      	mov	r0, r5
 800397a:	f000 f911 	bl	8003ba0 <_fflush_r>
 800397e:	b988      	cbnz	r0, 80039a4 <__swbuf_r+0x90>
 8003980:	4638      	mov	r0, r7
 8003982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <__swbuf_r+0x9c>)
 8003986:	429c      	cmp	r4, r3
 8003988:	d101      	bne.n	800398e <__swbuf_r+0x7a>
 800398a:	68ac      	ldr	r4, [r5, #8]
 800398c:	e7cf      	b.n	800392e <__swbuf_r+0x1a>
 800398e:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <__swbuf_r+0xa0>)
 8003990:	429c      	cmp	r4, r3
 8003992:	bf08      	it	eq
 8003994:	68ec      	ldreq	r4, [r5, #12]
 8003996:	e7ca      	b.n	800392e <__swbuf_r+0x1a>
 8003998:	4621      	mov	r1, r4
 800399a:	4628      	mov	r0, r5
 800399c:	f000 f80c 	bl	80039b8 <__swsetup_r>
 80039a0:	2800      	cmp	r0, #0
 80039a2:	d0cb      	beq.n	800393c <__swbuf_r+0x28>
 80039a4:	f04f 37ff 	mov.w	r7, #4294967295
 80039a8:	e7ea      	b.n	8003980 <__swbuf_r+0x6c>
 80039aa:	bf00      	nop
 80039ac:	0800483c 	.word	0x0800483c
 80039b0:	0800485c 	.word	0x0800485c
 80039b4:	0800481c 	.word	0x0800481c

080039b8 <__swsetup_r>:
 80039b8:	4b32      	ldr	r3, [pc, #200]	; (8003a84 <__swsetup_r+0xcc>)
 80039ba:	b570      	push	{r4, r5, r6, lr}
 80039bc:	681d      	ldr	r5, [r3, #0]
 80039be:	4606      	mov	r6, r0
 80039c0:	460c      	mov	r4, r1
 80039c2:	b125      	cbz	r5, 80039ce <__swsetup_r+0x16>
 80039c4:	69ab      	ldr	r3, [r5, #24]
 80039c6:	b913      	cbnz	r3, 80039ce <__swsetup_r+0x16>
 80039c8:	4628      	mov	r0, r5
 80039ca:	f000 f97d 	bl	8003cc8 <__sinit>
 80039ce:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <__swsetup_r+0xd0>)
 80039d0:	429c      	cmp	r4, r3
 80039d2:	d10f      	bne.n	80039f4 <__swsetup_r+0x3c>
 80039d4:	686c      	ldr	r4, [r5, #4]
 80039d6:	89a3      	ldrh	r3, [r4, #12]
 80039d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039dc:	0719      	lsls	r1, r3, #28
 80039de:	d42c      	bmi.n	8003a3a <__swsetup_r+0x82>
 80039e0:	06dd      	lsls	r5, r3, #27
 80039e2:	d411      	bmi.n	8003a08 <__swsetup_r+0x50>
 80039e4:	2309      	movs	r3, #9
 80039e6:	6033      	str	r3, [r6, #0]
 80039e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80039ec:	81a3      	strh	r3, [r4, #12]
 80039ee:	f04f 30ff 	mov.w	r0, #4294967295
 80039f2:	e03e      	b.n	8003a72 <__swsetup_r+0xba>
 80039f4:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <__swsetup_r+0xd4>)
 80039f6:	429c      	cmp	r4, r3
 80039f8:	d101      	bne.n	80039fe <__swsetup_r+0x46>
 80039fa:	68ac      	ldr	r4, [r5, #8]
 80039fc:	e7eb      	b.n	80039d6 <__swsetup_r+0x1e>
 80039fe:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <__swsetup_r+0xd8>)
 8003a00:	429c      	cmp	r4, r3
 8003a02:	bf08      	it	eq
 8003a04:	68ec      	ldreq	r4, [r5, #12]
 8003a06:	e7e6      	b.n	80039d6 <__swsetup_r+0x1e>
 8003a08:	0758      	lsls	r0, r3, #29
 8003a0a:	d512      	bpl.n	8003a32 <__swsetup_r+0x7a>
 8003a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a0e:	b141      	cbz	r1, 8003a22 <__swsetup_r+0x6a>
 8003a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a14:	4299      	cmp	r1, r3
 8003a16:	d002      	beq.n	8003a1e <__swsetup_r+0x66>
 8003a18:	4630      	mov	r0, r6
 8003a1a:	f000 fa59 	bl	8003ed0 <_free_r>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	6363      	str	r3, [r4, #52]	; 0x34
 8003a22:	89a3      	ldrh	r3, [r4, #12]
 8003a24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a28:	81a3      	strh	r3, [r4, #12]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	6063      	str	r3, [r4, #4]
 8003a2e:	6923      	ldr	r3, [r4, #16]
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	f043 0308 	orr.w	r3, r3, #8
 8003a38:	81a3      	strh	r3, [r4, #12]
 8003a3a:	6923      	ldr	r3, [r4, #16]
 8003a3c:	b94b      	cbnz	r3, 8003a52 <__swsetup_r+0x9a>
 8003a3e:	89a3      	ldrh	r3, [r4, #12]
 8003a40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a48:	d003      	beq.n	8003a52 <__swsetup_r+0x9a>
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f000 f9ff 	bl	8003e50 <__smakebuf_r>
 8003a52:	89a0      	ldrh	r0, [r4, #12]
 8003a54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a58:	f010 0301 	ands.w	r3, r0, #1
 8003a5c:	d00a      	beq.n	8003a74 <__swsetup_r+0xbc>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60a3      	str	r3, [r4, #8]
 8003a62:	6963      	ldr	r3, [r4, #20]
 8003a64:	425b      	negs	r3, r3
 8003a66:	61a3      	str	r3, [r4, #24]
 8003a68:	6923      	ldr	r3, [r4, #16]
 8003a6a:	b943      	cbnz	r3, 8003a7e <__swsetup_r+0xc6>
 8003a6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a70:	d1ba      	bne.n	80039e8 <__swsetup_r+0x30>
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
 8003a74:	0781      	lsls	r1, r0, #30
 8003a76:	bf58      	it	pl
 8003a78:	6963      	ldrpl	r3, [r4, #20]
 8003a7a:	60a3      	str	r3, [r4, #8]
 8003a7c:	e7f4      	b.n	8003a68 <__swsetup_r+0xb0>
 8003a7e:	2000      	movs	r0, #0
 8003a80:	e7f7      	b.n	8003a72 <__swsetup_r+0xba>
 8003a82:	bf00      	nop
 8003a84:	2000000c 	.word	0x2000000c
 8003a88:	0800483c 	.word	0x0800483c
 8003a8c:	0800485c 	.word	0x0800485c
 8003a90:	0800481c 	.word	0x0800481c

08003a94 <__sflush_r>:
 8003a94:	898a      	ldrh	r2, [r1, #12]
 8003a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9a:	4605      	mov	r5, r0
 8003a9c:	0710      	lsls	r0, r2, #28
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	d458      	bmi.n	8003b54 <__sflush_r+0xc0>
 8003aa2:	684b      	ldr	r3, [r1, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	dc05      	bgt.n	8003ab4 <__sflush_r+0x20>
 8003aa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	dc02      	bgt.n	8003ab4 <__sflush_r+0x20>
 8003aae:	2000      	movs	r0, #0
 8003ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ab6:	2e00      	cmp	r6, #0
 8003ab8:	d0f9      	beq.n	8003aae <__sflush_r+0x1a>
 8003aba:	2300      	movs	r3, #0
 8003abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ac0:	682f      	ldr	r7, [r5, #0]
 8003ac2:	602b      	str	r3, [r5, #0]
 8003ac4:	d032      	beq.n	8003b2c <__sflush_r+0x98>
 8003ac6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	075a      	lsls	r2, r3, #29
 8003acc:	d505      	bpl.n	8003ada <__sflush_r+0x46>
 8003ace:	6863      	ldr	r3, [r4, #4]
 8003ad0:	1ac0      	subs	r0, r0, r3
 8003ad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ad4:	b10b      	cbz	r3, 8003ada <__sflush_r+0x46>
 8003ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ad8:	1ac0      	subs	r0, r0, r3
 8003ada:	2300      	movs	r3, #0
 8003adc:	4602      	mov	r2, r0
 8003ade:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ae0:	6a21      	ldr	r1, [r4, #32]
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	47b0      	blx	r6
 8003ae6:	1c43      	adds	r3, r0, #1
 8003ae8:	89a3      	ldrh	r3, [r4, #12]
 8003aea:	d106      	bne.n	8003afa <__sflush_r+0x66>
 8003aec:	6829      	ldr	r1, [r5, #0]
 8003aee:	291d      	cmp	r1, #29
 8003af0:	d82c      	bhi.n	8003b4c <__sflush_r+0xb8>
 8003af2:	4a2a      	ldr	r2, [pc, #168]	; (8003b9c <__sflush_r+0x108>)
 8003af4:	40ca      	lsrs	r2, r1
 8003af6:	07d6      	lsls	r6, r2, #31
 8003af8:	d528      	bpl.n	8003b4c <__sflush_r+0xb8>
 8003afa:	2200      	movs	r2, #0
 8003afc:	6062      	str	r2, [r4, #4]
 8003afe:	04d9      	lsls	r1, r3, #19
 8003b00:	6922      	ldr	r2, [r4, #16]
 8003b02:	6022      	str	r2, [r4, #0]
 8003b04:	d504      	bpl.n	8003b10 <__sflush_r+0x7c>
 8003b06:	1c42      	adds	r2, r0, #1
 8003b08:	d101      	bne.n	8003b0e <__sflush_r+0x7a>
 8003b0a:	682b      	ldr	r3, [r5, #0]
 8003b0c:	b903      	cbnz	r3, 8003b10 <__sflush_r+0x7c>
 8003b0e:	6560      	str	r0, [r4, #84]	; 0x54
 8003b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b12:	602f      	str	r7, [r5, #0]
 8003b14:	2900      	cmp	r1, #0
 8003b16:	d0ca      	beq.n	8003aae <__sflush_r+0x1a>
 8003b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b1c:	4299      	cmp	r1, r3
 8003b1e:	d002      	beq.n	8003b26 <__sflush_r+0x92>
 8003b20:	4628      	mov	r0, r5
 8003b22:	f000 f9d5 	bl	8003ed0 <_free_r>
 8003b26:	2000      	movs	r0, #0
 8003b28:	6360      	str	r0, [r4, #52]	; 0x34
 8003b2a:	e7c1      	b.n	8003ab0 <__sflush_r+0x1c>
 8003b2c:	6a21      	ldr	r1, [r4, #32]
 8003b2e:	2301      	movs	r3, #1
 8003b30:	4628      	mov	r0, r5
 8003b32:	47b0      	blx	r6
 8003b34:	1c41      	adds	r1, r0, #1
 8003b36:	d1c7      	bne.n	8003ac8 <__sflush_r+0x34>
 8003b38:	682b      	ldr	r3, [r5, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0c4      	beq.n	8003ac8 <__sflush_r+0x34>
 8003b3e:	2b1d      	cmp	r3, #29
 8003b40:	d001      	beq.n	8003b46 <__sflush_r+0xb2>
 8003b42:	2b16      	cmp	r3, #22
 8003b44:	d101      	bne.n	8003b4a <__sflush_r+0xb6>
 8003b46:	602f      	str	r7, [r5, #0]
 8003b48:	e7b1      	b.n	8003aae <__sflush_r+0x1a>
 8003b4a:	89a3      	ldrh	r3, [r4, #12]
 8003b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b50:	81a3      	strh	r3, [r4, #12]
 8003b52:	e7ad      	b.n	8003ab0 <__sflush_r+0x1c>
 8003b54:	690f      	ldr	r7, [r1, #16]
 8003b56:	2f00      	cmp	r7, #0
 8003b58:	d0a9      	beq.n	8003aae <__sflush_r+0x1a>
 8003b5a:	0793      	lsls	r3, r2, #30
 8003b5c:	680e      	ldr	r6, [r1, #0]
 8003b5e:	bf08      	it	eq
 8003b60:	694b      	ldreq	r3, [r1, #20]
 8003b62:	600f      	str	r7, [r1, #0]
 8003b64:	bf18      	it	ne
 8003b66:	2300      	movne	r3, #0
 8003b68:	eba6 0807 	sub.w	r8, r6, r7
 8003b6c:	608b      	str	r3, [r1, #8]
 8003b6e:	f1b8 0f00 	cmp.w	r8, #0
 8003b72:	dd9c      	ble.n	8003aae <__sflush_r+0x1a>
 8003b74:	6a21      	ldr	r1, [r4, #32]
 8003b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b78:	4643      	mov	r3, r8
 8003b7a:	463a      	mov	r2, r7
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	47b0      	blx	r6
 8003b80:	2800      	cmp	r0, #0
 8003b82:	dc06      	bgt.n	8003b92 <__sflush_r+0xfe>
 8003b84:	89a3      	ldrh	r3, [r4, #12]
 8003b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b8a:	81a3      	strh	r3, [r4, #12]
 8003b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b90:	e78e      	b.n	8003ab0 <__sflush_r+0x1c>
 8003b92:	4407      	add	r7, r0
 8003b94:	eba8 0800 	sub.w	r8, r8, r0
 8003b98:	e7e9      	b.n	8003b6e <__sflush_r+0xda>
 8003b9a:	bf00      	nop
 8003b9c:	20400001 	.word	0x20400001

08003ba0 <_fflush_r>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	690b      	ldr	r3, [r1, #16]
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	b913      	cbnz	r3, 8003bb0 <_fflush_r+0x10>
 8003baa:	2500      	movs	r5, #0
 8003bac:	4628      	mov	r0, r5
 8003bae:	bd38      	pop	{r3, r4, r5, pc}
 8003bb0:	b118      	cbz	r0, 8003bba <_fflush_r+0x1a>
 8003bb2:	6983      	ldr	r3, [r0, #24]
 8003bb4:	b90b      	cbnz	r3, 8003bba <_fflush_r+0x1a>
 8003bb6:	f000 f887 	bl	8003cc8 <__sinit>
 8003bba:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <_fflush_r+0x6c>)
 8003bbc:	429c      	cmp	r4, r3
 8003bbe:	d11b      	bne.n	8003bf8 <_fflush_r+0x58>
 8003bc0:	686c      	ldr	r4, [r5, #4]
 8003bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0ef      	beq.n	8003baa <_fflush_r+0xa>
 8003bca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bcc:	07d0      	lsls	r0, r2, #31
 8003bce:	d404      	bmi.n	8003bda <_fflush_r+0x3a>
 8003bd0:	0599      	lsls	r1, r3, #22
 8003bd2:	d402      	bmi.n	8003bda <_fflush_r+0x3a>
 8003bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bd6:	f000 f915 	bl	8003e04 <__retarget_lock_acquire_recursive>
 8003bda:	4628      	mov	r0, r5
 8003bdc:	4621      	mov	r1, r4
 8003bde:	f7ff ff59 	bl	8003a94 <__sflush_r>
 8003be2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003be4:	07da      	lsls	r2, r3, #31
 8003be6:	4605      	mov	r5, r0
 8003be8:	d4e0      	bmi.n	8003bac <_fflush_r+0xc>
 8003bea:	89a3      	ldrh	r3, [r4, #12]
 8003bec:	059b      	lsls	r3, r3, #22
 8003bee:	d4dd      	bmi.n	8003bac <_fflush_r+0xc>
 8003bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bf2:	f000 f908 	bl	8003e06 <__retarget_lock_release_recursive>
 8003bf6:	e7d9      	b.n	8003bac <_fflush_r+0xc>
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <_fflush_r+0x70>)
 8003bfa:	429c      	cmp	r4, r3
 8003bfc:	d101      	bne.n	8003c02 <_fflush_r+0x62>
 8003bfe:	68ac      	ldr	r4, [r5, #8]
 8003c00:	e7df      	b.n	8003bc2 <_fflush_r+0x22>
 8003c02:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <_fflush_r+0x74>)
 8003c04:	429c      	cmp	r4, r3
 8003c06:	bf08      	it	eq
 8003c08:	68ec      	ldreq	r4, [r5, #12]
 8003c0a:	e7da      	b.n	8003bc2 <_fflush_r+0x22>
 8003c0c:	0800483c 	.word	0x0800483c
 8003c10:	0800485c 	.word	0x0800485c
 8003c14:	0800481c 	.word	0x0800481c

08003c18 <std>:
 8003c18:	2300      	movs	r3, #0
 8003c1a:	b510      	push	{r4, lr}
 8003c1c:	4604      	mov	r4, r0
 8003c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c26:	6083      	str	r3, [r0, #8]
 8003c28:	8181      	strh	r1, [r0, #12]
 8003c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8003c2c:	81c2      	strh	r2, [r0, #14]
 8003c2e:	6183      	str	r3, [r0, #24]
 8003c30:	4619      	mov	r1, r3
 8003c32:	2208      	movs	r2, #8
 8003c34:	305c      	adds	r0, #92	; 0x5c
 8003c36:	f7ff fdd7 	bl	80037e8 <memset>
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <std+0x38>)
 8003c3c:	6263      	str	r3, [r4, #36]	; 0x24
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <std+0x3c>)
 8003c40:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <std+0x40>)
 8003c44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <std+0x44>)
 8003c48:	6224      	str	r4, [r4, #32]
 8003c4a:	6323      	str	r3, [r4, #48]	; 0x30
 8003c4c:	bd10      	pop	{r4, pc}
 8003c4e:	bf00      	nop
 8003c50:	08004621 	.word	0x08004621
 8003c54:	08004643 	.word	0x08004643
 8003c58:	0800467b 	.word	0x0800467b
 8003c5c:	0800469f 	.word	0x0800469f

08003c60 <_cleanup_r>:
 8003c60:	4901      	ldr	r1, [pc, #4]	; (8003c68 <_cleanup_r+0x8>)
 8003c62:	f000 b8af 	b.w	8003dc4 <_fwalk_reent>
 8003c66:	bf00      	nop
 8003c68:	08003ba1 	.word	0x08003ba1

08003c6c <__sfmoreglue>:
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	1e4a      	subs	r2, r1, #1
 8003c70:	2568      	movs	r5, #104	; 0x68
 8003c72:	4355      	muls	r5, r2
 8003c74:	460e      	mov	r6, r1
 8003c76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c7a:	f000 f979 	bl	8003f70 <_malloc_r>
 8003c7e:	4604      	mov	r4, r0
 8003c80:	b140      	cbz	r0, 8003c94 <__sfmoreglue+0x28>
 8003c82:	2100      	movs	r1, #0
 8003c84:	e9c0 1600 	strd	r1, r6, [r0]
 8003c88:	300c      	adds	r0, #12
 8003c8a:	60a0      	str	r0, [r4, #8]
 8003c8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c90:	f7ff fdaa 	bl	80037e8 <memset>
 8003c94:	4620      	mov	r0, r4
 8003c96:	bd70      	pop	{r4, r5, r6, pc}

08003c98 <__sfp_lock_acquire>:
 8003c98:	4801      	ldr	r0, [pc, #4]	; (8003ca0 <__sfp_lock_acquire+0x8>)
 8003c9a:	f000 b8b3 	b.w	8003e04 <__retarget_lock_acquire_recursive>
 8003c9e:	bf00      	nop
 8003ca0:	200001c0 	.word	0x200001c0

08003ca4 <__sfp_lock_release>:
 8003ca4:	4801      	ldr	r0, [pc, #4]	; (8003cac <__sfp_lock_release+0x8>)
 8003ca6:	f000 b8ae 	b.w	8003e06 <__retarget_lock_release_recursive>
 8003caa:	bf00      	nop
 8003cac:	200001c0 	.word	0x200001c0

08003cb0 <__sinit_lock_acquire>:
 8003cb0:	4801      	ldr	r0, [pc, #4]	; (8003cb8 <__sinit_lock_acquire+0x8>)
 8003cb2:	f000 b8a7 	b.w	8003e04 <__retarget_lock_acquire_recursive>
 8003cb6:	bf00      	nop
 8003cb8:	200001bb 	.word	0x200001bb

08003cbc <__sinit_lock_release>:
 8003cbc:	4801      	ldr	r0, [pc, #4]	; (8003cc4 <__sinit_lock_release+0x8>)
 8003cbe:	f000 b8a2 	b.w	8003e06 <__retarget_lock_release_recursive>
 8003cc2:	bf00      	nop
 8003cc4:	200001bb 	.word	0x200001bb

08003cc8 <__sinit>:
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	4604      	mov	r4, r0
 8003ccc:	f7ff fff0 	bl	8003cb0 <__sinit_lock_acquire>
 8003cd0:	69a3      	ldr	r3, [r4, #24]
 8003cd2:	b11b      	cbz	r3, 8003cdc <__sinit+0x14>
 8003cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd8:	f7ff bff0 	b.w	8003cbc <__sinit_lock_release>
 8003cdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003ce0:	6523      	str	r3, [r4, #80]	; 0x50
 8003ce2:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <__sinit+0x68>)
 8003ce4:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <__sinit+0x6c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	62a2      	str	r2, [r4, #40]	; 0x28
 8003cea:	42a3      	cmp	r3, r4
 8003cec:	bf04      	itt	eq
 8003cee:	2301      	moveq	r3, #1
 8003cf0:	61a3      	streq	r3, [r4, #24]
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f000 f820 	bl	8003d38 <__sfp>
 8003cf8:	6060      	str	r0, [r4, #4]
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f000 f81c 	bl	8003d38 <__sfp>
 8003d00:	60a0      	str	r0, [r4, #8]
 8003d02:	4620      	mov	r0, r4
 8003d04:	f000 f818 	bl	8003d38 <__sfp>
 8003d08:	2200      	movs	r2, #0
 8003d0a:	60e0      	str	r0, [r4, #12]
 8003d0c:	2104      	movs	r1, #4
 8003d0e:	6860      	ldr	r0, [r4, #4]
 8003d10:	f7ff ff82 	bl	8003c18 <std>
 8003d14:	68a0      	ldr	r0, [r4, #8]
 8003d16:	2201      	movs	r2, #1
 8003d18:	2109      	movs	r1, #9
 8003d1a:	f7ff ff7d 	bl	8003c18 <std>
 8003d1e:	68e0      	ldr	r0, [r4, #12]
 8003d20:	2202      	movs	r2, #2
 8003d22:	2112      	movs	r1, #18
 8003d24:	f7ff ff78 	bl	8003c18 <std>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	61a3      	str	r3, [r4, #24]
 8003d2c:	e7d2      	b.n	8003cd4 <__sinit+0xc>
 8003d2e:	bf00      	nop
 8003d30:	08004818 	.word	0x08004818
 8003d34:	08003c61 	.word	0x08003c61

08003d38 <__sfp>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	4607      	mov	r7, r0
 8003d3c:	f7ff ffac 	bl	8003c98 <__sfp_lock_acquire>
 8003d40:	4b1e      	ldr	r3, [pc, #120]	; (8003dbc <__sfp+0x84>)
 8003d42:	681e      	ldr	r6, [r3, #0]
 8003d44:	69b3      	ldr	r3, [r6, #24]
 8003d46:	b913      	cbnz	r3, 8003d4e <__sfp+0x16>
 8003d48:	4630      	mov	r0, r6
 8003d4a:	f7ff ffbd 	bl	8003cc8 <__sinit>
 8003d4e:	3648      	adds	r6, #72	; 0x48
 8003d50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	d503      	bpl.n	8003d60 <__sfp+0x28>
 8003d58:	6833      	ldr	r3, [r6, #0]
 8003d5a:	b30b      	cbz	r3, 8003da0 <__sfp+0x68>
 8003d5c:	6836      	ldr	r6, [r6, #0]
 8003d5e:	e7f7      	b.n	8003d50 <__sfp+0x18>
 8003d60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d64:	b9d5      	cbnz	r5, 8003d9c <__sfp+0x64>
 8003d66:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <__sfp+0x88>)
 8003d68:	60e3      	str	r3, [r4, #12]
 8003d6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d6e:	6665      	str	r5, [r4, #100]	; 0x64
 8003d70:	f000 f847 	bl	8003e02 <__retarget_lock_init_recursive>
 8003d74:	f7ff ff96 	bl	8003ca4 <__sfp_lock_release>
 8003d78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003d7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003d80:	6025      	str	r5, [r4, #0]
 8003d82:	61a5      	str	r5, [r4, #24]
 8003d84:	2208      	movs	r2, #8
 8003d86:	4629      	mov	r1, r5
 8003d88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d8c:	f7ff fd2c 	bl	80037e8 <memset>
 8003d90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d98:	4620      	mov	r0, r4
 8003d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d9c:	3468      	adds	r4, #104	; 0x68
 8003d9e:	e7d9      	b.n	8003d54 <__sfp+0x1c>
 8003da0:	2104      	movs	r1, #4
 8003da2:	4638      	mov	r0, r7
 8003da4:	f7ff ff62 	bl	8003c6c <__sfmoreglue>
 8003da8:	4604      	mov	r4, r0
 8003daa:	6030      	str	r0, [r6, #0]
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d1d5      	bne.n	8003d5c <__sfp+0x24>
 8003db0:	f7ff ff78 	bl	8003ca4 <__sfp_lock_release>
 8003db4:	230c      	movs	r3, #12
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	e7ee      	b.n	8003d98 <__sfp+0x60>
 8003dba:	bf00      	nop
 8003dbc:	08004818 	.word	0x08004818
 8003dc0:	ffff0001 	.word	0xffff0001

08003dc4 <_fwalk_reent>:
 8003dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dc8:	4606      	mov	r6, r0
 8003dca:	4688      	mov	r8, r1
 8003dcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003dd0:	2700      	movs	r7, #0
 8003dd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dd6:	f1b9 0901 	subs.w	r9, r9, #1
 8003dda:	d505      	bpl.n	8003de8 <_fwalk_reent+0x24>
 8003ddc:	6824      	ldr	r4, [r4, #0]
 8003dde:	2c00      	cmp	r4, #0
 8003de0:	d1f7      	bne.n	8003dd2 <_fwalk_reent+0xe>
 8003de2:	4638      	mov	r0, r7
 8003de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003de8:	89ab      	ldrh	r3, [r5, #12]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d907      	bls.n	8003dfe <_fwalk_reent+0x3a>
 8003dee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003df2:	3301      	adds	r3, #1
 8003df4:	d003      	beq.n	8003dfe <_fwalk_reent+0x3a>
 8003df6:	4629      	mov	r1, r5
 8003df8:	4630      	mov	r0, r6
 8003dfa:	47c0      	blx	r8
 8003dfc:	4307      	orrs	r7, r0
 8003dfe:	3568      	adds	r5, #104	; 0x68
 8003e00:	e7e9      	b.n	8003dd6 <_fwalk_reent+0x12>

08003e02 <__retarget_lock_init_recursive>:
 8003e02:	4770      	bx	lr

08003e04 <__retarget_lock_acquire_recursive>:
 8003e04:	4770      	bx	lr

08003e06 <__retarget_lock_release_recursive>:
 8003e06:	4770      	bx	lr

08003e08 <__swhatbuf_r>:
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	460e      	mov	r6, r1
 8003e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e10:	2900      	cmp	r1, #0
 8003e12:	b096      	sub	sp, #88	; 0x58
 8003e14:	4614      	mov	r4, r2
 8003e16:	461d      	mov	r5, r3
 8003e18:	da07      	bge.n	8003e2a <__swhatbuf_r+0x22>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	602b      	str	r3, [r5, #0]
 8003e1e:	89b3      	ldrh	r3, [r6, #12]
 8003e20:	061a      	lsls	r2, r3, #24
 8003e22:	d410      	bmi.n	8003e46 <__swhatbuf_r+0x3e>
 8003e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e28:	e00e      	b.n	8003e48 <__swhatbuf_r+0x40>
 8003e2a:	466a      	mov	r2, sp
 8003e2c:	f000 fc5e 	bl	80046ec <_fstat_r>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	dbf2      	blt.n	8003e1a <__swhatbuf_r+0x12>
 8003e34:	9a01      	ldr	r2, [sp, #4]
 8003e36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e3e:	425a      	negs	r2, r3
 8003e40:	415a      	adcs	r2, r3
 8003e42:	602a      	str	r2, [r5, #0]
 8003e44:	e7ee      	b.n	8003e24 <__swhatbuf_r+0x1c>
 8003e46:	2340      	movs	r3, #64	; 0x40
 8003e48:	2000      	movs	r0, #0
 8003e4a:	6023      	str	r3, [r4, #0]
 8003e4c:	b016      	add	sp, #88	; 0x58
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}

08003e50 <__smakebuf_r>:
 8003e50:	898b      	ldrh	r3, [r1, #12]
 8003e52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e54:	079d      	lsls	r5, r3, #30
 8003e56:	4606      	mov	r6, r0
 8003e58:	460c      	mov	r4, r1
 8003e5a:	d507      	bpl.n	8003e6c <__smakebuf_r+0x1c>
 8003e5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	6123      	str	r3, [r4, #16]
 8003e64:	2301      	movs	r3, #1
 8003e66:	6163      	str	r3, [r4, #20]
 8003e68:	b002      	add	sp, #8
 8003e6a:	bd70      	pop	{r4, r5, r6, pc}
 8003e6c:	ab01      	add	r3, sp, #4
 8003e6e:	466a      	mov	r2, sp
 8003e70:	f7ff ffca 	bl	8003e08 <__swhatbuf_r>
 8003e74:	9900      	ldr	r1, [sp, #0]
 8003e76:	4605      	mov	r5, r0
 8003e78:	4630      	mov	r0, r6
 8003e7a:	f000 f879 	bl	8003f70 <_malloc_r>
 8003e7e:	b948      	cbnz	r0, 8003e94 <__smakebuf_r+0x44>
 8003e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e84:	059a      	lsls	r2, r3, #22
 8003e86:	d4ef      	bmi.n	8003e68 <__smakebuf_r+0x18>
 8003e88:	f023 0303 	bic.w	r3, r3, #3
 8003e8c:	f043 0302 	orr.w	r3, r3, #2
 8003e90:	81a3      	strh	r3, [r4, #12]
 8003e92:	e7e3      	b.n	8003e5c <__smakebuf_r+0xc>
 8003e94:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <__smakebuf_r+0x7c>)
 8003e96:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e98:	89a3      	ldrh	r3, [r4, #12]
 8003e9a:	6020      	str	r0, [r4, #0]
 8003e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea0:	81a3      	strh	r3, [r4, #12]
 8003ea2:	9b00      	ldr	r3, [sp, #0]
 8003ea4:	6163      	str	r3, [r4, #20]
 8003ea6:	9b01      	ldr	r3, [sp, #4]
 8003ea8:	6120      	str	r0, [r4, #16]
 8003eaa:	b15b      	cbz	r3, 8003ec4 <__smakebuf_r+0x74>
 8003eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	f000 fc2d 	bl	8004710 <_isatty_r>
 8003eb6:	b128      	cbz	r0, 8003ec4 <__smakebuf_r+0x74>
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	f023 0303 	bic.w	r3, r3, #3
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	81a3      	strh	r3, [r4, #12]
 8003ec4:	89a0      	ldrh	r0, [r4, #12]
 8003ec6:	4305      	orrs	r5, r0
 8003ec8:	81a5      	strh	r5, [r4, #12]
 8003eca:	e7cd      	b.n	8003e68 <__smakebuf_r+0x18>
 8003ecc:	08003c61 	.word	0x08003c61

08003ed0 <_free_r>:
 8003ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ed2:	2900      	cmp	r1, #0
 8003ed4:	d048      	beq.n	8003f68 <_free_r+0x98>
 8003ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eda:	9001      	str	r0, [sp, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f1a1 0404 	sub.w	r4, r1, #4
 8003ee2:	bfb8      	it	lt
 8003ee4:	18e4      	addlt	r4, r4, r3
 8003ee6:	f000 fc35 	bl	8004754 <__malloc_lock>
 8003eea:	4a20      	ldr	r2, [pc, #128]	; (8003f6c <_free_r+0x9c>)
 8003eec:	9801      	ldr	r0, [sp, #4]
 8003eee:	6813      	ldr	r3, [r2, #0]
 8003ef0:	4615      	mov	r5, r2
 8003ef2:	b933      	cbnz	r3, 8003f02 <_free_r+0x32>
 8003ef4:	6063      	str	r3, [r4, #4]
 8003ef6:	6014      	str	r4, [r2, #0]
 8003ef8:	b003      	add	sp, #12
 8003efa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003efe:	f000 bc2f 	b.w	8004760 <__malloc_unlock>
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	d90b      	bls.n	8003f1e <_free_r+0x4e>
 8003f06:	6821      	ldr	r1, [r4, #0]
 8003f08:	1862      	adds	r2, r4, r1
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	bf04      	itt	eq
 8003f0e:	681a      	ldreq	r2, [r3, #0]
 8003f10:	685b      	ldreq	r3, [r3, #4]
 8003f12:	6063      	str	r3, [r4, #4]
 8003f14:	bf04      	itt	eq
 8003f16:	1852      	addeq	r2, r2, r1
 8003f18:	6022      	streq	r2, [r4, #0]
 8003f1a:	602c      	str	r4, [r5, #0]
 8003f1c:	e7ec      	b.n	8003ef8 <_free_r+0x28>
 8003f1e:	461a      	mov	r2, r3
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	b10b      	cbz	r3, 8003f28 <_free_r+0x58>
 8003f24:	42a3      	cmp	r3, r4
 8003f26:	d9fa      	bls.n	8003f1e <_free_r+0x4e>
 8003f28:	6811      	ldr	r1, [r2, #0]
 8003f2a:	1855      	adds	r5, r2, r1
 8003f2c:	42a5      	cmp	r5, r4
 8003f2e:	d10b      	bne.n	8003f48 <_free_r+0x78>
 8003f30:	6824      	ldr	r4, [r4, #0]
 8003f32:	4421      	add	r1, r4
 8003f34:	1854      	adds	r4, r2, r1
 8003f36:	42a3      	cmp	r3, r4
 8003f38:	6011      	str	r1, [r2, #0]
 8003f3a:	d1dd      	bne.n	8003ef8 <_free_r+0x28>
 8003f3c:	681c      	ldr	r4, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	6053      	str	r3, [r2, #4]
 8003f42:	4421      	add	r1, r4
 8003f44:	6011      	str	r1, [r2, #0]
 8003f46:	e7d7      	b.n	8003ef8 <_free_r+0x28>
 8003f48:	d902      	bls.n	8003f50 <_free_r+0x80>
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	6003      	str	r3, [r0, #0]
 8003f4e:	e7d3      	b.n	8003ef8 <_free_r+0x28>
 8003f50:	6825      	ldr	r5, [r4, #0]
 8003f52:	1961      	adds	r1, r4, r5
 8003f54:	428b      	cmp	r3, r1
 8003f56:	bf04      	itt	eq
 8003f58:	6819      	ldreq	r1, [r3, #0]
 8003f5a:	685b      	ldreq	r3, [r3, #4]
 8003f5c:	6063      	str	r3, [r4, #4]
 8003f5e:	bf04      	itt	eq
 8003f60:	1949      	addeq	r1, r1, r5
 8003f62:	6021      	streq	r1, [r4, #0]
 8003f64:	6054      	str	r4, [r2, #4]
 8003f66:	e7c7      	b.n	8003ef8 <_free_r+0x28>
 8003f68:	b003      	add	sp, #12
 8003f6a:	bd30      	pop	{r4, r5, pc}
 8003f6c:	20000090 	.word	0x20000090

08003f70 <_malloc_r>:
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	1ccd      	adds	r5, r1, #3
 8003f74:	f025 0503 	bic.w	r5, r5, #3
 8003f78:	3508      	adds	r5, #8
 8003f7a:	2d0c      	cmp	r5, #12
 8003f7c:	bf38      	it	cc
 8003f7e:	250c      	movcc	r5, #12
 8003f80:	2d00      	cmp	r5, #0
 8003f82:	4606      	mov	r6, r0
 8003f84:	db01      	blt.n	8003f8a <_malloc_r+0x1a>
 8003f86:	42a9      	cmp	r1, r5
 8003f88:	d903      	bls.n	8003f92 <_malloc_r+0x22>
 8003f8a:	230c      	movs	r3, #12
 8003f8c:	6033      	str	r3, [r6, #0]
 8003f8e:	2000      	movs	r0, #0
 8003f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f92:	f000 fbdf 	bl	8004754 <__malloc_lock>
 8003f96:	4921      	ldr	r1, [pc, #132]	; (800401c <_malloc_r+0xac>)
 8003f98:	680a      	ldr	r2, [r1, #0]
 8003f9a:	4614      	mov	r4, r2
 8003f9c:	b99c      	cbnz	r4, 8003fc6 <_malloc_r+0x56>
 8003f9e:	4f20      	ldr	r7, [pc, #128]	; (8004020 <_malloc_r+0xb0>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	b923      	cbnz	r3, 8003fae <_malloc_r+0x3e>
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f000 fb2a 	bl	8004600 <_sbrk_r>
 8003fac:	6038      	str	r0, [r7, #0]
 8003fae:	4629      	mov	r1, r5
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	f000 fb25 	bl	8004600 <_sbrk_r>
 8003fb6:	1c43      	adds	r3, r0, #1
 8003fb8:	d123      	bne.n	8004002 <_malloc_r+0x92>
 8003fba:	230c      	movs	r3, #12
 8003fbc:	6033      	str	r3, [r6, #0]
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	f000 fbce 	bl	8004760 <__malloc_unlock>
 8003fc4:	e7e3      	b.n	8003f8e <_malloc_r+0x1e>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	1b5b      	subs	r3, r3, r5
 8003fca:	d417      	bmi.n	8003ffc <_malloc_r+0x8c>
 8003fcc:	2b0b      	cmp	r3, #11
 8003fce:	d903      	bls.n	8003fd8 <_malloc_r+0x68>
 8003fd0:	6023      	str	r3, [r4, #0]
 8003fd2:	441c      	add	r4, r3
 8003fd4:	6025      	str	r5, [r4, #0]
 8003fd6:	e004      	b.n	8003fe2 <_malloc_r+0x72>
 8003fd8:	6863      	ldr	r3, [r4, #4]
 8003fda:	42a2      	cmp	r2, r4
 8003fdc:	bf0c      	ite	eq
 8003fde:	600b      	streq	r3, [r1, #0]
 8003fe0:	6053      	strne	r3, [r2, #4]
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	f000 fbbc 	bl	8004760 <__malloc_unlock>
 8003fe8:	f104 000b 	add.w	r0, r4, #11
 8003fec:	1d23      	adds	r3, r4, #4
 8003fee:	f020 0007 	bic.w	r0, r0, #7
 8003ff2:	1ac2      	subs	r2, r0, r3
 8003ff4:	d0cc      	beq.n	8003f90 <_malloc_r+0x20>
 8003ff6:	1a1b      	subs	r3, r3, r0
 8003ff8:	50a3      	str	r3, [r4, r2]
 8003ffa:	e7c9      	b.n	8003f90 <_malloc_r+0x20>
 8003ffc:	4622      	mov	r2, r4
 8003ffe:	6864      	ldr	r4, [r4, #4]
 8004000:	e7cc      	b.n	8003f9c <_malloc_r+0x2c>
 8004002:	1cc4      	adds	r4, r0, #3
 8004004:	f024 0403 	bic.w	r4, r4, #3
 8004008:	42a0      	cmp	r0, r4
 800400a:	d0e3      	beq.n	8003fd4 <_malloc_r+0x64>
 800400c:	1a21      	subs	r1, r4, r0
 800400e:	4630      	mov	r0, r6
 8004010:	f000 faf6 	bl	8004600 <_sbrk_r>
 8004014:	3001      	adds	r0, #1
 8004016:	d1dd      	bne.n	8003fd4 <_malloc_r+0x64>
 8004018:	e7cf      	b.n	8003fba <_malloc_r+0x4a>
 800401a:	bf00      	nop
 800401c:	20000090 	.word	0x20000090
 8004020:	20000094 	.word	0x20000094

08004024 <__sfputc_r>:
 8004024:	6893      	ldr	r3, [r2, #8]
 8004026:	3b01      	subs	r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	b410      	push	{r4}
 800402c:	6093      	str	r3, [r2, #8]
 800402e:	da08      	bge.n	8004042 <__sfputc_r+0x1e>
 8004030:	6994      	ldr	r4, [r2, #24]
 8004032:	42a3      	cmp	r3, r4
 8004034:	db01      	blt.n	800403a <__sfputc_r+0x16>
 8004036:	290a      	cmp	r1, #10
 8004038:	d103      	bne.n	8004042 <__sfputc_r+0x1e>
 800403a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800403e:	f7ff bc69 	b.w	8003914 <__swbuf_r>
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	1c58      	adds	r0, r3, #1
 8004046:	6010      	str	r0, [r2, #0]
 8004048:	7019      	strb	r1, [r3, #0]
 800404a:	4608      	mov	r0, r1
 800404c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004050:	4770      	bx	lr

08004052 <__sfputs_r>:
 8004052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004054:	4606      	mov	r6, r0
 8004056:	460f      	mov	r7, r1
 8004058:	4614      	mov	r4, r2
 800405a:	18d5      	adds	r5, r2, r3
 800405c:	42ac      	cmp	r4, r5
 800405e:	d101      	bne.n	8004064 <__sfputs_r+0x12>
 8004060:	2000      	movs	r0, #0
 8004062:	e007      	b.n	8004074 <__sfputs_r+0x22>
 8004064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004068:	463a      	mov	r2, r7
 800406a:	4630      	mov	r0, r6
 800406c:	f7ff ffda 	bl	8004024 <__sfputc_r>
 8004070:	1c43      	adds	r3, r0, #1
 8004072:	d1f3      	bne.n	800405c <__sfputs_r+0xa>
 8004074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004078 <_vfiprintf_r>:
 8004078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407c:	460d      	mov	r5, r1
 800407e:	b09d      	sub	sp, #116	; 0x74
 8004080:	4614      	mov	r4, r2
 8004082:	4698      	mov	r8, r3
 8004084:	4606      	mov	r6, r0
 8004086:	b118      	cbz	r0, 8004090 <_vfiprintf_r+0x18>
 8004088:	6983      	ldr	r3, [r0, #24]
 800408a:	b90b      	cbnz	r3, 8004090 <_vfiprintf_r+0x18>
 800408c:	f7ff fe1c 	bl	8003cc8 <__sinit>
 8004090:	4b89      	ldr	r3, [pc, #548]	; (80042b8 <_vfiprintf_r+0x240>)
 8004092:	429d      	cmp	r5, r3
 8004094:	d11b      	bne.n	80040ce <_vfiprintf_r+0x56>
 8004096:	6875      	ldr	r5, [r6, #4]
 8004098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800409a:	07d9      	lsls	r1, r3, #31
 800409c:	d405      	bmi.n	80040aa <_vfiprintf_r+0x32>
 800409e:	89ab      	ldrh	r3, [r5, #12]
 80040a0:	059a      	lsls	r2, r3, #22
 80040a2:	d402      	bmi.n	80040aa <_vfiprintf_r+0x32>
 80040a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040a6:	f7ff fead 	bl	8003e04 <__retarget_lock_acquire_recursive>
 80040aa:	89ab      	ldrh	r3, [r5, #12]
 80040ac:	071b      	lsls	r3, r3, #28
 80040ae:	d501      	bpl.n	80040b4 <_vfiprintf_r+0x3c>
 80040b0:	692b      	ldr	r3, [r5, #16]
 80040b2:	b9eb      	cbnz	r3, 80040f0 <_vfiprintf_r+0x78>
 80040b4:	4629      	mov	r1, r5
 80040b6:	4630      	mov	r0, r6
 80040b8:	f7ff fc7e 	bl	80039b8 <__swsetup_r>
 80040bc:	b1c0      	cbz	r0, 80040f0 <_vfiprintf_r+0x78>
 80040be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040c0:	07dc      	lsls	r4, r3, #31
 80040c2:	d50e      	bpl.n	80040e2 <_vfiprintf_r+0x6a>
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	b01d      	add	sp, #116	; 0x74
 80040ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ce:	4b7b      	ldr	r3, [pc, #492]	; (80042bc <_vfiprintf_r+0x244>)
 80040d0:	429d      	cmp	r5, r3
 80040d2:	d101      	bne.n	80040d8 <_vfiprintf_r+0x60>
 80040d4:	68b5      	ldr	r5, [r6, #8]
 80040d6:	e7df      	b.n	8004098 <_vfiprintf_r+0x20>
 80040d8:	4b79      	ldr	r3, [pc, #484]	; (80042c0 <_vfiprintf_r+0x248>)
 80040da:	429d      	cmp	r5, r3
 80040dc:	bf08      	it	eq
 80040de:	68f5      	ldreq	r5, [r6, #12]
 80040e0:	e7da      	b.n	8004098 <_vfiprintf_r+0x20>
 80040e2:	89ab      	ldrh	r3, [r5, #12]
 80040e4:	0598      	lsls	r0, r3, #22
 80040e6:	d4ed      	bmi.n	80040c4 <_vfiprintf_r+0x4c>
 80040e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040ea:	f7ff fe8c 	bl	8003e06 <__retarget_lock_release_recursive>
 80040ee:	e7e9      	b.n	80040c4 <_vfiprintf_r+0x4c>
 80040f0:	2300      	movs	r3, #0
 80040f2:	9309      	str	r3, [sp, #36]	; 0x24
 80040f4:	2320      	movs	r3, #32
 80040f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80040fe:	2330      	movs	r3, #48	; 0x30
 8004100:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80042c4 <_vfiprintf_r+0x24c>
 8004104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004108:	f04f 0901 	mov.w	r9, #1
 800410c:	4623      	mov	r3, r4
 800410e:	469a      	mov	sl, r3
 8004110:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004114:	b10a      	cbz	r2, 800411a <_vfiprintf_r+0xa2>
 8004116:	2a25      	cmp	r2, #37	; 0x25
 8004118:	d1f9      	bne.n	800410e <_vfiprintf_r+0x96>
 800411a:	ebba 0b04 	subs.w	fp, sl, r4
 800411e:	d00b      	beq.n	8004138 <_vfiprintf_r+0xc0>
 8004120:	465b      	mov	r3, fp
 8004122:	4622      	mov	r2, r4
 8004124:	4629      	mov	r1, r5
 8004126:	4630      	mov	r0, r6
 8004128:	f7ff ff93 	bl	8004052 <__sfputs_r>
 800412c:	3001      	adds	r0, #1
 800412e:	f000 80aa 	beq.w	8004286 <_vfiprintf_r+0x20e>
 8004132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004134:	445a      	add	r2, fp
 8004136:	9209      	str	r2, [sp, #36]	; 0x24
 8004138:	f89a 3000 	ldrb.w	r3, [sl]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80a2 	beq.w	8004286 <_vfiprintf_r+0x20e>
 8004142:	2300      	movs	r3, #0
 8004144:	f04f 32ff 	mov.w	r2, #4294967295
 8004148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800414c:	f10a 0a01 	add.w	sl, sl, #1
 8004150:	9304      	str	r3, [sp, #16]
 8004152:	9307      	str	r3, [sp, #28]
 8004154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004158:	931a      	str	r3, [sp, #104]	; 0x68
 800415a:	4654      	mov	r4, sl
 800415c:	2205      	movs	r2, #5
 800415e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004162:	4858      	ldr	r0, [pc, #352]	; (80042c4 <_vfiprintf_r+0x24c>)
 8004164:	f7fc f83c 	bl	80001e0 <memchr>
 8004168:	9a04      	ldr	r2, [sp, #16]
 800416a:	b9d8      	cbnz	r0, 80041a4 <_vfiprintf_r+0x12c>
 800416c:	06d1      	lsls	r1, r2, #27
 800416e:	bf44      	itt	mi
 8004170:	2320      	movmi	r3, #32
 8004172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004176:	0713      	lsls	r3, r2, #28
 8004178:	bf44      	itt	mi
 800417a:	232b      	movmi	r3, #43	; 0x2b
 800417c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004180:	f89a 3000 	ldrb.w	r3, [sl]
 8004184:	2b2a      	cmp	r3, #42	; 0x2a
 8004186:	d015      	beq.n	80041b4 <_vfiprintf_r+0x13c>
 8004188:	9a07      	ldr	r2, [sp, #28]
 800418a:	4654      	mov	r4, sl
 800418c:	2000      	movs	r0, #0
 800418e:	f04f 0c0a 	mov.w	ip, #10
 8004192:	4621      	mov	r1, r4
 8004194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004198:	3b30      	subs	r3, #48	; 0x30
 800419a:	2b09      	cmp	r3, #9
 800419c:	d94e      	bls.n	800423c <_vfiprintf_r+0x1c4>
 800419e:	b1b0      	cbz	r0, 80041ce <_vfiprintf_r+0x156>
 80041a0:	9207      	str	r2, [sp, #28]
 80041a2:	e014      	b.n	80041ce <_vfiprintf_r+0x156>
 80041a4:	eba0 0308 	sub.w	r3, r0, r8
 80041a8:	fa09 f303 	lsl.w	r3, r9, r3
 80041ac:	4313      	orrs	r3, r2
 80041ae:	9304      	str	r3, [sp, #16]
 80041b0:	46a2      	mov	sl, r4
 80041b2:	e7d2      	b.n	800415a <_vfiprintf_r+0xe2>
 80041b4:	9b03      	ldr	r3, [sp, #12]
 80041b6:	1d19      	adds	r1, r3, #4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	9103      	str	r1, [sp, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	bfbb      	ittet	lt
 80041c0:	425b      	neglt	r3, r3
 80041c2:	f042 0202 	orrlt.w	r2, r2, #2
 80041c6:	9307      	strge	r3, [sp, #28]
 80041c8:	9307      	strlt	r3, [sp, #28]
 80041ca:	bfb8      	it	lt
 80041cc:	9204      	strlt	r2, [sp, #16]
 80041ce:	7823      	ldrb	r3, [r4, #0]
 80041d0:	2b2e      	cmp	r3, #46	; 0x2e
 80041d2:	d10c      	bne.n	80041ee <_vfiprintf_r+0x176>
 80041d4:	7863      	ldrb	r3, [r4, #1]
 80041d6:	2b2a      	cmp	r3, #42	; 0x2a
 80041d8:	d135      	bne.n	8004246 <_vfiprintf_r+0x1ce>
 80041da:	9b03      	ldr	r3, [sp, #12]
 80041dc:	1d1a      	adds	r2, r3, #4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	9203      	str	r2, [sp, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bfb8      	it	lt
 80041e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80041ea:	3402      	adds	r4, #2
 80041ec:	9305      	str	r3, [sp, #20]
 80041ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80042d4 <_vfiprintf_r+0x25c>
 80041f2:	7821      	ldrb	r1, [r4, #0]
 80041f4:	2203      	movs	r2, #3
 80041f6:	4650      	mov	r0, sl
 80041f8:	f7fb fff2 	bl	80001e0 <memchr>
 80041fc:	b140      	cbz	r0, 8004210 <_vfiprintf_r+0x198>
 80041fe:	2340      	movs	r3, #64	; 0x40
 8004200:	eba0 000a 	sub.w	r0, r0, sl
 8004204:	fa03 f000 	lsl.w	r0, r3, r0
 8004208:	9b04      	ldr	r3, [sp, #16]
 800420a:	4303      	orrs	r3, r0
 800420c:	3401      	adds	r4, #1
 800420e:	9304      	str	r3, [sp, #16]
 8004210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004214:	482c      	ldr	r0, [pc, #176]	; (80042c8 <_vfiprintf_r+0x250>)
 8004216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800421a:	2206      	movs	r2, #6
 800421c:	f7fb ffe0 	bl	80001e0 <memchr>
 8004220:	2800      	cmp	r0, #0
 8004222:	d03f      	beq.n	80042a4 <_vfiprintf_r+0x22c>
 8004224:	4b29      	ldr	r3, [pc, #164]	; (80042cc <_vfiprintf_r+0x254>)
 8004226:	bb1b      	cbnz	r3, 8004270 <_vfiprintf_r+0x1f8>
 8004228:	9b03      	ldr	r3, [sp, #12]
 800422a:	3307      	adds	r3, #7
 800422c:	f023 0307 	bic.w	r3, r3, #7
 8004230:	3308      	adds	r3, #8
 8004232:	9303      	str	r3, [sp, #12]
 8004234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004236:	443b      	add	r3, r7
 8004238:	9309      	str	r3, [sp, #36]	; 0x24
 800423a:	e767      	b.n	800410c <_vfiprintf_r+0x94>
 800423c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004240:	460c      	mov	r4, r1
 8004242:	2001      	movs	r0, #1
 8004244:	e7a5      	b.n	8004192 <_vfiprintf_r+0x11a>
 8004246:	2300      	movs	r3, #0
 8004248:	3401      	adds	r4, #1
 800424a:	9305      	str	r3, [sp, #20]
 800424c:	4619      	mov	r1, r3
 800424e:	f04f 0c0a 	mov.w	ip, #10
 8004252:	4620      	mov	r0, r4
 8004254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004258:	3a30      	subs	r2, #48	; 0x30
 800425a:	2a09      	cmp	r2, #9
 800425c:	d903      	bls.n	8004266 <_vfiprintf_r+0x1ee>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0c5      	beq.n	80041ee <_vfiprintf_r+0x176>
 8004262:	9105      	str	r1, [sp, #20]
 8004264:	e7c3      	b.n	80041ee <_vfiprintf_r+0x176>
 8004266:	fb0c 2101 	mla	r1, ip, r1, r2
 800426a:	4604      	mov	r4, r0
 800426c:	2301      	movs	r3, #1
 800426e:	e7f0      	b.n	8004252 <_vfiprintf_r+0x1da>
 8004270:	ab03      	add	r3, sp, #12
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	462a      	mov	r2, r5
 8004276:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <_vfiprintf_r+0x258>)
 8004278:	a904      	add	r1, sp, #16
 800427a:	4630      	mov	r0, r6
 800427c:	f3af 8000 	nop.w
 8004280:	4607      	mov	r7, r0
 8004282:	1c78      	adds	r0, r7, #1
 8004284:	d1d6      	bne.n	8004234 <_vfiprintf_r+0x1bc>
 8004286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004288:	07d9      	lsls	r1, r3, #31
 800428a:	d405      	bmi.n	8004298 <_vfiprintf_r+0x220>
 800428c:	89ab      	ldrh	r3, [r5, #12]
 800428e:	059a      	lsls	r2, r3, #22
 8004290:	d402      	bmi.n	8004298 <_vfiprintf_r+0x220>
 8004292:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004294:	f7ff fdb7 	bl	8003e06 <__retarget_lock_release_recursive>
 8004298:	89ab      	ldrh	r3, [r5, #12]
 800429a:	065b      	lsls	r3, r3, #25
 800429c:	f53f af12 	bmi.w	80040c4 <_vfiprintf_r+0x4c>
 80042a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042a2:	e711      	b.n	80040c8 <_vfiprintf_r+0x50>
 80042a4:	ab03      	add	r3, sp, #12
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	462a      	mov	r2, r5
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <_vfiprintf_r+0x258>)
 80042ac:	a904      	add	r1, sp, #16
 80042ae:	4630      	mov	r0, r6
 80042b0:	f000 f880 	bl	80043b4 <_printf_i>
 80042b4:	e7e4      	b.n	8004280 <_vfiprintf_r+0x208>
 80042b6:	bf00      	nop
 80042b8:	0800483c 	.word	0x0800483c
 80042bc:	0800485c 	.word	0x0800485c
 80042c0:	0800481c 	.word	0x0800481c
 80042c4:	0800487c 	.word	0x0800487c
 80042c8:	08004886 	.word	0x08004886
 80042cc:	00000000 	.word	0x00000000
 80042d0:	08004053 	.word	0x08004053
 80042d4:	08004882 	.word	0x08004882

080042d8 <_printf_common>:
 80042d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042dc:	4616      	mov	r6, r2
 80042de:	4699      	mov	r9, r3
 80042e0:	688a      	ldr	r2, [r1, #8]
 80042e2:	690b      	ldr	r3, [r1, #16]
 80042e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042e8:	4293      	cmp	r3, r2
 80042ea:	bfb8      	it	lt
 80042ec:	4613      	movlt	r3, r2
 80042ee:	6033      	str	r3, [r6, #0]
 80042f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042f4:	4607      	mov	r7, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	b10a      	cbz	r2, 80042fe <_printf_common+0x26>
 80042fa:	3301      	adds	r3, #1
 80042fc:	6033      	str	r3, [r6, #0]
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	0699      	lsls	r1, r3, #26
 8004302:	bf42      	ittt	mi
 8004304:	6833      	ldrmi	r3, [r6, #0]
 8004306:	3302      	addmi	r3, #2
 8004308:	6033      	strmi	r3, [r6, #0]
 800430a:	6825      	ldr	r5, [r4, #0]
 800430c:	f015 0506 	ands.w	r5, r5, #6
 8004310:	d106      	bne.n	8004320 <_printf_common+0x48>
 8004312:	f104 0a19 	add.w	sl, r4, #25
 8004316:	68e3      	ldr	r3, [r4, #12]
 8004318:	6832      	ldr	r2, [r6, #0]
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	42ab      	cmp	r3, r5
 800431e:	dc26      	bgt.n	800436e <_printf_common+0x96>
 8004320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004324:	1e13      	subs	r3, r2, #0
 8004326:	6822      	ldr	r2, [r4, #0]
 8004328:	bf18      	it	ne
 800432a:	2301      	movne	r3, #1
 800432c:	0692      	lsls	r2, r2, #26
 800432e:	d42b      	bmi.n	8004388 <_printf_common+0xb0>
 8004330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004334:	4649      	mov	r1, r9
 8004336:	4638      	mov	r0, r7
 8004338:	47c0      	blx	r8
 800433a:	3001      	adds	r0, #1
 800433c:	d01e      	beq.n	800437c <_printf_common+0xa4>
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	68e5      	ldr	r5, [r4, #12]
 8004342:	6832      	ldr	r2, [r6, #0]
 8004344:	f003 0306 	and.w	r3, r3, #6
 8004348:	2b04      	cmp	r3, #4
 800434a:	bf08      	it	eq
 800434c:	1aad      	subeq	r5, r5, r2
 800434e:	68a3      	ldr	r3, [r4, #8]
 8004350:	6922      	ldr	r2, [r4, #16]
 8004352:	bf0c      	ite	eq
 8004354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004358:	2500      	movne	r5, #0
 800435a:	4293      	cmp	r3, r2
 800435c:	bfc4      	itt	gt
 800435e:	1a9b      	subgt	r3, r3, r2
 8004360:	18ed      	addgt	r5, r5, r3
 8004362:	2600      	movs	r6, #0
 8004364:	341a      	adds	r4, #26
 8004366:	42b5      	cmp	r5, r6
 8004368:	d11a      	bne.n	80043a0 <_printf_common+0xc8>
 800436a:	2000      	movs	r0, #0
 800436c:	e008      	b.n	8004380 <_printf_common+0xa8>
 800436e:	2301      	movs	r3, #1
 8004370:	4652      	mov	r2, sl
 8004372:	4649      	mov	r1, r9
 8004374:	4638      	mov	r0, r7
 8004376:	47c0      	blx	r8
 8004378:	3001      	adds	r0, #1
 800437a:	d103      	bne.n	8004384 <_printf_common+0xac>
 800437c:	f04f 30ff 	mov.w	r0, #4294967295
 8004380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004384:	3501      	adds	r5, #1
 8004386:	e7c6      	b.n	8004316 <_printf_common+0x3e>
 8004388:	18e1      	adds	r1, r4, r3
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	2030      	movs	r0, #48	; 0x30
 800438e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004392:	4422      	add	r2, r4
 8004394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800439c:	3302      	adds	r3, #2
 800439e:	e7c7      	b.n	8004330 <_printf_common+0x58>
 80043a0:	2301      	movs	r3, #1
 80043a2:	4622      	mov	r2, r4
 80043a4:	4649      	mov	r1, r9
 80043a6:	4638      	mov	r0, r7
 80043a8:	47c0      	blx	r8
 80043aa:	3001      	adds	r0, #1
 80043ac:	d0e6      	beq.n	800437c <_printf_common+0xa4>
 80043ae:	3601      	adds	r6, #1
 80043b0:	e7d9      	b.n	8004366 <_printf_common+0x8e>
	...

080043b4 <_printf_i>:
 80043b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043b8:	460c      	mov	r4, r1
 80043ba:	4691      	mov	r9, r2
 80043bc:	7e27      	ldrb	r7, [r4, #24]
 80043be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043c0:	2f78      	cmp	r7, #120	; 0x78
 80043c2:	4680      	mov	r8, r0
 80043c4:	469a      	mov	sl, r3
 80043c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043ca:	d807      	bhi.n	80043dc <_printf_i+0x28>
 80043cc:	2f62      	cmp	r7, #98	; 0x62
 80043ce:	d80a      	bhi.n	80043e6 <_printf_i+0x32>
 80043d0:	2f00      	cmp	r7, #0
 80043d2:	f000 80d8 	beq.w	8004586 <_printf_i+0x1d2>
 80043d6:	2f58      	cmp	r7, #88	; 0x58
 80043d8:	f000 80a3 	beq.w	8004522 <_printf_i+0x16e>
 80043dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043e4:	e03a      	b.n	800445c <_printf_i+0xa8>
 80043e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043ea:	2b15      	cmp	r3, #21
 80043ec:	d8f6      	bhi.n	80043dc <_printf_i+0x28>
 80043ee:	a001      	add	r0, pc, #4	; (adr r0, 80043f4 <_printf_i+0x40>)
 80043f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80043f4:	0800444d 	.word	0x0800444d
 80043f8:	08004461 	.word	0x08004461
 80043fc:	080043dd 	.word	0x080043dd
 8004400:	080043dd 	.word	0x080043dd
 8004404:	080043dd 	.word	0x080043dd
 8004408:	080043dd 	.word	0x080043dd
 800440c:	08004461 	.word	0x08004461
 8004410:	080043dd 	.word	0x080043dd
 8004414:	080043dd 	.word	0x080043dd
 8004418:	080043dd 	.word	0x080043dd
 800441c:	080043dd 	.word	0x080043dd
 8004420:	0800456d 	.word	0x0800456d
 8004424:	08004491 	.word	0x08004491
 8004428:	0800454f 	.word	0x0800454f
 800442c:	080043dd 	.word	0x080043dd
 8004430:	080043dd 	.word	0x080043dd
 8004434:	0800458f 	.word	0x0800458f
 8004438:	080043dd 	.word	0x080043dd
 800443c:	08004491 	.word	0x08004491
 8004440:	080043dd 	.word	0x080043dd
 8004444:	080043dd 	.word	0x080043dd
 8004448:	08004557 	.word	0x08004557
 800444c:	680b      	ldr	r3, [r1, #0]
 800444e:	1d1a      	adds	r2, r3, #4
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	600a      	str	r2, [r1, #0]
 8004454:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800445c:	2301      	movs	r3, #1
 800445e:	e0a3      	b.n	80045a8 <_printf_i+0x1f4>
 8004460:	6825      	ldr	r5, [r4, #0]
 8004462:	6808      	ldr	r0, [r1, #0]
 8004464:	062e      	lsls	r6, r5, #24
 8004466:	f100 0304 	add.w	r3, r0, #4
 800446a:	d50a      	bpl.n	8004482 <_printf_i+0xce>
 800446c:	6805      	ldr	r5, [r0, #0]
 800446e:	600b      	str	r3, [r1, #0]
 8004470:	2d00      	cmp	r5, #0
 8004472:	da03      	bge.n	800447c <_printf_i+0xc8>
 8004474:	232d      	movs	r3, #45	; 0x2d
 8004476:	426d      	negs	r5, r5
 8004478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800447c:	485e      	ldr	r0, [pc, #376]	; (80045f8 <_printf_i+0x244>)
 800447e:	230a      	movs	r3, #10
 8004480:	e019      	b.n	80044b6 <_printf_i+0x102>
 8004482:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004486:	6805      	ldr	r5, [r0, #0]
 8004488:	600b      	str	r3, [r1, #0]
 800448a:	bf18      	it	ne
 800448c:	b22d      	sxthne	r5, r5
 800448e:	e7ef      	b.n	8004470 <_printf_i+0xbc>
 8004490:	680b      	ldr	r3, [r1, #0]
 8004492:	6825      	ldr	r5, [r4, #0]
 8004494:	1d18      	adds	r0, r3, #4
 8004496:	6008      	str	r0, [r1, #0]
 8004498:	0628      	lsls	r0, r5, #24
 800449a:	d501      	bpl.n	80044a0 <_printf_i+0xec>
 800449c:	681d      	ldr	r5, [r3, #0]
 800449e:	e002      	b.n	80044a6 <_printf_i+0xf2>
 80044a0:	0669      	lsls	r1, r5, #25
 80044a2:	d5fb      	bpl.n	800449c <_printf_i+0xe8>
 80044a4:	881d      	ldrh	r5, [r3, #0]
 80044a6:	4854      	ldr	r0, [pc, #336]	; (80045f8 <_printf_i+0x244>)
 80044a8:	2f6f      	cmp	r7, #111	; 0x6f
 80044aa:	bf0c      	ite	eq
 80044ac:	2308      	moveq	r3, #8
 80044ae:	230a      	movne	r3, #10
 80044b0:	2100      	movs	r1, #0
 80044b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044b6:	6866      	ldr	r6, [r4, #4]
 80044b8:	60a6      	str	r6, [r4, #8]
 80044ba:	2e00      	cmp	r6, #0
 80044bc:	bfa2      	ittt	ge
 80044be:	6821      	ldrge	r1, [r4, #0]
 80044c0:	f021 0104 	bicge.w	r1, r1, #4
 80044c4:	6021      	strge	r1, [r4, #0]
 80044c6:	b90d      	cbnz	r5, 80044cc <_printf_i+0x118>
 80044c8:	2e00      	cmp	r6, #0
 80044ca:	d04d      	beq.n	8004568 <_printf_i+0x1b4>
 80044cc:	4616      	mov	r6, r2
 80044ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80044d2:	fb03 5711 	mls	r7, r3, r1, r5
 80044d6:	5dc7      	ldrb	r7, [r0, r7]
 80044d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044dc:	462f      	mov	r7, r5
 80044de:	42bb      	cmp	r3, r7
 80044e0:	460d      	mov	r5, r1
 80044e2:	d9f4      	bls.n	80044ce <_printf_i+0x11a>
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d10b      	bne.n	8004500 <_printf_i+0x14c>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	07df      	lsls	r7, r3, #31
 80044ec:	d508      	bpl.n	8004500 <_printf_i+0x14c>
 80044ee:	6923      	ldr	r3, [r4, #16]
 80044f0:	6861      	ldr	r1, [r4, #4]
 80044f2:	4299      	cmp	r1, r3
 80044f4:	bfde      	ittt	le
 80044f6:	2330      	movle	r3, #48	; 0x30
 80044f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004500:	1b92      	subs	r2, r2, r6
 8004502:	6122      	str	r2, [r4, #16]
 8004504:	f8cd a000 	str.w	sl, [sp]
 8004508:	464b      	mov	r3, r9
 800450a:	aa03      	add	r2, sp, #12
 800450c:	4621      	mov	r1, r4
 800450e:	4640      	mov	r0, r8
 8004510:	f7ff fee2 	bl	80042d8 <_printf_common>
 8004514:	3001      	adds	r0, #1
 8004516:	d14c      	bne.n	80045b2 <_printf_i+0x1fe>
 8004518:	f04f 30ff 	mov.w	r0, #4294967295
 800451c:	b004      	add	sp, #16
 800451e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004522:	4835      	ldr	r0, [pc, #212]	; (80045f8 <_printf_i+0x244>)
 8004524:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	680e      	ldr	r6, [r1, #0]
 800452c:	061f      	lsls	r7, r3, #24
 800452e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004532:	600e      	str	r6, [r1, #0]
 8004534:	d514      	bpl.n	8004560 <_printf_i+0x1ac>
 8004536:	07d9      	lsls	r1, r3, #31
 8004538:	bf44      	itt	mi
 800453a:	f043 0320 	orrmi.w	r3, r3, #32
 800453e:	6023      	strmi	r3, [r4, #0]
 8004540:	b91d      	cbnz	r5, 800454a <_printf_i+0x196>
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	f023 0320 	bic.w	r3, r3, #32
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	2310      	movs	r3, #16
 800454c:	e7b0      	b.n	80044b0 <_printf_i+0xfc>
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	f043 0320 	orr.w	r3, r3, #32
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	2378      	movs	r3, #120	; 0x78
 8004558:	4828      	ldr	r0, [pc, #160]	; (80045fc <_printf_i+0x248>)
 800455a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800455e:	e7e3      	b.n	8004528 <_printf_i+0x174>
 8004560:	065e      	lsls	r6, r3, #25
 8004562:	bf48      	it	mi
 8004564:	b2ad      	uxthmi	r5, r5
 8004566:	e7e6      	b.n	8004536 <_printf_i+0x182>
 8004568:	4616      	mov	r6, r2
 800456a:	e7bb      	b.n	80044e4 <_printf_i+0x130>
 800456c:	680b      	ldr	r3, [r1, #0]
 800456e:	6826      	ldr	r6, [r4, #0]
 8004570:	6960      	ldr	r0, [r4, #20]
 8004572:	1d1d      	adds	r5, r3, #4
 8004574:	600d      	str	r5, [r1, #0]
 8004576:	0635      	lsls	r5, r6, #24
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	d501      	bpl.n	8004580 <_printf_i+0x1cc>
 800457c:	6018      	str	r0, [r3, #0]
 800457e:	e002      	b.n	8004586 <_printf_i+0x1d2>
 8004580:	0671      	lsls	r1, r6, #25
 8004582:	d5fb      	bpl.n	800457c <_printf_i+0x1c8>
 8004584:	8018      	strh	r0, [r3, #0]
 8004586:	2300      	movs	r3, #0
 8004588:	6123      	str	r3, [r4, #16]
 800458a:	4616      	mov	r6, r2
 800458c:	e7ba      	b.n	8004504 <_printf_i+0x150>
 800458e:	680b      	ldr	r3, [r1, #0]
 8004590:	1d1a      	adds	r2, r3, #4
 8004592:	600a      	str	r2, [r1, #0]
 8004594:	681e      	ldr	r6, [r3, #0]
 8004596:	6862      	ldr	r2, [r4, #4]
 8004598:	2100      	movs	r1, #0
 800459a:	4630      	mov	r0, r6
 800459c:	f7fb fe20 	bl	80001e0 <memchr>
 80045a0:	b108      	cbz	r0, 80045a6 <_printf_i+0x1f2>
 80045a2:	1b80      	subs	r0, r0, r6
 80045a4:	6060      	str	r0, [r4, #4]
 80045a6:	6863      	ldr	r3, [r4, #4]
 80045a8:	6123      	str	r3, [r4, #16]
 80045aa:	2300      	movs	r3, #0
 80045ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045b0:	e7a8      	b.n	8004504 <_printf_i+0x150>
 80045b2:	6923      	ldr	r3, [r4, #16]
 80045b4:	4632      	mov	r2, r6
 80045b6:	4649      	mov	r1, r9
 80045b8:	4640      	mov	r0, r8
 80045ba:	47d0      	blx	sl
 80045bc:	3001      	adds	r0, #1
 80045be:	d0ab      	beq.n	8004518 <_printf_i+0x164>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	079b      	lsls	r3, r3, #30
 80045c4:	d413      	bmi.n	80045ee <_printf_i+0x23a>
 80045c6:	68e0      	ldr	r0, [r4, #12]
 80045c8:	9b03      	ldr	r3, [sp, #12]
 80045ca:	4298      	cmp	r0, r3
 80045cc:	bfb8      	it	lt
 80045ce:	4618      	movlt	r0, r3
 80045d0:	e7a4      	b.n	800451c <_printf_i+0x168>
 80045d2:	2301      	movs	r3, #1
 80045d4:	4632      	mov	r2, r6
 80045d6:	4649      	mov	r1, r9
 80045d8:	4640      	mov	r0, r8
 80045da:	47d0      	blx	sl
 80045dc:	3001      	adds	r0, #1
 80045de:	d09b      	beq.n	8004518 <_printf_i+0x164>
 80045e0:	3501      	adds	r5, #1
 80045e2:	68e3      	ldr	r3, [r4, #12]
 80045e4:	9903      	ldr	r1, [sp, #12]
 80045e6:	1a5b      	subs	r3, r3, r1
 80045e8:	42ab      	cmp	r3, r5
 80045ea:	dcf2      	bgt.n	80045d2 <_printf_i+0x21e>
 80045ec:	e7eb      	b.n	80045c6 <_printf_i+0x212>
 80045ee:	2500      	movs	r5, #0
 80045f0:	f104 0619 	add.w	r6, r4, #25
 80045f4:	e7f5      	b.n	80045e2 <_printf_i+0x22e>
 80045f6:	bf00      	nop
 80045f8:	0800488d 	.word	0x0800488d
 80045fc:	0800489e 	.word	0x0800489e

08004600 <_sbrk_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	4d06      	ldr	r5, [pc, #24]	; (800461c <_sbrk_r+0x1c>)
 8004604:	2300      	movs	r3, #0
 8004606:	4604      	mov	r4, r0
 8004608:	4608      	mov	r0, r1
 800460a:	602b      	str	r3, [r5, #0]
 800460c:	f7fc fe7e 	bl	800130c <_sbrk>
 8004610:	1c43      	adds	r3, r0, #1
 8004612:	d102      	bne.n	800461a <_sbrk_r+0x1a>
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	b103      	cbz	r3, 800461a <_sbrk_r+0x1a>
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	bd38      	pop	{r3, r4, r5, pc}
 800461c:	200001c4 	.word	0x200001c4

08004620 <__sread>:
 8004620:	b510      	push	{r4, lr}
 8004622:	460c      	mov	r4, r1
 8004624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004628:	f000 f8a0 	bl	800476c <_read_r>
 800462c:	2800      	cmp	r0, #0
 800462e:	bfab      	itete	ge
 8004630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004632:	89a3      	ldrhlt	r3, [r4, #12]
 8004634:	181b      	addge	r3, r3, r0
 8004636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800463a:	bfac      	ite	ge
 800463c:	6563      	strge	r3, [r4, #84]	; 0x54
 800463e:	81a3      	strhlt	r3, [r4, #12]
 8004640:	bd10      	pop	{r4, pc}

08004642 <__swrite>:
 8004642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004646:	461f      	mov	r7, r3
 8004648:	898b      	ldrh	r3, [r1, #12]
 800464a:	05db      	lsls	r3, r3, #23
 800464c:	4605      	mov	r5, r0
 800464e:	460c      	mov	r4, r1
 8004650:	4616      	mov	r6, r2
 8004652:	d505      	bpl.n	8004660 <__swrite+0x1e>
 8004654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004658:	2302      	movs	r3, #2
 800465a:	2200      	movs	r2, #0
 800465c:	f000 f868 	bl	8004730 <_lseek_r>
 8004660:	89a3      	ldrh	r3, [r4, #12]
 8004662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800466a:	81a3      	strh	r3, [r4, #12]
 800466c:	4632      	mov	r2, r6
 800466e:	463b      	mov	r3, r7
 8004670:	4628      	mov	r0, r5
 8004672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004676:	f000 b817 	b.w	80046a8 <_write_r>

0800467a <__sseek>:
 800467a:	b510      	push	{r4, lr}
 800467c:	460c      	mov	r4, r1
 800467e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004682:	f000 f855 	bl	8004730 <_lseek_r>
 8004686:	1c43      	adds	r3, r0, #1
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	bf15      	itete	ne
 800468c:	6560      	strne	r0, [r4, #84]	; 0x54
 800468e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004696:	81a3      	strheq	r3, [r4, #12]
 8004698:	bf18      	it	ne
 800469a:	81a3      	strhne	r3, [r4, #12]
 800469c:	bd10      	pop	{r4, pc}

0800469e <__sclose>:
 800469e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a2:	f000 b813 	b.w	80046cc <_close_r>
	...

080046a8 <_write_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4d07      	ldr	r5, [pc, #28]	; (80046c8 <_write_r+0x20>)
 80046ac:	4604      	mov	r4, r0
 80046ae:	4608      	mov	r0, r1
 80046b0:	4611      	mov	r1, r2
 80046b2:	2200      	movs	r2, #0
 80046b4:	602a      	str	r2, [r5, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f7fc fc70 	bl	8000f9c <_write>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	d102      	bne.n	80046c6 <_write_r+0x1e>
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	b103      	cbz	r3, 80046c6 <_write_r+0x1e>
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	200001c4 	.word	0x200001c4

080046cc <_close_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	4d06      	ldr	r5, [pc, #24]	; (80046e8 <_close_r+0x1c>)
 80046d0:	2300      	movs	r3, #0
 80046d2:	4604      	mov	r4, r0
 80046d4:	4608      	mov	r0, r1
 80046d6:	602b      	str	r3, [r5, #0]
 80046d8:	f7fc fde4 	bl	80012a4 <_close>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	d102      	bne.n	80046e6 <_close_r+0x1a>
 80046e0:	682b      	ldr	r3, [r5, #0]
 80046e2:	b103      	cbz	r3, 80046e6 <_close_r+0x1a>
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	bd38      	pop	{r3, r4, r5, pc}
 80046e8:	200001c4 	.word	0x200001c4

080046ec <_fstat_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4d07      	ldr	r5, [pc, #28]	; (800470c <_fstat_r+0x20>)
 80046f0:	2300      	movs	r3, #0
 80046f2:	4604      	mov	r4, r0
 80046f4:	4608      	mov	r0, r1
 80046f6:	4611      	mov	r1, r2
 80046f8:	602b      	str	r3, [r5, #0]
 80046fa:	f7fc fddf 	bl	80012bc <_fstat>
 80046fe:	1c43      	adds	r3, r0, #1
 8004700:	d102      	bne.n	8004708 <_fstat_r+0x1c>
 8004702:	682b      	ldr	r3, [r5, #0]
 8004704:	b103      	cbz	r3, 8004708 <_fstat_r+0x1c>
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	bd38      	pop	{r3, r4, r5, pc}
 800470a:	bf00      	nop
 800470c:	200001c4 	.word	0x200001c4

08004710 <_isatty_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	4d06      	ldr	r5, [pc, #24]	; (800472c <_isatty_r+0x1c>)
 8004714:	2300      	movs	r3, #0
 8004716:	4604      	mov	r4, r0
 8004718:	4608      	mov	r0, r1
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	f7fc fdde 	bl	80012dc <_isatty>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d102      	bne.n	800472a <_isatty_r+0x1a>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	b103      	cbz	r3, 800472a <_isatty_r+0x1a>
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	200001c4 	.word	0x200001c4

08004730 <_lseek_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4d07      	ldr	r5, [pc, #28]	; (8004750 <_lseek_r+0x20>)
 8004734:	4604      	mov	r4, r0
 8004736:	4608      	mov	r0, r1
 8004738:	4611      	mov	r1, r2
 800473a:	2200      	movs	r2, #0
 800473c:	602a      	str	r2, [r5, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	f7fc fdd7 	bl	80012f2 <_lseek>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d102      	bne.n	800474e <_lseek_r+0x1e>
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	b103      	cbz	r3, 800474e <_lseek_r+0x1e>
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	200001c4 	.word	0x200001c4

08004754 <__malloc_lock>:
 8004754:	4801      	ldr	r0, [pc, #4]	; (800475c <__malloc_lock+0x8>)
 8004756:	f7ff bb55 	b.w	8003e04 <__retarget_lock_acquire_recursive>
 800475a:	bf00      	nop
 800475c:	200001bc 	.word	0x200001bc

08004760 <__malloc_unlock>:
 8004760:	4801      	ldr	r0, [pc, #4]	; (8004768 <__malloc_unlock+0x8>)
 8004762:	f7ff bb50 	b.w	8003e06 <__retarget_lock_release_recursive>
 8004766:	bf00      	nop
 8004768:	200001bc 	.word	0x200001bc

0800476c <_read_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4d07      	ldr	r5, [pc, #28]	; (800478c <_read_r+0x20>)
 8004770:	4604      	mov	r4, r0
 8004772:	4608      	mov	r0, r1
 8004774:	4611      	mov	r1, r2
 8004776:	2200      	movs	r2, #0
 8004778:	602a      	str	r2, [r5, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	f7fc fd75 	bl	800126a <_read>
 8004780:	1c43      	adds	r3, r0, #1
 8004782:	d102      	bne.n	800478a <_read_r+0x1e>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	b103      	cbz	r3, 800478a <_read_r+0x1e>
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	bd38      	pop	{r3, r4, r5, pc}
 800478c:	200001c4 	.word	0x200001c4

08004790 <_init>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	bf00      	nop
 8004794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004796:	bc08      	pop	{r3}
 8004798:	469e      	mov	lr, r3
 800479a:	4770      	bx	lr

0800479c <_fini>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	bf00      	nop
 80047a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a2:	bc08      	pop	{r3}
 80047a4:	469e      	mov	lr, r3
 80047a6:	4770      	bx	lr
