
F303_partition_clearning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004558  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004790  08004790  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004790  08004790  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004790  08004790  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004794  08004794  00014794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001e0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000250  20000250  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000100d6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eea  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  00032060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00032d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c408  00000000  00000000  000338f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f3fc  00000000  00000000  0004fd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5ee3  00000000  00000000  0005f0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00104fdf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bf0  00000000  00000000  00105034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046c8 	.word	0x080046c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080046c8 	.word	0x080046c8

080001c8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t stop;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0)
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d11c      	bne.n	8000212 <HAL_GPIO_EXTI_Callback+0x4a>
  {
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80001d8:	2101      	movs	r1, #1
 80001da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001de:	f000 ffbd 	bl	800115c <HAL_GPIO_ReadPin>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d006      	beq.n	80001f6 <HAL_GPIO_EXTI_Callback+0x2e>
    {
//      HAL_GPIO_WritePin(GPIOA, DIR_Pin, 1);
      printf("on\r\n");
 80001e8:	480c      	ldr	r0, [pc, #48]	; (800021c <HAL_GPIO_EXTI_Callback+0x54>)
 80001ea:	f003 fd3f 	bl	8003c6c <puts>
      stop=0;
 80001ee:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <HAL_GPIO_EXTI_Callback+0x58>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	701a      	strb	r2, [r3, #0]
//      HAL_GPIO_WritePin(GPIOA, DIR_Pin, 0);
      printf("off\r\n");
      stop=1;
    }
  }
}
 80001f4:	e00d      	b.n	8000212 <HAL_GPIO_EXTI_Callback+0x4a>
    else if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80001f6:	2101      	movs	r1, #1
 80001f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001fc:	f000 ffae 	bl	800115c <HAL_GPIO_ReadPin>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d105      	bne.n	8000212 <HAL_GPIO_EXTI_Callback+0x4a>
      printf("off\r\n");
 8000206:	4807      	ldr	r0, [pc, #28]	; (8000224 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000208:	f003 fd30 	bl	8003c6c <puts>
      stop=1;
 800020c:	4b04      	ldr	r3, [pc, #16]	; (8000220 <HAL_GPIO_EXTI_Callback+0x58>)
 800020e:	2201      	movs	r2, #1
 8000210:	701a      	strb	r2, [r3, #0]
}
 8000212:	bf00      	nop
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	080046e0 	.word	0x080046e0
 8000220:	20000238 	.word	0x20000238
 8000224:	080046e4 	.word	0x080046e4

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800022e:	4b23      	ldr	r3, [pc, #140]	; (80002bc <main+0x94>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f003 fd20 	bl	8003c7c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023c:	f000 fc80 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000240:	f000 f844 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000244:	f000 f9ee 	bl	8000624 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000248:	f000 f9bc 	bl	80005c4 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800024c:	f000 f896 	bl	800037c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000250:	f000 f90e 	bl	8000470 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8000254:	f000 f986 	bl	8000564 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("start\r\n");
 8000258:	4819      	ldr	r0, [pc, #100]	; (80002c0 <main+0x98>)
 800025a:	f003 fd07 	bl	8003c6c <puts>
  short duty=1;
 800025e:	2301      	movs	r3, #1
 8000260:	80fb      	strh	r3, [r7, #6]

  HAL_TIM_PWM_Start(&htim16,TIM_CHANNEL_1);
 8000262:	2100      	movs	r1, #0
 8000264:	4817      	ldr	r0, [pc, #92]	; (80002c4 <main+0x9c>)
 8000266:	f002 fadd 	bl	8002824 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17,TIM_CHANNEL_1);
 800026a:	2100      	movs	r1, #0
 800026c:	4816      	ldr	r0, [pc, #88]	; (80002c8 <main+0xa0>)
 800026e:	f002 fad9 	bl	8002824 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 duty=10;
 8000272:	230a      	movs	r3, #10
 8000274:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,duty);
 8000276:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <main+0x9c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800027e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,30-duty);
 8000280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000284:	f1c3 021e 	rsb	r2, r3, #30
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <main+0xa0>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 800028e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000292:	f000 fcbb 	bl	8000c0c <HAL_Delay>
	 duty=25;
 8000296:	2319      	movs	r3, #25
 8000298:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,duty);
 800029a:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <main+0x9c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80002a2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,30-duty);
 80002a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002a8:	f1c3 021e 	rsb	r2, r3, #30
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <main+0xa0>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 80002b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b6:	f000 fca9 	bl	8000c0c <HAL_Delay>
	 duty=10;
 80002ba:	e7da      	b.n	8000272 <main+0x4a>
 80002bc:	2000000c 	.word	0x2000000c
 80002c0:	080046ec 	.word	0x080046ec
 80002c4:	200001ec 	.word	0x200001ec
 80002c8:	20000098 	.word	0x20000098

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b096      	sub	sp, #88	; 0x58
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f003 fc50 	bl	8003b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	f107 031c 	add.w	r3, r7, #28
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	611a      	str	r2, [r3, #16]
 80002fe:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000300:	2302      	movs	r3, #2
 8000302:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000308:	2310      	movs	r3, #16
 800030a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030c:	2302      	movs	r3, #2
 800030e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000310:	2300      	movs	r3, #0
 8000312:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000314:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000318:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800031e:	4618      	mov	r0, r3
 8000320:	f000 ff64 	bl	80011ec <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800032a:	f000 f9e5 	bl	80006f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2302      	movs	r3, #2
 8000334:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000344:	f107 031c 	add.w	r3, r7, #28
 8000348:	2102      	movs	r1, #2
 800034a:	4618      	mov	r0, r3
 800034c:	f001 fe56 	bl	8001ffc <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000356:	f000 f9cf 	bl	80006f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800035a:	2301      	movs	r3, #1
 800035c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f002 f87f 	bl	8002468 <HAL_RCCEx_PeriphCLKConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000370:	f000 f9c2 	bl	80006f8 <Error_Handler>
  }
}
 8000374:	bf00      	nop
 8000376:	3758      	adds	r7, #88	; 0x58
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b092      	sub	sp, #72	; 0x48
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000382:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]
 8000392:	615a      	str	r2, [r3, #20]
 8000394:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000396:	463b      	mov	r3, r7
 8000398:	222c      	movs	r2, #44	; 0x2c
 800039a:	2100      	movs	r1, #0
 800039c:	4618      	mov	r0, r3
 800039e:	f003 fbef 	bl	8003b80 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80003a2:	4b31      	ldr	r3, [pc, #196]	; (8000468 <MX_TIM16_Init+0xec>)
 80003a4:	4a31      	ldr	r2, [pc, #196]	; (800046c <MX_TIM16_Init+0xf0>)
 80003a6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 5000;
 80003a8:	4b2f      	ldr	r3, [pc, #188]	; (8000468 <MX_TIM16_Init+0xec>)
 80003aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80003ae:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b0:	4b2d      	ldr	r3, [pc, #180]	; (8000468 <MX_TIM16_Init+0xec>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 80003b6:	4b2c      	ldr	r3, [pc, #176]	; (8000468 <MX_TIM16_Init+0xec>)
 80003b8:	22ff      	movs	r2, #255	; 0xff
 80003ba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003bc:	4b2a      	ldr	r3, [pc, #168]	; (8000468 <MX_TIM16_Init+0xec>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80003c2:	4b29      	ldr	r3, [pc, #164]	; (8000468 <MX_TIM16_Init+0xec>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c8:	4b27      	ldr	r3, [pc, #156]	; (8000468 <MX_TIM16_Init+0xec>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80003ce:	4826      	ldr	r0, [pc, #152]	; (8000468 <MX_TIM16_Init+0xec>)
 80003d0:	f002 f970 	bl	80026b4 <HAL_TIM_Base_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80003da:	f000 f98d 	bl	80006f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80003de:	4822      	ldr	r0, [pc, #136]	; (8000468 <MX_TIM16_Init+0xec>)
 80003e0:	f002 f9bf 	bl	8002762 <HAL_TIM_PWM_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80003ea:	f000 f985 	bl	80006f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003ee:	2360      	movs	r3, #96	; 0x60
 80003f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003f6:	2300      	movs	r3, #0
 80003f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003fa:	2300      	movs	r3, #0
 80003fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003fe:	2300      	movs	r3, #0
 8000400:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000402:	2300      	movs	r3, #0
 8000404:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000406:	2300      	movs	r3, #0
 8000408:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800040a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800040e:	2200      	movs	r2, #0
 8000410:	4619      	mov	r1, r3
 8000412:	4815      	ldr	r0, [pc, #84]	; (8000468 <MX_TIM16_Init+0xec>)
 8000414:	f002 faf2 	bl	80029fc <HAL_TIM_PWM_ConfigChannel>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800041e:	f000 f96b 	bl	80006f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000422:	2300      	movs	r3, #0
 8000424:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800042a:	2300      	movs	r3, #0
 800042c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800043a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000440:	2300      	movs	r3, #0
 8000442:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000444:	463b      	mov	r3, r7
 8000446:	4619      	mov	r1, r3
 8000448:	4807      	ldr	r0, [pc, #28]	; (8000468 <MX_TIM16_Init+0xec>)
 800044a:	f002 ff2f 	bl	80032ac <HAL_TIMEx_ConfigBreakDeadTime>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000454:	f000 f950 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000458:	4803      	ldr	r0, [pc, #12]	; (8000468 <MX_TIM16_Init+0xec>)
 800045a:	f000 f9ab 	bl	80007b4 <HAL_TIM_MspPostInit>

}
 800045e:	bf00      	nop
 8000460:	3748      	adds	r7, #72	; 0x48
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	200001ec 	.word	0x200001ec
 800046c:	40014400 	.word	0x40014400

08000470 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b092      	sub	sp, #72	; 0x48
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000476:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]
 8000486:	615a      	str	r2, [r3, #20]
 8000488:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800048a:	463b      	mov	r3, r7
 800048c:	222c      	movs	r2, #44	; 0x2c
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f003 fb75 	bl	8003b80 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000496:	4b31      	ldr	r3, [pc, #196]	; (800055c <MX_TIM17_Init+0xec>)
 8000498:	4a31      	ldr	r2, [pc, #196]	; (8000560 <MX_TIM17_Init+0xf0>)
 800049a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 5000;
 800049c:	4b2f      	ldr	r3, [pc, #188]	; (800055c <MX_TIM17_Init+0xec>)
 800049e:	f241 3288 	movw	r2, #5000	; 0x1388
 80004a2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a4:	4b2d      	ldr	r3, [pc, #180]	; (800055c <MX_TIM17_Init+0xec>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 80004aa:	4b2c      	ldr	r3, [pc, #176]	; (800055c <MX_TIM17_Init+0xec>)
 80004ac:	22ff      	movs	r2, #255	; 0xff
 80004ae:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b0:	4b2a      	ldr	r3, [pc, #168]	; (800055c <MX_TIM17_Init+0xec>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80004b6:	4b29      	ldr	r3, [pc, #164]	; (800055c <MX_TIM17_Init+0xec>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004bc:	4b27      	ldr	r3, [pc, #156]	; (800055c <MX_TIM17_Init+0xec>)
 80004be:	2200      	movs	r2, #0
 80004c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80004c2:	4826      	ldr	r0, [pc, #152]	; (800055c <MX_TIM17_Init+0xec>)
 80004c4:	f002 f8f6 	bl	80026b4 <HAL_TIM_Base_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80004ce:	f000 f913 	bl	80006f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80004d2:	4822      	ldr	r0, [pc, #136]	; (800055c <MX_TIM17_Init+0xec>)
 80004d4:	f002 f945 	bl	8002762 <HAL_TIM_PWM_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80004de:	f000 f90b 	bl	80006f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e2:	2360      	movs	r3, #96	; 0x60
 80004e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ea:	2300      	movs	r3, #0
 80004ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004ee:	2300      	movs	r3, #0
 80004f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f2:	2300      	movs	r3, #0
 80004f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004f6:	2300      	movs	r3, #0
 80004f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004fa:	2300      	movs	r3, #0
 80004fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000502:	2200      	movs	r2, #0
 8000504:	4619      	mov	r1, r3
 8000506:	4815      	ldr	r0, [pc, #84]	; (800055c <MX_TIM17_Init+0xec>)
 8000508:	f002 fa78 	bl	80029fc <HAL_TIM_PWM_ConfigChannel>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000512:	f000 f8f1 	bl	80006f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000516:	2300      	movs	r3, #0
 8000518:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800051a:	2300      	movs	r3, #0
 800051c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800052a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800052e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000538:	463b      	mov	r3, r7
 800053a:	4619      	mov	r1, r3
 800053c:	4807      	ldr	r0, [pc, #28]	; (800055c <MX_TIM17_Init+0xec>)
 800053e:	f002 feb5 	bl	80032ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000548:	f000 f8d6 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <MX_TIM17_Init+0xec>)
 800054e:	f000 f931 	bl	80007b4 <HAL_TIM_MspPostInit>

}
 8000552:	bf00      	nop
 8000554:	3748      	adds	r7, #72	; 0x48
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000098 	.word	0x20000098
 8000560:	40014800 	.word	0x40014800

08000564 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <MX_USART1_UART_Init+0x54>)
 800056a:	4a14      	ldr	r2, [pc, #80]	; (80005bc <MX_USART1_UART_Init+0x58>)
 800056c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1500000;
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_USART1_UART_Init+0x54>)
 8000570:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <MX_USART1_UART_Init+0x5c>)
 8000572:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000574:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <MX_USART1_UART_Init+0x54>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_USART1_UART_Init+0x54>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <MX_USART1_UART_Init+0x54>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_USART1_UART_Init+0x54>)
 8000588:	220c      	movs	r2, #12
 800058a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <MX_USART1_UART_Init+0x54>)
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_USART1_UART_Init+0x54>)
 8000594:	2200      	movs	r2, #0
 8000596:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <MX_USART1_UART_Init+0x54>)
 800059a:	2200      	movs	r2, #0
 800059c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_USART1_UART_Init+0x54>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <MX_USART1_UART_Init+0x54>)
 80005a6:	f002 fef9 	bl	800339c <HAL_UART_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80005b0:	f000 f8a2 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200000e4 	.word	0x200000e4
 80005bc:	40013800 	.word	0x40013800
 80005c0:	0016e360 	.word	0x0016e360

080005c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_USART2_UART_Init+0x58>)
 80005ca:	4a15      	ldr	r2, [pc, #84]	; (8000620 <MX_USART2_UART_Init+0x5c>)
 80005cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <MX_USART2_UART_Init+0x58>)
 80005d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_USART2_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_USART2_UART_Init+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_USART2_UART_Init+0x58>)
 80005ea:	220c      	movs	r2, #12
 80005ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_USART2_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_USART2_UART_Init+0x58>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_USART2_UART_Init+0x58>)
 8000608:	f002 fec8 	bl	800339c <HAL_UART_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000612:	f000 f871 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000168 	.word	0x20000168
 8000620:	40004400 	.word	0x40004400

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063a:	4b24      	ldr	r3, [pc, #144]	; (80006cc <MX_GPIO_Init+0xa8>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a23      	ldr	r2, [pc, #140]	; (80006cc <MX_GPIO_Init+0xa8>)
 8000640:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b21      	ldr	r3, [pc, #132]	; (80006cc <MX_GPIO_Init+0xa8>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_GPIO_Init+0xa8>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a1d      	ldr	r2, [pc, #116]	; (80006cc <MX_GPIO_Init+0xa8>)
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_GPIO_Init+0xa8>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 719c 	mov.w	r1, #312	; 0x138
 8000670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000674:	f000 fd8a 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800067c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000682:	2301      	movs	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f000 fbf2 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 8000694:	f44f 739c 	mov.w	r3, #312	; 0x138
 8000698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	4619      	mov	r1, r3
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f000 fbe2 	bl	8000e78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	2006      	movs	r0, #6
 80006ba:	f000 fba6 	bl	8000e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006be:	2006      	movs	r0, #6
 80006c0:	f000 fbbf 	bl	8000e42 <HAL_NVIC_EnableIRQ>

}
 80006c4:	bf00      	nop
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000

080006d0 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	230a      	movs	r3, #10
 80006e2:	68b9      	ldr	r1, [r7, #8]
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <_write+0x24>)
 80006e6:	f002 fea7 	bl	8003438 <HAL_UART_Transmit>
  return len;
 80006ea:	687b      	ldr	r3, [r7, #4]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000168 	.word	0x20000168

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_MspInit+0x44>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_MspInit+0x44>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6193      	str	r3, [r2, #24]
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_MspInit+0x44>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_MspInit+0x44>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a08      	ldr	r2, [pc, #32]	; (8000748 <HAL_MspInit+0x44>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_MspInit+0x44>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <HAL_TIM_Base_MspInit+0x5c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d10c      	bne.n	8000778 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <HAL_TIM_Base_MspInit+0x60>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <HAL_TIM_Base_MspInit+0x60>)
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <HAL_TIM_Base_MspInit+0x60>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000776:	e010      	b.n	800079a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <HAL_TIM_Base_MspInit+0x64>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d10b      	bne.n	800079a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <HAL_TIM_Base_MspInit+0x60>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a09      	ldr	r2, [pc, #36]	; (80007ac <HAL_TIM_Base_MspInit+0x60>)
 8000788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <HAL_TIM_Base_MspInit+0x60>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40014400 	.word	0x40014400
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40014800 	.word	0x40014800

080007b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a23      	ldr	r2, [pc, #140]	; (8000860 <HAL_TIM_MspPostInit+0xac>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d11d      	bne.n	8000812 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <HAL_TIM_MspPostInit+0xb0>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a22      	ldr	r2, [pc, #136]	; (8000864 <HAL_TIM_MspPostInit+0xb0>)
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <HAL_TIM_MspPostInit+0xb0>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007ee:	2340      	movs	r3, #64	; 0x40
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80007fe:	2301      	movs	r3, #1
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f000 fb34 	bl	8000e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000810:	e021      	b.n	8000856 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <HAL_TIM_MspPostInit+0xb4>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d11c      	bne.n	8000856 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_TIM_MspPostInit+0xb0>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	4a10      	ldr	r2, [pc, #64]	; (8000864 <HAL_TIM_MspPostInit+0xb0>)
 8000822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000826:	6153      	str	r3, [r2, #20]
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_TIM_MspPostInit+0xb0>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000844:	2301      	movs	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f000 fb11 	bl	8000e78 <HAL_GPIO_Init>
}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	; 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40014400 	.word	0x40014400
 8000864:	40021000 	.word	0x40021000
 8000868:	40014800 	.word	0x40014800

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a30      	ldr	r2, [pc, #192]	; (800094c <HAL_UART_MspInit+0xe0>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d12a      	bne.n	80008e4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <HAL_UART_MspInit+0xe4>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	4a2f      	ldr	r2, [pc, #188]	; (8000950 <HAL_UART_MspInit+0xe4>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000898:	6193      	str	r3, [r2, #24]
 800089a:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <HAL_UART_MspInit+0xe4>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a2:	61bb      	str	r3, [r7, #24]
 80008a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <HAL_UART_MspInit+0xe4>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a29      	ldr	r2, [pc, #164]	; (8000950 <HAL_UART_MspInit+0xe4>)
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b27      	ldr	r3, [pc, #156]	; (8000950 <HAL_UART_MspInit+0xe4>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008d0:	2307      	movs	r3, #7
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008de:	f000 facb 	bl	8000e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e2:	e02e      	b.n	8000942 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART2)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1a      	ldr	r2, [pc, #104]	; (8000954 <HAL_UART_MspInit+0xe8>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d129      	bne.n	8000942 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <HAL_UART_MspInit+0xe4>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	4a17      	ldr	r2, [pc, #92]	; (8000950 <HAL_UART_MspInit+0xe4>)
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	61d3      	str	r3, [r2, #28]
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <HAL_UART_MspInit+0xe4>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_UART_MspInit+0xe4>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	4a11      	ldr	r2, [pc, #68]	; (8000950 <HAL_UART_MspInit+0xe4>)
 800090c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000910:	6153      	str	r3, [r2, #20]
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_UART_MspInit+0xe4>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800091e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000930:	2307      	movs	r3, #7
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093e:	f000 fa9b 	bl	8000e78 <HAL_GPIO_Init>
}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	; 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40013800 	.word	0x40013800
 8000950:	40021000 	.word	0x40021000
 8000954:	40004400 	.word	0x40004400

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800095c:	e7fe      	b.n	800095c <NMI_Handler+0x4>

0800095e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <MemManage_Handler+0x4>

0800096a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <UsageFault_Handler+0x4>

08000976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a4:	f000 f912 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f000 fc03 	bl	80011bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	60f8      	str	r0, [r7, #12]
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	e00a      	b.n	80009e2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009cc:	f3af 8000 	nop.w
 80009d0:	4601      	mov	r1, r0
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	60ba      	str	r2, [r7, #8]
 80009d8:	b2ca      	uxtb	r2, r1
 80009da:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	3301      	adds	r3, #1
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	dbf0      	blt.n	80009cc <_read+0x12>
	}

return len;
 80009ea:	687b      	ldr	r3, [r7, #4]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_close>:
	}
	return len;
}

int _close(int file)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	return -1;
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a1c:	605a      	str	r2, [r3, #4]
	return 0;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <_isatty>:

int _isatty(int file)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	return 1;
 8000a34:	2301      	movs	r3, #1
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b085      	sub	sp, #20
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
	return 0;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d207      	bcs.n	8000a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a8c:	f003 f84e 	bl	8003b2c <__errno>
 8000a90:	4603      	mov	r3, r0
 8000a92:	220c      	movs	r2, #12
 8000a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	e009      	b.n	8000ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <_sbrk+0x64>)
 8000aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20003000 	.word	0x20003000
 8000abc:	00000400 	.word	0x00000400
 8000ac0:	2000008c 	.word	0x2000008c
 8000ac4:	20000250 	.word	0x20000250

08000ac8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b24 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af2:	490e      	ldr	r1, [pc, #56]	; (8000b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <LoopForever+0xe>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b08:	4c0b      	ldr	r4, [pc, #44]	; (8000b38 <LoopForever+0x16>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b16:	f7ff ffd7 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f003 f80d 	bl	8003b38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1e:	f7ff fb83 	bl	8000228 <main>

08000b22 <LoopForever>:

LoopForever:
    b LoopForever
 8000b22:	e7fe      	b.n	8000b22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b24:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b30:	08004798 	.word	0x08004798
  ldr r2, =_sbss
 8000b34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b38:	20000250 	.word	0x20000250

08000b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC1_2_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_Init+0x28>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <HAL_Init+0x28>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f94f 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 f808 	bl	8000b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b5c:	f7ff fdd2 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40022000 	.word	0x40022000

08000b6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x54>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_InitTick+0x58>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f967 	bl	8000e5e <HAL_SYSTICK_Config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00e      	b.n	8000bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d80a      	bhi.n	8000bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f000 f92f 	bl	8000e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <HAL_InitTick+0x5c>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000004 	.word	0x20000004

08000bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x20>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x24>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_IncTick+0x24>)
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	2000023c 	.word	0x2000023c

08000bf4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_GetTick+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	2000023c 	.word	0x2000023c

08000c0c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c14:	f7ff ffee 	bl	8000bf4 <HAL_GetTick>
 8000c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c24:	d005      	beq.n	8000c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_Delay+0x44>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c32:	bf00      	nop
 8000c34:	f7ff ffde 	bl	8000bf4 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d8f7      	bhi.n	8000c34 <HAL_Delay+0x28>
  {
  }
}
 8000c44:	bf00      	nop
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db0b      	blt.n	8000ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f003 021f 	and.w	r2, r3, #31
 8000cd0:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <__NVIC_EnableIRQ+0x38>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	2001      	movs	r0, #1
 8000cda:	fa00 f202 	lsl.w	r2, r0, r2
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	; 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f7ff ff8e 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff29 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1c:	f7ff ff3e 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f7ff ff8e 	bl	8000d48 <NVIC_EncodePriority>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff5d 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff31 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffa2 	bl	8000db0 <SysTick_Config>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e86:	e14e      	b.n	8001126 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	fa01 f303 	lsl.w	r3, r1, r3
 8000e94:	4013      	ands	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 8140 	beq.w	8001120 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d005      	beq.n	8000eb8 <HAL_GPIO_Init+0x40>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d130      	bne.n	8000f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eee:	2201      	movs	r2, #1
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	f003 0201 	and.w	r2, r3, #1
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d017      	beq.n	8000f56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d123      	bne.n	8000faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	08da      	lsrs	r2, r3, #3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3208      	adds	r2, #8
 8000f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	220f      	movs	r2, #15
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	691a      	ldr	r2, [r3, #16]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	08da      	lsrs	r2, r3, #3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3208      	adds	r2, #8
 8000fa4:	6939      	ldr	r1, [r7, #16]
 8000fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0203 	and.w	r2, r3, #3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 809a 	beq.w	8001120 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fec:	4b55      	ldr	r3, [pc, #340]	; (8001144 <HAL_GPIO_Init+0x2cc>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a54      	ldr	r2, [pc, #336]	; (8001144 <HAL_GPIO_Init+0x2cc>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b52      	ldr	r3, [pc, #328]	; (8001144 <HAL_GPIO_Init+0x2cc>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001004:	4a50      	ldr	r2, [pc, #320]	; (8001148 <HAL_GPIO_Init+0x2d0>)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	220f      	movs	r2, #15
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800102e:	d013      	beq.n	8001058 <HAL_GPIO_Init+0x1e0>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a46      	ldr	r2, [pc, #280]	; (800114c <HAL_GPIO_Init+0x2d4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d00d      	beq.n	8001054 <HAL_GPIO_Init+0x1dc>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a45      	ldr	r2, [pc, #276]	; (8001150 <HAL_GPIO_Init+0x2d8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d007      	beq.n	8001050 <HAL_GPIO_Init+0x1d8>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a44      	ldr	r2, [pc, #272]	; (8001154 <HAL_GPIO_Init+0x2dc>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d101      	bne.n	800104c <HAL_GPIO_Init+0x1d4>
 8001048:	2303      	movs	r3, #3
 800104a:	e006      	b.n	800105a <HAL_GPIO_Init+0x1e2>
 800104c:	2305      	movs	r3, #5
 800104e:	e004      	b.n	800105a <HAL_GPIO_Init+0x1e2>
 8001050:	2302      	movs	r3, #2
 8001052:	e002      	b.n	800105a <HAL_GPIO_Init+0x1e2>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <HAL_GPIO_Init+0x1e2>
 8001058:	2300      	movs	r3, #0
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	f002 0203 	and.w	r2, r2, #3
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	4093      	lsls	r3, r2
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800106a:	4937      	ldr	r1, [pc, #220]	; (8001148 <HAL_GPIO_Init+0x2d0>)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001078:	4b37      	ldr	r3, [pc, #220]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800109c:	4a2e      	ldr	r2, [pc, #184]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a2:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010c6:	4a24      	ldr	r2, [pc, #144]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800111a:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	f47f aea9 	bne.w	8000e88 <HAL_GPIO_Init+0x10>
  }
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40021000 	.word	0x40021000
 8001148:	40010000 	.word	0x40010000
 800114c:	48000400 	.word	0x48000400
 8001150:	48000800 	.word	0x48000800
 8001154:	48000c00 	.word	0x48000c00
 8001158:	40010400 	.word	0x40010400

0800115c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	887b      	ldrh	r3, [r7, #2]
 800116e:	4013      	ands	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d002      	beq.n	800117a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001174:	2301      	movs	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e001      	b.n	800117e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c8:	695a      	ldr	r2, [r3, #20]
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	4013      	ands	r3, r2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d006      	beq.n	80011e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7fe fff4 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40010400 	.word	0x40010400

080011ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	f000 bef4 	b.w	8001fee <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 816a 	beq.w	80014ea <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001216:	4bb3      	ldr	r3, [pc, #716]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b04      	cmp	r3, #4
 8001220:	d00c      	beq.n	800123c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001222:	4bb0      	ldr	r3, [pc, #704]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b08      	cmp	r3, #8
 800122c:	d159      	bne.n	80012e2 <HAL_RCC_OscConfig+0xf6>
 800122e:	4bad      	ldr	r3, [pc, #692]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123a:	d152      	bne.n	80012e2 <HAL_RCC_OscConfig+0xf6>
 800123c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001240:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001244:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001250:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	fab3 f383 	clz	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d102      	bne.n	800126e <HAL_RCC_OscConfig+0x82>
 8001268:	4b9e      	ldr	r3, [pc, #632]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	e015      	b.n	800129a <HAL_RCC_OscConfig+0xae>
 800126e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001272:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001282:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001286:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800128a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001296:	4b93      	ldr	r3, [pc, #588]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800129e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80012a2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80012a6:	fa92 f2a2 	rbit	r2, r2
 80012aa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80012ae:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80012b2:	fab2 f282 	clz	r2, r2
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	f042 0220 	orr.w	r2, r2, #32
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	f002 021f 	and.w	r2, r2, #31
 80012c2:	2101      	movs	r1, #1
 80012c4:	fa01 f202 	lsl.w	r2, r1, r2
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 810c 	beq.w	80014e8 <HAL_RCC_OscConfig+0x2fc>
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f040 8106 	bne.w	80014e8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	f000 be86 	b.w	8001fee <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ec:	d106      	bne.n	80012fc <HAL_RCC_OscConfig+0x110>
 80012ee:	4b7d      	ldr	r3, [pc, #500]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a7c      	ldr	r2, [pc, #496]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e030      	b.n	800135e <HAL_RCC_OscConfig+0x172>
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x134>
 8001306:	4b77      	ldr	r3, [pc, #476]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a76      	ldr	r2, [pc, #472]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 800130c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b74      	ldr	r3, [pc, #464]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a73      	ldr	r2, [pc, #460]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 8001318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e01e      	b.n	800135e <HAL_RCC_OscConfig+0x172>
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800132a:	d10c      	bne.n	8001346 <HAL_RCC_OscConfig+0x15a>
 800132c:	4b6d      	ldr	r3, [pc, #436]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a6c      	ldr	r2, [pc, #432]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 8001332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b6a      	ldr	r3, [pc, #424]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a69      	ldr	r2, [pc, #420]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e00b      	b.n	800135e <HAL_RCC_OscConfig+0x172>
 8001346:	4b67      	ldr	r3, [pc, #412]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a66      	ldr	r2, [pc, #408]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 800134c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b64      	ldr	r3, [pc, #400]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a63      	ldr	r2, [pc, #396]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 8001358:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800135e:	4b61      	ldr	r3, [pc, #388]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	f023 020f 	bic.w	r2, r3, #15
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	495d      	ldr	r1, [pc, #372]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 800136e:	4313      	orrs	r3, r2
 8001370:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d059      	beq.n	8001430 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fc3a 	bl	8000bf4 <HAL_GetTick>
 8001380:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001384:	e00a      	b.n	800139c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001386:	f7ff fc35 	bl	8000bf4 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d902      	bls.n	800139c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	f000 be29 	b.w	8001fee <HAL_RCC_OscConfig+0xe02>
 800139c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80013a8:	fa93 f3a3 	rbit	r3, r3
 80013ac:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80013b0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b4:	fab3 f383 	clz	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d102      	bne.n	80013ce <HAL_RCC_OscConfig+0x1e2>
 80013c8:	4b46      	ldr	r3, [pc, #280]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	e015      	b.n	80013fa <HAL_RCC_OscConfig+0x20e>
 80013ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80013da:	fa93 f3a3 	rbit	r3, r3
 80013de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80013e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80013ea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80013ee:	fa93 f3a3 	rbit	r3, r3
 80013f2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80013f6:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001402:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001406:	fa92 f2a2 	rbit	r2, r2
 800140a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800140e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001412:	fab2 f282 	clz	r2, r2
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	f042 0220 	orr.w	r2, r2, #32
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	f002 021f 	and.w	r2, r2, #31
 8001422:	2101      	movs	r1, #1
 8001424:	fa01 f202 	lsl.w	r2, r1, r2
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0ab      	beq.n	8001386 <HAL_RCC_OscConfig+0x19a>
 800142e:	e05c      	b.n	80014ea <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fbe0 	bl	8000bf4 <HAL_GetTick>
 8001434:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001438:	e00a      	b.n	8001450 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143a:	f7ff fbdb 	bl	8000bf4 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d902      	bls.n	8001450 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	f000 bdcf 	b.w	8001fee <HAL_RCC_OscConfig+0xe02>
 8001450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001454:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001458:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800145c:	fa93 f3a3 	rbit	r3, r3
 8001460:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001464:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001468:	fab3 f383 	clz	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b01      	cmp	r3, #1
 800147a:	d102      	bne.n	8001482 <HAL_RCC_OscConfig+0x296>
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0x2c2>
 8001482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001486:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800148e:	fa93 f3a3 	rbit	r3, r3
 8001492:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001496:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800149a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800149e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80014a2:	fa93 f3a3 	rbit	r3, r3
 80014a6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_RCC_OscConfig+0x2f8>)
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014b2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80014b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80014ba:	fa92 f2a2 	rbit	r2, r2
 80014be:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80014c2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80014c6:	fab2 f282 	clz	r2, r2
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	f042 0220 	orr.w	r2, r2, #32
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	f002 021f 	and.w	r2, r2, #31
 80014d6:	2101      	movs	r1, #1
 80014d8:	fa01 f202 	lsl.w	r2, r1, r2
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1ab      	bne.n	800143a <HAL_RCC_OscConfig+0x24e>
 80014e2:	e002      	b.n	80014ea <HAL_RCC_OscConfig+0x2fe>
 80014e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 816f 	beq.w	80017d8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014fa:	4bd0      	ldr	r3, [pc, #832]	; (800183c <HAL_RCC_OscConfig+0x650>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00b      	beq.n	800151e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001506:	4bcd      	ldr	r3, [pc, #820]	; (800183c <HAL_RCC_OscConfig+0x650>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b08      	cmp	r3, #8
 8001510:	d16c      	bne.n	80015ec <HAL_RCC_OscConfig+0x400>
 8001512:	4bca      	ldr	r3, [pc, #808]	; (800183c <HAL_RCC_OscConfig+0x650>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d166      	bne.n	80015ec <HAL_RCC_OscConfig+0x400>
 800151e:	2302      	movs	r3, #2
 8001520:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001528:	fa93 f3a3 	rbit	r3, r3
 800152c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001530:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b01      	cmp	r3, #1
 8001546:	d102      	bne.n	800154e <HAL_RCC_OscConfig+0x362>
 8001548:	4bbc      	ldr	r3, [pc, #752]	; (800183c <HAL_RCC_OscConfig+0x650>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	e013      	b.n	8001576 <HAL_RCC_OscConfig+0x38a>
 800154e:	2302      	movs	r3, #2
 8001550:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001558:	fa93 f3a3 	rbit	r3, r3
 800155c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001560:	2302      	movs	r3, #2
 8001562:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001566:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001572:	4bb2      	ldr	r3, [pc, #712]	; (800183c <HAL_RCC_OscConfig+0x650>)
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	2202      	movs	r2, #2
 8001578:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800157c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001580:	fa92 f2a2 	rbit	r2, r2
 8001584:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001588:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800158c:	fab2 f282 	clz	r2, r2
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	f042 0220 	orr.w	r2, r2, #32
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	f002 021f 	and.w	r2, r2, #31
 800159c:	2101      	movs	r1, #1
 800159e:	fa01 f202 	lsl.w	r2, r1, r2
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d007      	beq.n	80015b8 <HAL_RCC_OscConfig+0x3cc>
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d002      	beq.n	80015b8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f000 bd1b 	b.w	8001fee <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4ba0      	ldr	r3, [pc, #640]	; (800183c <HAL_RCC_OscConfig+0x650>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	21f8      	movs	r1, #248	; 0xf8
 80015c8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015cc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80015d0:	fa91 f1a1 	rbit	r1, r1
 80015d4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80015d8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80015dc:	fab1 f181 	clz	r1, r1
 80015e0:	b2c9      	uxtb	r1, r1
 80015e2:	408b      	lsls	r3, r1
 80015e4:	4995      	ldr	r1, [pc, #596]	; (800183c <HAL_RCC_OscConfig+0x650>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	e0f5      	b.n	80017d8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8085 	beq.w	8001702 <HAL_RCC_OscConfig+0x516>
 80015f8:	2301      	movs	r3, #1
 80015fa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001602:	fa93 f3a3 	rbit	r3, r3
 8001606:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800160a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800160e:	fab3 f383 	clz	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001618:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	461a      	mov	r2, r3
 8001620:	2301      	movs	r3, #1
 8001622:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fae6 	bl	8000bf4 <HAL_GetTick>
 8001628:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	e00a      	b.n	8001644 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162e:	f7ff fae1 	bl	8000bf4 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d902      	bls.n	8001644 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	f000 bcd5 	b.w	8001fee <HAL_RCC_OscConfig+0xe02>
 8001644:	2302      	movs	r3, #2
 8001646:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800164e:	fa93 f3a3 	rbit	r3, r3
 8001652:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001656:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165a:	fab3 f383 	clz	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	095b      	lsrs	r3, r3, #5
 8001662:	b2db      	uxtb	r3, r3
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b01      	cmp	r3, #1
 800166c:	d102      	bne.n	8001674 <HAL_RCC_OscConfig+0x488>
 800166e:	4b73      	ldr	r3, [pc, #460]	; (800183c <HAL_RCC_OscConfig+0x650>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	e013      	b.n	800169c <HAL_RCC_OscConfig+0x4b0>
 8001674:	2302      	movs	r3, #2
 8001676:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001686:	2302      	movs	r3, #2
 8001688:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800168c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001698:	4b68      	ldr	r3, [pc, #416]	; (800183c <HAL_RCC_OscConfig+0x650>)
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	2202      	movs	r2, #2
 800169e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80016a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80016a6:	fa92 f2a2 	rbit	r2, r2
 80016aa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80016ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80016b2:	fab2 f282 	clz	r2, r2
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	f042 0220 	orr.w	r2, r2, #32
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	f002 021f 	and.w	r2, r2, #31
 80016c2:	2101      	movs	r1, #1
 80016c4:	fa01 f202 	lsl.w	r2, r1, r2
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0af      	beq.n	800162e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ce:	4b5b      	ldr	r3, [pc, #364]	; (800183c <HAL_RCC_OscConfig+0x650>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	21f8      	movs	r1, #248	; 0xf8
 80016de:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80016e6:	fa91 f1a1 	rbit	r1, r1
 80016ea:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80016ee:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80016f2:	fab1 f181 	clz	r1, r1
 80016f6:	b2c9      	uxtb	r1, r1
 80016f8:	408b      	lsls	r3, r1
 80016fa:	4950      	ldr	r1, [pc, #320]	; (800183c <HAL_RCC_OscConfig+0x650>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
 8001700:	e06a      	b.n	80017d8 <HAL_RCC_OscConfig+0x5ec>
 8001702:	2301      	movs	r3, #1
 8001704:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001708:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001714:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001722:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	461a      	mov	r2, r3
 800172a:	2300      	movs	r3, #0
 800172c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff fa61 	bl	8000bf4 <HAL_GetTick>
 8001732:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	e00a      	b.n	800174e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001738:	f7ff fa5c 	bl	8000bf4 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d902      	bls.n	800174e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	f000 bc50 	b.w	8001fee <HAL_RCC_OscConfig+0xe02>
 800174e:	2302      	movs	r3, #2
 8001750:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001754:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b01      	cmp	r3, #1
 8001776:	d102      	bne.n	800177e <HAL_RCC_OscConfig+0x592>
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <HAL_RCC_OscConfig+0x650>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	e013      	b.n	80017a6 <HAL_RCC_OscConfig+0x5ba>
 800177e:	2302      	movs	r3, #2
 8001780:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001788:	fa93 f3a3 	rbit	r3, r3
 800178c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001790:	2302      	movs	r3, #2
 8001792:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001796:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800179a:	fa93 f3a3 	rbit	r3, r3
 800179e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_RCC_OscConfig+0x650>)
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	2202      	movs	r2, #2
 80017a8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80017ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80017b0:	fa92 f2a2 	rbit	r2, r2
 80017b4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80017b8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80017bc:	fab2 f282 	clz	r2, r2
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	f042 0220 	orr.w	r2, r2, #32
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	f002 021f 	and.w	r2, r2, #31
 80017cc:	2101      	movs	r1, #1
 80017ce:	fa01 f202 	lsl.w	r2, r1, r2
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1af      	bne.n	8001738 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80da 	beq.w	800199c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d069      	beq.n	80018c6 <HAL_RCC_OscConfig+0x6da>
 80017f2:	2301      	movs	r3, #1
 80017f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	461a      	mov	r2, r3
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_RCC_OscConfig+0x654>)
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	461a      	mov	r2, r3
 8001818:	2301      	movs	r3, #1
 800181a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181c:	f7ff f9ea 	bl	8000bf4 <HAL_GetTick>
 8001820:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001824:	e00e      	b.n	8001844 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001826:	f7ff f9e5 	bl	8000bf4 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d906      	bls.n	8001844 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e3d9      	b.n	8001fee <HAL_RCC_OscConfig+0xe02>
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	10908120 	.word	0x10908120
 8001844:	2302      	movs	r3, #2
 8001846:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800184e:	fa93 f3a3 	rbit	r3, r3
 8001852:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001856:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800185a:	2202      	movs	r2, #2
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	fa93 f2a3 	rbit	r2, r3
 8001868:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001872:	2202      	movs	r2, #2
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001884:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001886:	4ba5      	ldr	r3, [pc, #660]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800188e:	2102      	movs	r1, #2
 8001890:	6019      	str	r1, [r3, #0]
 8001892:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	fa93 f1a3 	rbit	r1, r3
 800189c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80018a0:	6019      	str	r1, [r3, #0]
  return result;
 80018a2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f003 031f 	and.w	r3, r3, #31
 80018b8:	2101      	movs	r1, #1
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0b0      	beq.n	8001826 <HAL_RCC_OscConfig+0x63a>
 80018c4:	e06a      	b.n	800199c <HAL_RCC_OscConfig+0x7b0>
 80018c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fa93 f2a3 	rbit	r2, r3
 80018d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018dc:	601a      	str	r2, [r3, #0]
  return result;
 80018de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018e2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <HAL_RCC_OscConfig+0x934>)
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	461a      	mov	r2, r3
 80018f4:	2300      	movs	r3, #0
 80018f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f8:	f7ff f97c 	bl	8000bf4 <HAL_GetTick>
 80018fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001900:	e009      	b.n	8001916 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001902:	f7ff f977 	bl	8000bf4 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e36b      	b.n	8001fee <HAL_RCC_OscConfig+0xe02>
 8001916:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800191a:	2202      	movs	r2, #2
 800191c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fa93 f2a3 	rbit	r2, r3
 8001928:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001932:	2202      	movs	r2, #2
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800194a:	2202      	movs	r2, #2
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	fa93 f2a3 	rbit	r2, r3
 8001958:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800195c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195e:	4b6f      	ldr	r3, [pc, #444]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001962:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001966:	2102      	movs	r1, #2
 8001968:	6019      	str	r1, [r3, #0]
 800196a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	fa93 f1a3 	rbit	r1, r3
 8001974:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001978:	6019      	str	r1, [r3, #0]
  return result;
 800197a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	2101      	movs	r1, #1
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1b2      	bne.n	8001902 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 8158 	beq.w	8001c5c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b2:	4b5a      	ldr	r3, [pc, #360]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d112      	bne.n	80019e4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	4b57      	ldr	r3, [pc, #348]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a56      	ldr	r2, [pc, #344]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	f107 0308 	add.w	r3, r7, #8
 80019dc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80019de:	2301      	movs	r3, #1
 80019e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	4b4f      	ldr	r3, [pc, #316]	; (8001b24 <HAL_RCC_OscConfig+0x938>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d11a      	bne.n	8001a26 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f0:	4b4c      	ldr	r3, [pc, #304]	; (8001b24 <HAL_RCC_OscConfig+0x938>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <HAL_RCC_OscConfig+0x938>)
 80019f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fc:	f7ff f8fa 	bl	8000bf4 <HAL_GetTick>
 8001a00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a04:	e009      	b.n	8001a1a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a06:	f7ff f8f5 	bl	8000bf4 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e2e9      	b.n	8001fee <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1a:	4b42      	ldr	r3, [pc, #264]	; (8001b24 <HAL_RCC_OscConfig+0x938>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0ef      	beq.n	8001a06 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d106      	bne.n	8001a3e <HAL_RCC_OscConfig+0x852>
 8001a30:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4a39      	ldr	r2, [pc, #228]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6213      	str	r3, [r2, #32]
 8001a3c:	e02f      	b.n	8001a9e <HAL_RCC_OscConfig+0x8b2>
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10c      	bne.n	8001a62 <HAL_RCC_OscConfig+0x876>
 8001a48:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a33      	ldr	r2, [pc, #204]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	6213      	str	r3, [r2, #32]
 8001a54:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4a30      	ldr	r2, [pc, #192]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001a5a:	f023 0304 	bic.w	r3, r3, #4
 8001a5e:	6213      	str	r3, [r2, #32]
 8001a60:	e01d      	b.n	8001a9e <HAL_RCC_OscConfig+0x8b2>
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d10c      	bne.n	8001a86 <HAL_RCC_OscConfig+0x89a>
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a2a      	ldr	r2, [pc, #168]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4a27      	ldr	r2, [pc, #156]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6213      	str	r3, [r2, #32]
 8001a84:	e00b      	b.n	8001a9e <HAL_RCC_OscConfig+0x8b2>
 8001a86:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a24      	ldr	r2, [pc, #144]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	6213      	str	r3, [r2, #32]
 8001a92:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4a21      	ldr	r2, [pc, #132]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d06b      	beq.n	8001b80 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa8:	f7ff f8a4 	bl	8000bf4 <HAL_GetTick>
 8001aac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab0:	e00b      	b.n	8001aca <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7ff f89f 	bl	8000bf4 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e291      	b.n	8001fee <HAL_RCC_OscConfig+0xe02>
 8001aca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ace:	2202      	movs	r2, #2
 8001ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	fa93 f2a3 	rbit	r2, r3
 8001adc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fa93 f2a3 	rbit	r2, r3
 8001af4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001af8:	601a      	str	r2, [r3, #0]
  return result;
 8001afa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001afe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d109      	bne.n	8001b28 <HAL_RCC_OscConfig+0x93c>
 8001b14:	4b01      	ldr	r3, [pc, #4]	; (8001b1c <HAL_RCC_OscConfig+0x930>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	e014      	b.n	8001b44 <HAL_RCC_OscConfig+0x958>
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	10908120 	.word	0x10908120
 8001b24:	40007000 	.word	0x40007000
 8001b28:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	fa93 f2a3 	rbit	r2, r3
 8001b3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	4bbb      	ldr	r3, [pc, #748]	; (8001e30 <HAL_RCC_OscConfig+0xc44>)
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b48:	2102      	movs	r1, #2
 8001b4a:	6011      	str	r1, [r2, #0]
 8001b4c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	fa92 f1a2 	rbit	r1, r2
 8001b56:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001b5a:	6011      	str	r1, [r2, #0]
  return result;
 8001b5c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	fab2 f282 	clz	r2, r2
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	f002 021f 	and.w	r2, r2, #31
 8001b72:	2101      	movs	r1, #1
 8001b74:	fa01 f202 	lsl.w	r2, r1, r2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d099      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x8c6>
 8001b7e:	e063      	b.n	8001c48 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b80:	f7ff f838 	bl	8000bf4 <HAL_GetTick>
 8001b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b88:	e00b      	b.n	8001ba2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8a:	f7ff f833 	bl	8000bf4 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e225      	b.n	8001fee <HAL_RCC_OscConfig+0xe02>
 8001ba2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	fa93 f2a3 	rbit	r2, r3
 8001bcc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001bd0:	601a      	str	r2, [r3, #0]
  return result;
 8001bd2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001bd6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f043 0302 	orr.w	r3, r3, #2
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d102      	bne.n	8001bf2 <HAL_RCC_OscConfig+0xa06>
 8001bec:	4b90      	ldr	r3, [pc, #576]	; (8001e30 <HAL_RCC_OscConfig+0xc44>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	e00d      	b.n	8001c0e <HAL_RCC_OscConfig+0xa22>
 8001bf2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fa93 f2a3 	rbit	r2, r3
 8001c04:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	4b89      	ldr	r3, [pc, #548]	; (8001e30 <HAL_RCC_OscConfig+0xc44>)
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c12:	2102      	movs	r1, #2
 8001c14:	6011      	str	r1, [r2, #0]
 8001c16:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	fa92 f1a2 	rbit	r1, r2
 8001c20:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c24:	6011      	str	r1, [r2, #0]
  return result;
 8001c26:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	fab2 f282 	clz	r2, r2
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	f002 021f 	and.w	r2, r2, #31
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1a0      	bne.n	8001b8a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c48:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d105      	bne.n	8001c5c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c50:	4b77      	ldr	r3, [pc, #476]	; (8001e30 <HAL_RCC_OscConfig+0xc44>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	4a76      	ldr	r2, [pc, #472]	; (8001e30 <HAL_RCC_OscConfig+0xc44>)
 8001c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 81c2 	beq.w	8001fec <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c68:	4b71      	ldr	r3, [pc, #452]	; (8001e30 <HAL_RCC_OscConfig+0xc44>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	f000 819c 	beq.w	8001fae <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	f040 8114 	bne.w	8001eaa <HAL_RCC_OscConfig+0xcbe>
 8001c82:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	fa93 f2a3 	rbit	r2, r3
 8001c96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c9a:	601a      	str	r2, [r3, #0]
  return result;
 8001c9c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ca0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7fe ff9c 	bl	8000bf4 <HAL_GetTick>
 8001cbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc0:	e009      	b.n	8001cd6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7fe ff97 	bl	8000bf4 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e18b      	b.n	8001fee <HAL_RCC_OscConfig+0xe02>
 8001cd6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	fa93 f2a3 	rbit	r2, r3
 8001cea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cee:	601a      	str	r2, [r3, #0]
  return result;
 8001cf0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cf4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d102      	bne.n	8001d10 <HAL_RCC_OscConfig+0xb24>
 8001d0a:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <HAL_RCC_OscConfig+0xc44>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	e01b      	b.n	8001d48 <HAL_RCC_OscConfig+0xb5c>
 8001d10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fa93 f2a3 	rbit	r2, r3
 8001d24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	fa93 f2a3 	rbit	r2, r3
 8001d3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <HAL_RCC_OscConfig+0xc44>)
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d50:	6011      	str	r1, [r2, #0]
 8001d52:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	fa92 f1a2 	rbit	r1, r2
 8001d5c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001d60:	6011      	str	r1, [r2, #0]
  return result;
 8001d62:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	fab2 f282 	clz	r2, r2
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	f042 0220 	orr.w	r2, r2, #32
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	f002 021f 	and.w	r2, r2, #31
 8001d78:	2101      	movs	r1, #1
 8001d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d19e      	bne.n	8001cc2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d84:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <HAL_RCC_OscConfig+0xc44>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	4925      	ldr	r1, [pc, #148]	; (8001e30 <HAL_RCC_OscConfig+0xc44>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
 8001da0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001da4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001da8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	fa93 f2a3 	rbit	r2, r3
 8001db4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001db8:	601a      	str	r2, [r3, #0]
  return result;
 8001dba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dbe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7fe ff0d 	bl	8000bf4 <HAL_GetTick>
 8001dda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dde:	e009      	b.n	8001df4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de0:	f7fe ff08 	bl	8000bf4 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e0fc      	b.n	8001fee <HAL_RCC_OscConfig+0xe02>
 8001df4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001df8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	fa93 f2a3 	rbit	r2, r3
 8001e08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e0c:	601a      	str	r2, [r3, #0]
  return result;
 8001e0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_RCC_OscConfig+0xc48>
 8001e28:	4b01      	ldr	r3, [pc, #4]	; (8001e30 <HAL_RCC_OscConfig+0xc44>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	e01e      	b.n	8001e6c <HAL_RCC_OscConfig+0xc80>
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
 8001e34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fa93 f2a3 	rbit	r2, r3
 8001e48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	fa93 f2a3 	rbit	r2, r3
 8001e62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	4b63      	ldr	r3, [pc, #396]	; (8001ff8 <HAL_RCC_OscConfig+0xe0c>)
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e74:	6011      	str	r1, [r2, #0]
 8001e76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	fa92 f1a2 	rbit	r1, r2
 8001e80:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e84:	6011      	str	r1, [r2, #0]
  return result;
 8001e86:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	fab2 f282 	clz	r2, r2
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f042 0220 	orr.w	r2, r2, #32
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f002 021f 	and.w	r2, r2, #31
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d09b      	beq.n	8001de0 <HAL_RCC_OscConfig+0xbf4>
 8001ea8:	e0a0      	b.n	8001fec <HAL_RCC_OscConfig+0xe00>
 8001eaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001eb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	fa93 f2a3 	rbit	r2, r3
 8001ebe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec2:	601a      	str	r2, [r3, #0]
  return result;
 8001ec4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ed4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	461a      	mov	r2, r3
 8001edc:	2300      	movs	r3, #0
 8001ede:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7fe fe88 	bl	8000bf4 <HAL_GetTick>
 8001ee4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee8:	e009      	b.n	8001efe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eea:	f7fe fe83 	bl	8000bf4 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e077      	b.n	8001fee <HAL_RCC_OscConfig+0xe02>
 8001efe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	fa93 f2a3 	rbit	r2, r3
 8001f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f16:	601a      	str	r2, [r3, #0]
  return result;
 8001f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <HAL_RCC_OscConfig+0xd4c>
 8001f32:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <HAL_RCC_OscConfig+0xe0c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	e01b      	b.n	8001f70 <HAL_RCC_OscConfig+0xd84>
 8001f38:	f107 0320 	add.w	r3, r7, #32
 8001f3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f107 0320 	add.w	r3, r7, #32
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	fa93 f2a3 	rbit	r2, r3
 8001f4c:	f107 031c 	add.w	r3, r7, #28
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	f107 0318 	add.w	r3, r7, #24
 8001f56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	fa93 f2a3 	rbit	r2, r3
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <HAL_RCC_OscConfig+0xe0c>)
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	f107 0210 	add.w	r2, r7, #16
 8001f74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f78:	6011      	str	r1, [r2, #0]
 8001f7a:	f107 0210 	add.w	r2, r7, #16
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	fa92 f1a2 	rbit	r1, r2
 8001f84:	f107 020c 	add.w	r2, r7, #12
 8001f88:	6011      	str	r1, [r2, #0]
  return result;
 8001f8a:	f107 020c 	add.w	r2, r7, #12
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	fab2 f282 	clz	r2, r2
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f042 0220 	orr.w	r2, r2, #32
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f002 021f 	and.w	r2, r2, #31
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d19e      	bne.n	8001eea <HAL_RCC_OscConfig+0xcfe>
 8001fac:	e01e      	b.n	8001fec <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e018      	b.n	8001fee <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_RCC_OscConfig+0xe0c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fc4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d108      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000

08001ffc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b09e      	sub	sp, #120	; 0x78
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e162      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002014:	4b90      	ldr	r3, [pc, #576]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d910      	bls.n	8002044 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b8d      	ldr	r3, [pc, #564]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 0207 	bic.w	r2, r3, #7
 800202a:	498b      	ldr	r1, [pc, #556]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b89      	ldr	r3, [pc, #548]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e14a      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002050:	4b82      	ldr	r3, [pc, #520]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	497f      	ldr	r1, [pc, #508]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 80dc 	beq.w	8002228 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d13c      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xf6>
 8002078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800207c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d102      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xa6>
 800209c:	4b6f      	ldr	r3, [pc, #444]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	e00f      	b.n	80020c2 <HAL_RCC_ClockConfig+0xc6>
 80020a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	667b      	str	r3, [r7, #100]	; 0x64
 80020b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b4:	663b      	str	r3, [r7, #96]	; 0x60
 80020b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020be:	4b67      	ldr	r3, [pc, #412]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80020c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020ca:	fa92 f2a2 	rbit	r2, r2
 80020ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020d2:	fab2 f282 	clz	r2, r2
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f042 0220 	orr.w	r2, r2, #32
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	f002 021f 	and.w	r2, r2, #31
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d17b      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0f3      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d13c      	bne.n	8002174 <HAL_RCC_ClockConfig+0x178>
 80020fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d102      	bne.n	8002124 <HAL_RCC_ClockConfig+0x128>
 800211e:	4b4f      	ldr	r3, [pc, #316]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	e00f      	b.n	8002144 <HAL_RCC_ClockConfig+0x148>
 8002124:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002128:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	647b      	str	r3, [r7, #68]	; 0x44
 8002132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002136:	643b      	str	r3, [r7, #64]	; 0x40
 8002138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002140:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002148:	63ba      	str	r2, [r7, #56]	; 0x38
 800214a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800214c:	fa92 f2a2 	rbit	r2, r2
 8002150:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002154:	fab2 f282 	clz	r2, r2
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	f042 0220 	orr.w	r2, r2, #32
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f002 021f 	and.w	r2, r2, #31
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f202 	lsl.w	r2, r1, r2
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d13a      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0b2      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
 8002174:	2302      	movs	r3, #2
 8002176:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d102      	bne.n	800219c <HAL_RCC_ClockConfig+0x1a0>
 8002196:	4b31      	ldr	r3, [pc, #196]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	e00d      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1bc>
 800219c:	2302      	movs	r3, #2
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
 80021a8:	2302      	movs	r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	4b29      	ldr	r3, [pc, #164]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	2202      	movs	r2, #2
 80021ba:	61ba      	str	r2, [r7, #24]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	fa92 f2a2 	rbit	r2, r2
 80021c2:	617a      	str	r2, [r7, #20]
  return result;
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	fab2 f282 	clz	r2, r2
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	f042 0220 	orr.w	r2, r2, #32
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f002 021f 	and.w	r2, r2, #31
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f202 	lsl.w	r2, r1, r2
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e079      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	491a      	ldr	r1, [pc, #104]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f8:	f7fe fcfc 	bl	8000bf4 <HAL_GetTick>
 80021fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7fe fcf8 	bl	8000bf4 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e061      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d214      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0207 	bic.w	r2, r3, #7
 800223e:	4906      	ldr	r1, [pc, #24]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e040      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
 8002258:	40022000 	.word	0x40022000
 800225c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800226c:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_RCC_ClockConfig+0x2e8>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	491a      	ldr	r1, [pc, #104]	; (80022e4 <HAL_RCC_ClockConfig+0x2e8>)
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <HAL_RCC_ClockConfig+0x2e8>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4912      	ldr	r1, [pc, #72]	; (80022e4 <HAL_RCC_ClockConfig+0x2e8>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800229e:	f000 f829 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 80022a2:	4601      	mov	r1, r0
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_RCC_ClockConfig+0x2e8>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ac:	22f0      	movs	r2, #240	; 0xf0
 80022ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	fa92 f2a2 	rbit	r2, r2
 80022b6:	60fa      	str	r2, [r7, #12]
  return result;
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	fab2 f282 	clz	r2, r2
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	40d3      	lsrs	r3, r2
 80022c2:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <HAL_RCC_ClockConfig+0x2ec>)
 80022c4:	5cd3      	ldrb	r3, [r2, r3]
 80022c6:	fa21 f303 	lsr.w	r3, r1, r3
 80022ca:	4a08      	ldr	r2, [pc, #32]	; (80022ec <HAL_RCC_ClockConfig+0x2f0>)
 80022cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_RCC_ClockConfig+0x2f4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fc4a 	bl	8000b6c <HAL_InitTick>
  
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3778      	adds	r7, #120	; 0x78
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	080046f4 	.word	0x080046f4
 80022ec:	20000000 	.word	0x20000000
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b08b      	sub	sp, #44	; 0x2c
 80022f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800230e:	4b29      	ldr	r3, [pc, #164]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b04      	cmp	r3, #4
 800231c:	d002      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x30>
 800231e:	2b08      	cmp	r3, #8
 8002320:	d003      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x36>
 8002322:	e03c      	b.n	800239e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002324:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002326:	623b      	str	r3, [r7, #32]
      break;
 8002328:	e03c      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002330:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002334:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	fa92 f2a2 	rbit	r2, r2
 800233c:	607a      	str	r2, [r7, #4]
  return result;
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	fab2 f282 	clz	r2, r2
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	40d3      	lsrs	r3, r2
 8002348:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800234e:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	220f      	movs	r2, #15
 8002358:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	fa92 f2a2 	rbit	r2, r2
 8002360:	60fa      	str	r2, [r7, #12]
  return result;
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	fab2 f282 	clz	r2, r2
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	40d3      	lsrs	r3, r2
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800237c:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	fbb2 f2f3 	udiv	r2, r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
 800238c:	e004      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002392:	fb02 f303 	mul.w	r3, r2, r3
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	623b      	str	r3, [r7, #32]
      break;
 800239c:	e002      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023a0:	623b      	str	r3, [r7, #32]
      break;
 80023a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a4:	6a3b      	ldr	r3, [r7, #32]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	372c      	adds	r7, #44	; 0x2c
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	007a1200 	.word	0x007a1200
 80023bc:	0800470c 	.word	0x0800470c
 80023c0:	0800471c 	.word	0x0800471c
 80023c4:	003d0900 	.word	0x003d0900

080023c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000000 	.word	0x20000000

080023e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023e6:	f7ff ffef 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 80023ea:	4601      	mov	r1, r0
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	fa92 f2a2 	rbit	r2, r2
 8002400:	603a      	str	r2, [r7, #0]
  return result;
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	fab2 f282 	clz	r2, r2
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	40d3      	lsrs	r3, r2
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x40>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	08004704 	.word	0x08004704

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800242a:	f7ff ffcd 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 800242e:	4601      	mov	r1, r0
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002438:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800243c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	fa92 f2a2 	rbit	r2, r2
 8002444:	603a      	str	r2, [r7, #0]
  return result;
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	fab2 f282 	clz	r2, r2
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	40d3      	lsrs	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000
 8002464:	08004704 	.word	0x08004704

08002468 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b092      	sub	sp, #72	; 0x48
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80cd 	beq.w	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248c:	4b86      	ldr	r3, [pc, #536]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10e      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002498:	4b83      	ldr	r3, [pc, #524]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	4a82      	ldr	r2, [pc, #520]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800249e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a2:	61d3      	str	r3, [r2, #28]
 80024a4:	4b80      	ldr	r3, [pc, #512]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b7d      	ldr	r3, [pc, #500]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b7a      	ldr	r3, [pc, #488]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a79      	ldr	r2, [pc, #484]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7fe fb91 	bl	8000bf4 <HAL_GetTick>
 80024d2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	e008      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7fe fb8d 	bl	8000bf4 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	; 0x64
 80024e2:	d901      	bls.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e0db      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b70      	ldr	r3, [pc, #448]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024f4:	4b6c      	ldr	r3, [pc, #432]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d07d      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800250e:	429a      	cmp	r2, r3
 8002510:	d076      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002512:	4b65      	ldr	r3, [pc, #404]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800251c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002520:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	4b5e      	ldr	r3, [pc, #376]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	461a      	mov	r2, r3
 800253c:	2301      	movs	r3, #1
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002544:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800254e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	4b55      	ldr	r3, [pc, #340]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	461a      	mov	r2, r3
 8002560:	2300      	movs	r3, #0
 8002562:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002564:	4a50      	ldr	r2, [pc, #320]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002568:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800256a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d045      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7fe fb3e 	bl	8000bf4 <HAL_GetTick>
 8002578:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	e00a      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fb3a 	bl	8000bf4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e086      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002592:	2302      	movs	r3, #2
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
 800259e:	2302      	movs	r3, #2
 80025a0:	623b      	str	r3, [r7, #32]
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	61fb      	str	r3, [r7, #28]
  return result;
 80025aa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f043 0302 	orr.w	r3, r3, #2
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d102      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80025c0:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	e007      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80025c6:	2302      	movs	r3, #2
 80025c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	4b35      	ldr	r3, [pc, #212]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	2202      	movs	r2, #2
 80025d8:	613a      	str	r2, [r7, #16]
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	fa92 f2a2 	rbit	r2, r2
 80025e0:	60fa      	str	r2, [r7, #12]
  return result;
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	fab2 f282 	clz	r2, r2
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f002 021f 	and.w	r2, r2, #31
 80025f4:	2101      	movs	r1, #1
 80025f6:	fa01 f202 	lsl.w	r2, r1, r2
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0bd      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002600:	4b29      	ldr	r3, [pc, #164]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4926      	ldr	r1, [pc, #152]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800260e:	4313      	orrs	r3, r2
 8002610:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002612:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002616:	2b01      	cmp	r3, #1
 8002618:	d105      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261a:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a22      	ldr	r2, [pc, #136]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002624:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002632:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f023 0203 	bic.w	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	491a      	ldr	r1, [pc, #104]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002640:	4313      	orrs	r3, r2
 8002642:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	f023 0210 	bic.w	r2, r3, #16
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4912      	ldr	r1, [pc, #72]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800265e:	4313      	orrs	r3, r2
 8002660:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	490b      	ldr	r1, [pc, #44]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800267c:	4313      	orrs	r3, r2
 800267e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	4903      	ldr	r1, [pc, #12]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800269a:	4313      	orrs	r3, r2
 800269c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3748      	adds	r7, #72	; 0x48
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40007000 	.word	0x40007000
 80026b0:	10908100 	.word	0x10908100

080026b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e049      	b.n	800275a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe f836 	bl	800074c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3304      	adds	r3, #4
 80026f0:	4619      	mov	r1, r3
 80026f2:	4610      	mov	r0, r2
 80026f4:	f000 fa96 	bl	8002c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e049      	b.n	8002808 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d106      	bne.n	800278e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f841 	bl	8002810 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2202      	movs	r2, #2
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	4619      	mov	r1, r3
 80027a0:	4610      	mov	r0, r2
 80027a2:	f000 fa3f 	bl	8002c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d109      	bne.n	8002848 <HAL_TIM_PWM_Start+0x24>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	bf14      	ite	ne
 8002840:	2301      	movne	r3, #1
 8002842:	2300      	moveq	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	e03c      	b.n	80028c2 <HAL_TIM_PWM_Start+0x9e>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b04      	cmp	r3, #4
 800284c:	d109      	bne.n	8002862 <HAL_TIM_PWM_Start+0x3e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	bf14      	ite	ne
 800285a:	2301      	movne	r3, #1
 800285c:	2300      	moveq	r3, #0
 800285e:	b2db      	uxtb	r3, r3
 8002860:	e02f      	b.n	80028c2 <HAL_TIM_PWM_Start+0x9e>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d109      	bne.n	800287c <HAL_TIM_PWM_Start+0x58>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	bf14      	ite	ne
 8002874:	2301      	movne	r3, #1
 8002876:	2300      	moveq	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	e022      	b.n	80028c2 <HAL_TIM_PWM_Start+0x9e>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2b0c      	cmp	r3, #12
 8002880:	d109      	bne.n	8002896 <HAL_TIM_PWM_Start+0x72>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b01      	cmp	r3, #1
 800288c:	bf14      	ite	ne
 800288e:	2301      	movne	r3, #1
 8002890:	2300      	moveq	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	e015      	b.n	80028c2 <HAL_TIM_PWM_Start+0x9e>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b10      	cmp	r3, #16
 800289a:	d109      	bne.n	80028b0 <HAL_TIM_PWM_Start+0x8c>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	bf14      	ite	ne
 80028a8:	2301      	movne	r3, #1
 80028aa:	2300      	moveq	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	e008      	b.n	80028c2 <HAL_TIM_PWM_Start+0x9e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	bf14      	ite	ne
 80028bc:	2301      	movne	r3, #1
 80028be:	2300      	moveq	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e088      	b.n	80029dc <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d104      	bne.n	80028da <HAL_TIM_PWM_Start+0xb6>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d8:	e023      	b.n	8002922 <HAL_TIM_PWM_Start+0xfe>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d104      	bne.n	80028ea <HAL_TIM_PWM_Start+0xc6>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e8:	e01b      	b.n	8002922 <HAL_TIM_PWM_Start+0xfe>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d104      	bne.n	80028fa <HAL_TIM_PWM_Start+0xd6>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f8:	e013      	b.n	8002922 <HAL_TIM_PWM_Start+0xfe>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b0c      	cmp	r3, #12
 80028fe:	d104      	bne.n	800290a <HAL_TIM_PWM_Start+0xe6>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002908:	e00b      	b.n	8002922 <HAL_TIM_PWM_Start+0xfe>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b10      	cmp	r3, #16
 800290e:	d104      	bne.n	800291a <HAL_TIM_PWM_Start+0xf6>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002918:	e003      	b.n	8002922 <HAL_TIM_PWM_Start+0xfe>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2202      	movs	r2, #2
 800291e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2201      	movs	r2, #1
 8002928:	6839      	ldr	r1, [r7, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fc98 	bl	8003260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a2b      	ldr	r2, [pc, #172]	; (80029e4 <HAL_TIM_PWM_Start+0x1c0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00e      	beq.n	8002958 <HAL_TIM_PWM_Start+0x134>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a2a      	ldr	r2, [pc, #168]	; (80029e8 <HAL_TIM_PWM_Start+0x1c4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d009      	beq.n	8002958 <HAL_TIM_PWM_Start+0x134>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a28      	ldr	r2, [pc, #160]	; (80029ec <HAL_TIM_PWM_Start+0x1c8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d004      	beq.n	8002958 <HAL_TIM_PWM_Start+0x134>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a27      	ldr	r2, [pc, #156]	; (80029f0 <HAL_TIM_PWM_Start+0x1cc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d101      	bne.n	800295c <HAL_TIM_PWM_Start+0x138>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <HAL_TIM_PWM_Start+0x13a>
 800295c:	2300      	movs	r3, #0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <HAL_TIM_PWM_Start+0x1c0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00e      	beq.n	800299a <HAL_TIM_PWM_Start+0x176>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d009      	beq.n	800299a <HAL_TIM_PWM_Start+0x176>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1a      	ldr	r2, [pc, #104]	; (80029f4 <HAL_TIM_PWM_Start+0x1d0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d004      	beq.n	800299a <HAL_TIM_PWM_Start+0x176>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <HAL_TIM_PWM_Start+0x1c4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d115      	bne.n	80029c6 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <HAL_TIM_PWM_Start+0x1d4>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b06      	cmp	r3, #6
 80029aa:	d015      	beq.n	80029d8 <HAL_TIM_PWM_Start+0x1b4>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b2:	d011      	beq.n	80029d8 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c4:	e008      	b.n	80029d8 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e000      	b.n	80029da <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40012c00 	.word	0x40012c00
 80029e8:	40014000 	.word	0x40014000
 80029ec:	40014400 	.word	0x40014400
 80029f0:	40014800 	.word	0x40014800
 80029f4:	40000400 	.word	0x40000400
 80029f8:	00010007 	.word	0x00010007

080029fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e0ff      	b.n	8002c1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b14      	cmp	r3, #20
 8002a26:	f200 80f0 	bhi.w	8002c0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002a2a:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a30:	08002a85 	.word	0x08002a85
 8002a34:	08002c0b 	.word	0x08002c0b
 8002a38:	08002c0b 	.word	0x08002c0b
 8002a3c:	08002c0b 	.word	0x08002c0b
 8002a40:	08002ac5 	.word	0x08002ac5
 8002a44:	08002c0b 	.word	0x08002c0b
 8002a48:	08002c0b 	.word	0x08002c0b
 8002a4c:	08002c0b 	.word	0x08002c0b
 8002a50:	08002b07 	.word	0x08002b07
 8002a54:	08002c0b 	.word	0x08002c0b
 8002a58:	08002c0b 	.word	0x08002c0b
 8002a5c:	08002c0b 	.word	0x08002c0b
 8002a60:	08002b47 	.word	0x08002b47
 8002a64:	08002c0b 	.word	0x08002c0b
 8002a68:	08002c0b 	.word	0x08002c0b
 8002a6c:	08002c0b 	.word	0x08002c0b
 8002a70:	08002b89 	.word	0x08002b89
 8002a74:	08002c0b 	.word	0x08002c0b
 8002a78:	08002c0b 	.word	0x08002c0b
 8002a7c:	08002c0b 	.word	0x08002c0b
 8002a80:	08002bc9 	.word	0x08002bc9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f942 	bl	8002d14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0208 	orr.w	r2, r2, #8
 8002a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0204 	bic.w	r2, r2, #4
 8002aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6999      	ldr	r1, [r3, #24]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	619a      	str	r2, [r3, #24]
      break;
 8002ac2:	e0a5      	b.n	8002c10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f9a8 	bl	8002e20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6999      	ldr	r1, [r3, #24]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	021a      	lsls	r2, r3, #8
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	619a      	str	r2, [r3, #24]
      break;
 8002b04:	e084      	b.n	8002c10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fa07 	bl	8002f20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	69da      	ldr	r2, [r3, #28]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0208 	orr.w	r2, r2, #8
 8002b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	69da      	ldr	r2, [r3, #28]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0204 	bic.w	r2, r2, #4
 8002b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69d9      	ldr	r1, [r3, #28]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	61da      	str	r2, [r3, #28]
      break;
 8002b44:	e064      	b.n	8002c10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fa65 	bl	800301c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69da      	ldr	r2, [r3, #28]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69da      	ldr	r2, [r3, #28]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69d9      	ldr	r1, [r3, #28]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	021a      	lsls	r2, r3, #8
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	61da      	str	r2, [r3, #28]
      break;
 8002b86:	e043      	b.n	8002c10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 faa8 	bl	80030e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0208 	orr.w	r2, r2, #8
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0204 	bic.w	r2, r2, #4
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002bc6:	e023      	b.n	8002c10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fae6 	bl	80031a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	021a      	lsls	r2, r3, #8
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c08:	e002      	b.n	8002c10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop

08002c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a32      	ldr	r2, [pc, #200]	; (8002d00 <TIM_Base_SetConfig+0xdc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d007      	beq.n	8002c4c <TIM_Base_SetConfig+0x28>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c42:	d003      	beq.n	8002c4c <TIM_Base_SetConfig+0x28>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a2f      	ldr	r2, [pc, #188]	; (8002d04 <TIM_Base_SetConfig+0xe0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d108      	bne.n	8002c5e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a27      	ldr	r2, [pc, #156]	; (8002d00 <TIM_Base_SetConfig+0xdc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <TIM_Base_SetConfig+0x6a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6c:	d00f      	beq.n	8002c8e <TIM_Base_SetConfig+0x6a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a24      	ldr	r2, [pc, #144]	; (8002d04 <TIM_Base_SetConfig+0xe0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00b      	beq.n	8002c8e <TIM_Base_SetConfig+0x6a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a23      	ldr	r2, [pc, #140]	; (8002d08 <TIM_Base_SetConfig+0xe4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d007      	beq.n	8002c8e <TIM_Base_SetConfig+0x6a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a22      	ldr	r2, [pc, #136]	; (8002d0c <TIM_Base_SetConfig+0xe8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d003      	beq.n	8002c8e <TIM_Base_SetConfig+0x6a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a21      	ldr	r2, [pc, #132]	; (8002d10 <TIM_Base_SetConfig+0xec>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d108      	bne.n	8002ca0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <TIM_Base_SetConfig+0xdc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00b      	beq.n	8002ce4 <TIM_Base_SetConfig+0xc0>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a0e      	ldr	r2, [pc, #56]	; (8002d08 <TIM_Base_SetConfig+0xe4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d007      	beq.n	8002ce4 <TIM_Base_SetConfig+0xc0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <TIM_Base_SetConfig+0xe8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d003      	beq.n	8002ce4 <TIM_Base_SetConfig+0xc0>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a0c      	ldr	r2, [pc, #48]	; (8002d10 <TIM_Base_SetConfig+0xec>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d103      	bne.n	8002cec <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	615a      	str	r2, [r3, #20]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40012c00 	.word	0x40012c00
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40014000 	.word	0x40014000
 8002d0c:	40014400 	.word	0x40014400
 8002d10:	40014800 	.word	0x40014800

08002d14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	f023 0201 	bic.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f023 0302 	bic.w	r3, r3, #2
 8002d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a28      	ldr	r2, [pc, #160]	; (8002e10 <TIM_OC1_SetConfig+0xfc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00b      	beq.n	8002d8c <TIM_OC1_SetConfig+0x78>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <TIM_OC1_SetConfig+0x100>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <TIM_OC1_SetConfig+0x78>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a26      	ldr	r2, [pc, #152]	; (8002e18 <TIM_OC1_SetConfig+0x104>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <TIM_OC1_SetConfig+0x78>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a25      	ldr	r2, [pc, #148]	; (8002e1c <TIM_OC1_SetConfig+0x108>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d10c      	bne.n	8002da6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f023 0308 	bic.w	r3, r3, #8
 8002d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f023 0304 	bic.w	r3, r3, #4
 8002da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <TIM_OC1_SetConfig+0xfc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00b      	beq.n	8002dc6 <TIM_OC1_SetConfig+0xb2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a18      	ldr	r2, [pc, #96]	; (8002e14 <TIM_OC1_SetConfig+0x100>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <TIM_OC1_SetConfig+0xb2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a17      	ldr	r2, [pc, #92]	; (8002e18 <TIM_OC1_SetConfig+0x104>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <TIM_OC1_SetConfig+0xb2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a16      	ldr	r2, [pc, #88]	; (8002e1c <TIM_OC1_SetConfig+0x108>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d111      	bne.n	8002dea <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	621a      	str	r2, [r3, #32]
}
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	40012c00 	.word	0x40012c00
 8002e14:	40014000 	.word	0x40014000
 8002e18:	40014400 	.word	0x40014400
 8002e1c:	40014800 	.word	0x40014800

08002e20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f023 0210 	bic.w	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f023 0320 	bic.w	r3, r3, #32
 8002e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a24      	ldr	r2, [pc, #144]	; (8002f10 <TIM_OC2_SetConfig+0xf0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d10d      	bne.n	8002ea0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <TIM_OC2_SetConfig+0xf0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00b      	beq.n	8002ec0 <TIM_OC2_SetConfig+0xa0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a1a      	ldr	r2, [pc, #104]	; (8002f14 <TIM_OC2_SetConfig+0xf4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d007      	beq.n	8002ec0 <TIM_OC2_SetConfig+0xa0>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <TIM_OC2_SetConfig+0xf8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_OC2_SetConfig+0xa0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <TIM_OC2_SetConfig+0xfc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d113      	bne.n	8002ee8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ec6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ece:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	621a      	str	r2, [r3, #32]
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40014000 	.word	0x40014000
 8002f18:	40014400 	.word	0x40014400
 8002f1c:	40014800 	.word	0x40014800

08002f20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0303 	bic.w	r3, r3, #3
 8002f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a23      	ldr	r2, [pc, #140]	; (800300c <TIM_OC3_SetConfig+0xec>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10d      	bne.n	8002f9e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f9c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a1a      	ldr	r2, [pc, #104]	; (800300c <TIM_OC3_SetConfig+0xec>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00b      	beq.n	8002fbe <TIM_OC3_SetConfig+0x9e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a19      	ldr	r2, [pc, #100]	; (8003010 <TIM_OC3_SetConfig+0xf0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d007      	beq.n	8002fbe <TIM_OC3_SetConfig+0x9e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a18      	ldr	r2, [pc, #96]	; (8003014 <TIM_OC3_SetConfig+0xf4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d003      	beq.n	8002fbe <TIM_OC3_SetConfig+0x9e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a17      	ldr	r2, [pc, #92]	; (8003018 <TIM_OC3_SetConfig+0xf8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d113      	bne.n	8002fe6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	621a      	str	r2, [r3, #32]
}
 8003000:	bf00      	nop
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40014000 	.word	0x40014000
 8003014:	40014400 	.word	0x40014400
 8003018:	40014800 	.word	0x40014800

0800301c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800304a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800304e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800306a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	031b      	lsls	r3, r3, #12
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a16      	ldr	r2, [pc, #88]	; (80030d4 <TIM_OC4_SetConfig+0xb8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00b      	beq.n	8003098 <TIM_OC4_SetConfig+0x7c>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a15      	ldr	r2, [pc, #84]	; (80030d8 <TIM_OC4_SetConfig+0xbc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d007      	beq.n	8003098 <TIM_OC4_SetConfig+0x7c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a14      	ldr	r2, [pc, #80]	; (80030dc <TIM_OC4_SetConfig+0xc0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <TIM_OC4_SetConfig+0x7c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a13      	ldr	r2, [pc, #76]	; (80030e0 <TIM_OC4_SetConfig+0xc4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d109      	bne.n	80030ac <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800309e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	019b      	lsls	r3, r3, #6
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	621a      	str	r2, [r3, #32]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40012c00 	.word	0x40012c00
 80030d8:	40014000 	.word	0x40014000
 80030dc:	40014400 	.word	0x40014400
 80030e0:	40014800 	.word	0x40014800

080030e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003128:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	041b      	lsls	r3, r3, #16
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a15      	ldr	r2, [pc, #84]	; (8003190 <TIM_OC5_SetConfig+0xac>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00b      	beq.n	8003156 <TIM_OC5_SetConfig+0x72>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a14      	ldr	r2, [pc, #80]	; (8003194 <TIM_OC5_SetConfig+0xb0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d007      	beq.n	8003156 <TIM_OC5_SetConfig+0x72>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a13      	ldr	r2, [pc, #76]	; (8003198 <TIM_OC5_SetConfig+0xb4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d003      	beq.n	8003156 <TIM_OC5_SetConfig+0x72>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a12      	ldr	r2, [pc, #72]	; (800319c <TIM_OC5_SetConfig+0xb8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d109      	bne.n	800316a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	621a      	str	r2, [r3, #32]
}
 8003184:	bf00      	nop
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	40012c00 	.word	0x40012c00
 8003194:	40014000 	.word	0x40014000
 8003198:	40014400 	.word	0x40014400
 800319c:	40014800 	.word	0x40014800

080031a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	051b      	lsls	r3, r3, #20
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a16      	ldr	r2, [pc, #88]	; (8003250 <TIM_OC6_SetConfig+0xb0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00b      	beq.n	8003214 <TIM_OC6_SetConfig+0x74>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a15      	ldr	r2, [pc, #84]	; (8003254 <TIM_OC6_SetConfig+0xb4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d007      	beq.n	8003214 <TIM_OC6_SetConfig+0x74>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a14      	ldr	r2, [pc, #80]	; (8003258 <TIM_OC6_SetConfig+0xb8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d003      	beq.n	8003214 <TIM_OC6_SetConfig+0x74>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a13      	ldr	r2, [pc, #76]	; (800325c <TIM_OC6_SetConfig+0xbc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d109      	bne.n	8003228 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	029b      	lsls	r3, r3, #10
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	621a      	str	r2, [r3, #32]
}
 8003242:	bf00      	nop
 8003244:	371c      	adds	r7, #28
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40012c00 	.word	0x40012c00
 8003254:	40014000 	.word	0x40014000
 8003258:	40014400 	.word	0x40014400
 800325c:	40014800 	.word	0x40014800

08003260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	2201      	movs	r2, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a1a      	ldr	r2, [r3, #32]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	43db      	mvns	r3, r3
 8003282:	401a      	ands	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1a      	ldr	r2, [r3, #32]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	431a      	orrs	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	621a      	str	r2, [r3, #32]
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e060      	b.n	800338a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	041b      	lsls	r3, r3, #16
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a14      	ldr	r2, [pc, #80]	; (8003398 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d115      	bne.n	8003378 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	051b      	lsls	r3, r3, #20
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40012c00 	.word	0x40012c00

0800339c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e040      	b.n	8003430 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fa54 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f8c0 	bl	8003560 <UART_SetConfig>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e022      	b.n	8003430 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f9ea 	bl	80037cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003406:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003416:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fa71 	bl	8003910 <UART_CheckIdleState>
 800342e:	4603      	mov	r3, r0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800344c:	2b20      	cmp	r3, #32
 800344e:	f040 8082 	bne.w	8003556 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_UART_Transmit+0x26>
 8003458:	88fb      	ldrh	r3, [r7, #6]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e07a      	b.n	8003558 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_UART_Transmit+0x38>
 800346c:	2302      	movs	r3, #2
 800346e:	e073      	b.n	8003558 <HAL_UART_Transmit+0x120>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2221      	movs	r2, #33	; 0x21
 8003484:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003486:	f7fd fbb5 	bl	8000bf4 <HAL_GetTick>
 800348a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	88fa      	ldrh	r2, [r7, #6]
 8003490:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	88fa      	ldrh	r2, [r7, #6]
 8003498:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a4:	d108      	bne.n	80034b8 <HAL_UART_Transmit+0x80>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d104      	bne.n	80034b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	e003      	b.n	80034c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80034c8:	e02d      	b.n	8003526 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2180      	movs	r1, #128	; 0x80
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 fa64 	bl	80039a2 <UART_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e039      	b.n	8003558 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10b      	bne.n	8003502 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	881a      	ldrh	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034f6:	b292      	uxth	r2, r2
 80034f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	3302      	adds	r3, #2
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	e008      	b.n	8003514 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	781a      	ldrb	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	b292      	uxth	r2, r2
 800350c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3301      	adds	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1cb      	bne.n	80034ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2200      	movs	r2, #0
 800353a:	2140      	movs	r1, #64	; 0x40
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 fa30 	bl	80039a2 <UART_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e005      	b.n	8003558 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	e000      	b.n	8003558 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003556:	2302      	movs	r3, #2
  }
}
 8003558:	4618      	mov	r0, r3
 800355a:	3720      	adds	r7, #32
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b8a      	ldr	r3, [pc, #552]	; (80037b4 <UART_SetConfig+0x254>)
 800358c:	4013      	ands	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	6979      	ldr	r1, [r7, #20]
 8003594:	430b      	orrs	r3, r1
 8003596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a78      	ldr	r2, [pc, #480]	; (80037b8 <UART_SetConfig+0x258>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d120      	bne.n	800361e <UART_SetConfig+0xbe>
 80035dc:	4b77      	ldr	r3, [pc, #476]	; (80037bc <UART_SetConfig+0x25c>)
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d817      	bhi.n	8003618 <UART_SetConfig+0xb8>
 80035e8:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <UART_SetConfig+0x90>)
 80035ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ee:	bf00      	nop
 80035f0:	08003601 	.word	0x08003601
 80035f4:	0800360d 	.word	0x0800360d
 80035f8:	08003613 	.word	0x08003613
 80035fc:	08003607 	.word	0x08003607
 8003600:	2300      	movs	r3, #0
 8003602:	77fb      	strb	r3, [r7, #31]
 8003604:	e01d      	b.n	8003642 <UART_SetConfig+0xe2>
 8003606:	2302      	movs	r3, #2
 8003608:	77fb      	strb	r3, [r7, #31]
 800360a:	e01a      	b.n	8003642 <UART_SetConfig+0xe2>
 800360c:	2304      	movs	r3, #4
 800360e:	77fb      	strb	r3, [r7, #31]
 8003610:	e017      	b.n	8003642 <UART_SetConfig+0xe2>
 8003612:	2308      	movs	r3, #8
 8003614:	77fb      	strb	r3, [r7, #31]
 8003616:	e014      	b.n	8003642 <UART_SetConfig+0xe2>
 8003618:	2310      	movs	r3, #16
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e011      	b.n	8003642 <UART_SetConfig+0xe2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a67      	ldr	r2, [pc, #412]	; (80037c0 <UART_SetConfig+0x260>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d102      	bne.n	800362e <UART_SetConfig+0xce>
 8003628:	2300      	movs	r3, #0
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e009      	b.n	8003642 <UART_SetConfig+0xe2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a64      	ldr	r2, [pc, #400]	; (80037c4 <UART_SetConfig+0x264>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d102      	bne.n	800363e <UART_SetConfig+0xde>
 8003638:	2300      	movs	r3, #0
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e001      	b.n	8003642 <UART_SetConfig+0xe2>
 800363e:	2310      	movs	r3, #16
 8003640:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800364a:	d15b      	bne.n	8003704 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800364c:	7ffb      	ldrb	r3, [r7, #31]
 800364e:	2b08      	cmp	r3, #8
 8003650:	d827      	bhi.n	80036a2 <UART_SetConfig+0x142>
 8003652:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <UART_SetConfig+0xf8>)
 8003654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003658:	0800367d 	.word	0x0800367d
 800365c:	08003685 	.word	0x08003685
 8003660:	0800368d 	.word	0x0800368d
 8003664:	080036a3 	.word	0x080036a3
 8003668:	08003693 	.word	0x08003693
 800366c:	080036a3 	.word	0x080036a3
 8003670:	080036a3 	.word	0x080036a3
 8003674:	080036a3 	.word	0x080036a3
 8003678:	0800369b 	.word	0x0800369b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800367c:	f7fe feb0 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8003680:	61b8      	str	r0, [r7, #24]
        break;
 8003682:	e013      	b.n	80036ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003684:	f7fe fece 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8003688:	61b8      	str	r0, [r7, #24]
        break;
 800368a:	e00f      	b.n	80036ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800368c:	4b4e      	ldr	r3, [pc, #312]	; (80037c8 <UART_SetConfig+0x268>)
 800368e:	61bb      	str	r3, [r7, #24]
        break;
 8003690:	e00c      	b.n	80036ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003692:	f7fe fe2f 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 8003696:	61b8      	str	r0, [r7, #24]
        break;
 8003698:	e008      	b.n	80036ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800369a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800369e:	61bb      	str	r3, [r7, #24]
        break;
 80036a0:	e004      	b.n	80036ac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	77bb      	strb	r3, [r7, #30]
        break;
 80036aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d074      	beq.n	800379c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	005a      	lsls	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	441a      	add	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b0f      	cmp	r3, #15
 80036ce:	d916      	bls.n	80036fe <UART_SetConfig+0x19e>
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d6:	d212      	bcs.n	80036fe <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	f023 030f 	bic.w	r3, r3, #15
 80036e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	89fb      	ldrh	r3, [r7, #14]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	89fa      	ldrh	r2, [r7, #14]
 80036fa:	60da      	str	r2, [r3, #12]
 80036fc:	e04e      	b.n	800379c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	77bb      	strb	r3, [r7, #30]
 8003702:	e04b      	b.n	800379c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003704:	7ffb      	ldrb	r3, [r7, #31]
 8003706:	2b08      	cmp	r3, #8
 8003708:	d827      	bhi.n	800375a <UART_SetConfig+0x1fa>
 800370a:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <UART_SetConfig+0x1b0>)
 800370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003710:	08003735 	.word	0x08003735
 8003714:	0800373d 	.word	0x0800373d
 8003718:	08003745 	.word	0x08003745
 800371c:	0800375b 	.word	0x0800375b
 8003720:	0800374b 	.word	0x0800374b
 8003724:	0800375b 	.word	0x0800375b
 8003728:	0800375b 	.word	0x0800375b
 800372c:	0800375b 	.word	0x0800375b
 8003730:	08003753 	.word	0x08003753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003734:	f7fe fe54 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8003738:	61b8      	str	r0, [r7, #24]
        break;
 800373a:	e013      	b.n	8003764 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800373c:	f7fe fe72 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8003740:	61b8      	str	r0, [r7, #24]
        break;
 8003742:	e00f      	b.n	8003764 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003744:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <UART_SetConfig+0x268>)
 8003746:	61bb      	str	r3, [r7, #24]
        break;
 8003748:	e00c      	b.n	8003764 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800374a:	f7fe fdd3 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 800374e:	61b8      	str	r0, [r7, #24]
        break;
 8003750:	e008      	b.n	8003764 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003756:	61bb      	str	r3, [r7, #24]
        break;
 8003758:	e004      	b.n	8003764 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	77bb      	strb	r3, [r7, #30]
        break;
 8003762:	bf00      	nop
    }

    if (pclk != 0U)
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d018      	beq.n	800379c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	085a      	lsrs	r2, r3, #1
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	441a      	add	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	b29b      	uxth	r3, r3
 800377e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b0f      	cmp	r3, #15
 8003784:	d908      	bls.n	8003798 <UART_SetConfig+0x238>
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378c:	d204      	bcs.n	8003798 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	e001      	b.n	800379c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80037a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	efff69f3 	.word	0xefff69f3
 80037b8:	40013800 	.word	0x40013800
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40004400 	.word	0x40004400
 80037c4:	40004800 	.word	0x40004800
 80037c8:	007a1200 	.word	0x007a1200

080037cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01a      	beq.n	80038e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ca:	d10a      	bne.n	80038e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	605a      	str	r2, [r3, #4]
  }
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af02      	add	r7, sp, #8
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003920:	f7fd f968 	bl	8000bf4 <HAL_GetTick>
 8003924:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b08      	cmp	r3, #8
 8003932:	d10e      	bne.n	8003952 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003934:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f82d 	bl	80039a2 <UART_WaitOnFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e023      	b.n	800399a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b04      	cmp	r3, #4
 800395e:	d10e      	bne.n	800397e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003960:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f817 	bl	80039a2 <UART_WaitOnFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e00d      	b.n	800399a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b09c      	sub	sp, #112	; 0x70
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	603b      	str	r3, [r7, #0]
 80039ae:	4613      	mov	r3, r2
 80039b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b2:	e0a5      	b.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ba:	f000 80a1 	beq.w	8003b00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039be:	f7fd f919 	bl	8000bf4 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d302      	bcc.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80039ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d13e      	bne.n	8003a52 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039e8:	667b      	str	r3, [r7, #100]	; 0x64
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e6      	bne.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3308      	adds	r3, #8
 8003a24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a26:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e5      	bne.n	8003a06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e067      	b.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d04f      	beq.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a6e:	d147      	bne.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a98:	637b      	str	r3, [r7, #52]	; 0x34
 8003a9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e6      	bne.n	8003a7a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	613b      	str	r3, [r7, #16]
   return(result);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3308      	adds	r3, #8
 8003aca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003acc:	623a      	str	r2, [r7, #32]
 8003ace:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	69f9      	ldr	r1, [r7, #28]
 8003ad2:	6a3a      	ldr	r2, [r7, #32]
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e5      	bne.n	8003aac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e010      	b.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69da      	ldr	r2, [r3, #28]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	f43f af4a 	beq.w	80039b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3770      	adds	r7, #112	; 0x70
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <__errno>:
 8003b2c:	4b01      	ldr	r3, [pc, #4]	; (8003b34 <__errno+0x8>)
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	2000000c 	.word	0x2000000c

08003b38 <__libc_init_array>:
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	4d0d      	ldr	r5, [pc, #52]	; (8003b70 <__libc_init_array+0x38>)
 8003b3c:	4c0d      	ldr	r4, [pc, #52]	; (8003b74 <__libc_init_array+0x3c>)
 8003b3e:	1b64      	subs	r4, r4, r5
 8003b40:	10a4      	asrs	r4, r4, #2
 8003b42:	2600      	movs	r6, #0
 8003b44:	42a6      	cmp	r6, r4
 8003b46:	d109      	bne.n	8003b5c <__libc_init_array+0x24>
 8003b48:	4d0b      	ldr	r5, [pc, #44]	; (8003b78 <__libc_init_array+0x40>)
 8003b4a:	4c0c      	ldr	r4, [pc, #48]	; (8003b7c <__libc_init_array+0x44>)
 8003b4c:	f000 fdbc 	bl	80046c8 <_init>
 8003b50:	1b64      	subs	r4, r4, r5
 8003b52:	10a4      	asrs	r4, r4, #2
 8003b54:	2600      	movs	r6, #0
 8003b56:	42a6      	cmp	r6, r4
 8003b58:	d105      	bne.n	8003b66 <__libc_init_array+0x2e>
 8003b5a:	bd70      	pop	{r4, r5, r6, pc}
 8003b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b60:	4798      	blx	r3
 8003b62:	3601      	adds	r6, #1
 8003b64:	e7ee      	b.n	8003b44 <__libc_init_array+0xc>
 8003b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b6a:	4798      	blx	r3
 8003b6c:	3601      	adds	r6, #1
 8003b6e:	e7f2      	b.n	8003b56 <__libc_init_array+0x1e>
 8003b70:	08004790 	.word	0x08004790
 8003b74:	08004790 	.word	0x08004790
 8003b78:	08004790 	.word	0x08004790
 8003b7c:	08004794 	.word	0x08004794

08003b80 <memset>:
 8003b80:	4402      	add	r2, r0
 8003b82:	4603      	mov	r3, r0
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d100      	bne.n	8003b8a <memset+0xa>
 8003b88:	4770      	bx	lr
 8003b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b8e:	e7f9      	b.n	8003b84 <memset+0x4>

08003b90 <_puts_r>:
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	460e      	mov	r6, r1
 8003b94:	4605      	mov	r5, r0
 8003b96:	b118      	cbz	r0, 8003ba0 <_puts_r+0x10>
 8003b98:	6983      	ldr	r3, [r0, #24]
 8003b9a:	b90b      	cbnz	r3, 8003ba0 <_puts_r+0x10>
 8003b9c:	f000 fb16 	bl	80041cc <__sinit>
 8003ba0:	69ab      	ldr	r3, [r5, #24]
 8003ba2:	68ac      	ldr	r4, [r5, #8]
 8003ba4:	b913      	cbnz	r3, 8003bac <_puts_r+0x1c>
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	f000 fb10 	bl	80041cc <__sinit>
 8003bac:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <_puts_r+0xd0>)
 8003bae:	429c      	cmp	r4, r3
 8003bb0:	d120      	bne.n	8003bf4 <_puts_r+0x64>
 8003bb2:	686c      	ldr	r4, [r5, #4]
 8003bb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bb6:	07db      	lsls	r3, r3, #31
 8003bb8:	d405      	bmi.n	8003bc6 <_puts_r+0x36>
 8003bba:	89a3      	ldrh	r3, [r4, #12]
 8003bbc:	0598      	lsls	r0, r3, #22
 8003bbe:	d402      	bmi.n	8003bc6 <_puts_r+0x36>
 8003bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bc2:	f000 fba1 	bl	8004308 <__retarget_lock_acquire_recursive>
 8003bc6:	89a3      	ldrh	r3, [r4, #12]
 8003bc8:	0719      	lsls	r1, r3, #28
 8003bca:	d51d      	bpl.n	8003c08 <_puts_r+0x78>
 8003bcc:	6923      	ldr	r3, [r4, #16]
 8003bce:	b1db      	cbz	r3, 8003c08 <_puts_r+0x78>
 8003bd0:	3e01      	subs	r6, #1
 8003bd2:	68a3      	ldr	r3, [r4, #8]
 8003bd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	60a3      	str	r3, [r4, #8]
 8003bdc:	bb39      	cbnz	r1, 8003c2e <_puts_r+0x9e>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	da38      	bge.n	8003c54 <_puts_r+0xc4>
 8003be2:	4622      	mov	r2, r4
 8003be4:	210a      	movs	r1, #10
 8003be6:	4628      	mov	r0, r5
 8003be8:	f000 f916 	bl	8003e18 <__swbuf_r>
 8003bec:	3001      	adds	r0, #1
 8003bee:	d011      	beq.n	8003c14 <_puts_r+0x84>
 8003bf0:	250a      	movs	r5, #10
 8003bf2:	e011      	b.n	8003c18 <_puts_r+0x88>
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <_puts_r+0xd4>)
 8003bf6:	429c      	cmp	r4, r3
 8003bf8:	d101      	bne.n	8003bfe <_puts_r+0x6e>
 8003bfa:	68ac      	ldr	r4, [r5, #8]
 8003bfc:	e7da      	b.n	8003bb4 <_puts_r+0x24>
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <_puts_r+0xd8>)
 8003c00:	429c      	cmp	r4, r3
 8003c02:	bf08      	it	eq
 8003c04:	68ec      	ldreq	r4, [r5, #12]
 8003c06:	e7d5      	b.n	8003bb4 <_puts_r+0x24>
 8003c08:	4621      	mov	r1, r4
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	f000 f956 	bl	8003ebc <__swsetup_r>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d0dd      	beq.n	8003bd0 <_puts_r+0x40>
 8003c14:	f04f 35ff 	mov.w	r5, #4294967295
 8003c18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c1a:	07da      	lsls	r2, r3, #31
 8003c1c:	d405      	bmi.n	8003c2a <_puts_r+0x9a>
 8003c1e:	89a3      	ldrh	r3, [r4, #12]
 8003c20:	059b      	lsls	r3, r3, #22
 8003c22:	d402      	bmi.n	8003c2a <_puts_r+0x9a>
 8003c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c26:	f000 fb70 	bl	800430a <__retarget_lock_release_recursive>
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	bd70      	pop	{r4, r5, r6, pc}
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	da04      	bge.n	8003c3c <_puts_r+0xac>
 8003c32:	69a2      	ldr	r2, [r4, #24]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	dc06      	bgt.n	8003c46 <_puts_r+0xb6>
 8003c38:	290a      	cmp	r1, #10
 8003c3a:	d004      	beq.n	8003c46 <_puts_r+0xb6>
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	6022      	str	r2, [r4, #0]
 8003c42:	7019      	strb	r1, [r3, #0]
 8003c44:	e7c5      	b.n	8003bd2 <_puts_r+0x42>
 8003c46:	4622      	mov	r2, r4
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f000 f8e5 	bl	8003e18 <__swbuf_r>
 8003c4e:	3001      	adds	r0, #1
 8003c50:	d1bf      	bne.n	8003bd2 <_puts_r+0x42>
 8003c52:	e7df      	b.n	8003c14 <_puts_r+0x84>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	250a      	movs	r5, #10
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	6022      	str	r2, [r4, #0]
 8003c5c:	701d      	strb	r5, [r3, #0]
 8003c5e:	e7db      	b.n	8003c18 <_puts_r+0x88>
 8003c60:	08004750 	.word	0x08004750
 8003c64:	08004770 	.word	0x08004770
 8003c68:	08004730 	.word	0x08004730

08003c6c <puts>:
 8003c6c:	4b02      	ldr	r3, [pc, #8]	; (8003c78 <puts+0xc>)
 8003c6e:	4601      	mov	r1, r0
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	f7ff bf8d 	b.w	8003b90 <_puts_r>
 8003c76:	bf00      	nop
 8003c78:	2000000c 	.word	0x2000000c

08003c7c <setbuf>:
 8003c7c:	2900      	cmp	r1, #0
 8003c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c82:	bf0c      	ite	eq
 8003c84:	2202      	moveq	r2, #2
 8003c86:	2200      	movne	r2, #0
 8003c88:	f000 b800 	b.w	8003c8c <setvbuf>

08003c8c <setvbuf>:
 8003c8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c90:	461d      	mov	r5, r3
 8003c92:	4b5d      	ldr	r3, [pc, #372]	; (8003e08 <setvbuf+0x17c>)
 8003c94:	681f      	ldr	r7, [r3, #0]
 8003c96:	4604      	mov	r4, r0
 8003c98:	460e      	mov	r6, r1
 8003c9a:	4690      	mov	r8, r2
 8003c9c:	b127      	cbz	r7, 8003ca8 <setvbuf+0x1c>
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	b913      	cbnz	r3, 8003ca8 <setvbuf+0x1c>
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	f000 fa92 	bl	80041cc <__sinit>
 8003ca8:	4b58      	ldr	r3, [pc, #352]	; (8003e0c <setvbuf+0x180>)
 8003caa:	429c      	cmp	r4, r3
 8003cac:	d167      	bne.n	8003d7e <setvbuf+0xf2>
 8003cae:	687c      	ldr	r4, [r7, #4]
 8003cb0:	f1b8 0f02 	cmp.w	r8, #2
 8003cb4:	d006      	beq.n	8003cc4 <setvbuf+0x38>
 8003cb6:	f1b8 0f01 	cmp.w	r8, #1
 8003cba:	f200 809f 	bhi.w	8003dfc <setvbuf+0x170>
 8003cbe:	2d00      	cmp	r5, #0
 8003cc0:	f2c0 809c 	blt.w	8003dfc <setvbuf+0x170>
 8003cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cc6:	07db      	lsls	r3, r3, #31
 8003cc8:	d405      	bmi.n	8003cd6 <setvbuf+0x4a>
 8003cca:	89a3      	ldrh	r3, [r4, #12]
 8003ccc:	0598      	lsls	r0, r3, #22
 8003cce:	d402      	bmi.n	8003cd6 <setvbuf+0x4a>
 8003cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cd2:	f000 fb19 	bl	8004308 <__retarget_lock_acquire_recursive>
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	4638      	mov	r0, r7
 8003cda:	f000 f9e3 	bl	80040a4 <_fflush_r>
 8003cde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ce0:	b141      	cbz	r1, 8003cf4 <setvbuf+0x68>
 8003ce2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ce6:	4299      	cmp	r1, r3
 8003ce8:	d002      	beq.n	8003cf0 <setvbuf+0x64>
 8003cea:	4638      	mov	r0, r7
 8003cec:	f000 fb7a 	bl	80043e4 <_free_r>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	6363      	str	r3, [r4, #52]	; 0x34
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61a3      	str	r3, [r4, #24]
 8003cf8:	6063      	str	r3, [r4, #4]
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	0619      	lsls	r1, r3, #24
 8003cfe:	d503      	bpl.n	8003d08 <setvbuf+0x7c>
 8003d00:	6921      	ldr	r1, [r4, #16]
 8003d02:	4638      	mov	r0, r7
 8003d04:	f000 fb6e 	bl	80043e4 <_free_r>
 8003d08:	89a3      	ldrh	r3, [r4, #12]
 8003d0a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003d0e:	f023 0303 	bic.w	r3, r3, #3
 8003d12:	f1b8 0f02 	cmp.w	r8, #2
 8003d16:	81a3      	strh	r3, [r4, #12]
 8003d18:	d06c      	beq.n	8003df4 <setvbuf+0x168>
 8003d1a:	ab01      	add	r3, sp, #4
 8003d1c:	466a      	mov	r2, sp
 8003d1e:	4621      	mov	r1, r4
 8003d20:	4638      	mov	r0, r7
 8003d22:	f000 faf3 	bl	800430c <__swhatbuf_r>
 8003d26:	89a3      	ldrh	r3, [r4, #12]
 8003d28:	4318      	orrs	r0, r3
 8003d2a:	81a0      	strh	r0, [r4, #12]
 8003d2c:	2d00      	cmp	r5, #0
 8003d2e:	d130      	bne.n	8003d92 <setvbuf+0x106>
 8003d30:	9d00      	ldr	r5, [sp, #0]
 8003d32:	4628      	mov	r0, r5
 8003d34:	f000 fb4e 	bl	80043d4 <malloc>
 8003d38:	4606      	mov	r6, r0
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d155      	bne.n	8003dea <setvbuf+0x15e>
 8003d3e:	f8dd 9000 	ldr.w	r9, [sp]
 8003d42:	45a9      	cmp	r9, r5
 8003d44:	d14a      	bne.n	8003ddc <setvbuf+0x150>
 8003d46:	f04f 35ff 	mov.w	r5, #4294967295
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	60a2      	str	r2, [r4, #8]
 8003d4e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003d52:	6022      	str	r2, [r4, #0]
 8003d54:	6122      	str	r2, [r4, #16]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d5c:	6162      	str	r2, [r4, #20]
 8003d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d60:	f043 0302 	orr.w	r3, r3, #2
 8003d64:	07d2      	lsls	r2, r2, #31
 8003d66:	81a3      	strh	r3, [r4, #12]
 8003d68:	d405      	bmi.n	8003d76 <setvbuf+0xea>
 8003d6a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003d6e:	d102      	bne.n	8003d76 <setvbuf+0xea>
 8003d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d72:	f000 faca 	bl	800430a <__retarget_lock_release_recursive>
 8003d76:	4628      	mov	r0, r5
 8003d78:	b003      	add	sp, #12
 8003d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d7e:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <setvbuf+0x184>)
 8003d80:	429c      	cmp	r4, r3
 8003d82:	d101      	bne.n	8003d88 <setvbuf+0xfc>
 8003d84:	68bc      	ldr	r4, [r7, #8]
 8003d86:	e793      	b.n	8003cb0 <setvbuf+0x24>
 8003d88:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <setvbuf+0x188>)
 8003d8a:	429c      	cmp	r4, r3
 8003d8c:	bf08      	it	eq
 8003d8e:	68fc      	ldreq	r4, [r7, #12]
 8003d90:	e78e      	b.n	8003cb0 <setvbuf+0x24>
 8003d92:	2e00      	cmp	r6, #0
 8003d94:	d0cd      	beq.n	8003d32 <setvbuf+0xa6>
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	b913      	cbnz	r3, 8003da0 <setvbuf+0x114>
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	f000 fa16 	bl	80041cc <__sinit>
 8003da0:	f1b8 0f01 	cmp.w	r8, #1
 8003da4:	bf08      	it	eq
 8003da6:	89a3      	ldrheq	r3, [r4, #12]
 8003da8:	6026      	str	r6, [r4, #0]
 8003daa:	bf04      	itt	eq
 8003dac:	f043 0301 	orreq.w	r3, r3, #1
 8003db0:	81a3      	strheq	r3, [r4, #12]
 8003db2:	89a2      	ldrh	r2, [r4, #12]
 8003db4:	f012 0308 	ands.w	r3, r2, #8
 8003db8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003dbc:	d01c      	beq.n	8003df8 <setvbuf+0x16c>
 8003dbe:	07d3      	lsls	r3, r2, #31
 8003dc0:	bf41      	itttt	mi
 8003dc2:	2300      	movmi	r3, #0
 8003dc4:	426d      	negmi	r5, r5
 8003dc6:	60a3      	strmi	r3, [r4, #8]
 8003dc8:	61a5      	strmi	r5, [r4, #24]
 8003dca:	bf58      	it	pl
 8003dcc:	60a5      	strpl	r5, [r4, #8]
 8003dce:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003dd0:	f015 0501 	ands.w	r5, r5, #1
 8003dd4:	d115      	bne.n	8003e02 <setvbuf+0x176>
 8003dd6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003dda:	e7c8      	b.n	8003d6e <setvbuf+0xe2>
 8003ddc:	4648      	mov	r0, r9
 8003dde:	f000 faf9 	bl	80043d4 <malloc>
 8003de2:	4606      	mov	r6, r0
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d0ae      	beq.n	8003d46 <setvbuf+0xba>
 8003de8:	464d      	mov	r5, r9
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df0:	81a3      	strh	r3, [r4, #12]
 8003df2:	e7d0      	b.n	8003d96 <setvbuf+0x10a>
 8003df4:	2500      	movs	r5, #0
 8003df6:	e7a8      	b.n	8003d4a <setvbuf+0xbe>
 8003df8:	60a3      	str	r3, [r4, #8]
 8003dfa:	e7e8      	b.n	8003dce <setvbuf+0x142>
 8003dfc:	f04f 35ff 	mov.w	r5, #4294967295
 8003e00:	e7b9      	b.n	8003d76 <setvbuf+0xea>
 8003e02:	2500      	movs	r5, #0
 8003e04:	e7b7      	b.n	8003d76 <setvbuf+0xea>
 8003e06:	bf00      	nop
 8003e08:	2000000c 	.word	0x2000000c
 8003e0c:	08004750 	.word	0x08004750
 8003e10:	08004770 	.word	0x08004770
 8003e14:	08004730 	.word	0x08004730

08003e18 <__swbuf_r>:
 8003e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1a:	460e      	mov	r6, r1
 8003e1c:	4614      	mov	r4, r2
 8003e1e:	4605      	mov	r5, r0
 8003e20:	b118      	cbz	r0, 8003e2a <__swbuf_r+0x12>
 8003e22:	6983      	ldr	r3, [r0, #24]
 8003e24:	b90b      	cbnz	r3, 8003e2a <__swbuf_r+0x12>
 8003e26:	f000 f9d1 	bl	80041cc <__sinit>
 8003e2a:	4b21      	ldr	r3, [pc, #132]	; (8003eb0 <__swbuf_r+0x98>)
 8003e2c:	429c      	cmp	r4, r3
 8003e2e:	d12b      	bne.n	8003e88 <__swbuf_r+0x70>
 8003e30:	686c      	ldr	r4, [r5, #4]
 8003e32:	69a3      	ldr	r3, [r4, #24]
 8003e34:	60a3      	str	r3, [r4, #8]
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	071a      	lsls	r2, r3, #28
 8003e3a:	d52f      	bpl.n	8003e9c <__swbuf_r+0x84>
 8003e3c:	6923      	ldr	r3, [r4, #16]
 8003e3e:	b36b      	cbz	r3, 8003e9c <__swbuf_r+0x84>
 8003e40:	6923      	ldr	r3, [r4, #16]
 8003e42:	6820      	ldr	r0, [r4, #0]
 8003e44:	1ac0      	subs	r0, r0, r3
 8003e46:	6963      	ldr	r3, [r4, #20]
 8003e48:	b2f6      	uxtb	r6, r6
 8003e4a:	4283      	cmp	r3, r0
 8003e4c:	4637      	mov	r7, r6
 8003e4e:	dc04      	bgt.n	8003e5a <__swbuf_r+0x42>
 8003e50:	4621      	mov	r1, r4
 8003e52:	4628      	mov	r0, r5
 8003e54:	f000 f926 	bl	80040a4 <_fflush_r>
 8003e58:	bb30      	cbnz	r0, 8003ea8 <__swbuf_r+0x90>
 8003e5a:	68a3      	ldr	r3, [r4, #8]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	60a3      	str	r3, [r4, #8]
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	6022      	str	r2, [r4, #0]
 8003e66:	701e      	strb	r6, [r3, #0]
 8003e68:	6963      	ldr	r3, [r4, #20]
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	4283      	cmp	r3, r0
 8003e6e:	d004      	beq.n	8003e7a <__swbuf_r+0x62>
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	07db      	lsls	r3, r3, #31
 8003e74:	d506      	bpl.n	8003e84 <__swbuf_r+0x6c>
 8003e76:	2e0a      	cmp	r6, #10
 8003e78:	d104      	bne.n	8003e84 <__swbuf_r+0x6c>
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	f000 f911 	bl	80040a4 <_fflush_r>
 8003e82:	b988      	cbnz	r0, 8003ea8 <__swbuf_r+0x90>
 8003e84:	4638      	mov	r0, r7
 8003e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <__swbuf_r+0x9c>)
 8003e8a:	429c      	cmp	r4, r3
 8003e8c:	d101      	bne.n	8003e92 <__swbuf_r+0x7a>
 8003e8e:	68ac      	ldr	r4, [r5, #8]
 8003e90:	e7cf      	b.n	8003e32 <__swbuf_r+0x1a>
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <__swbuf_r+0xa0>)
 8003e94:	429c      	cmp	r4, r3
 8003e96:	bf08      	it	eq
 8003e98:	68ec      	ldreq	r4, [r5, #12]
 8003e9a:	e7ca      	b.n	8003e32 <__swbuf_r+0x1a>
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	f000 f80c 	bl	8003ebc <__swsetup_r>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d0cb      	beq.n	8003e40 <__swbuf_r+0x28>
 8003ea8:	f04f 37ff 	mov.w	r7, #4294967295
 8003eac:	e7ea      	b.n	8003e84 <__swbuf_r+0x6c>
 8003eae:	bf00      	nop
 8003eb0:	08004750 	.word	0x08004750
 8003eb4:	08004770 	.word	0x08004770
 8003eb8:	08004730 	.word	0x08004730

08003ebc <__swsetup_r>:
 8003ebc:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <__swsetup_r+0xcc>)
 8003ebe:	b570      	push	{r4, r5, r6, lr}
 8003ec0:	681d      	ldr	r5, [r3, #0]
 8003ec2:	4606      	mov	r6, r0
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	b125      	cbz	r5, 8003ed2 <__swsetup_r+0x16>
 8003ec8:	69ab      	ldr	r3, [r5, #24]
 8003eca:	b913      	cbnz	r3, 8003ed2 <__swsetup_r+0x16>
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f000 f97d 	bl	80041cc <__sinit>
 8003ed2:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <__swsetup_r+0xd0>)
 8003ed4:	429c      	cmp	r4, r3
 8003ed6:	d10f      	bne.n	8003ef8 <__swsetup_r+0x3c>
 8003ed8:	686c      	ldr	r4, [r5, #4]
 8003eda:	89a3      	ldrh	r3, [r4, #12]
 8003edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ee0:	0719      	lsls	r1, r3, #28
 8003ee2:	d42c      	bmi.n	8003f3e <__swsetup_r+0x82>
 8003ee4:	06dd      	lsls	r5, r3, #27
 8003ee6:	d411      	bmi.n	8003f0c <__swsetup_r+0x50>
 8003ee8:	2309      	movs	r3, #9
 8003eea:	6033      	str	r3, [r6, #0]
 8003eec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ef0:	81a3      	strh	r3, [r4, #12]
 8003ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef6:	e03e      	b.n	8003f76 <__swsetup_r+0xba>
 8003ef8:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <__swsetup_r+0xd4>)
 8003efa:	429c      	cmp	r4, r3
 8003efc:	d101      	bne.n	8003f02 <__swsetup_r+0x46>
 8003efe:	68ac      	ldr	r4, [r5, #8]
 8003f00:	e7eb      	b.n	8003eda <__swsetup_r+0x1e>
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <__swsetup_r+0xd8>)
 8003f04:	429c      	cmp	r4, r3
 8003f06:	bf08      	it	eq
 8003f08:	68ec      	ldreq	r4, [r5, #12]
 8003f0a:	e7e6      	b.n	8003eda <__swsetup_r+0x1e>
 8003f0c:	0758      	lsls	r0, r3, #29
 8003f0e:	d512      	bpl.n	8003f36 <__swsetup_r+0x7a>
 8003f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f12:	b141      	cbz	r1, 8003f26 <__swsetup_r+0x6a>
 8003f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f18:	4299      	cmp	r1, r3
 8003f1a:	d002      	beq.n	8003f22 <__swsetup_r+0x66>
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	f000 fa61 	bl	80043e4 <_free_r>
 8003f22:	2300      	movs	r3, #0
 8003f24:	6363      	str	r3, [r4, #52]	; 0x34
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f2c:	81a3      	strh	r3, [r4, #12]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	6063      	str	r3, [r4, #4]
 8003f32:	6923      	ldr	r3, [r4, #16]
 8003f34:	6023      	str	r3, [r4, #0]
 8003f36:	89a3      	ldrh	r3, [r4, #12]
 8003f38:	f043 0308 	orr.w	r3, r3, #8
 8003f3c:	81a3      	strh	r3, [r4, #12]
 8003f3e:	6923      	ldr	r3, [r4, #16]
 8003f40:	b94b      	cbnz	r3, 8003f56 <__swsetup_r+0x9a>
 8003f42:	89a3      	ldrh	r3, [r4, #12]
 8003f44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4c:	d003      	beq.n	8003f56 <__swsetup_r+0x9a>
 8003f4e:	4621      	mov	r1, r4
 8003f50:	4630      	mov	r0, r6
 8003f52:	f000 f9ff 	bl	8004354 <__smakebuf_r>
 8003f56:	89a0      	ldrh	r0, [r4, #12]
 8003f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f5c:	f010 0301 	ands.w	r3, r0, #1
 8003f60:	d00a      	beq.n	8003f78 <__swsetup_r+0xbc>
 8003f62:	2300      	movs	r3, #0
 8003f64:	60a3      	str	r3, [r4, #8]
 8003f66:	6963      	ldr	r3, [r4, #20]
 8003f68:	425b      	negs	r3, r3
 8003f6a:	61a3      	str	r3, [r4, #24]
 8003f6c:	6923      	ldr	r3, [r4, #16]
 8003f6e:	b943      	cbnz	r3, 8003f82 <__swsetup_r+0xc6>
 8003f70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f74:	d1ba      	bne.n	8003eec <__swsetup_r+0x30>
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	0781      	lsls	r1, r0, #30
 8003f7a:	bf58      	it	pl
 8003f7c:	6963      	ldrpl	r3, [r4, #20]
 8003f7e:	60a3      	str	r3, [r4, #8]
 8003f80:	e7f4      	b.n	8003f6c <__swsetup_r+0xb0>
 8003f82:	2000      	movs	r0, #0
 8003f84:	e7f7      	b.n	8003f76 <__swsetup_r+0xba>
 8003f86:	bf00      	nop
 8003f88:	2000000c 	.word	0x2000000c
 8003f8c:	08004750 	.word	0x08004750
 8003f90:	08004770 	.word	0x08004770
 8003f94:	08004730 	.word	0x08004730

08003f98 <__sflush_r>:
 8003f98:	898a      	ldrh	r2, [r1, #12]
 8003f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9e:	4605      	mov	r5, r0
 8003fa0:	0710      	lsls	r0, r2, #28
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	d458      	bmi.n	8004058 <__sflush_r+0xc0>
 8003fa6:	684b      	ldr	r3, [r1, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	dc05      	bgt.n	8003fb8 <__sflush_r+0x20>
 8003fac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	dc02      	bgt.n	8003fb8 <__sflush_r+0x20>
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fba:	2e00      	cmp	r6, #0
 8003fbc:	d0f9      	beq.n	8003fb2 <__sflush_r+0x1a>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fc4:	682f      	ldr	r7, [r5, #0]
 8003fc6:	602b      	str	r3, [r5, #0]
 8003fc8:	d032      	beq.n	8004030 <__sflush_r+0x98>
 8003fca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	075a      	lsls	r2, r3, #29
 8003fd0:	d505      	bpl.n	8003fde <__sflush_r+0x46>
 8003fd2:	6863      	ldr	r3, [r4, #4]
 8003fd4:	1ac0      	subs	r0, r0, r3
 8003fd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fd8:	b10b      	cbz	r3, 8003fde <__sflush_r+0x46>
 8003fda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fdc:	1ac0      	subs	r0, r0, r3
 8003fde:	2300      	movs	r3, #0
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fe4:	6a21      	ldr	r1, [r4, #32]
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	47b0      	blx	r6
 8003fea:	1c43      	adds	r3, r0, #1
 8003fec:	89a3      	ldrh	r3, [r4, #12]
 8003fee:	d106      	bne.n	8003ffe <__sflush_r+0x66>
 8003ff0:	6829      	ldr	r1, [r5, #0]
 8003ff2:	291d      	cmp	r1, #29
 8003ff4:	d82c      	bhi.n	8004050 <__sflush_r+0xb8>
 8003ff6:	4a2a      	ldr	r2, [pc, #168]	; (80040a0 <__sflush_r+0x108>)
 8003ff8:	40ca      	lsrs	r2, r1
 8003ffa:	07d6      	lsls	r6, r2, #31
 8003ffc:	d528      	bpl.n	8004050 <__sflush_r+0xb8>
 8003ffe:	2200      	movs	r2, #0
 8004000:	6062      	str	r2, [r4, #4]
 8004002:	04d9      	lsls	r1, r3, #19
 8004004:	6922      	ldr	r2, [r4, #16]
 8004006:	6022      	str	r2, [r4, #0]
 8004008:	d504      	bpl.n	8004014 <__sflush_r+0x7c>
 800400a:	1c42      	adds	r2, r0, #1
 800400c:	d101      	bne.n	8004012 <__sflush_r+0x7a>
 800400e:	682b      	ldr	r3, [r5, #0]
 8004010:	b903      	cbnz	r3, 8004014 <__sflush_r+0x7c>
 8004012:	6560      	str	r0, [r4, #84]	; 0x54
 8004014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004016:	602f      	str	r7, [r5, #0]
 8004018:	2900      	cmp	r1, #0
 800401a:	d0ca      	beq.n	8003fb2 <__sflush_r+0x1a>
 800401c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004020:	4299      	cmp	r1, r3
 8004022:	d002      	beq.n	800402a <__sflush_r+0x92>
 8004024:	4628      	mov	r0, r5
 8004026:	f000 f9dd 	bl	80043e4 <_free_r>
 800402a:	2000      	movs	r0, #0
 800402c:	6360      	str	r0, [r4, #52]	; 0x34
 800402e:	e7c1      	b.n	8003fb4 <__sflush_r+0x1c>
 8004030:	6a21      	ldr	r1, [r4, #32]
 8004032:	2301      	movs	r3, #1
 8004034:	4628      	mov	r0, r5
 8004036:	47b0      	blx	r6
 8004038:	1c41      	adds	r1, r0, #1
 800403a:	d1c7      	bne.n	8003fcc <__sflush_r+0x34>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0c4      	beq.n	8003fcc <__sflush_r+0x34>
 8004042:	2b1d      	cmp	r3, #29
 8004044:	d001      	beq.n	800404a <__sflush_r+0xb2>
 8004046:	2b16      	cmp	r3, #22
 8004048:	d101      	bne.n	800404e <__sflush_r+0xb6>
 800404a:	602f      	str	r7, [r5, #0]
 800404c:	e7b1      	b.n	8003fb2 <__sflush_r+0x1a>
 800404e:	89a3      	ldrh	r3, [r4, #12]
 8004050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004054:	81a3      	strh	r3, [r4, #12]
 8004056:	e7ad      	b.n	8003fb4 <__sflush_r+0x1c>
 8004058:	690f      	ldr	r7, [r1, #16]
 800405a:	2f00      	cmp	r7, #0
 800405c:	d0a9      	beq.n	8003fb2 <__sflush_r+0x1a>
 800405e:	0793      	lsls	r3, r2, #30
 8004060:	680e      	ldr	r6, [r1, #0]
 8004062:	bf08      	it	eq
 8004064:	694b      	ldreq	r3, [r1, #20]
 8004066:	600f      	str	r7, [r1, #0]
 8004068:	bf18      	it	ne
 800406a:	2300      	movne	r3, #0
 800406c:	eba6 0807 	sub.w	r8, r6, r7
 8004070:	608b      	str	r3, [r1, #8]
 8004072:	f1b8 0f00 	cmp.w	r8, #0
 8004076:	dd9c      	ble.n	8003fb2 <__sflush_r+0x1a>
 8004078:	6a21      	ldr	r1, [r4, #32]
 800407a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800407c:	4643      	mov	r3, r8
 800407e:	463a      	mov	r2, r7
 8004080:	4628      	mov	r0, r5
 8004082:	47b0      	blx	r6
 8004084:	2800      	cmp	r0, #0
 8004086:	dc06      	bgt.n	8004096 <__sflush_r+0xfe>
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800408e:	81a3      	strh	r3, [r4, #12]
 8004090:	f04f 30ff 	mov.w	r0, #4294967295
 8004094:	e78e      	b.n	8003fb4 <__sflush_r+0x1c>
 8004096:	4407      	add	r7, r0
 8004098:	eba8 0800 	sub.w	r8, r8, r0
 800409c:	e7e9      	b.n	8004072 <__sflush_r+0xda>
 800409e:	bf00      	nop
 80040a0:	20400001 	.word	0x20400001

080040a4 <_fflush_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	690b      	ldr	r3, [r1, #16]
 80040a8:	4605      	mov	r5, r0
 80040aa:	460c      	mov	r4, r1
 80040ac:	b913      	cbnz	r3, 80040b4 <_fflush_r+0x10>
 80040ae:	2500      	movs	r5, #0
 80040b0:	4628      	mov	r0, r5
 80040b2:	bd38      	pop	{r3, r4, r5, pc}
 80040b4:	b118      	cbz	r0, 80040be <_fflush_r+0x1a>
 80040b6:	6983      	ldr	r3, [r0, #24]
 80040b8:	b90b      	cbnz	r3, 80040be <_fflush_r+0x1a>
 80040ba:	f000 f887 	bl	80041cc <__sinit>
 80040be:	4b14      	ldr	r3, [pc, #80]	; (8004110 <_fflush_r+0x6c>)
 80040c0:	429c      	cmp	r4, r3
 80040c2:	d11b      	bne.n	80040fc <_fflush_r+0x58>
 80040c4:	686c      	ldr	r4, [r5, #4]
 80040c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0ef      	beq.n	80040ae <_fflush_r+0xa>
 80040ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040d0:	07d0      	lsls	r0, r2, #31
 80040d2:	d404      	bmi.n	80040de <_fflush_r+0x3a>
 80040d4:	0599      	lsls	r1, r3, #22
 80040d6:	d402      	bmi.n	80040de <_fflush_r+0x3a>
 80040d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040da:	f000 f915 	bl	8004308 <__retarget_lock_acquire_recursive>
 80040de:	4628      	mov	r0, r5
 80040e0:	4621      	mov	r1, r4
 80040e2:	f7ff ff59 	bl	8003f98 <__sflush_r>
 80040e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040e8:	07da      	lsls	r2, r3, #31
 80040ea:	4605      	mov	r5, r0
 80040ec:	d4e0      	bmi.n	80040b0 <_fflush_r+0xc>
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	059b      	lsls	r3, r3, #22
 80040f2:	d4dd      	bmi.n	80040b0 <_fflush_r+0xc>
 80040f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040f6:	f000 f908 	bl	800430a <__retarget_lock_release_recursive>
 80040fa:	e7d9      	b.n	80040b0 <_fflush_r+0xc>
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <_fflush_r+0x70>)
 80040fe:	429c      	cmp	r4, r3
 8004100:	d101      	bne.n	8004106 <_fflush_r+0x62>
 8004102:	68ac      	ldr	r4, [r5, #8]
 8004104:	e7df      	b.n	80040c6 <_fflush_r+0x22>
 8004106:	4b04      	ldr	r3, [pc, #16]	; (8004118 <_fflush_r+0x74>)
 8004108:	429c      	cmp	r4, r3
 800410a:	bf08      	it	eq
 800410c:	68ec      	ldreq	r4, [r5, #12]
 800410e:	e7da      	b.n	80040c6 <_fflush_r+0x22>
 8004110:	08004750 	.word	0x08004750
 8004114:	08004770 	.word	0x08004770
 8004118:	08004730 	.word	0x08004730

0800411c <std>:
 800411c:	2300      	movs	r3, #0
 800411e:	b510      	push	{r4, lr}
 8004120:	4604      	mov	r4, r0
 8004122:	e9c0 3300 	strd	r3, r3, [r0]
 8004126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800412a:	6083      	str	r3, [r0, #8]
 800412c:	8181      	strh	r1, [r0, #12]
 800412e:	6643      	str	r3, [r0, #100]	; 0x64
 8004130:	81c2      	strh	r2, [r0, #14]
 8004132:	6183      	str	r3, [r0, #24]
 8004134:	4619      	mov	r1, r3
 8004136:	2208      	movs	r2, #8
 8004138:	305c      	adds	r0, #92	; 0x5c
 800413a:	f7ff fd21 	bl	8003b80 <memset>
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <std+0x38>)
 8004140:	6263      	str	r3, [r4, #36]	; 0x24
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <std+0x3c>)
 8004144:	62a3      	str	r3, [r4, #40]	; 0x28
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <std+0x40>)
 8004148:	62e3      	str	r3, [r4, #44]	; 0x2c
 800414a:	4b05      	ldr	r3, [pc, #20]	; (8004160 <std+0x44>)
 800414c:	6224      	str	r4, [r4, #32]
 800414e:	6323      	str	r3, [r4, #48]	; 0x30
 8004150:	bd10      	pop	{r4, pc}
 8004152:	bf00      	nop
 8004154:	08004559 	.word	0x08004559
 8004158:	0800457b 	.word	0x0800457b
 800415c:	080045b3 	.word	0x080045b3
 8004160:	080045d7 	.word	0x080045d7

08004164 <_cleanup_r>:
 8004164:	4901      	ldr	r1, [pc, #4]	; (800416c <_cleanup_r+0x8>)
 8004166:	f000 b8af 	b.w	80042c8 <_fwalk_reent>
 800416a:	bf00      	nop
 800416c:	080040a5 	.word	0x080040a5

08004170 <__sfmoreglue>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	1e4a      	subs	r2, r1, #1
 8004174:	2568      	movs	r5, #104	; 0x68
 8004176:	4355      	muls	r5, r2
 8004178:	460e      	mov	r6, r1
 800417a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800417e:	f000 f981 	bl	8004484 <_malloc_r>
 8004182:	4604      	mov	r4, r0
 8004184:	b140      	cbz	r0, 8004198 <__sfmoreglue+0x28>
 8004186:	2100      	movs	r1, #0
 8004188:	e9c0 1600 	strd	r1, r6, [r0]
 800418c:	300c      	adds	r0, #12
 800418e:	60a0      	str	r0, [r4, #8]
 8004190:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004194:	f7ff fcf4 	bl	8003b80 <memset>
 8004198:	4620      	mov	r0, r4
 800419a:	bd70      	pop	{r4, r5, r6, pc}

0800419c <__sfp_lock_acquire>:
 800419c:	4801      	ldr	r0, [pc, #4]	; (80041a4 <__sfp_lock_acquire+0x8>)
 800419e:	f000 b8b3 	b.w	8004308 <__retarget_lock_acquire_recursive>
 80041a2:	bf00      	nop
 80041a4:	20000248 	.word	0x20000248

080041a8 <__sfp_lock_release>:
 80041a8:	4801      	ldr	r0, [pc, #4]	; (80041b0 <__sfp_lock_release+0x8>)
 80041aa:	f000 b8ae 	b.w	800430a <__retarget_lock_release_recursive>
 80041ae:	bf00      	nop
 80041b0:	20000248 	.word	0x20000248

080041b4 <__sinit_lock_acquire>:
 80041b4:	4801      	ldr	r0, [pc, #4]	; (80041bc <__sinit_lock_acquire+0x8>)
 80041b6:	f000 b8a7 	b.w	8004308 <__retarget_lock_acquire_recursive>
 80041ba:	bf00      	nop
 80041bc:	20000243 	.word	0x20000243

080041c0 <__sinit_lock_release>:
 80041c0:	4801      	ldr	r0, [pc, #4]	; (80041c8 <__sinit_lock_release+0x8>)
 80041c2:	f000 b8a2 	b.w	800430a <__retarget_lock_release_recursive>
 80041c6:	bf00      	nop
 80041c8:	20000243 	.word	0x20000243

080041cc <__sinit>:
 80041cc:	b510      	push	{r4, lr}
 80041ce:	4604      	mov	r4, r0
 80041d0:	f7ff fff0 	bl	80041b4 <__sinit_lock_acquire>
 80041d4:	69a3      	ldr	r3, [r4, #24]
 80041d6:	b11b      	cbz	r3, 80041e0 <__sinit+0x14>
 80041d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041dc:	f7ff bff0 	b.w	80041c0 <__sinit_lock_release>
 80041e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80041e4:	6523      	str	r3, [r4, #80]	; 0x50
 80041e6:	4b13      	ldr	r3, [pc, #76]	; (8004234 <__sinit+0x68>)
 80041e8:	4a13      	ldr	r2, [pc, #76]	; (8004238 <__sinit+0x6c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80041ee:	42a3      	cmp	r3, r4
 80041f0:	bf04      	itt	eq
 80041f2:	2301      	moveq	r3, #1
 80041f4:	61a3      	streq	r3, [r4, #24]
 80041f6:	4620      	mov	r0, r4
 80041f8:	f000 f820 	bl	800423c <__sfp>
 80041fc:	6060      	str	r0, [r4, #4]
 80041fe:	4620      	mov	r0, r4
 8004200:	f000 f81c 	bl	800423c <__sfp>
 8004204:	60a0      	str	r0, [r4, #8]
 8004206:	4620      	mov	r0, r4
 8004208:	f000 f818 	bl	800423c <__sfp>
 800420c:	2200      	movs	r2, #0
 800420e:	60e0      	str	r0, [r4, #12]
 8004210:	2104      	movs	r1, #4
 8004212:	6860      	ldr	r0, [r4, #4]
 8004214:	f7ff ff82 	bl	800411c <std>
 8004218:	68a0      	ldr	r0, [r4, #8]
 800421a:	2201      	movs	r2, #1
 800421c:	2109      	movs	r1, #9
 800421e:	f7ff ff7d 	bl	800411c <std>
 8004222:	68e0      	ldr	r0, [r4, #12]
 8004224:	2202      	movs	r2, #2
 8004226:	2112      	movs	r1, #18
 8004228:	f7ff ff78 	bl	800411c <std>
 800422c:	2301      	movs	r3, #1
 800422e:	61a3      	str	r3, [r4, #24]
 8004230:	e7d2      	b.n	80041d8 <__sinit+0xc>
 8004232:	bf00      	nop
 8004234:	0800472c 	.word	0x0800472c
 8004238:	08004165 	.word	0x08004165

0800423c <__sfp>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	4607      	mov	r7, r0
 8004240:	f7ff ffac 	bl	800419c <__sfp_lock_acquire>
 8004244:	4b1e      	ldr	r3, [pc, #120]	; (80042c0 <__sfp+0x84>)
 8004246:	681e      	ldr	r6, [r3, #0]
 8004248:	69b3      	ldr	r3, [r6, #24]
 800424a:	b913      	cbnz	r3, 8004252 <__sfp+0x16>
 800424c:	4630      	mov	r0, r6
 800424e:	f7ff ffbd 	bl	80041cc <__sinit>
 8004252:	3648      	adds	r6, #72	; 0x48
 8004254:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004258:	3b01      	subs	r3, #1
 800425a:	d503      	bpl.n	8004264 <__sfp+0x28>
 800425c:	6833      	ldr	r3, [r6, #0]
 800425e:	b30b      	cbz	r3, 80042a4 <__sfp+0x68>
 8004260:	6836      	ldr	r6, [r6, #0]
 8004262:	e7f7      	b.n	8004254 <__sfp+0x18>
 8004264:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004268:	b9d5      	cbnz	r5, 80042a0 <__sfp+0x64>
 800426a:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <__sfp+0x88>)
 800426c:	60e3      	str	r3, [r4, #12]
 800426e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004272:	6665      	str	r5, [r4, #100]	; 0x64
 8004274:	f000 f847 	bl	8004306 <__retarget_lock_init_recursive>
 8004278:	f7ff ff96 	bl	80041a8 <__sfp_lock_release>
 800427c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004280:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004284:	6025      	str	r5, [r4, #0]
 8004286:	61a5      	str	r5, [r4, #24]
 8004288:	2208      	movs	r2, #8
 800428a:	4629      	mov	r1, r5
 800428c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004290:	f7ff fc76 	bl	8003b80 <memset>
 8004294:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004298:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800429c:	4620      	mov	r0, r4
 800429e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042a0:	3468      	adds	r4, #104	; 0x68
 80042a2:	e7d9      	b.n	8004258 <__sfp+0x1c>
 80042a4:	2104      	movs	r1, #4
 80042a6:	4638      	mov	r0, r7
 80042a8:	f7ff ff62 	bl	8004170 <__sfmoreglue>
 80042ac:	4604      	mov	r4, r0
 80042ae:	6030      	str	r0, [r6, #0]
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d1d5      	bne.n	8004260 <__sfp+0x24>
 80042b4:	f7ff ff78 	bl	80041a8 <__sfp_lock_release>
 80042b8:	230c      	movs	r3, #12
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	e7ee      	b.n	800429c <__sfp+0x60>
 80042be:	bf00      	nop
 80042c0:	0800472c 	.word	0x0800472c
 80042c4:	ffff0001 	.word	0xffff0001

080042c8 <_fwalk_reent>:
 80042c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042cc:	4606      	mov	r6, r0
 80042ce:	4688      	mov	r8, r1
 80042d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80042d4:	2700      	movs	r7, #0
 80042d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042da:	f1b9 0901 	subs.w	r9, r9, #1
 80042de:	d505      	bpl.n	80042ec <_fwalk_reent+0x24>
 80042e0:	6824      	ldr	r4, [r4, #0]
 80042e2:	2c00      	cmp	r4, #0
 80042e4:	d1f7      	bne.n	80042d6 <_fwalk_reent+0xe>
 80042e6:	4638      	mov	r0, r7
 80042e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042ec:	89ab      	ldrh	r3, [r5, #12]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d907      	bls.n	8004302 <_fwalk_reent+0x3a>
 80042f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042f6:	3301      	adds	r3, #1
 80042f8:	d003      	beq.n	8004302 <_fwalk_reent+0x3a>
 80042fa:	4629      	mov	r1, r5
 80042fc:	4630      	mov	r0, r6
 80042fe:	47c0      	blx	r8
 8004300:	4307      	orrs	r7, r0
 8004302:	3568      	adds	r5, #104	; 0x68
 8004304:	e7e9      	b.n	80042da <_fwalk_reent+0x12>

08004306 <__retarget_lock_init_recursive>:
 8004306:	4770      	bx	lr

08004308 <__retarget_lock_acquire_recursive>:
 8004308:	4770      	bx	lr

0800430a <__retarget_lock_release_recursive>:
 800430a:	4770      	bx	lr

0800430c <__swhatbuf_r>:
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	460e      	mov	r6, r1
 8004310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004314:	2900      	cmp	r1, #0
 8004316:	b096      	sub	sp, #88	; 0x58
 8004318:	4614      	mov	r4, r2
 800431a:	461d      	mov	r5, r3
 800431c:	da07      	bge.n	800432e <__swhatbuf_r+0x22>
 800431e:	2300      	movs	r3, #0
 8004320:	602b      	str	r3, [r5, #0]
 8004322:	89b3      	ldrh	r3, [r6, #12]
 8004324:	061a      	lsls	r2, r3, #24
 8004326:	d410      	bmi.n	800434a <__swhatbuf_r+0x3e>
 8004328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800432c:	e00e      	b.n	800434c <__swhatbuf_r+0x40>
 800432e:	466a      	mov	r2, sp
 8004330:	f000 f978 	bl	8004624 <_fstat_r>
 8004334:	2800      	cmp	r0, #0
 8004336:	dbf2      	blt.n	800431e <__swhatbuf_r+0x12>
 8004338:	9a01      	ldr	r2, [sp, #4]
 800433a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800433e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004342:	425a      	negs	r2, r3
 8004344:	415a      	adcs	r2, r3
 8004346:	602a      	str	r2, [r5, #0]
 8004348:	e7ee      	b.n	8004328 <__swhatbuf_r+0x1c>
 800434a:	2340      	movs	r3, #64	; 0x40
 800434c:	2000      	movs	r0, #0
 800434e:	6023      	str	r3, [r4, #0]
 8004350:	b016      	add	sp, #88	; 0x58
 8004352:	bd70      	pop	{r4, r5, r6, pc}

08004354 <__smakebuf_r>:
 8004354:	898b      	ldrh	r3, [r1, #12]
 8004356:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004358:	079d      	lsls	r5, r3, #30
 800435a:	4606      	mov	r6, r0
 800435c:	460c      	mov	r4, r1
 800435e:	d507      	bpl.n	8004370 <__smakebuf_r+0x1c>
 8004360:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	6123      	str	r3, [r4, #16]
 8004368:	2301      	movs	r3, #1
 800436a:	6163      	str	r3, [r4, #20]
 800436c:	b002      	add	sp, #8
 800436e:	bd70      	pop	{r4, r5, r6, pc}
 8004370:	ab01      	add	r3, sp, #4
 8004372:	466a      	mov	r2, sp
 8004374:	f7ff ffca 	bl	800430c <__swhatbuf_r>
 8004378:	9900      	ldr	r1, [sp, #0]
 800437a:	4605      	mov	r5, r0
 800437c:	4630      	mov	r0, r6
 800437e:	f000 f881 	bl	8004484 <_malloc_r>
 8004382:	b948      	cbnz	r0, 8004398 <__smakebuf_r+0x44>
 8004384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004388:	059a      	lsls	r2, r3, #22
 800438a:	d4ef      	bmi.n	800436c <__smakebuf_r+0x18>
 800438c:	f023 0303 	bic.w	r3, r3, #3
 8004390:	f043 0302 	orr.w	r3, r3, #2
 8004394:	81a3      	strh	r3, [r4, #12]
 8004396:	e7e3      	b.n	8004360 <__smakebuf_r+0xc>
 8004398:	4b0d      	ldr	r3, [pc, #52]	; (80043d0 <__smakebuf_r+0x7c>)
 800439a:	62b3      	str	r3, [r6, #40]	; 0x28
 800439c:	89a3      	ldrh	r3, [r4, #12]
 800439e:	6020      	str	r0, [r4, #0]
 80043a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a4:	81a3      	strh	r3, [r4, #12]
 80043a6:	9b00      	ldr	r3, [sp, #0]
 80043a8:	6163      	str	r3, [r4, #20]
 80043aa:	9b01      	ldr	r3, [sp, #4]
 80043ac:	6120      	str	r0, [r4, #16]
 80043ae:	b15b      	cbz	r3, 80043c8 <__smakebuf_r+0x74>
 80043b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043b4:	4630      	mov	r0, r6
 80043b6:	f000 f947 	bl	8004648 <_isatty_r>
 80043ba:	b128      	cbz	r0, 80043c8 <__smakebuf_r+0x74>
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	81a3      	strh	r3, [r4, #12]
 80043c8:	89a0      	ldrh	r0, [r4, #12]
 80043ca:	4305      	orrs	r5, r0
 80043cc:	81a5      	strh	r5, [r4, #12]
 80043ce:	e7cd      	b.n	800436c <__smakebuf_r+0x18>
 80043d0:	08004165 	.word	0x08004165

080043d4 <malloc>:
 80043d4:	4b02      	ldr	r3, [pc, #8]	; (80043e0 <malloc+0xc>)
 80043d6:	4601      	mov	r1, r0
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	f000 b853 	b.w	8004484 <_malloc_r>
 80043de:	bf00      	nop
 80043e0:	2000000c 	.word	0x2000000c

080043e4 <_free_r>:
 80043e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043e6:	2900      	cmp	r1, #0
 80043e8:	d048      	beq.n	800447c <_free_r+0x98>
 80043ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043ee:	9001      	str	r0, [sp, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f1a1 0404 	sub.w	r4, r1, #4
 80043f6:	bfb8      	it	lt
 80043f8:	18e4      	addlt	r4, r4, r3
 80043fa:	f000 f947 	bl	800468c <__malloc_lock>
 80043fe:	4a20      	ldr	r2, [pc, #128]	; (8004480 <_free_r+0x9c>)
 8004400:	9801      	ldr	r0, [sp, #4]
 8004402:	6813      	ldr	r3, [r2, #0]
 8004404:	4615      	mov	r5, r2
 8004406:	b933      	cbnz	r3, 8004416 <_free_r+0x32>
 8004408:	6063      	str	r3, [r4, #4]
 800440a:	6014      	str	r4, [r2, #0]
 800440c:	b003      	add	sp, #12
 800440e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004412:	f000 b941 	b.w	8004698 <__malloc_unlock>
 8004416:	42a3      	cmp	r3, r4
 8004418:	d90b      	bls.n	8004432 <_free_r+0x4e>
 800441a:	6821      	ldr	r1, [r4, #0]
 800441c:	1862      	adds	r2, r4, r1
 800441e:	4293      	cmp	r3, r2
 8004420:	bf04      	itt	eq
 8004422:	681a      	ldreq	r2, [r3, #0]
 8004424:	685b      	ldreq	r3, [r3, #4]
 8004426:	6063      	str	r3, [r4, #4]
 8004428:	bf04      	itt	eq
 800442a:	1852      	addeq	r2, r2, r1
 800442c:	6022      	streq	r2, [r4, #0]
 800442e:	602c      	str	r4, [r5, #0]
 8004430:	e7ec      	b.n	800440c <_free_r+0x28>
 8004432:	461a      	mov	r2, r3
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b10b      	cbz	r3, 800443c <_free_r+0x58>
 8004438:	42a3      	cmp	r3, r4
 800443a:	d9fa      	bls.n	8004432 <_free_r+0x4e>
 800443c:	6811      	ldr	r1, [r2, #0]
 800443e:	1855      	adds	r5, r2, r1
 8004440:	42a5      	cmp	r5, r4
 8004442:	d10b      	bne.n	800445c <_free_r+0x78>
 8004444:	6824      	ldr	r4, [r4, #0]
 8004446:	4421      	add	r1, r4
 8004448:	1854      	adds	r4, r2, r1
 800444a:	42a3      	cmp	r3, r4
 800444c:	6011      	str	r1, [r2, #0]
 800444e:	d1dd      	bne.n	800440c <_free_r+0x28>
 8004450:	681c      	ldr	r4, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	6053      	str	r3, [r2, #4]
 8004456:	4421      	add	r1, r4
 8004458:	6011      	str	r1, [r2, #0]
 800445a:	e7d7      	b.n	800440c <_free_r+0x28>
 800445c:	d902      	bls.n	8004464 <_free_r+0x80>
 800445e:	230c      	movs	r3, #12
 8004460:	6003      	str	r3, [r0, #0]
 8004462:	e7d3      	b.n	800440c <_free_r+0x28>
 8004464:	6825      	ldr	r5, [r4, #0]
 8004466:	1961      	adds	r1, r4, r5
 8004468:	428b      	cmp	r3, r1
 800446a:	bf04      	itt	eq
 800446c:	6819      	ldreq	r1, [r3, #0]
 800446e:	685b      	ldreq	r3, [r3, #4]
 8004470:	6063      	str	r3, [r4, #4]
 8004472:	bf04      	itt	eq
 8004474:	1949      	addeq	r1, r1, r5
 8004476:	6021      	streq	r1, [r4, #0]
 8004478:	6054      	str	r4, [r2, #4]
 800447a:	e7c7      	b.n	800440c <_free_r+0x28>
 800447c:	b003      	add	sp, #12
 800447e:	bd30      	pop	{r4, r5, pc}
 8004480:	20000090 	.word	0x20000090

08004484 <_malloc_r>:
 8004484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004486:	1ccd      	adds	r5, r1, #3
 8004488:	f025 0503 	bic.w	r5, r5, #3
 800448c:	3508      	adds	r5, #8
 800448e:	2d0c      	cmp	r5, #12
 8004490:	bf38      	it	cc
 8004492:	250c      	movcc	r5, #12
 8004494:	2d00      	cmp	r5, #0
 8004496:	4606      	mov	r6, r0
 8004498:	db01      	blt.n	800449e <_malloc_r+0x1a>
 800449a:	42a9      	cmp	r1, r5
 800449c:	d903      	bls.n	80044a6 <_malloc_r+0x22>
 800449e:	230c      	movs	r3, #12
 80044a0:	6033      	str	r3, [r6, #0]
 80044a2:	2000      	movs	r0, #0
 80044a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044a6:	f000 f8f1 	bl	800468c <__malloc_lock>
 80044aa:	4921      	ldr	r1, [pc, #132]	; (8004530 <_malloc_r+0xac>)
 80044ac:	680a      	ldr	r2, [r1, #0]
 80044ae:	4614      	mov	r4, r2
 80044b0:	b99c      	cbnz	r4, 80044da <_malloc_r+0x56>
 80044b2:	4f20      	ldr	r7, [pc, #128]	; (8004534 <_malloc_r+0xb0>)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	b923      	cbnz	r3, 80044c2 <_malloc_r+0x3e>
 80044b8:	4621      	mov	r1, r4
 80044ba:	4630      	mov	r0, r6
 80044bc:	f000 f83c 	bl	8004538 <_sbrk_r>
 80044c0:	6038      	str	r0, [r7, #0]
 80044c2:	4629      	mov	r1, r5
 80044c4:	4630      	mov	r0, r6
 80044c6:	f000 f837 	bl	8004538 <_sbrk_r>
 80044ca:	1c43      	adds	r3, r0, #1
 80044cc:	d123      	bne.n	8004516 <_malloc_r+0x92>
 80044ce:	230c      	movs	r3, #12
 80044d0:	6033      	str	r3, [r6, #0]
 80044d2:	4630      	mov	r0, r6
 80044d4:	f000 f8e0 	bl	8004698 <__malloc_unlock>
 80044d8:	e7e3      	b.n	80044a2 <_malloc_r+0x1e>
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	1b5b      	subs	r3, r3, r5
 80044de:	d417      	bmi.n	8004510 <_malloc_r+0x8c>
 80044e0:	2b0b      	cmp	r3, #11
 80044e2:	d903      	bls.n	80044ec <_malloc_r+0x68>
 80044e4:	6023      	str	r3, [r4, #0]
 80044e6:	441c      	add	r4, r3
 80044e8:	6025      	str	r5, [r4, #0]
 80044ea:	e004      	b.n	80044f6 <_malloc_r+0x72>
 80044ec:	6863      	ldr	r3, [r4, #4]
 80044ee:	42a2      	cmp	r2, r4
 80044f0:	bf0c      	ite	eq
 80044f2:	600b      	streq	r3, [r1, #0]
 80044f4:	6053      	strne	r3, [r2, #4]
 80044f6:	4630      	mov	r0, r6
 80044f8:	f000 f8ce 	bl	8004698 <__malloc_unlock>
 80044fc:	f104 000b 	add.w	r0, r4, #11
 8004500:	1d23      	adds	r3, r4, #4
 8004502:	f020 0007 	bic.w	r0, r0, #7
 8004506:	1ac2      	subs	r2, r0, r3
 8004508:	d0cc      	beq.n	80044a4 <_malloc_r+0x20>
 800450a:	1a1b      	subs	r3, r3, r0
 800450c:	50a3      	str	r3, [r4, r2]
 800450e:	e7c9      	b.n	80044a4 <_malloc_r+0x20>
 8004510:	4622      	mov	r2, r4
 8004512:	6864      	ldr	r4, [r4, #4]
 8004514:	e7cc      	b.n	80044b0 <_malloc_r+0x2c>
 8004516:	1cc4      	adds	r4, r0, #3
 8004518:	f024 0403 	bic.w	r4, r4, #3
 800451c:	42a0      	cmp	r0, r4
 800451e:	d0e3      	beq.n	80044e8 <_malloc_r+0x64>
 8004520:	1a21      	subs	r1, r4, r0
 8004522:	4630      	mov	r0, r6
 8004524:	f000 f808 	bl	8004538 <_sbrk_r>
 8004528:	3001      	adds	r0, #1
 800452a:	d1dd      	bne.n	80044e8 <_malloc_r+0x64>
 800452c:	e7cf      	b.n	80044ce <_malloc_r+0x4a>
 800452e:	bf00      	nop
 8004530:	20000090 	.word	0x20000090
 8004534:	20000094 	.word	0x20000094

08004538 <_sbrk_r>:
 8004538:	b538      	push	{r3, r4, r5, lr}
 800453a:	4d06      	ldr	r5, [pc, #24]	; (8004554 <_sbrk_r+0x1c>)
 800453c:	2300      	movs	r3, #0
 800453e:	4604      	mov	r4, r0
 8004540:	4608      	mov	r0, r1
 8004542:	602b      	str	r3, [r5, #0]
 8004544:	f7fc fa8a 	bl	8000a5c <_sbrk>
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	d102      	bne.n	8004552 <_sbrk_r+0x1a>
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	b103      	cbz	r3, 8004552 <_sbrk_r+0x1a>
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	2000024c 	.word	0x2000024c

08004558 <__sread>:
 8004558:	b510      	push	{r4, lr}
 800455a:	460c      	mov	r4, r1
 800455c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004560:	f000 f8a0 	bl	80046a4 <_read_r>
 8004564:	2800      	cmp	r0, #0
 8004566:	bfab      	itete	ge
 8004568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800456a:	89a3      	ldrhlt	r3, [r4, #12]
 800456c:	181b      	addge	r3, r3, r0
 800456e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004572:	bfac      	ite	ge
 8004574:	6563      	strge	r3, [r4, #84]	; 0x54
 8004576:	81a3      	strhlt	r3, [r4, #12]
 8004578:	bd10      	pop	{r4, pc}

0800457a <__swrite>:
 800457a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800457e:	461f      	mov	r7, r3
 8004580:	898b      	ldrh	r3, [r1, #12]
 8004582:	05db      	lsls	r3, r3, #23
 8004584:	4605      	mov	r5, r0
 8004586:	460c      	mov	r4, r1
 8004588:	4616      	mov	r6, r2
 800458a:	d505      	bpl.n	8004598 <__swrite+0x1e>
 800458c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004590:	2302      	movs	r3, #2
 8004592:	2200      	movs	r2, #0
 8004594:	f000 f868 	bl	8004668 <_lseek_r>
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800459e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045a2:	81a3      	strh	r3, [r4, #12]
 80045a4:	4632      	mov	r2, r6
 80045a6:	463b      	mov	r3, r7
 80045a8:	4628      	mov	r0, r5
 80045aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ae:	f000 b817 	b.w	80045e0 <_write_r>

080045b2 <__sseek>:
 80045b2:	b510      	push	{r4, lr}
 80045b4:	460c      	mov	r4, r1
 80045b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ba:	f000 f855 	bl	8004668 <_lseek_r>
 80045be:	1c43      	adds	r3, r0, #1
 80045c0:	89a3      	ldrh	r3, [r4, #12]
 80045c2:	bf15      	itete	ne
 80045c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80045c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045ce:	81a3      	strheq	r3, [r4, #12]
 80045d0:	bf18      	it	ne
 80045d2:	81a3      	strhne	r3, [r4, #12]
 80045d4:	bd10      	pop	{r4, pc}

080045d6 <__sclose>:
 80045d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045da:	f000 b813 	b.w	8004604 <_close_r>
	...

080045e0 <_write_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4d07      	ldr	r5, [pc, #28]	; (8004600 <_write_r+0x20>)
 80045e4:	4604      	mov	r4, r0
 80045e6:	4608      	mov	r0, r1
 80045e8:	4611      	mov	r1, r2
 80045ea:	2200      	movs	r2, #0
 80045ec:	602a      	str	r2, [r5, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f7fc f86e 	bl	80006d0 <_write>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	d102      	bne.n	80045fe <_write_r+0x1e>
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	b103      	cbz	r3, 80045fe <_write_r+0x1e>
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	bd38      	pop	{r3, r4, r5, pc}
 8004600:	2000024c 	.word	0x2000024c

08004604 <_close_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	4d06      	ldr	r5, [pc, #24]	; (8004620 <_close_r+0x1c>)
 8004608:	2300      	movs	r3, #0
 800460a:	4604      	mov	r4, r0
 800460c:	4608      	mov	r0, r1
 800460e:	602b      	str	r3, [r5, #0]
 8004610:	f7fc f9f0 	bl	80009f4 <_close>
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	d102      	bne.n	800461e <_close_r+0x1a>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	b103      	cbz	r3, 800461e <_close_r+0x1a>
 800461c:	6023      	str	r3, [r4, #0]
 800461e:	bd38      	pop	{r3, r4, r5, pc}
 8004620:	2000024c 	.word	0x2000024c

08004624 <_fstat_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	4d07      	ldr	r5, [pc, #28]	; (8004644 <_fstat_r+0x20>)
 8004628:	2300      	movs	r3, #0
 800462a:	4604      	mov	r4, r0
 800462c:	4608      	mov	r0, r1
 800462e:	4611      	mov	r1, r2
 8004630:	602b      	str	r3, [r5, #0]
 8004632:	f7fc f9eb 	bl	8000a0c <_fstat>
 8004636:	1c43      	adds	r3, r0, #1
 8004638:	d102      	bne.n	8004640 <_fstat_r+0x1c>
 800463a:	682b      	ldr	r3, [r5, #0]
 800463c:	b103      	cbz	r3, 8004640 <_fstat_r+0x1c>
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	bd38      	pop	{r3, r4, r5, pc}
 8004642:	bf00      	nop
 8004644:	2000024c 	.word	0x2000024c

08004648 <_isatty_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4d06      	ldr	r5, [pc, #24]	; (8004664 <_isatty_r+0x1c>)
 800464c:	2300      	movs	r3, #0
 800464e:	4604      	mov	r4, r0
 8004650:	4608      	mov	r0, r1
 8004652:	602b      	str	r3, [r5, #0]
 8004654:	f7fc f9ea 	bl	8000a2c <_isatty>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d102      	bne.n	8004662 <_isatty_r+0x1a>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	b103      	cbz	r3, 8004662 <_isatty_r+0x1a>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	2000024c 	.word	0x2000024c

08004668 <_lseek_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4d07      	ldr	r5, [pc, #28]	; (8004688 <_lseek_r+0x20>)
 800466c:	4604      	mov	r4, r0
 800466e:	4608      	mov	r0, r1
 8004670:	4611      	mov	r1, r2
 8004672:	2200      	movs	r2, #0
 8004674:	602a      	str	r2, [r5, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	f7fc f9e3 	bl	8000a42 <_lseek>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d102      	bne.n	8004686 <_lseek_r+0x1e>
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	b103      	cbz	r3, 8004686 <_lseek_r+0x1e>
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	bd38      	pop	{r3, r4, r5, pc}
 8004688:	2000024c 	.word	0x2000024c

0800468c <__malloc_lock>:
 800468c:	4801      	ldr	r0, [pc, #4]	; (8004694 <__malloc_lock+0x8>)
 800468e:	f7ff be3b 	b.w	8004308 <__retarget_lock_acquire_recursive>
 8004692:	bf00      	nop
 8004694:	20000244 	.word	0x20000244

08004698 <__malloc_unlock>:
 8004698:	4801      	ldr	r0, [pc, #4]	; (80046a0 <__malloc_unlock+0x8>)
 800469a:	f7ff be36 	b.w	800430a <__retarget_lock_release_recursive>
 800469e:	bf00      	nop
 80046a0:	20000244 	.word	0x20000244

080046a4 <_read_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4d07      	ldr	r5, [pc, #28]	; (80046c4 <_read_r+0x20>)
 80046a8:	4604      	mov	r4, r0
 80046aa:	4608      	mov	r0, r1
 80046ac:	4611      	mov	r1, r2
 80046ae:	2200      	movs	r2, #0
 80046b0:	602a      	str	r2, [r5, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	f7fc f981 	bl	80009ba <_read>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	d102      	bne.n	80046c2 <_read_r+0x1e>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	b103      	cbz	r3, 80046c2 <_read_r+0x1e>
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	bd38      	pop	{r3, r4, r5, pc}
 80046c4:	2000024c 	.word	0x2000024c

080046c8 <_init>:
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	bf00      	nop
 80046cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ce:	bc08      	pop	{r3}
 80046d0:	469e      	mov	lr, r3
 80046d2:	4770      	bx	lr

080046d4 <_fini>:
 80046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d6:	bf00      	nop
 80046d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046da:	bc08      	pop	{r3}
 80046dc:	469e      	mov	lr, r3
 80046de:	4770      	bx	lr
