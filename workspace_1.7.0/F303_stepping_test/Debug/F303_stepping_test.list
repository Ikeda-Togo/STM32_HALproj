
F303_stepping_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003280  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b0  080034b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034b0  080034b0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034b0  080034b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b0  080034b0  000134b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000c4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000134  20000134  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000acf2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001772  00000000  00000000  0002ad92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  0002c508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000660  00000000  00000000  0002cbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b37d  00000000  00000000  0002d250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009046  00000000  00000000  000485cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c182  00000000  00000000  00051613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ed795  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021c0  00000000  00000000  000ed7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080033f0 	.word	0x080033f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080033f0 	.word	0x080033f0

080001c8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

uint8_t stop;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0)
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d128      	bne.n	800022a <HAL_GPIO_EXTI_Callback+0x62>
  {
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80001d8:	2101      	movs	r1, #1
 80001da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001de:	f000 fdeb 	bl	8000db8 <HAL_GPIO_ReadPin>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d00c      	beq.n	8000202 <HAL_GPIO_EXTI_Callback+0x3a>
    {
      HAL_GPIO_WritePin(GPIOA, DIR_Pin, 1);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2110      	movs	r1, #16
 80001ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f0:	f000 fdfa 	bl	8000de8 <HAL_GPIO_WritePin>
      printf("on\r\n");
 80001f4:	480f      	ldr	r0, [pc, #60]	; (8000234 <HAL_GPIO_EXTI_Callback+0x6c>)
 80001f6:	f002 fbcd 	bl	8002994 <puts>
      stop=0;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <HAL_GPIO_EXTI_Callback+0x70>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOA, DIR_Pin, 0);
      printf("off\r\n");
      stop=1;
    }
  }
}
 8000200:	e013      	b.n	800022a <HAL_GPIO_EXTI_Callback+0x62>
    else if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000202:	2101      	movs	r1, #1
 8000204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000208:	f000 fdd6 	bl	8000db8 <HAL_GPIO_ReadPin>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d10b      	bne.n	800022a <HAL_GPIO_EXTI_Callback+0x62>
      HAL_GPIO_WritePin(GPIOA, DIR_Pin, 0);
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021a:	f000 fde5 	bl	8000de8 <HAL_GPIO_WritePin>
      printf("off\r\n");
 800021e:	4807      	ldr	r0, [pc, #28]	; (800023c <HAL_GPIO_EXTI_Callback+0x74>)
 8000220:	f002 fbb8 	bl	8002994 <puts>
      stop=1;
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <HAL_GPIO_EXTI_Callback+0x70>)
 8000226:	2201      	movs	r2, #1
 8000228:	701a      	strb	r2, [r3, #0]
}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	08003408 	.word	0x08003408
 8000238:	2000011c 	.word	0x2000011c
 800023c:	0800340c 	.word	0x0800340c

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000246:	4b31      	ldr	r3, [pc, #196]	; (800030c <main+0xcc>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fba8 	bl	80029a4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 faa2 	bl	800079c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f85c 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f000 f8c6 	bl	80003ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000260:	f000 f894 	bl	800038c <MX_USART2_UART_Init>

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_WritePin(GPIOA, DIR_Pin, 0);

//	  初期化動作
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000264:	2101      	movs	r1, #1
 8000266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800026a:	f000 fda5 	bl	8000db8 <HAL_GPIO_ReadPin>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d01d      	beq.n	80002b0 <main+0x70>
	  {
	    HAL_GPIO_WritePin(GPIOA, DIR_Pin, 1);
 8000274:	2201      	movs	r2, #1
 8000276:	2110      	movs	r1, #16
 8000278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027c:	f000 fdb4 	bl	8000de8 <HAL_GPIO_WritePin>
	    while(1){
	    	HAL_GPIO_WritePin(GPIOA, Step_Pin, 1);
 8000280:	2201      	movs	r2, #1
 8000282:	2108      	movs	r1, #8
 8000284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000288:	f000 fdae 	bl	8000de8 <HAL_GPIO_WritePin>
	    	HAL_Delay(4);
 800028c:	2004      	movs	r0, #4
 800028e:	f000 faeb 	bl	8000868 <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOA, Step_Pin, 0);
 8000292:	2200      	movs	r2, #0
 8000294:	2108      	movs	r1, #8
 8000296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029a:	f000 fda5 	bl	8000de8 <HAL_GPIO_WritePin>
	    	HAL_Delay(1);
 800029e:	2001      	movs	r0, #1
 80002a0:	f000 fae2 	bl	8000868 <HAL_Delay>
	    	if(stop == 1){
 80002a4:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <main+0xd0>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d000      	beq.n	80002ae <main+0x6e>
	    	HAL_GPIO_WritePin(GPIOA, Step_Pin, 1);
 80002ac:	e7e8      	b.n	8000280 <main+0x40>
			  break;
 80002ae:	bf00      	nop
		  }
	    }
	  }
	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80002b0:	2101      	movs	r1, #1
 80002b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b6:	f000 fd7f 	bl	8000db8 <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d1d1      	bne.n	8000264 <main+0x24>
	  {
	    HAL_GPIO_WritePin(GPIOA, DIR_Pin, 0);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2110      	movs	r1, #16
 80002c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c8:	f000 fd8e 	bl	8000de8 <HAL_GPIO_WritePin>
		  for (int i=0; i<100; i++) {
 80002cc:	2300      	movs	r3, #0
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	e014      	b.n	80002fc <main+0xbc>

			  HAL_GPIO_WritePin(GPIOA, Step_Pin, 1);
 80002d2:	2201      	movs	r2, #1
 80002d4:	2108      	movs	r1, #8
 80002d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002da:	f000 fd85 	bl	8000de8 <HAL_GPIO_WritePin>
			  HAL_Delay(4);
 80002de:	2004      	movs	r0, #4
 80002e0:	f000 fac2 	bl	8000868 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA, Step_Pin, 0);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2108      	movs	r1, #8
 80002e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ec:	f000 fd7c 	bl	8000de8 <HAL_GPIO_WritePin>
			  HAL_Delay(1);
 80002f0:	2001      	movs	r0, #1
 80002f2:	f000 fab9 	bl	8000868 <HAL_Delay>
		  for (int i=0; i<100; i++) {
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3301      	adds	r3, #1
 80002fa:	607b      	str	r3, [r7, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b63      	cmp	r3, #99	; 0x63
 8000300:	dde7      	ble.n	80002d2 <main+0x92>
		  }
		  HAL_Delay(10000);
 8000302:	f242 7010 	movw	r0, #10000	; 0x2710
 8000306:	f000 faaf 	bl	8000868 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 800030a:	e7ab      	b.n	8000264 <main+0x24>
 800030c:	2000000c 	.word	0x2000000c
 8000310:	2000011c 	.word	0x2000011c

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b090      	sub	sp, #64	; 0x40
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	2228      	movs	r2, #40	; 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f002 fac0 	bl	80028a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000336:	2302      	movs	r3, #2
 8000338:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033a:	2301      	movs	r3, #1
 800033c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033e:	2310      	movs	r3, #16
 8000340:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000342:	2300      	movs	r3, #0
 8000344:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	f107 0318 	add.w	r3, r7, #24
 800034a:	4618      	mov	r0, r3
 800034c:	f000 fd7c 	bl	8000e48 <HAL_RCC_OscConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000356:	f000 f8bf 	bl	80004d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035a:	230f      	movs	r3, #15
 800035c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f001 fc70 	bl	8001c58 <HAL_RCC_ClockConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800037e:	f000 f8ab 	bl	80004d8 <Error_Handler>
  }
}
 8000382:	bf00      	nop
 8000384:	3740      	adds	r7, #64	; 0x40
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
	...

0800038c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 8000392:	4a15      	ldr	r2, [pc, #84]	; (80003e8 <MX_USART2_UART_Init+0x5c>)
 8000394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000396:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 8000398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800039c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003b2:	220c      	movs	r2, #12
 80003b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ce:	4805      	ldr	r0, [pc, #20]	; (80003e4 <MX_USART2_UART_Init+0x58>)
 80003d0:	f001 fe78 	bl	80020c4 <HAL_UART_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003da:	f000 f87d 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000098 	.word	0x20000098
 80003e8:	40004400 	.word	0x40004400

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 030c 	add.w	r3, r7, #12
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000402:	4b2a      	ldr	r3, [pc, #168]	; (80004ac <MX_GPIO_Init+0xc0>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a29      	ldr	r2, [pc, #164]	; (80004ac <MX_GPIO_Init+0xc0>)
 8000408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b27      	ldr	r3, [pc, #156]	; (80004ac <MX_GPIO_Init+0xc0>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b24      	ldr	r3, [pc, #144]	; (80004ac <MX_GPIO_Init+0xc0>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a23      	ldr	r2, [pc, #140]	; (80004ac <MX_GPIO_Init+0xc0>)
 8000420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b21      	ldr	r3, [pc, #132]	; (80004ac <MX_GPIO_Init+0xc0>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Step_Pin|DIR_Pin, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2118      	movs	r1, #24
 8000436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043a:	f000 fcd5 	bl	8000de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800043e:	2301      	movs	r3, #1
 8000440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000442:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000448:	2301      	movs	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	f107 030c 	add.w	r3, r7, #12
 8000450:	4619      	mov	r1, r3
 8000452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000456:	f000 fb3d 	bl	8000ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Step_Pin DIR_Pin */
  GPIO_InitStruct.Pin = Step_Pin|DIR_Pin;
 800045a:	2318      	movs	r3, #24
 800045c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045e:	2301      	movs	r3, #1
 8000460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	4619      	mov	r1, r3
 8000470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000474:	f000 fb2e 	bl	8000ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000478:	2320      	movs	r3, #32
 800047a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	f107 030c 	add.w	r3, r7, #12
 8000488:	4619      	mov	r1, r3
 800048a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048e:	f000 fb21 	bl	8000ad4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	2006      	movs	r0, #6
 8000498:	f000 fae5 	bl	8000a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800049c:	2006      	movs	r0, #6
 800049e:	f000 fafe 	bl	8000a9e <HAL_NVIC_EnableIRQ>

}
 80004a2:	bf00      	nop
 80004a4:	3720      	adds	r7, #32
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000

080004b0 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	b29a      	uxth	r2, r3
 80004c0:	230a      	movs	r3, #10
 80004c2:	68b9      	ldr	r1, [r7, #8]
 80004c4:	4803      	ldr	r0, [pc, #12]	; (80004d4 <_write+0x24>)
 80004c6:	f001 fe4b 	bl	8002160 <HAL_UART_Transmit>
  return len;
 80004ca:	687b      	ldr	r3, [r7, #4]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000098 	.word	0x20000098

080004d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004dc:	b672      	cpsid	i
}
 80004de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <Error_Handler+0x8>
	...

080004e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x44>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_MspInit+0x44>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6193      	str	r3, [r2, #24]
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x44>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <HAL_MspInit+0x44>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <HAL_MspInit+0x44>)
 8000508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050c:	61d3      	str	r3, [r2, #28]
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_MspInit+0x44>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000

0800052c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a18      	ldr	r2, [pc, #96]	; (80005ac <HAL_UART_MspInit+0x80>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d129      	bne.n	80005a2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800054e:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <HAL_UART_MspInit+0x84>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <HAL_UART_MspInit+0x84>)
 8000554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000558:	61d3      	str	r3, [r2, #28]
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <HAL_UART_MspInit+0x84>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_UART_MspInit+0x84>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a11      	ldr	r2, [pc, #68]	; (80005b0 <HAL_UART_MspInit+0x84>)
 800056c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <HAL_UART_MspInit+0x84>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800057e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000584:	2302      	movs	r3, #2
 8000586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800058c:	2303      	movs	r3, #3
 800058e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000590:	2307      	movs	r3, #7
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4619      	mov	r1, r3
 800059a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059e:	f000 fa99 	bl	8000ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005a2:	bf00      	nop
 80005a4:	3728      	adds	r7, #40	; 0x28
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40004400 	.word	0x40004400
 80005b0:	40021000 	.word	0x40021000

080005b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <NMI_Handler+0x4>

080005ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <HardFault_Handler+0x4>

080005c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <MemManage_Handler+0x4>

080005c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <BusFault_Handler+0x4>

080005cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <UsageFault_Handler+0x4>

080005d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000600:	f000 f912 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800060c:	2001      	movs	r0, #1
 800060e:	f000 fc03 	bl	8000e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}

08000616 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b086      	sub	sp, #24
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	e00a      	b.n	800063e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000628:	f3af 8000 	nop.w
 800062c:	4601      	mov	r1, r0
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	1c5a      	adds	r2, r3, #1
 8000632:	60ba      	str	r2, [r7, #8]
 8000634:	b2ca      	uxtb	r2, r1
 8000636:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	3301      	adds	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	429a      	cmp	r2, r3
 8000644:	dbf0      	blt.n	8000628 <_read+0x12>
	}

return len;
 8000646:	687b      	ldr	r3, [r7, #4]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3718      	adds	r7, #24
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	return -1;
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000678:	605a      	str	r2, [r3, #4]
	return 0;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <_isatty>:

int _isatty(int file)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	return 1;
 8000690:	2301      	movs	r3, #1
}
 8000692:	4618      	mov	r0, r3
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800069e:	b480      	push	{r7}
 80006a0:	b085      	sub	sp, #20
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	60f8      	str	r0, [r7, #12]
 80006a6:	60b9      	str	r1, [r7, #8]
 80006a8:	607a      	str	r2, [r7, #4]
	return 0;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006c0:	4a14      	ldr	r2, [pc, #80]	; (8000714 <_sbrk+0x5c>)
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <_sbrk+0x60>)
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <_sbrk+0x64>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d102      	bne.n	80006da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <_sbrk+0x64>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <_sbrk+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <_sbrk+0x64>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d207      	bcs.n	80006f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e8:	f002 f8b4 	bl	8002854 <__errno>
 80006ec:	4603      	mov	r3, r0
 80006ee:	220c      	movs	r2, #12
 80006f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295
 80006f6:	e009      	b.n	800070c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <_sbrk+0x64>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <_sbrk+0x64>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	4a05      	ldr	r2, [pc, #20]	; (800071c <_sbrk+0x64>)
 8000708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800070a:	68fb      	ldr	r3, [r7, #12]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20003000 	.word	0x20003000
 8000718:	00000400 	.word	0x00000400
 800071c:	2000008c 	.word	0x2000008c
 8000720:	20000138 	.word	0x20000138

08000724 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <SystemInit+0x20>)
 800072a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <SystemInit+0x20>)
 8000730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000780 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <LoopForever+0x6>)
  ldr r1, =_edata
 800074e:	490e      	ldr	r1, [pc, #56]	; (8000788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000750:	4a0e      	ldr	r2, [pc, #56]	; (800078c <LoopForever+0xe>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000764:	4c0b      	ldr	r4, [pc, #44]	; (8000794 <LoopForever+0x16>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000772:	f7ff ffd7 	bl	8000724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000776:	f002 f873 	bl	8002860 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800077a:	f7ff fd61 	bl	8000240 <main>

0800077e <LoopForever>:

LoopForever:
    b LoopForever
 800077e:	e7fe      	b.n	800077e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000780:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800078c:	080034b8 	.word	0x080034b8
  ldr r2, =_sbss
 8000790:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000794:	20000134 	.word	0x20000134

08000798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_2_IRQHandler>
	...

0800079c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_Init+0x28>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_Init+0x28>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f94f 	bl	8000a50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 f808 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff fe94 	bl	80004e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f967 	bl	8000aba <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f000 f92f 	bl	8000a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_IncTick+0x20>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_IncTick+0x24>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <HAL_IncTick+0x24>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000008 	.word	0x20000008
 800084c:	20000120 	.word	0x20000120

08000850 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;  
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_GetTick+0x14>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000120 	.word	0x20000120

08000868 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff ffee 	bl	8000850 <HAL_GetTick>
 8000874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000880:	d005      	beq.n	800088e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <HAL_Delay+0x44>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800088e:	bf00      	nop
 8000890:	f7ff ffde 	bl	8000850 <HAL_GetTick>
 8000894:	4602      	mov	r2, r0
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	429a      	cmp	r2, r3
 800089e:	d8f7      	bhi.n	8000890 <HAL_Delay+0x28>
  {
  }
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000008 	.word	0x20000008

080008b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e2:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	60d3      	str	r3, [r2, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <__NVIC_GetPriorityGrouping+0x18>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	f003 0307 	and.w	r3, r3, #7
}
 8000906:	4618      	mov	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	db0b      	blt.n	800093e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 021f 	and.w	r2, r3, #31
 800092c:	4907      	ldr	r1, [pc, #28]	; (800094c <__NVIC_EnableIRQ+0x38>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	095b      	lsrs	r3, r3, #5
 8000934:	2001      	movs	r0, #1
 8000936:	fa00 f202 	lsl.w	r2, r0, r2
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000e100 	.word	0xe000e100

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db0a      	blt.n	800097a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	490c      	ldr	r1, [pc, #48]	; (800099c <__NVIC_SetPriority+0x4c>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	0112      	lsls	r2, r2, #4
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	440b      	add	r3, r1
 8000974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000978:	e00a      	b.n	8000990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <__NVIC_SetPriority+0x50>)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	3b04      	subs	r3, #4
 8000988:	0112      	lsls	r2, r2, #4
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	440b      	add	r3, r1
 800098e:	761a      	strb	r2, [r3, #24]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f1c3 0307 	rsb	r3, r3, #7
 80009be:	2b04      	cmp	r3, #4
 80009c0:	bf28      	it	cs
 80009c2:	2304      	movcs	r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3304      	adds	r3, #4
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d902      	bls.n	80009d4 <NVIC_EncodePriority+0x30>
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3b03      	subs	r3, #3
 80009d2:	e000      	b.n	80009d6 <NVIC_EncodePriority+0x32>
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43da      	mvns	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	401a      	ands	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43d9      	mvns	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	4313      	orrs	r3, r2
         );
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a1c:	d301      	bcc.n	8000a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00f      	b.n	8000a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <SysTick_Config+0x40>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f7ff ff8e 	bl	8000950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <SysTick_Config+0x40>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SysTick_Config+0x40>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff29 	bl	80008b0 <__NVIC_SetPriorityGrouping>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a78:	f7ff ff3e 	bl	80008f8 <__NVIC_GetPriorityGrouping>
 8000a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	6978      	ldr	r0, [r7, #20]
 8000a84:	f7ff ff8e 	bl	80009a4 <NVIC_EncodePriority>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff5d 	bl	8000950 <__NVIC_SetPriority>
}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff31 	bl	8000914 <__NVIC_EnableIRQ>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffa2 	bl	8000a0c <SysTick_Config>
 8000ac8:	4603      	mov	r3, r0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae2:	e14e      	b.n	8000d82 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	2101      	movs	r1, #1
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	fa01 f303 	lsl.w	r3, r1, r3
 8000af0:	4013      	ands	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 8140 	beq.w	8000d7c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d005      	beq.n	8000b14 <HAL_GPIO_Init+0x40>
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f003 0303 	and.w	r3, r3, #3
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d130      	bne.n	8000b76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	2203      	movs	r2, #3
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	091b      	lsrs	r3, r3, #4
 8000b60:	f003 0201 	and.w	r2, r3, #1
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 0303 	and.w	r3, r3, #3
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d017      	beq.n	8000bb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 0303 	and.w	r3, r3, #3
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d123      	bne.n	8000c06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	08da      	lsrs	r2, r3, #3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3208      	adds	r2, #8
 8000bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	220f      	movs	r2, #15
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	691a      	ldr	r2, [r3, #16]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f003 0307 	and.w	r3, r3, #7
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	08da      	lsrs	r2, r3, #3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3208      	adds	r2, #8
 8000c00:	6939      	ldr	r1, [r7, #16]
 8000c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	2203      	movs	r2, #3
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 0203 	and.w	r2, r3, #3
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 809a 	beq.w	8000d7c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c48:	4b55      	ldr	r3, [pc, #340]	; (8000da0 <HAL_GPIO_Init+0x2cc>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a54      	ldr	r2, [pc, #336]	; (8000da0 <HAL_GPIO_Init+0x2cc>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b52      	ldr	r3, [pc, #328]	; (8000da0 <HAL_GPIO_Init+0x2cc>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c60:	4a50      	ldr	r2, [pc, #320]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	3302      	adds	r3, #2
 8000c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	220f      	movs	r2, #15
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c8a:	d013      	beq.n	8000cb4 <HAL_GPIO_Init+0x1e0>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a46      	ldr	r2, [pc, #280]	; (8000da8 <HAL_GPIO_Init+0x2d4>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d00d      	beq.n	8000cb0 <HAL_GPIO_Init+0x1dc>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a45      	ldr	r2, [pc, #276]	; (8000dac <HAL_GPIO_Init+0x2d8>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d007      	beq.n	8000cac <HAL_GPIO_Init+0x1d8>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a44      	ldr	r2, [pc, #272]	; (8000db0 <HAL_GPIO_Init+0x2dc>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d101      	bne.n	8000ca8 <HAL_GPIO_Init+0x1d4>
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e006      	b.n	8000cb6 <HAL_GPIO_Init+0x1e2>
 8000ca8:	2305      	movs	r3, #5
 8000caa:	e004      	b.n	8000cb6 <HAL_GPIO_Init+0x1e2>
 8000cac:	2302      	movs	r3, #2
 8000cae:	e002      	b.n	8000cb6 <HAL_GPIO_Init+0x1e2>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e000      	b.n	8000cb6 <HAL_GPIO_Init+0x1e2>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	f002 0203 	and.w	r2, r2, #3
 8000cbc:	0092      	lsls	r2, r2, #2
 8000cbe:	4093      	lsls	r3, r2
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cc6:	4937      	ldr	r1, [pc, #220]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	3302      	adds	r3, #2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cd4:	4b37      	ldr	r3, [pc, #220]	; (8000db4 <HAL_GPIO_Init+0x2e0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cf8:	4a2e      	ldr	r2, [pc, #184]	; (8000db4 <HAL_GPIO_Init+0x2e0>)
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cfe:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <HAL_GPIO_Init+0x2e0>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d22:	4a24      	ldr	r2, [pc, #144]	; (8000db4 <HAL_GPIO_Init+0x2e0>)
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <HAL_GPIO_Init+0x2e0>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d4c:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <HAL_GPIO_Init+0x2e0>)
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_GPIO_Init+0x2e0>)
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <HAL_GPIO_Init+0x2e0>)
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	fa22 f303 	lsr.w	r3, r2, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f47f aea9 	bne.w	8000ae4 <HAL_GPIO_Init+0x10>
  }
}
 8000d92:	bf00      	nop
 8000d94:	bf00      	nop
 8000d96:	371c      	adds	r7, #28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40010000 	.word	0x40010000
 8000da8:	48000400 	.word	0x48000400
 8000dac:	48000800 	.word	0x48000800
 8000db0:	48000c00 	.word	0x48000c00
 8000db4:	40010400 	.word	0x40010400

08000db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691a      	ldr	r2, [r3, #16]
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d002      	beq.n	8000dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	e001      	b.n	8000dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]
 8000df4:	4613      	mov	r3, r2
 8000df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000df8:	787b      	ldrb	r3, [r7, #1]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dfe:	887a      	ldrh	r2, [r7, #2]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e04:	e002      	b.n	8000e0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e06:	887a      	ldrh	r2, [r7, #2]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e24:	695a      	ldr	r2, [r3, #20]
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e30:	88fb      	ldrh	r3, [r7, #6]
 8000e32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff f9c6 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40010400 	.word	0x40010400

08000e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f000 bef4 	b.w	8001c4a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 816a 	beq.w	8001146 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e72:	4bb3      	ldr	r3, [pc, #716]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 030c 	and.w	r3, r3, #12
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d00c      	beq.n	8000e98 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e7e:	4bb0      	ldr	r3, [pc, #704]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 030c 	and.w	r3, r3, #12
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d159      	bne.n	8000f3e <HAL_RCC_OscConfig+0xf6>
 8000e8a:	4bad      	ldr	r3, [pc, #692]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e96:	d152      	bne.n	8000f3e <HAL_RCC_OscConfig+0xf6>
 8000e98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e9c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb0:	fab3 f383 	clz	r3, r3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d102      	bne.n	8000eca <HAL_RCC_OscConfig+0x82>
 8000ec4:	4b9e      	ldr	r3, [pc, #632]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	e015      	b.n	8000ef6 <HAL_RCC_OscConfig+0xae>
 8000eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ece:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000ed6:	fa93 f3a3 	rbit	r3, r3
 8000eda:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ede:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ee6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000eea:	fa93 f3a3 	rbit	r3, r3
 8000eee:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ef2:	4b93      	ldr	r3, [pc, #588]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000efa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000efe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f02:	fa92 f2a2 	rbit	r2, r2
 8000f06:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f0a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f0e:	fab2 f282 	clz	r2, r2
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	f042 0220 	orr.w	r2, r2, #32
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	f002 021f 	and.w	r2, r2, #31
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	4013      	ands	r3, r2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 810c 	beq.w	8001144 <HAL_RCC_OscConfig+0x2fc>
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f040 8106 	bne.w	8001144 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	f000 be86 	b.w	8001c4a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f48:	d106      	bne.n	8000f58 <HAL_RCC_OscConfig+0x110>
 8000f4a:	4b7d      	ldr	r3, [pc, #500]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a7c      	ldr	r2, [pc, #496]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e030      	b.n	8000fba <HAL_RCC_OscConfig+0x172>
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x134>
 8000f62:	4b77      	ldr	r3, [pc, #476]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a76      	ldr	r2, [pc, #472]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b74      	ldr	r3, [pc, #464]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a73      	ldr	r2, [pc, #460]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e01e      	b.n	8000fba <HAL_RCC_OscConfig+0x172>
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f86:	d10c      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x15a>
 8000f88:	4b6d      	ldr	r3, [pc, #436]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a6c      	ldr	r2, [pc, #432]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b6a      	ldr	r3, [pc, #424]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a69      	ldr	r2, [pc, #420]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	e00b      	b.n	8000fba <HAL_RCC_OscConfig+0x172>
 8000fa2:	4b67      	ldr	r3, [pc, #412]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a66      	ldr	r2, [pc, #408]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	4b64      	ldr	r3, [pc, #400]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a63      	ldr	r2, [pc, #396]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fba:	4b61      	ldr	r3, [pc, #388]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbe:	f023 020f 	bic.w	r2, r3, #15
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	495d      	ldr	r1, [pc, #372]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d059      	beq.n	800108c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fc3a 	bl	8000850 <HAL_GetTick>
 8000fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe0:	e00a      	b.n	8000ff8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fc35 	bl	8000850 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b64      	cmp	r3, #100	; 0x64
 8000ff0:	d902      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	f000 be29 	b.w	8001c4a <HAL_RCC_OscConfig+0xe02>
 8000ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800100c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d102      	bne.n	800102a <HAL_RCC_OscConfig+0x1e2>
 8001024:	4b46      	ldr	r3, [pc, #280]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	e015      	b.n	8001056 <HAL_RCC_OscConfig+0x20e>
 800102a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800102e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001032:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001036:	fa93 f3a3 	rbit	r3, r3
 800103a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800103e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001042:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001046:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001052:	4b3b      	ldr	r3, [pc, #236]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800105a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800105e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001062:	fa92 f2a2 	rbit	r2, r2
 8001066:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800106a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800106e:	fab2 f282 	clz	r2, r2
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	f042 0220 	orr.w	r2, r2, #32
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	f002 021f 	and.w	r2, r2, #31
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	4013      	ands	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0ab      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x19a>
 800108a:	e05c      	b.n	8001146 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff fbe0 	bl	8000850 <HAL_GetTick>
 8001090:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001094:	e00a      	b.n	80010ac <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001096:	f7ff fbdb 	bl	8000850 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d902      	bls.n	80010ac <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	f000 bdcf 	b.w	8001c4a <HAL_RCC_OscConfig+0xe02>
 80010ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80010b8:	fa93 f3a3 	rbit	r3, r3
 80010bc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80010c0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c4:	fab3 f383 	clz	r3, r3
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d102      	bne.n	80010de <HAL_RCC_OscConfig+0x296>
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	e015      	b.n	800110a <HAL_RCC_OscConfig+0x2c2>
 80010de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010fa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80010fe:	fa93 f3a3 	rbit	r3, r3
 8001102:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <HAL_RCC_OscConfig+0x2f8>)
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800110e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001112:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001116:	fa92 f2a2 	rbit	r2, r2
 800111a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800111e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001122:	fab2 f282 	clz	r2, r2
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	f042 0220 	orr.w	r2, r2, #32
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	f002 021f 	and.w	r2, r2, #31
 8001132:	2101      	movs	r1, #1
 8001134:	fa01 f202 	lsl.w	r2, r1, r2
 8001138:	4013      	ands	r3, r2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1ab      	bne.n	8001096 <HAL_RCC_OscConfig+0x24e>
 800113e:	e002      	b.n	8001146 <HAL_RCC_OscConfig+0x2fe>
 8001140:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 816f 	beq.w	8001434 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001156:	4bd0      	ldr	r3, [pc, #832]	; (8001498 <HAL_RCC_OscConfig+0x650>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00b      	beq.n	800117a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001162:	4bcd      	ldr	r3, [pc, #820]	; (8001498 <HAL_RCC_OscConfig+0x650>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	2b08      	cmp	r3, #8
 800116c:	d16c      	bne.n	8001248 <HAL_RCC_OscConfig+0x400>
 800116e:	4bca      	ldr	r3, [pc, #808]	; (8001498 <HAL_RCC_OscConfig+0x650>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d166      	bne.n	8001248 <HAL_RCC_OscConfig+0x400>
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800118c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001190:	fab3 f383 	clz	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d102      	bne.n	80011aa <HAL_RCC_OscConfig+0x362>
 80011a4:	4bbc      	ldr	r3, [pc, #752]	; (8001498 <HAL_RCC_OscConfig+0x650>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	e013      	b.n	80011d2 <HAL_RCC_OscConfig+0x38a>
 80011aa:	2302      	movs	r3, #2
 80011ac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80011b4:	fa93 f3a3 	rbit	r3, r3
 80011b8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011bc:	2302      	movs	r3, #2
 80011be:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80011c6:	fa93 f3a3 	rbit	r3, r3
 80011ca:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80011ce:	4bb2      	ldr	r3, [pc, #712]	; (8001498 <HAL_RCC_OscConfig+0x650>)
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	2202      	movs	r2, #2
 80011d4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80011d8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011dc:	fa92 f2a2 	rbit	r2, r2
 80011e0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80011e4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011e8:	fab2 f282 	clz	r2, r2
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	f042 0220 	orr.w	r2, r2, #32
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	f002 021f 	and.w	r2, r2, #31
 80011f8:	2101      	movs	r1, #1
 80011fa:	fa01 f202 	lsl.w	r2, r1, r2
 80011fe:	4013      	ands	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d007      	beq.n	8001214 <HAL_RCC_OscConfig+0x3cc>
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d002      	beq.n	8001214 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	f000 bd1b 	b.w	8001c4a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001214:	4ba0      	ldr	r3, [pc, #640]	; (8001498 <HAL_RCC_OscConfig+0x650>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	21f8      	movs	r1, #248	; 0xf8
 8001224:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001228:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800122c:	fa91 f1a1 	rbit	r1, r1
 8001230:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001234:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001238:	fab1 f181 	clz	r1, r1
 800123c:	b2c9      	uxtb	r1, r1
 800123e:	408b      	lsls	r3, r1
 8001240:	4995      	ldr	r1, [pc, #596]	; (8001498 <HAL_RCC_OscConfig+0x650>)
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001246:	e0f5      	b.n	8001434 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 8085 	beq.w	800135e <HAL_RCC_OscConfig+0x516>
 8001254:	2301      	movs	r3, #1
 8001256:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001266:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001274:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	461a      	mov	r2, r3
 800127c:	2301      	movs	r3, #1
 800127e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fae6 	bl	8000850 <HAL_GetTick>
 8001284:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001288:	e00a      	b.n	80012a0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128a:	f7ff fae1 	bl	8000850 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d902      	bls.n	80012a0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	f000 bcd5 	b.w	8001c4a <HAL_RCC_OscConfig+0xe02>
 80012a0:	2302      	movs	r3, #2
 80012a2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80012aa:	fa93 f3a3 	rbit	r3, r3
 80012ae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80012b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b6:	fab3 f383 	clz	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	095b      	lsrs	r3, r3, #5
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d102      	bne.n	80012d0 <HAL_RCC_OscConfig+0x488>
 80012ca:	4b73      	ldr	r3, [pc, #460]	; (8001498 <HAL_RCC_OscConfig+0x650>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	e013      	b.n	80012f8 <HAL_RCC_OscConfig+0x4b0>
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012f4:	4b68      	ldr	r3, [pc, #416]	; (8001498 <HAL_RCC_OscConfig+0x650>)
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	2202      	movs	r2, #2
 80012fa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80012fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001302:	fa92 f2a2 	rbit	r2, r2
 8001306:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800130a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800130e:	fab2 f282 	clz	r2, r2
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	f042 0220 	orr.w	r2, r2, #32
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	f002 021f 	and.w	r2, r2, #31
 800131e:	2101      	movs	r1, #1
 8001320:	fa01 f202 	lsl.w	r2, r1, r2
 8001324:	4013      	ands	r3, r2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0af      	beq.n	800128a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	4b5b      	ldr	r3, [pc, #364]	; (8001498 <HAL_RCC_OscConfig+0x650>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	21f8      	movs	r1, #248	; 0xf8
 800133a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001342:	fa91 f1a1 	rbit	r1, r1
 8001346:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800134a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800134e:	fab1 f181 	clz	r1, r1
 8001352:	b2c9      	uxtb	r1, r1
 8001354:	408b      	lsls	r3, r1
 8001356:	4950      	ldr	r1, [pc, #320]	; (8001498 <HAL_RCC_OscConfig+0x650>)
 8001358:	4313      	orrs	r3, r2
 800135a:	600b      	str	r3, [r1, #0]
 800135c:	e06a      	b.n	8001434 <HAL_RCC_OscConfig+0x5ec>
 800135e:	2301      	movs	r3, #1
 8001360:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001364:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001370:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001374:	fab3 f383 	clz	r3, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800137e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	461a      	mov	r2, r3
 8001386:	2300      	movs	r3, #0
 8001388:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff fa61 	bl	8000850 <HAL_GetTick>
 800138e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001392:	e00a      	b.n	80013aa <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001394:	f7ff fa5c 	bl	8000850 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d902      	bls.n	80013aa <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f000 bc50 	b.w	8001c4a <HAL_RCC_OscConfig+0xe02>
 80013aa:	2302      	movs	r3, #2
 80013ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013b4:	fa93 f3a3 	rbit	r3, r3
 80013b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80013bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c0:	fab3 f383 	clz	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d102      	bne.n	80013da <HAL_RCC_OscConfig+0x592>
 80013d4:	4b30      	ldr	r3, [pc, #192]	; (8001498 <HAL_RCC_OscConfig+0x650>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	e013      	b.n	8001402 <HAL_RCC_OscConfig+0x5ba>
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013e4:	fa93 f3a3 	rbit	r3, r3
 80013e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013f6:	fa93 f3a3 	rbit	r3, r3
 80013fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <HAL_RCC_OscConfig+0x650>)
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	2202      	movs	r2, #2
 8001404:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001408:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800140c:	fa92 f2a2 	rbit	r2, r2
 8001410:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001414:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001418:	fab2 f282 	clz	r2, r2
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	f042 0220 	orr.w	r2, r2, #32
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	f002 021f 	and.w	r2, r2, #31
 8001428:	2101      	movs	r1, #1
 800142a:	fa01 f202 	lsl.w	r2, r1, r2
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1af      	bne.n	8001394 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 80da 	beq.w	80015f8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d069      	beq.n	8001522 <HAL_RCC_OscConfig+0x6da>
 800144e:	2301      	movs	r3, #1
 8001450:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001454:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001458:	fa93 f3a3 	rbit	r3, r3
 800145c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001464:	fab3 f383 	clz	r3, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_RCC_OscConfig+0x654>)
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	461a      	mov	r2, r3
 8001474:	2301      	movs	r3, #1
 8001476:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001478:	f7ff f9ea 	bl	8000850 <HAL_GetTick>
 800147c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001480:	e00e      	b.n	80014a0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff f9e5 	bl	8000850 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d906      	bls.n	80014a0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e3d9      	b.n	8001c4a <HAL_RCC_OscConfig+0xe02>
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	10908120 	.word	0x10908120
 80014a0:	2302      	movs	r3, #2
 80014a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014b2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014b6:	2202      	movs	r2, #2
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	fa93 f2a3 	rbit	r2, r3
 80014c4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80014ce:	2202      	movs	r2, #2
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	fa93 f2a3 	rbit	r2, r3
 80014dc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80014e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	4ba5      	ldr	r3, [pc, #660]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 80014e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014ea:	2102      	movs	r1, #2
 80014ec:	6019      	str	r1, [r3, #0]
 80014ee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	fa93 f1a3 	rbit	r1, r3
 80014f8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014fc:	6019      	str	r1, [r3, #0]
  return result;
 80014fe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	fab3 f383 	clz	r3, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	2101      	movs	r1, #1
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0b0      	beq.n	8001482 <HAL_RCC_OscConfig+0x63a>
 8001520:	e06a      	b.n	80015f8 <HAL_RCC_OscConfig+0x7b0>
 8001522:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	fa93 f2a3 	rbit	r2, r3
 8001534:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001538:	601a      	str	r2, [r3, #0]
  return result;
 800153a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800153e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	4b8c      	ldr	r3, [pc, #560]	; (800177c <HAL_RCC_OscConfig+0x934>)
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	461a      	mov	r2, r3
 8001550:	2300      	movs	r3, #0
 8001552:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001554:	f7ff f97c 	bl	8000850 <HAL_GetTick>
 8001558:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	e009      	b.n	8001572 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155e:	f7ff f977 	bl	8000850 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e36b      	b.n	8001c4a <HAL_RCC_OscConfig+0xe02>
 8001572:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001576:	2202      	movs	r2, #2
 8001578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	fa93 f2a3 	rbit	r2, r3
 8001584:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800158e:	2202      	movs	r2, #2
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	fa93 f2a3 	rbit	r2, r3
 800159c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80015a6:	2202      	movs	r2, #2
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	fa93 f2a3 	rbit	r2, r3
 80015b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ba:	4b6f      	ldr	r3, [pc, #444]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 80015bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015c2:	2102      	movs	r1, #2
 80015c4:	6019      	str	r1, [r3, #0]
 80015c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	fa93 f1a3 	rbit	r1, r3
 80015d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015d4:	6019      	str	r1, [r3, #0]
  return result;
 80015d6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	fab3 f383 	clz	r3, r3
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f003 031f 	and.w	r3, r3, #31
 80015ec:	2101      	movs	r1, #1
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1b2      	bne.n	800155e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 8158 	beq.w	80018b8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160e:	4b5a      	ldr	r3, [pc, #360]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d112      	bne.n	8001640 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b57      	ldr	r3, [pc, #348]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a56      	ldr	r2, [pc, #344]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b54      	ldr	r3, [pc, #336]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800163a:	2301      	movs	r3, #1
 800163c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	4b4f      	ldr	r3, [pc, #316]	; (8001780 <HAL_RCC_OscConfig+0x938>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d11a      	bne.n	8001682 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164c:	4b4c      	ldr	r3, [pc, #304]	; (8001780 <HAL_RCC_OscConfig+0x938>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a4b      	ldr	r2, [pc, #300]	; (8001780 <HAL_RCC_OscConfig+0x938>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001656:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001658:	f7ff f8fa 	bl	8000850 <HAL_GetTick>
 800165c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	e009      	b.n	8001676 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001662:	f7ff f8f5 	bl	8000850 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e2e9      	b.n	8001c4a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	4b42      	ldr	r3, [pc, #264]	; (8001780 <HAL_RCC_OscConfig+0x938>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0ef      	beq.n	8001662 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x852>
 800168c:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a39      	ldr	r2, [pc, #228]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	e02f      	b.n	80016fa <HAL_RCC_OscConfig+0x8b2>
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10c      	bne.n	80016be <HAL_RCC_OscConfig+0x876>
 80016a4:	4b34      	ldr	r3, [pc, #208]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4a33      	ldr	r2, [pc, #204]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	6213      	str	r3, [r2, #32]
 80016b0:	4b31      	ldr	r3, [pc, #196]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4a30      	ldr	r2, [pc, #192]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 80016b6:	f023 0304 	bic.w	r3, r3, #4
 80016ba:	6213      	str	r3, [r2, #32]
 80016bc:	e01d      	b.n	80016fa <HAL_RCC_OscConfig+0x8b2>
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b05      	cmp	r3, #5
 80016c6:	d10c      	bne.n	80016e2 <HAL_RCC_OscConfig+0x89a>
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4a2a      	ldr	r2, [pc, #168]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6213      	str	r3, [r2, #32]
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4a27      	ldr	r2, [pc, #156]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6213      	str	r3, [r2, #32]
 80016e0:	e00b      	b.n	80016fa <HAL_RCC_OscConfig+0x8b2>
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4a24      	ldr	r2, [pc, #144]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6213      	str	r3, [r2, #32]
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4a21      	ldr	r2, [pc, #132]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d06b      	beq.n	80017dc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001704:	f7ff f8a4 	bl	8000850 <HAL_GetTick>
 8001708:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170c:	e00b      	b.n	8001726 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170e:	f7ff f89f 	bl	8000850 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e291      	b.n	8001c4a <HAL_RCC_OscConfig+0xe02>
 8001726:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800172a:	2202      	movs	r2, #2
 800172c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	fa93 f2a3 	rbit	r2, r3
 8001738:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001742:	2202      	movs	r2, #2
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	fa93 f2a3 	rbit	r2, r3
 8001750:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001754:	601a      	str	r2, [r3, #0]
  return result;
 8001756:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800175a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175c:	fab3 f383 	clz	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d109      	bne.n	8001784 <HAL_RCC_OscConfig+0x93c>
 8001770:	4b01      	ldr	r3, [pc, #4]	; (8001778 <HAL_RCC_OscConfig+0x930>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	e014      	b.n	80017a0 <HAL_RCC_OscConfig+0x958>
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	10908120 	.word	0x10908120
 8001780:	40007000 	.word	0x40007000
 8001784:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001788:	2202      	movs	r2, #2
 800178a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	fa93 f2a3 	rbit	r2, r3
 8001796:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	4bbb      	ldr	r3, [pc, #748]	; (8001a8c <HAL_RCC_OscConfig+0xc44>)
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80017a4:	2102      	movs	r1, #2
 80017a6:	6011      	str	r1, [r2, #0]
 80017a8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	fa92 f1a2 	rbit	r1, r2
 80017b2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80017b6:	6011      	str	r1, [r2, #0]
  return result;
 80017b8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	fab2 f282 	clz	r2, r2
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	f002 021f 	and.w	r2, r2, #31
 80017ce:	2101      	movs	r1, #1
 80017d0:	fa01 f202 	lsl.w	r2, r1, r2
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d099      	beq.n	800170e <HAL_RCC_OscConfig+0x8c6>
 80017da:	e063      	b.n	80018a4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017dc:	f7ff f838 	bl	8000850 <HAL_GetTick>
 80017e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e4:	e00b      	b.n	80017fe <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff f833 	bl	8000850 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e225      	b.n	8001c4a <HAL_RCC_OscConfig+0xe02>
 80017fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001802:	2202      	movs	r2, #2
 8001804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	fa93 f2a3 	rbit	r2, r3
 8001810:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800181a:	2202      	movs	r2, #2
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	fa93 f2a3 	rbit	r2, r3
 8001828:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800182c:	601a      	str	r2, [r3, #0]
  return result;
 800182e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001832:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	b2db      	uxtb	r3, r3
 800183e:	f043 0302 	orr.w	r3, r3, #2
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d102      	bne.n	800184e <HAL_RCC_OscConfig+0xa06>
 8001848:	4b90      	ldr	r3, [pc, #576]	; (8001a8c <HAL_RCC_OscConfig+0xc44>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	e00d      	b.n	800186a <HAL_RCC_OscConfig+0xa22>
 800184e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001852:	2202      	movs	r2, #2
 8001854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	fa93 f2a3 	rbit	r2, r3
 8001860:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	4b89      	ldr	r3, [pc, #548]	; (8001a8c <HAL_RCC_OscConfig+0xc44>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800186e:	2102      	movs	r1, #2
 8001870:	6011      	str	r1, [r2, #0]
 8001872:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	fa92 f1a2 	rbit	r1, r2
 800187c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001880:	6011      	str	r1, [r2, #0]
  return result;
 8001882:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	fab2 f282 	clz	r2, r2
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	f002 021f 	and.w	r2, r2, #31
 8001898:	2101      	movs	r1, #1
 800189a:	fa01 f202 	lsl.w	r2, r1, r2
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1a0      	bne.n	80017e6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d105      	bne.n	80018b8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ac:	4b77      	ldr	r3, [pc, #476]	; (8001a8c <HAL_RCC_OscConfig+0xc44>)
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	4a76      	ldr	r2, [pc, #472]	; (8001a8c <HAL_RCC_OscConfig+0xc44>)
 80018b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 81c2 	beq.w	8001c48 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c4:	4b71      	ldr	r3, [pc, #452]	; (8001a8c <HAL_RCC_OscConfig+0xc44>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	f000 819c 	beq.w	8001c0a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	f040 8114 	bne.w	8001b06 <HAL_RCC_OscConfig+0xcbe>
 80018de:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	fa93 f2a3 	rbit	r2, r3
 80018f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018f6:	601a      	str	r2, [r3, #0]
  return result;
 80018f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001908:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	461a      	mov	r2, r3
 8001910:	2300      	movs	r3, #0
 8001912:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7fe ff9c 	bl	8000850 <HAL_GetTick>
 8001918:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191c:	e009      	b.n	8001932 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191e:	f7fe ff97 	bl	8000850 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e18b      	b.n	8001c4a <HAL_RCC_OscConfig+0xe02>
 8001932:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001936:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800193a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	fa93 f2a3 	rbit	r2, r3
 8001946:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800194a:	601a      	str	r2, [r3, #0]
  return result;
 800194c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001950:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	095b      	lsrs	r3, r3, #5
 800195a:	b2db      	uxtb	r3, r3
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b01      	cmp	r3, #1
 8001964:	d102      	bne.n	800196c <HAL_RCC_OscConfig+0xb24>
 8001966:	4b49      	ldr	r3, [pc, #292]	; (8001a8c <HAL_RCC_OscConfig+0xc44>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	e01b      	b.n	80019a4 <HAL_RCC_OscConfig+0xb5c>
 800196c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001970:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	fa93 f2a3 	rbit	r2, r3
 8001980:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800198a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f2a3 	rbit	r2, r3
 800199a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	4b3a      	ldr	r3, [pc, #232]	; (8001a8c <HAL_RCC_OscConfig+0xc44>)
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019ac:	6011      	str	r1, [r2, #0]
 80019ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	fa92 f1a2 	rbit	r1, r2
 80019b8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80019bc:	6011      	str	r1, [r2, #0]
  return result;
 80019be:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	fab2 f282 	clz	r2, r2
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	f042 0220 	orr.w	r2, r2, #32
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	f002 021f 	and.w	r2, r2, #31
 80019d4:	2101      	movs	r1, #1
 80019d6:	fa01 f202 	lsl.w	r2, r1, r2
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d19e      	bne.n	800191e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e0:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <HAL_RCC_OscConfig+0xc44>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	430b      	orrs	r3, r1
 80019f6:	4925      	ldr	r1, [pc, #148]	; (8001a8c <HAL_RCC_OscConfig+0xc44>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
 80019fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	fa93 f2a3 	rbit	r2, r3
 8001a10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a14:	601a      	str	r2, [r3, #0]
  return result;
 8001a16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a1a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a1c:	fab3 f383 	clz	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2301      	movs	r3, #1
 8001a30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7fe ff0d 	bl	8000850 <HAL_GetTick>
 8001a36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a3a:	e009      	b.n	8001a50 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7fe ff08 	bl	8000850 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e0fc      	b.n	8001c4a <HAL_RCC_OscConfig+0xe02>
 8001a50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	fa93 f2a3 	rbit	r2, r3
 8001a64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a68:	601a      	str	r2, [r3, #0]
  return result;
 8001a6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a6e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_RCC_OscConfig+0xc48>
 8001a84:	4b01      	ldr	r3, [pc, #4]	; (8001a8c <HAL_RCC_OscConfig+0xc44>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	e01e      	b.n	8001ac8 <HAL_RCC_OscConfig+0xc80>
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	fa93 f2a3 	rbit	r2, r3
 8001aa4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	fa93 f2a3 	rbit	r2, r3
 8001abe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	4b63      	ldr	r3, [pc, #396]	; (8001c54 <HAL_RCC_OscConfig+0xe0c>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001acc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ad0:	6011      	str	r1, [r2, #0]
 8001ad2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	fa92 f1a2 	rbit	r1, r2
 8001adc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ae0:	6011      	str	r1, [r2, #0]
  return result;
 8001ae2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	fab2 f282 	clz	r2, r2
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	f042 0220 	orr.w	r2, r2, #32
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	f002 021f 	and.w	r2, r2, #31
 8001af8:	2101      	movs	r1, #1
 8001afa:	fa01 f202 	lsl.w	r2, r1, r2
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d09b      	beq.n	8001a3c <HAL_RCC_OscConfig+0xbf4>
 8001b04:	e0a0      	b.n	8001c48 <HAL_RCC_OscConfig+0xe00>
 8001b06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	fa93 f2a3 	rbit	r2, r3
 8001b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b1e:	601a      	str	r2, [r3, #0]
  return result;
 8001b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b24:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	461a      	mov	r2, r3
 8001b38:	2300      	movs	r3, #0
 8001b3a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7fe fe88 	bl	8000850 <HAL_GetTick>
 8001b40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b44:	e009      	b.n	8001b5a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b46:	f7fe fe83 	bl	8000850 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e077      	b.n	8001c4a <HAL_RCC_OscConfig+0xe02>
 8001b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	fa93 f2a3 	rbit	r2, r3
 8001b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b72:	601a      	str	r2, [r3, #0]
  return result;
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	095b      	lsrs	r3, r3, #5
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d102      	bne.n	8001b94 <HAL_RCC_OscConfig+0xd4c>
 8001b8e:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <HAL_RCC_OscConfig+0xe0c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	e01b      	b.n	8001bcc <HAL_RCC_OscConfig+0xd84>
 8001b94:	f107 0320 	add.w	r3, r7, #32
 8001b98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f107 0320 	add.w	r3, r7, #32
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	fa93 f2a3 	rbit	r2, r3
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f107 0318 	add.w	r3, r7, #24
 8001bb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	f107 0318 	add.w	r3, r7, #24
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	fa93 f2a3 	rbit	r2, r3
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HAL_RCC_OscConfig+0xe0c>)
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	f107 0210 	add.w	r2, r7, #16
 8001bd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bd4:	6011      	str	r1, [r2, #0]
 8001bd6:	f107 0210 	add.w	r2, r7, #16
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	fa92 f1a2 	rbit	r1, r2
 8001be0:	f107 020c 	add.w	r2, r7, #12
 8001be4:	6011      	str	r1, [r2, #0]
  return result;
 8001be6:	f107 020c 	add.w	r2, r7, #12
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	fab2 f282 	clz	r2, r2
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	f042 0220 	orr.w	r2, r2, #32
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	f002 021f 	and.w	r2, r2, #31
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d19e      	bne.n	8001b46 <HAL_RCC_OscConfig+0xcfe>
 8001c08:	e01e      	b.n	8001c48 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e018      	b.n	8001c4a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_RCC_OscConfig+0xe0c>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c20:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d108      	bne.n	8001c44 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000

08001c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b09e      	sub	sp, #120	; 0x78
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e162      	b.n	8001f36 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c70:	4b90      	ldr	r3, [pc, #576]	; (8001eb4 <HAL_RCC_ClockConfig+0x25c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d910      	bls.n	8001ca0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b8d      	ldr	r3, [pc, #564]	; (8001eb4 <HAL_RCC_ClockConfig+0x25c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 0207 	bic.w	r2, r3, #7
 8001c86:	498b      	ldr	r1, [pc, #556]	; (8001eb4 <HAL_RCC_ClockConfig+0x25c>)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b89      	ldr	r3, [pc, #548]	; (8001eb4 <HAL_RCC_ClockConfig+0x25c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e14a      	b.n	8001f36 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cac:	4b82      	ldr	r3, [pc, #520]	; (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	497f      	ldr	r1, [pc, #508]	; (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80dc 	beq.w	8001e84 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d13c      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xf6>
 8001cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d102      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xa6>
 8001cf8:	4b6f      	ldr	r3, [pc, #444]	; (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	e00f      	b.n	8001d1e <HAL_RCC_ClockConfig+0xc6>
 8001cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	667b      	str	r3, [r7, #100]	; 0x64
 8001d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d10:	663b      	str	r3, [r7, #96]	; 0x60
 8001d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d1a:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d22:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d26:	fa92 f2a2 	rbit	r2, r2
 8001d2a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d2e:	fab2 f282 	clz	r2, r2
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	f042 0220 	orr.w	r2, r2, #32
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f002 021f 	and.w	r2, r2, #31
 8001d3e:	2101      	movs	r1, #1
 8001d40:	fa01 f202 	lsl.w	r2, r1, r2
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d17b      	bne.n	8001e42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e0f3      	b.n	8001f36 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d13c      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x178>
 8001d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	095b      	lsrs	r3, r3, #5
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d102      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x128>
 8001d7a:	4b4f      	ldr	r3, [pc, #316]	; (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	e00f      	b.n	8001da0 <HAL_RCC_ClockConfig+0x148>
 8001d80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8001d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d92:	643b      	str	r3, [r7, #64]	; 0x40
 8001d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d9c:	4b46      	ldr	r3, [pc, #280]	; (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001da6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001da8:	fa92 f2a2 	rbit	r2, r2
 8001dac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001db0:	fab2 f282 	clz	r2, r2
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	f042 0220 	orr.w	r2, r2, #32
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	f002 021f 	and.w	r2, r2, #31
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d13a      	bne.n	8001e42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0b2      	b.n	8001f36 <HAL_RCC_ClockConfig+0x2de>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d102      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x1a0>
 8001df2:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	e00d      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1bc>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
 8001e04:	2302      	movs	r3, #2
 8001e06:	623b      	str	r3, [r7, #32]
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	2202      	movs	r2, #2
 8001e16:	61ba      	str	r2, [r7, #24]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	fa92 f2a2 	rbit	r2, r2
 8001e1e:	617a      	str	r2, [r7, #20]
  return result;
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	fab2 f282 	clz	r2, r2
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	f042 0220 	orr.w	r2, r2, #32
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	f002 021f 	and.w	r2, r2, #31
 8001e32:	2101      	movs	r1, #1
 8001e34:	fa01 f202 	lsl.w	r2, r1, r2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e079      	b.n	8001f36 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f023 0203 	bic.w	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	491a      	ldr	r1, [pc, #104]	; (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e54:	f7fe fcfc 	bl	8000850 <HAL_GetTick>
 8001e58:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5c:	f7fe fcf8 	bl	8000850 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e061      	b.n	8001f36 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 020c 	and.w	r2, r3, #12
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d1eb      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_ClockConfig+0x25c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d214      	bcs.n	8001ebc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_RCC_ClockConfig+0x25c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 0207 	bic.w	r2, r3, #7
 8001e9a:	4906      	ldr	r1, [pc, #24]	; (8001eb4 <HAL_RCC_ClockConfig+0x25c>)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_RCC_ClockConfig+0x25c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e040      	b.n	8001f36 <HAL_RCC_ClockConfig+0x2de>
 8001eb4:	40022000 	.word	0x40022000
 8001eb8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_RCC_ClockConfig+0x2e8>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	491a      	ldr	r1, [pc, #104]	; (8001f40 <HAL_RCC_ClockConfig+0x2e8>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee6:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <HAL_RCC_ClockConfig+0x2e8>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4912      	ldr	r1, [pc, #72]	; (8001f40 <HAL_RCC_ClockConfig+0x2e8>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001efa:	f000 f829 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001efe:	4601      	mov	r1, r0
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_RCC_ClockConfig+0x2e8>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f08:	22f0      	movs	r2, #240	; 0xf0
 8001f0a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	fa92 f2a2 	rbit	r2, r2
 8001f12:	60fa      	str	r2, [r7, #12]
  return result;
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	fab2 f282 	clz	r2, r2
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	40d3      	lsrs	r3, r2
 8001f1e:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x2ec>)
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
 8001f22:	fa21 f303 	lsr.w	r3, r1, r3
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <HAL_RCC_ClockConfig+0x2f0>)
 8001f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_RCC_ClockConfig+0x2f4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fc4a 	bl	80007c8 <HAL_InitTick>
  
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3778      	adds	r7, #120	; 0x78
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08003414 	.word	0x08003414
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	20000004 	.word	0x20000004

08001f50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b08b      	sub	sp, #44	; 0x2c
 8001f54:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f6a:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d002      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x30>
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0x36>
 8001f7e:	e03c      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f80:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f82:	623b      	str	r3, [r7, #32]
      break;
 8001f84:	e03c      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f8c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f90:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	fa92 f2a2 	rbit	r2, r2
 8001f98:	607a      	str	r2, [r7, #4]
  return result;
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	fab2 f282 	clz	r2, r2
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	40d3      	lsrs	r3, r2
 8001fa4:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	fa92 f2a2 	rbit	r2, r2
 8001fbc:	60fa      	str	r2, [r7, #12]
  return result;
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	fab2 f282 	clz	r2, r2
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	40d3      	lsrs	r3, r2
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001fca:	5cd3      	ldrb	r3, [r2, r3]
 8001fcc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fd8:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fb02 f303 	mul.w	r3, r2, r3
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe8:	e004      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	623b      	str	r3, [r7, #32]
      break;
 8001ff8:	e002      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ffc:	623b      	str	r3, [r7, #32]
      break;
 8001ffe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002000:	6a3b      	ldr	r3, [r7, #32]
}
 8002002:	4618      	mov	r0, r3
 8002004:	372c      	adds	r7, #44	; 0x2c
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	007a1200 	.word	0x007a1200
 8002018:	0800342c 	.word	0x0800342c
 800201c:	0800343c 	.word	0x0800343c
 8002020:	003d0900 	.word	0x003d0900

08002024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_RCC_GetHCLKFreq+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000000 	.word	0x20000000

0800203c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002042:	f7ff ffef 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002046:	4601      	mov	r1, r0
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002050:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002054:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	fa92 f2a2 	rbit	r2, r2
 800205c:	603a      	str	r2, [r7, #0]
  return result;
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	fab2 f282 	clz	r2, r2
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	40d3      	lsrs	r3, r2
 8002068:	4a04      	ldr	r2, [pc, #16]	; (800207c <HAL_RCC_GetPCLK1Freq+0x40>)
 800206a:	5cd3      	ldrb	r3, [r2, r3]
 800206c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	08003424 	.word	0x08003424

08002080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002086:	f7ff ffcd 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 800208a:	4601      	mov	r1, r0
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002094:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002098:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	fa92 f2a2 	rbit	r2, r2
 80020a0:	603a      	str	r2, [r7, #0]
  return result;
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	fab2 f282 	clz	r2, r2
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	40d3      	lsrs	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08003424 	.word	0x08003424

080020c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e040      	b.n	8002158 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d106      	bne.n	80020ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7fe fa20 	bl	800052c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2224      	movs	r2, #36	; 0x24
 80020f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8c0 	bl	8002288 <UART_SetConfig>
 8002108:	4603      	mov	r3, r0
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e022      	b.n	8002158 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f9ea 	bl	80024f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800212e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800213e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fa71 	bl	8002638 <UART_CheckIdleState>
 8002156:	4603      	mov	r3, r0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af02      	add	r7, sp, #8
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002174:	2b20      	cmp	r3, #32
 8002176:	f040 8082 	bne.w	800227e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_UART_Transmit+0x26>
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e07a      	b.n	8002280 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_UART_Transmit+0x38>
 8002194:	2302      	movs	r3, #2
 8002196:	e073      	b.n	8002280 <HAL_UART_Transmit+0x120>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2221      	movs	r2, #33	; 0x21
 80021ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ae:	f7fe fb4f 	bl	8000850 <HAL_GetTick>
 80021b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	88fa      	ldrh	r2, [r7, #6]
 80021c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021cc:	d108      	bne.n	80021e0 <HAL_UART_Transmit+0x80>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d104      	bne.n	80021e0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	e003      	b.n	80021e8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80021f0:	e02d      	b.n	800224e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2200      	movs	r2, #0
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 fa64 	bl	80026ca <UART_WaitOnFlagUntilTimeout>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e039      	b.n	8002280 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10b      	bne.n	800222a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	881a      	ldrh	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800221e:	b292      	uxth	r2, r2
 8002220:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	3302      	adds	r3, #2
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	e008      	b.n	800223c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	781a      	ldrb	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	b292      	uxth	r2, r2
 8002234:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3301      	adds	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002254:	b29b      	uxth	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1cb      	bne.n	80021f2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2200      	movs	r2, #0
 8002262:	2140      	movs	r1, #64	; 0x40
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fa30 	bl	80026ca <UART_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e005      	b.n	8002280 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	e000      	b.n	8002280 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800227e:	2302      	movs	r3, #2
  }
}
 8002280:	4618      	mov	r0, r3
 8002282:	3720      	adds	r7, #32
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b8a      	ldr	r3, [pc, #552]	; (80024dc <UART_SetConfig+0x254>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	6979      	ldr	r1, [r7, #20]
 80022bc:	430b      	orrs	r3, r1
 80022be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a78      	ldr	r2, [pc, #480]	; (80024e0 <UART_SetConfig+0x258>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d120      	bne.n	8002346 <UART_SetConfig+0xbe>
 8002304:	4b77      	ldr	r3, [pc, #476]	; (80024e4 <UART_SetConfig+0x25c>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b03      	cmp	r3, #3
 800230e:	d817      	bhi.n	8002340 <UART_SetConfig+0xb8>
 8002310:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <UART_SetConfig+0x90>)
 8002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002316:	bf00      	nop
 8002318:	08002329 	.word	0x08002329
 800231c:	08002335 	.word	0x08002335
 8002320:	0800233b 	.word	0x0800233b
 8002324:	0800232f 	.word	0x0800232f
 8002328:	2300      	movs	r3, #0
 800232a:	77fb      	strb	r3, [r7, #31]
 800232c:	e01d      	b.n	800236a <UART_SetConfig+0xe2>
 800232e:	2302      	movs	r3, #2
 8002330:	77fb      	strb	r3, [r7, #31]
 8002332:	e01a      	b.n	800236a <UART_SetConfig+0xe2>
 8002334:	2304      	movs	r3, #4
 8002336:	77fb      	strb	r3, [r7, #31]
 8002338:	e017      	b.n	800236a <UART_SetConfig+0xe2>
 800233a:	2308      	movs	r3, #8
 800233c:	77fb      	strb	r3, [r7, #31]
 800233e:	e014      	b.n	800236a <UART_SetConfig+0xe2>
 8002340:	2310      	movs	r3, #16
 8002342:	77fb      	strb	r3, [r7, #31]
 8002344:	e011      	b.n	800236a <UART_SetConfig+0xe2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a67      	ldr	r2, [pc, #412]	; (80024e8 <UART_SetConfig+0x260>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d102      	bne.n	8002356 <UART_SetConfig+0xce>
 8002350:	2300      	movs	r3, #0
 8002352:	77fb      	strb	r3, [r7, #31]
 8002354:	e009      	b.n	800236a <UART_SetConfig+0xe2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a64      	ldr	r2, [pc, #400]	; (80024ec <UART_SetConfig+0x264>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d102      	bne.n	8002366 <UART_SetConfig+0xde>
 8002360:	2300      	movs	r3, #0
 8002362:	77fb      	strb	r3, [r7, #31]
 8002364:	e001      	b.n	800236a <UART_SetConfig+0xe2>
 8002366:	2310      	movs	r3, #16
 8002368:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002372:	d15b      	bne.n	800242c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002374:	7ffb      	ldrb	r3, [r7, #31]
 8002376:	2b08      	cmp	r3, #8
 8002378:	d827      	bhi.n	80023ca <UART_SetConfig+0x142>
 800237a:	a201      	add	r2, pc, #4	; (adr r2, 8002380 <UART_SetConfig+0xf8>)
 800237c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002380:	080023a5 	.word	0x080023a5
 8002384:	080023ad 	.word	0x080023ad
 8002388:	080023b5 	.word	0x080023b5
 800238c:	080023cb 	.word	0x080023cb
 8002390:	080023bb 	.word	0x080023bb
 8002394:	080023cb 	.word	0x080023cb
 8002398:	080023cb 	.word	0x080023cb
 800239c:	080023cb 	.word	0x080023cb
 80023a0:	080023c3 	.word	0x080023c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023a4:	f7ff fe4a 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 80023a8:	61b8      	str	r0, [r7, #24]
        break;
 80023aa:	e013      	b.n	80023d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023ac:	f7ff fe68 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
 80023b0:	61b8      	str	r0, [r7, #24]
        break;
 80023b2:	e00f      	b.n	80023d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023b4:	4b4e      	ldr	r3, [pc, #312]	; (80024f0 <UART_SetConfig+0x268>)
 80023b6:	61bb      	str	r3, [r7, #24]
        break;
 80023b8:	e00c      	b.n	80023d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023ba:	f7ff fdc9 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 80023be:	61b8      	str	r0, [r7, #24]
        break;
 80023c0:	e008      	b.n	80023d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c6:	61bb      	str	r3, [r7, #24]
        break;
 80023c8:	e004      	b.n	80023d4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	77bb      	strb	r3, [r7, #30]
        break;
 80023d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d074      	beq.n	80024c4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	005a      	lsls	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	441a      	add	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	2b0f      	cmp	r3, #15
 80023f6:	d916      	bls.n	8002426 <UART_SetConfig+0x19e>
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fe:	d212      	bcs.n	8002426 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	b29b      	uxth	r3, r3
 8002404:	f023 030f 	bic.w	r3, r3, #15
 8002408:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	b29b      	uxth	r3, r3
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	b29a      	uxth	r2, r3
 8002416:	89fb      	ldrh	r3, [r7, #14]
 8002418:	4313      	orrs	r3, r2
 800241a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	89fa      	ldrh	r2, [r7, #14]
 8002422:	60da      	str	r2, [r3, #12]
 8002424:	e04e      	b.n	80024c4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	77bb      	strb	r3, [r7, #30]
 800242a:	e04b      	b.n	80024c4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800242c:	7ffb      	ldrb	r3, [r7, #31]
 800242e:	2b08      	cmp	r3, #8
 8002430:	d827      	bhi.n	8002482 <UART_SetConfig+0x1fa>
 8002432:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <UART_SetConfig+0x1b0>)
 8002434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002438:	0800245d 	.word	0x0800245d
 800243c:	08002465 	.word	0x08002465
 8002440:	0800246d 	.word	0x0800246d
 8002444:	08002483 	.word	0x08002483
 8002448:	08002473 	.word	0x08002473
 800244c:	08002483 	.word	0x08002483
 8002450:	08002483 	.word	0x08002483
 8002454:	08002483 	.word	0x08002483
 8002458:	0800247b 	.word	0x0800247b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800245c:	f7ff fdee 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 8002460:	61b8      	str	r0, [r7, #24]
        break;
 8002462:	e013      	b.n	800248c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002464:	f7ff fe0c 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
 8002468:	61b8      	str	r0, [r7, #24]
        break;
 800246a:	e00f      	b.n	800248c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800246c:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <UART_SetConfig+0x268>)
 800246e:	61bb      	str	r3, [r7, #24]
        break;
 8002470:	e00c      	b.n	800248c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002472:	f7ff fd6d 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8002476:	61b8      	str	r0, [r7, #24]
        break;
 8002478:	e008      	b.n	800248c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800247a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800247e:	61bb      	str	r3, [r7, #24]
        break;
 8002480:	e004      	b.n	800248c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	77bb      	strb	r3, [r7, #30]
        break;
 800248a:	bf00      	nop
    }

    if (pclk != 0U)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d018      	beq.n	80024c4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	085a      	lsrs	r2, r3, #1
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	441a      	add	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b0f      	cmp	r3, #15
 80024ac:	d908      	bls.n	80024c0 <UART_SetConfig+0x238>
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b4:	d204      	bcs.n	80024c0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	e001      	b.n	80024c4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80024d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	efff69f3 	.word	0xefff69f3
 80024e0:	40013800 	.word	0x40013800
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40004400 	.word	0x40004400
 80024ec:	40004800 	.word	0x40004800
 80024f0:	007a1200 	.word	0x007a1200

080024f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01a      	beq.n	800260a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025f2:	d10a      	bne.n	800260a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	605a      	str	r2, [r3, #4]
  }
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af02      	add	r7, sp, #8
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002648:	f7fe f902 	bl	8000850 <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b08      	cmp	r3, #8
 800265a:	d10e      	bne.n	800267a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800265c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f82d 	bl	80026ca <UART_WaitOnFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e023      	b.n	80026c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b04      	cmp	r3, #4
 8002686:	d10e      	bne.n	80026a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002688:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f817 	bl	80026ca <UART_WaitOnFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e00d      	b.n	80026c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2220      	movs	r2, #32
 80026aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b09c      	sub	sp, #112	; 0x70
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	4613      	mov	r3, r2
 80026d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026da:	e0a5      	b.n	8002828 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e2:	f000 80a1 	beq.w	8002828 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e6:	f7fe f8b3 	bl	8000850 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d302      	bcc.n	80026fc <UART_WaitOnFlagUntilTimeout+0x32>
 80026f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d13e      	bne.n	800277a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002704:	e853 3f00 	ldrex	r3, [r3]
 8002708:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800270a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800270c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002710:	667b      	str	r3, [r7, #100]	; 0x64
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800271a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800271c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002720:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002722:	e841 2300 	strex	r3, r2, [r1]
 8002726:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1e6      	bne.n	80026fc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	3308      	adds	r3, #8
 8002734:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002738:	e853 3f00 	ldrex	r3, [r3]
 800273c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	663b      	str	r3, [r7, #96]	; 0x60
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3308      	adds	r3, #8
 800274c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800274e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002750:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002752:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002756:	e841 2300 	strex	r3, r2, [r1]
 800275a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800275c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1e5      	bne.n	800272e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e067      	b.n	800284a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d04f      	beq.n	8002828 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002796:	d147      	bne.n	8002828 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	e853 3f00 	ldrex	r3, [r3]
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c0:	637b      	str	r3, [r7, #52]	; 0x34
 80027c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027c8:	e841 2300 	strex	r3, r2, [r1]
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1e6      	bne.n	80027a2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3308      	adds	r3, #8
 80027da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	e853 3f00 	ldrex	r3, [r3]
 80027e2:	613b      	str	r3, [r7, #16]
   return(result);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3308      	adds	r3, #8
 80027f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80027f4:	623a      	str	r2, [r7, #32]
 80027f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f8:	69f9      	ldr	r1, [r7, #28]
 80027fa:	6a3a      	ldr	r2, [r7, #32]
 80027fc:	e841 2300 	strex	r3, r2, [r1]
 8002800:	61bb      	str	r3, [r7, #24]
   return(result);
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e5      	bne.n	80027d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2220      	movs	r2, #32
 8002812:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e010      	b.n	800284a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	69da      	ldr	r2, [r3, #28]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	429a      	cmp	r2, r3
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	429a      	cmp	r2, r3
 8002844:	f43f af4a 	beq.w	80026dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3770      	adds	r7, #112	; 0x70
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <__errno>:
 8002854:	4b01      	ldr	r3, [pc, #4]	; (800285c <__errno+0x8>)
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	2000000c 	.word	0x2000000c

08002860 <__libc_init_array>:
 8002860:	b570      	push	{r4, r5, r6, lr}
 8002862:	4d0d      	ldr	r5, [pc, #52]	; (8002898 <__libc_init_array+0x38>)
 8002864:	4c0d      	ldr	r4, [pc, #52]	; (800289c <__libc_init_array+0x3c>)
 8002866:	1b64      	subs	r4, r4, r5
 8002868:	10a4      	asrs	r4, r4, #2
 800286a:	2600      	movs	r6, #0
 800286c:	42a6      	cmp	r6, r4
 800286e:	d109      	bne.n	8002884 <__libc_init_array+0x24>
 8002870:	4d0b      	ldr	r5, [pc, #44]	; (80028a0 <__libc_init_array+0x40>)
 8002872:	4c0c      	ldr	r4, [pc, #48]	; (80028a4 <__libc_init_array+0x44>)
 8002874:	f000 fdbc 	bl	80033f0 <_init>
 8002878:	1b64      	subs	r4, r4, r5
 800287a:	10a4      	asrs	r4, r4, #2
 800287c:	2600      	movs	r6, #0
 800287e:	42a6      	cmp	r6, r4
 8002880:	d105      	bne.n	800288e <__libc_init_array+0x2e>
 8002882:	bd70      	pop	{r4, r5, r6, pc}
 8002884:	f855 3b04 	ldr.w	r3, [r5], #4
 8002888:	4798      	blx	r3
 800288a:	3601      	adds	r6, #1
 800288c:	e7ee      	b.n	800286c <__libc_init_array+0xc>
 800288e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002892:	4798      	blx	r3
 8002894:	3601      	adds	r6, #1
 8002896:	e7f2      	b.n	800287e <__libc_init_array+0x1e>
 8002898:	080034b0 	.word	0x080034b0
 800289c:	080034b0 	.word	0x080034b0
 80028a0:	080034b0 	.word	0x080034b0
 80028a4:	080034b4 	.word	0x080034b4

080028a8 <memset>:
 80028a8:	4402      	add	r2, r0
 80028aa:	4603      	mov	r3, r0
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d100      	bne.n	80028b2 <memset+0xa>
 80028b0:	4770      	bx	lr
 80028b2:	f803 1b01 	strb.w	r1, [r3], #1
 80028b6:	e7f9      	b.n	80028ac <memset+0x4>

080028b8 <_puts_r>:
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	460e      	mov	r6, r1
 80028bc:	4605      	mov	r5, r0
 80028be:	b118      	cbz	r0, 80028c8 <_puts_r+0x10>
 80028c0:	6983      	ldr	r3, [r0, #24]
 80028c2:	b90b      	cbnz	r3, 80028c8 <_puts_r+0x10>
 80028c4:	f000 fb16 	bl	8002ef4 <__sinit>
 80028c8:	69ab      	ldr	r3, [r5, #24]
 80028ca:	68ac      	ldr	r4, [r5, #8]
 80028cc:	b913      	cbnz	r3, 80028d4 <_puts_r+0x1c>
 80028ce:	4628      	mov	r0, r5
 80028d0:	f000 fb10 	bl	8002ef4 <__sinit>
 80028d4:	4b2c      	ldr	r3, [pc, #176]	; (8002988 <_puts_r+0xd0>)
 80028d6:	429c      	cmp	r4, r3
 80028d8:	d120      	bne.n	800291c <_puts_r+0x64>
 80028da:	686c      	ldr	r4, [r5, #4]
 80028dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028de:	07db      	lsls	r3, r3, #31
 80028e0:	d405      	bmi.n	80028ee <_puts_r+0x36>
 80028e2:	89a3      	ldrh	r3, [r4, #12]
 80028e4:	0598      	lsls	r0, r3, #22
 80028e6:	d402      	bmi.n	80028ee <_puts_r+0x36>
 80028e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028ea:	f000 fba1 	bl	8003030 <__retarget_lock_acquire_recursive>
 80028ee:	89a3      	ldrh	r3, [r4, #12]
 80028f0:	0719      	lsls	r1, r3, #28
 80028f2:	d51d      	bpl.n	8002930 <_puts_r+0x78>
 80028f4:	6923      	ldr	r3, [r4, #16]
 80028f6:	b1db      	cbz	r3, 8002930 <_puts_r+0x78>
 80028f8:	3e01      	subs	r6, #1
 80028fa:	68a3      	ldr	r3, [r4, #8]
 80028fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002900:	3b01      	subs	r3, #1
 8002902:	60a3      	str	r3, [r4, #8]
 8002904:	bb39      	cbnz	r1, 8002956 <_puts_r+0x9e>
 8002906:	2b00      	cmp	r3, #0
 8002908:	da38      	bge.n	800297c <_puts_r+0xc4>
 800290a:	4622      	mov	r2, r4
 800290c:	210a      	movs	r1, #10
 800290e:	4628      	mov	r0, r5
 8002910:	f000 f916 	bl	8002b40 <__swbuf_r>
 8002914:	3001      	adds	r0, #1
 8002916:	d011      	beq.n	800293c <_puts_r+0x84>
 8002918:	250a      	movs	r5, #10
 800291a:	e011      	b.n	8002940 <_puts_r+0x88>
 800291c:	4b1b      	ldr	r3, [pc, #108]	; (800298c <_puts_r+0xd4>)
 800291e:	429c      	cmp	r4, r3
 8002920:	d101      	bne.n	8002926 <_puts_r+0x6e>
 8002922:	68ac      	ldr	r4, [r5, #8]
 8002924:	e7da      	b.n	80028dc <_puts_r+0x24>
 8002926:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <_puts_r+0xd8>)
 8002928:	429c      	cmp	r4, r3
 800292a:	bf08      	it	eq
 800292c:	68ec      	ldreq	r4, [r5, #12]
 800292e:	e7d5      	b.n	80028dc <_puts_r+0x24>
 8002930:	4621      	mov	r1, r4
 8002932:	4628      	mov	r0, r5
 8002934:	f000 f956 	bl	8002be4 <__swsetup_r>
 8002938:	2800      	cmp	r0, #0
 800293a:	d0dd      	beq.n	80028f8 <_puts_r+0x40>
 800293c:	f04f 35ff 	mov.w	r5, #4294967295
 8002940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002942:	07da      	lsls	r2, r3, #31
 8002944:	d405      	bmi.n	8002952 <_puts_r+0x9a>
 8002946:	89a3      	ldrh	r3, [r4, #12]
 8002948:	059b      	lsls	r3, r3, #22
 800294a:	d402      	bmi.n	8002952 <_puts_r+0x9a>
 800294c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800294e:	f000 fb70 	bl	8003032 <__retarget_lock_release_recursive>
 8002952:	4628      	mov	r0, r5
 8002954:	bd70      	pop	{r4, r5, r6, pc}
 8002956:	2b00      	cmp	r3, #0
 8002958:	da04      	bge.n	8002964 <_puts_r+0xac>
 800295a:	69a2      	ldr	r2, [r4, #24]
 800295c:	429a      	cmp	r2, r3
 800295e:	dc06      	bgt.n	800296e <_puts_r+0xb6>
 8002960:	290a      	cmp	r1, #10
 8002962:	d004      	beq.n	800296e <_puts_r+0xb6>
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	6022      	str	r2, [r4, #0]
 800296a:	7019      	strb	r1, [r3, #0]
 800296c:	e7c5      	b.n	80028fa <_puts_r+0x42>
 800296e:	4622      	mov	r2, r4
 8002970:	4628      	mov	r0, r5
 8002972:	f000 f8e5 	bl	8002b40 <__swbuf_r>
 8002976:	3001      	adds	r0, #1
 8002978:	d1bf      	bne.n	80028fa <_puts_r+0x42>
 800297a:	e7df      	b.n	800293c <_puts_r+0x84>
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	250a      	movs	r5, #10
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	6022      	str	r2, [r4, #0]
 8002984:	701d      	strb	r5, [r3, #0]
 8002986:	e7db      	b.n	8002940 <_puts_r+0x88>
 8002988:	08003470 	.word	0x08003470
 800298c:	08003490 	.word	0x08003490
 8002990:	08003450 	.word	0x08003450

08002994 <puts>:
 8002994:	4b02      	ldr	r3, [pc, #8]	; (80029a0 <puts+0xc>)
 8002996:	4601      	mov	r1, r0
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	f7ff bf8d 	b.w	80028b8 <_puts_r>
 800299e:	bf00      	nop
 80029a0:	2000000c 	.word	0x2000000c

080029a4 <setbuf>:
 80029a4:	2900      	cmp	r1, #0
 80029a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029aa:	bf0c      	ite	eq
 80029ac:	2202      	moveq	r2, #2
 80029ae:	2200      	movne	r2, #0
 80029b0:	f000 b800 	b.w	80029b4 <setvbuf>

080029b4 <setvbuf>:
 80029b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80029b8:	461d      	mov	r5, r3
 80029ba:	4b5d      	ldr	r3, [pc, #372]	; (8002b30 <setvbuf+0x17c>)
 80029bc:	681f      	ldr	r7, [r3, #0]
 80029be:	4604      	mov	r4, r0
 80029c0:	460e      	mov	r6, r1
 80029c2:	4690      	mov	r8, r2
 80029c4:	b127      	cbz	r7, 80029d0 <setvbuf+0x1c>
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	b913      	cbnz	r3, 80029d0 <setvbuf+0x1c>
 80029ca:	4638      	mov	r0, r7
 80029cc:	f000 fa92 	bl	8002ef4 <__sinit>
 80029d0:	4b58      	ldr	r3, [pc, #352]	; (8002b34 <setvbuf+0x180>)
 80029d2:	429c      	cmp	r4, r3
 80029d4:	d167      	bne.n	8002aa6 <setvbuf+0xf2>
 80029d6:	687c      	ldr	r4, [r7, #4]
 80029d8:	f1b8 0f02 	cmp.w	r8, #2
 80029dc:	d006      	beq.n	80029ec <setvbuf+0x38>
 80029de:	f1b8 0f01 	cmp.w	r8, #1
 80029e2:	f200 809f 	bhi.w	8002b24 <setvbuf+0x170>
 80029e6:	2d00      	cmp	r5, #0
 80029e8:	f2c0 809c 	blt.w	8002b24 <setvbuf+0x170>
 80029ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029ee:	07db      	lsls	r3, r3, #31
 80029f0:	d405      	bmi.n	80029fe <setvbuf+0x4a>
 80029f2:	89a3      	ldrh	r3, [r4, #12]
 80029f4:	0598      	lsls	r0, r3, #22
 80029f6:	d402      	bmi.n	80029fe <setvbuf+0x4a>
 80029f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029fa:	f000 fb19 	bl	8003030 <__retarget_lock_acquire_recursive>
 80029fe:	4621      	mov	r1, r4
 8002a00:	4638      	mov	r0, r7
 8002a02:	f000 f9e3 	bl	8002dcc <_fflush_r>
 8002a06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a08:	b141      	cbz	r1, 8002a1c <setvbuf+0x68>
 8002a0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a0e:	4299      	cmp	r1, r3
 8002a10:	d002      	beq.n	8002a18 <setvbuf+0x64>
 8002a12:	4638      	mov	r0, r7
 8002a14:	f000 fb7a 	bl	800310c <_free_r>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	6363      	str	r3, [r4, #52]	; 0x34
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61a3      	str	r3, [r4, #24]
 8002a20:	6063      	str	r3, [r4, #4]
 8002a22:	89a3      	ldrh	r3, [r4, #12]
 8002a24:	0619      	lsls	r1, r3, #24
 8002a26:	d503      	bpl.n	8002a30 <setvbuf+0x7c>
 8002a28:	6921      	ldr	r1, [r4, #16]
 8002a2a:	4638      	mov	r0, r7
 8002a2c:	f000 fb6e 	bl	800310c <_free_r>
 8002a30:	89a3      	ldrh	r3, [r4, #12]
 8002a32:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002a36:	f023 0303 	bic.w	r3, r3, #3
 8002a3a:	f1b8 0f02 	cmp.w	r8, #2
 8002a3e:	81a3      	strh	r3, [r4, #12]
 8002a40:	d06c      	beq.n	8002b1c <setvbuf+0x168>
 8002a42:	ab01      	add	r3, sp, #4
 8002a44:	466a      	mov	r2, sp
 8002a46:	4621      	mov	r1, r4
 8002a48:	4638      	mov	r0, r7
 8002a4a:	f000 faf3 	bl	8003034 <__swhatbuf_r>
 8002a4e:	89a3      	ldrh	r3, [r4, #12]
 8002a50:	4318      	orrs	r0, r3
 8002a52:	81a0      	strh	r0, [r4, #12]
 8002a54:	2d00      	cmp	r5, #0
 8002a56:	d130      	bne.n	8002aba <setvbuf+0x106>
 8002a58:	9d00      	ldr	r5, [sp, #0]
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	f000 fb4e 	bl	80030fc <malloc>
 8002a60:	4606      	mov	r6, r0
 8002a62:	2800      	cmp	r0, #0
 8002a64:	d155      	bne.n	8002b12 <setvbuf+0x15e>
 8002a66:	f8dd 9000 	ldr.w	r9, [sp]
 8002a6a:	45a9      	cmp	r9, r5
 8002a6c:	d14a      	bne.n	8002b04 <setvbuf+0x150>
 8002a6e:	f04f 35ff 	mov.w	r5, #4294967295
 8002a72:	2200      	movs	r2, #0
 8002a74:	60a2      	str	r2, [r4, #8]
 8002a76:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002a7a:	6022      	str	r2, [r4, #0]
 8002a7c:	6122      	str	r2, [r4, #16]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a84:	6162      	str	r2, [r4, #20]
 8002a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	07d2      	lsls	r2, r2, #31
 8002a8e:	81a3      	strh	r3, [r4, #12]
 8002a90:	d405      	bmi.n	8002a9e <setvbuf+0xea>
 8002a92:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002a96:	d102      	bne.n	8002a9e <setvbuf+0xea>
 8002a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a9a:	f000 faca 	bl	8003032 <__retarget_lock_release_recursive>
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	b003      	add	sp, #12
 8002aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002aa6:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <setvbuf+0x184>)
 8002aa8:	429c      	cmp	r4, r3
 8002aaa:	d101      	bne.n	8002ab0 <setvbuf+0xfc>
 8002aac:	68bc      	ldr	r4, [r7, #8]
 8002aae:	e793      	b.n	80029d8 <setvbuf+0x24>
 8002ab0:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <setvbuf+0x188>)
 8002ab2:	429c      	cmp	r4, r3
 8002ab4:	bf08      	it	eq
 8002ab6:	68fc      	ldreq	r4, [r7, #12]
 8002ab8:	e78e      	b.n	80029d8 <setvbuf+0x24>
 8002aba:	2e00      	cmp	r6, #0
 8002abc:	d0cd      	beq.n	8002a5a <setvbuf+0xa6>
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	b913      	cbnz	r3, 8002ac8 <setvbuf+0x114>
 8002ac2:	4638      	mov	r0, r7
 8002ac4:	f000 fa16 	bl	8002ef4 <__sinit>
 8002ac8:	f1b8 0f01 	cmp.w	r8, #1
 8002acc:	bf08      	it	eq
 8002ace:	89a3      	ldrheq	r3, [r4, #12]
 8002ad0:	6026      	str	r6, [r4, #0]
 8002ad2:	bf04      	itt	eq
 8002ad4:	f043 0301 	orreq.w	r3, r3, #1
 8002ad8:	81a3      	strheq	r3, [r4, #12]
 8002ada:	89a2      	ldrh	r2, [r4, #12]
 8002adc:	f012 0308 	ands.w	r3, r2, #8
 8002ae0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002ae4:	d01c      	beq.n	8002b20 <setvbuf+0x16c>
 8002ae6:	07d3      	lsls	r3, r2, #31
 8002ae8:	bf41      	itttt	mi
 8002aea:	2300      	movmi	r3, #0
 8002aec:	426d      	negmi	r5, r5
 8002aee:	60a3      	strmi	r3, [r4, #8]
 8002af0:	61a5      	strmi	r5, [r4, #24]
 8002af2:	bf58      	it	pl
 8002af4:	60a5      	strpl	r5, [r4, #8]
 8002af6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002af8:	f015 0501 	ands.w	r5, r5, #1
 8002afc:	d115      	bne.n	8002b2a <setvbuf+0x176>
 8002afe:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002b02:	e7c8      	b.n	8002a96 <setvbuf+0xe2>
 8002b04:	4648      	mov	r0, r9
 8002b06:	f000 faf9 	bl	80030fc <malloc>
 8002b0a:	4606      	mov	r6, r0
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d0ae      	beq.n	8002a6e <setvbuf+0xba>
 8002b10:	464d      	mov	r5, r9
 8002b12:	89a3      	ldrh	r3, [r4, #12]
 8002b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b18:	81a3      	strh	r3, [r4, #12]
 8002b1a:	e7d0      	b.n	8002abe <setvbuf+0x10a>
 8002b1c:	2500      	movs	r5, #0
 8002b1e:	e7a8      	b.n	8002a72 <setvbuf+0xbe>
 8002b20:	60a3      	str	r3, [r4, #8]
 8002b22:	e7e8      	b.n	8002af6 <setvbuf+0x142>
 8002b24:	f04f 35ff 	mov.w	r5, #4294967295
 8002b28:	e7b9      	b.n	8002a9e <setvbuf+0xea>
 8002b2a:	2500      	movs	r5, #0
 8002b2c:	e7b7      	b.n	8002a9e <setvbuf+0xea>
 8002b2e:	bf00      	nop
 8002b30:	2000000c 	.word	0x2000000c
 8002b34:	08003470 	.word	0x08003470
 8002b38:	08003490 	.word	0x08003490
 8002b3c:	08003450 	.word	0x08003450

08002b40 <__swbuf_r>:
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b42:	460e      	mov	r6, r1
 8002b44:	4614      	mov	r4, r2
 8002b46:	4605      	mov	r5, r0
 8002b48:	b118      	cbz	r0, 8002b52 <__swbuf_r+0x12>
 8002b4a:	6983      	ldr	r3, [r0, #24]
 8002b4c:	b90b      	cbnz	r3, 8002b52 <__swbuf_r+0x12>
 8002b4e:	f000 f9d1 	bl	8002ef4 <__sinit>
 8002b52:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <__swbuf_r+0x98>)
 8002b54:	429c      	cmp	r4, r3
 8002b56:	d12b      	bne.n	8002bb0 <__swbuf_r+0x70>
 8002b58:	686c      	ldr	r4, [r5, #4]
 8002b5a:	69a3      	ldr	r3, [r4, #24]
 8002b5c:	60a3      	str	r3, [r4, #8]
 8002b5e:	89a3      	ldrh	r3, [r4, #12]
 8002b60:	071a      	lsls	r2, r3, #28
 8002b62:	d52f      	bpl.n	8002bc4 <__swbuf_r+0x84>
 8002b64:	6923      	ldr	r3, [r4, #16]
 8002b66:	b36b      	cbz	r3, 8002bc4 <__swbuf_r+0x84>
 8002b68:	6923      	ldr	r3, [r4, #16]
 8002b6a:	6820      	ldr	r0, [r4, #0]
 8002b6c:	1ac0      	subs	r0, r0, r3
 8002b6e:	6963      	ldr	r3, [r4, #20]
 8002b70:	b2f6      	uxtb	r6, r6
 8002b72:	4283      	cmp	r3, r0
 8002b74:	4637      	mov	r7, r6
 8002b76:	dc04      	bgt.n	8002b82 <__swbuf_r+0x42>
 8002b78:	4621      	mov	r1, r4
 8002b7a:	4628      	mov	r0, r5
 8002b7c:	f000 f926 	bl	8002dcc <_fflush_r>
 8002b80:	bb30      	cbnz	r0, 8002bd0 <__swbuf_r+0x90>
 8002b82:	68a3      	ldr	r3, [r4, #8]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	60a3      	str	r3, [r4, #8]
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	6022      	str	r2, [r4, #0]
 8002b8e:	701e      	strb	r6, [r3, #0]
 8002b90:	6963      	ldr	r3, [r4, #20]
 8002b92:	3001      	adds	r0, #1
 8002b94:	4283      	cmp	r3, r0
 8002b96:	d004      	beq.n	8002ba2 <__swbuf_r+0x62>
 8002b98:	89a3      	ldrh	r3, [r4, #12]
 8002b9a:	07db      	lsls	r3, r3, #31
 8002b9c:	d506      	bpl.n	8002bac <__swbuf_r+0x6c>
 8002b9e:	2e0a      	cmp	r6, #10
 8002ba0:	d104      	bne.n	8002bac <__swbuf_r+0x6c>
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	4628      	mov	r0, r5
 8002ba6:	f000 f911 	bl	8002dcc <_fflush_r>
 8002baa:	b988      	cbnz	r0, 8002bd0 <__swbuf_r+0x90>
 8002bac:	4638      	mov	r0, r7
 8002bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <__swbuf_r+0x9c>)
 8002bb2:	429c      	cmp	r4, r3
 8002bb4:	d101      	bne.n	8002bba <__swbuf_r+0x7a>
 8002bb6:	68ac      	ldr	r4, [r5, #8]
 8002bb8:	e7cf      	b.n	8002b5a <__swbuf_r+0x1a>
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <__swbuf_r+0xa0>)
 8002bbc:	429c      	cmp	r4, r3
 8002bbe:	bf08      	it	eq
 8002bc0:	68ec      	ldreq	r4, [r5, #12]
 8002bc2:	e7ca      	b.n	8002b5a <__swbuf_r+0x1a>
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	f000 f80c 	bl	8002be4 <__swsetup_r>
 8002bcc:	2800      	cmp	r0, #0
 8002bce:	d0cb      	beq.n	8002b68 <__swbuf_r+0x28>
 8002bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8002bd4:	e7ea      	b.n	8002bac <__swbuf_r+0x6c>
 8002bd6:	bf00      	nop
 8002bd8:	08003470 	.word	0x08003470
 8002bdc:	08003490 	.word	0x08003490
 8002be0:	08003450 	.word	0x08003450

08002be4 <__swsetup_r>:
 8002be4:	4b32      	ldr	r3, [pc, #200]	; (8002cb0 <__swsetup_r+0xcc>)
 8002be6:	b570      	push	{r4, r5, r6, lr}
 8002be8:	681d      	ldr	r5, [r3, #0]
 8002bea:	4606      	mov	r6, r0
 8002bec:	460c      	mov	r4, r1
 8002bee:	b125      	cbz	r5, 8002bfa <__swsetup_r+0x16>
 8002bf0:	69ab      	ldr	r3, [r5, #24]
 8002bf2:	b913      	cbnz	r3, 8002bfa <__swsetup_r+0x16>
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	f000 f97d 	bl	8002ef4 <__sinit>
 8002bfa:	4b2e      	ldr	r3, [pc, #184]	; (8002cb4 <__swsetup_r+0xd0>)
 8002bfc:	429c      	cmp	r4, r3
 8002bfe:	d10f      	bne.n	8002c20 <__swsetup_r+0x3c>
 8002c00:	686c      	ldr	r4, [r5, #4]
 8002c02:	89a3      	ldrh	r3, [r4, #12]
 8002c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c08:	0719      	lsls	r1, r3, #28
 8002c0a:	d42c      	bmi.n	8002c66 <__swsetup_r+0x82>
 8002c0c:	06dd      	lsls	r5, r3, #27
 8002c0e:	d411      	bmi.n	8002c34 <__swsetup_r+0x50>
 8002c10:	2309      	movs	r3, #9
 8002c12:	6033      	str	r3, [r6, #0]
 8002c14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002c18:	81a3      	strh	r3, [r4, #12]
 8002c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1e:	e03e      	b.n	8002c9e <__swsetup_r+0xba>
 8002c20:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <__swsetup_r+0xd4>)
 8002c22:	429c      	cmp	r4, r3
 8002c24:	d101      	bne.n	8002c2a <__swsetup_r+0x46>
 8002c26:	68ac      	ldr	r4, [r5, #8]
 8002c28:	e7eb      	b.n	8002c02 <__swsetup_r+0x1e>
 8002c2a:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <__swsetup_r+0xd8>)
 8002c2c:	429c      	cmp	r4, r3
 8002c2e:	bf08      	it	eq
 8002c30:	68ec      	ldreq	r4, [r5, #12]
 8002c32:	e7e6      	b.n	8002c02 <__swsetup_r+0x1e>
 8002c34:	0758      	lsls	r0, r3, #29
 8002c36:	d512      	bpl.n	8002c5e <__swsetup_r+0x7a>
 8002c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c3a:	b141      	cbz	r1, 8002c4e <__swsetup_r+0x6a>
 8002c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c40:	4299      	cmp	r1, r3
 8002c42:	d002      	beq.n	8002c4a <__swsetup_r+0x66>
 8002c44:	4630      	mov	r0, r6
 8002c46:	f000 fa61 	bl	800310c <_free_r>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	6363      	str	r3, [r4, #52]	; 0x34
 8002c4e:	89a3      	ldrh	r3, [r4, #12]
 8002c50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c54:	81a3      	strh	r3, [r4, #12]
 8002c56:	2300      	movs	r3, #0
 8002c58:	6063      	str	r3, [r4, #4]
 8002c5a:	6923      	ldr	r3, [r4, #16]
 8002c5c:	6023      	str	r3, [r4, #0]
 8002c5e:	89a3      	ldrh	r3, [r4, #12]
 8002c60:	f043 0308 	orr.w	r3, r3, #8
 8002c64:	81a3      	strh	r3, [r4, #12]
 8002c66:	6923      	ldr	r3, [r4, #16]
 8002c68:	b94b      	cbnz	r3, 8002c7e <__swsetup_r+0x9a>
 8002c6a:	89a3      	ldrh	r3, [r4, #12]
 8002c6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c74:	d003      	beq.n	8002c7e <__swsetup_r+0x9a>
 8002c76:	4621      	mov	r1, r4
 8002c78:	4630      	mov	r0, r6
 8002c7a:	f000 f9ff 	bl	800307c <__smakebuf_r>
 8002c7e:	89a0      	ldrh	r0, [r4, #12]
 8002c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c84:	f010 0301 	ands.w	r3, r0, #1
 8002c88:	d00a      	beq.n	8002ca0 <__swsetup_r+0xbc>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60a3      	str	r3, [r4, #8]
 8002c8e:	6963      	ldr	r3, [r4, #20]
 8002c90:	425b      	negs	r3, r3
 8002c92:	61a3      	str	r3, [r4, #24]
 8002c94:	6923      	ldr	r3, [r4, #16]
 8002c96:	b943      	cbnz	r3, 8002caa <__swsetup_r+0xc6>
 8002c98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002c9c:	d1ba      	bne.n	8002c14 <__swsetup_r+0x30>
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	0781      	lsls	r1, r0, #30
 8002ca2:	bf58      	it	pl
 8002ca4:	6963      	ldrpl	r3, [r4, #20]
 8002ca6:	60a3      	str	r3, [r4, #8]
 8002ca8:	e7f4      	b.n	8002c94 <__swsetup_r+0xb0>
 8002caa:	2000      	movs	r0, #0
 8002cac:	e7f7      	b.n	8002c9e <__swsetup_r+0xba>
 8002cae:	bf00      	nop
 8002cb0:	2000000c 	.word	0x2000000c
 8002cb4:	08003470 	.word	0x08003470
 8002cb8:	08003490 	.word	0x08003490
 8002cbc:	08003450 	.word	0x08003450

08002cc0 <__sflush_r>:
 8002cc0:	898a      	ldrh	r2, [r1, #12]
 8002cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cc6:	4605      	mov	r5, r0
 8002cc8:	0710      	lsls	r0, r2, #28
 8002cca:	460c      	mov	r4, r1
 8002ccc:	d458      	bmi.n	8002d80 <__sflush_r+0xc0>
 8002cce:	684b      	ldr	r3, [r1, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	dc05      	bgt.n	8002ce0 <__sflush_r+0x20>
 8002cd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	dc02      	bgt.n	8002ce0 <__sflush_r+0x20>
 8002cda:	2000      	movs	r0, #0
 8002cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ce2:	2e00      	cmp	r6, #0
 8002ce4:	d0f9      	beq.n	8002cda <__sflush_r+0x1a>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002cec:	682f      	ldr	r7, [r5, #0]
 8002cee:	602b      	str	r3, [r5, #0]
 8002cf0:	d032      	beq.n	8002d58 <__sflush_r+0x98>
 8002cf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002cf4:	89a3      	ldrh	r3, [r4, #12]
 8002cf6:	075a      	lsls	r2, r3, #29
 8002cf8:	d505      	bpl.n	8002d06 <__sflush_r+0x46>
 8002cfa:	6863      	ldr	r3, [r4, #4]
 8002cfc:	1ac0      	subs	r0, r0, r3
 8002cfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d00:	b10b      	cbz	r3, 8002d06 <__sflush_r+0x46>
 8002d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d04:	1ac0      	subs	r0, r0, r3
 8002d06:	2300      	movs	r3, #0
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d0c:	6a21      	ldr	r1, [r4, #32]
 8002d0e:	4628      	mov	r0, r5
 8002d10:	47b0      	blx	r6
 8002d12:	1c43      	adds	r3, r0, #1
 8002d14:	89a3      	ldrh	r3, [r4, #12]
 8002d16:	d106      	bne.n	8002d26 <__sflush_r+0x66>
 8002d18:	6829      	ldr	r1, [r5, #0]
 8002d1a:	291d      	cmp	r1, #29
 8002d1c:	d82c      	bhi.n	8002d78 <__sflush_r+0xb8>
 8002d1e:	4a2a      	ldr	r2, [pc, #168]	; (8002dc8 <__sflush_r+0x108>)
 8002d20:	40ca      	lsrs	r2, r1
 8002d22:	07d6      	lsls	r6, r2, #31
 8002d24:	d528      	bpl.n	8002d78 <__sflush_r+0xb8>
 8002d26:	2200      	movs	r2, #0
 8002d28:	6062      	str	r2, [r4, #4]
 8002d2a:	04d9      	lsls	r1, r3, #19
 8002d2c:	6922      	ldr	r2, [r4, #16]
 8002d2e:	6022      	str	r2, [r4, #0]
 8002d30:	d504      	bpl.n	8002d3c <__sflush_r+0x7c>
 8002d32:	1c42      	adds	r2, r0, #1
 8002d34:	d101      	bne.n	8002d3a <__sflush_r+0x7a>
 8002d36:	682b      	ldr	r3, [r5, #0]
 8002d38:	b903      	cbnz	r3, 8002d3c <__sflush_r+0x7c>
 8002d3a:	6560      	str	r0, [r4, #84]	; 0x54
 8002d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d3e:	602f      	str	r7, [r5, #0]
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d0ca      	beq.n	8002cda <__sflush_r+0x1a>
 8002d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d48:	4299      	cmp	r1, r3
 8002d4a:	d002      	beq.n	8002d52 <__sflush_r+0x92>
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	f000 f9dd 	bl	800310c <_free_r>
 8002d52:	2000      	movs	r0, #0
 8002d54:	6360      	str	r0, [r4, #52]	; 0x34
 8002d56:	e7c1      	b.n	8002cdc <__sflush_r+0x1c>
 8002d58:	6a21      	ldr	r1, [r4, #32]
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	47b0      	blx	r6
 8002d60:	1c41      	adds	r1, r0, #1
 8002d62:	d1c7      	bne.n	8002cf4 <__sflush_r+0x34>
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0c4      	beq.n	8002cf4 <__sflush_r+0x34>
 8002d6a:	2b1d      	cmp	r3, #29
 8002d6c:	d001      	beq.n	8002d72 <__sflush_r+0xb2>
 8002d6e:	2b16      	cmp	r3, #22
 8002d70:	d101      	bne.n	8002d76 <__sflush_r+0xb6>
 8002d72:	602f      	str	r7, [r5, #0]
 8002d74:	e7b1      	b.n	8002cda <__sflush_r+0x1a>
 8002d76:	89a3      	ldrh	r3, [r4, #12]
 8002d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d7c:	81a3      	strh	r3, [r4, #12]
 8002d7e:	e7ad      	b.n	8002cdc <__sflush_r+0x1c>
 8002d80:	690f      	ldr	r7, [r1, #16]
 8002d82:	2f00      	cmp	r7, #0
 8002d84:	d0a9      	beq.n	8002cda <__sflush_r+0x1a>
 8002d86:	0793      	lsls	r3, r2, #30
 8002d88:	680e      	ldr	r6, [r1, #0]
 8002d8a:	bf08      	it	eq
 8002d8c:	694b      	ldreq	r3, [r1, #20]
 8002d8e:	600f      	str	r7, [r1, #0]
 8002d90:	bf18      	it	ne
 8002d92:	2300      	movne	r3, #0
 8002d94:	eba6 0807 	sub.w	r8, r6, r7
 8002d98:	608b      	str	r3, [r1, #8]
 8002d9a:	f1b8 0f00 	cmp.w	r8, #0
 8002d9e:	dd9c      	ble.n	8002cda <__sflush_r+0x1a>
 8002da0:	6a21      	ldr	r1, [r4, #32]
 8002da2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002da4:	4643      	mov	r3, r8
 8002da6:	463a      	mov	r2, r7
 8002da8:	4628      	mov	r0, r5
 8002daa:	47b0      	blx	r6
 8002dac:	2800      	cmp	r0, #0
 8002dae:	dc06      	bgt.n	8002dbe <__sflush_r+0xfe>
 8002db0:	89a3      	ldrh	r3, [r4, #12]
 8002db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db6:	81a3      	strh	r3, [r4, #12]
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbc:	e78e      	b.n	8002cdc <__sflush_r+0x1c>
 8002dbe:	4407      	add	r7, r0
 8002dc0:	eba8 0800 	sub.w	r8, r8, r0
 8002dc4:	e7e9      	b.n	8002d9a <__sflush_r+0xda>
 8002dc6:	bf00      	nop
 8002dc8:	20400001 	.word	0x20400001

08002dcc <_fflush_r>:
 8002dcc:	b538      	push	{r3, r4, r5, lr}
 8002dce:	690b      	ldr	r3, [r1, #16]
 8002dd0:	4605      	mov	r5, r0
 8002dd2:	460c      	mov	r4, r1
 8002dd4:	b913      	cbnz	r3, 8002ddc <_fflush_r+0x10>
 8002dd6:	2500      	movs	r5, #0
 8002dd8:	4628      	mov	r0, r5
 8002dda:	bd38      	pop	{r3, r4, r5, pc}
 8002ddc:	b118      	cbz	r0, 8002de6 <_fflush_r+0x1a>
 8002dde:	6983      	ldr	r3, [r0, #24]
 8002de0:	b90b      	cbnz	r3, 8002de6 <_fflush_r+0x1a>
 8002de2:	f000 f887 	bl	8002ef4 <__sinit>
 8002de6:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <_fflush_r+0x6c>)
 8002de8:	429c      	cmp	r4, r3
 8002dea:	d11b      	bne.n	8002e24 <_fflush_r+0x58>
 8002dec:	686c      	ldr	r4, [r5, #4]
 8002dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0ef      	beq.n	8002dd6 <_fflush_r+0xa>
 8002df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002df8:	07d0      	lsls	r0, r2, #31
 8002dfa:	d404      	bmi.n	8002e06 <_fflush_r+0x3a>
 8002dfc:	0599      	lsls	r1, r3, #22
 8002dfe:	d402      	bmi.n	8002e06 <_fflush_r+0x3a>
 8002e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e02:	f000 f915 	bl	8003030 <__retarget_lock_acquire_recursive>
 8002e06:	4628      	mov	r0, r5
 8002e08:	4621      	mov	r1, r4
 8002e0a:	f7ff ff59 	bl	8002cc0 <__sflush_r>
 8002e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e10:	07da      	lsls	r2, r3, #31
 8002e12:	4605      	mov	r5, r0
 8002e14:	d4e0      	bmi.n	8002dd8 <_fflush_r+0xc>
 8002e16:	89a3      	ldrh	r3, [r4, #12]
 8002e18:	059b      	lsls	r3, r3, #22
 8002e1a:	d4dd      	bmi.n	8002dd8 <_fflush_r+0xc>
 8002e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e1e:	f000 f908 	bl	8003032 <__retarget_lock_release_recursive>
 8002e22:	e7d9      	b.n	8002dd8 <_fflush_r+0xc>
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <_fflush_r+0x70>)
 8002e26:	429c      	cmp	r4, r3
 8002e28:	d101      	bne.n	8002e2e <_fflush_r+0x62>
 8002e2a:	68ac      	ldr	r4, [r5, #8]
 8002e2c:	e7df      	b.n	8002dee <_fflush_r+0x22>
 8002e2e:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <_fflush_r+0x74>)
 8002e30:	429c      	cmp	r4, r3
 8002e32:	bf08      	it	eq
 8002e34:	68ec      	ldreq	r4, [r5, #12]
 8002e36:	e7da      	b.n	8002dee <_fflush_r+0x22>
 8002e38:	08003470 	.word	0x08003470
 8002e3c:	08003490 	.word	0x08003490
 8002e40:	08003450 	.word	0x08003450

08002e44 <std>:
 8002e44:	2300      	movs	r3, #0
 8002e46:	b510      	push	{r4, lr}
 8002e48:	4604      	mov	r4, r0
 8002e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8002e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e52:	6083      	str	r3, [r0, #8]
 8002e54:	8181      	strh	r1, [r0, #12]
 8002e56:	6643      	str	r3, [r0, #100]	; 0x64
 8002e58:	81c2      	strh	r2, [r0, #14]
 8002e5a:	6183      	str	r3, [r0, #24]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	2208      	movs	r2, #8
 8002e60:	305c      	adds	r0, #92	; 0x5c
 8002e62:	f7ff fd21 	bl	80028a8 <memset>
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <std+0x38>)
 8002e68:	6263      	str	r3, [r4, #36]	; 0x24
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <std+0x3c>)
 8002e6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <std+0x40>)
 8002e70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <std+0x44>)
 8002e74:	6224      	str	r4, [r4, #32]
 8002e76:	6323      	str	r3, [r4, #48]	; 0x30
 8002e78:	bd10      	pop	{r4, pc}
 8002e7a:	bf00      	nop
 8002e7c:	08003281 	.word	0x08003281
 8002e80:	080032a3 	.word	0x080032a3
 8002e84:	080032db 	.word	0x080032db
 8002e88:	080032ff 	.word	0x080032ff

08002e8c <_cleanup_r>:
 8002e8c:	4901      	ldr	r1, [pc, #4]	; (8002e94 <_cleanup_r+0x8>)
 8002e8e:	f000 b8af 	b.w	8002ff0 <_fwalk_reent>
 8002e92:	bf00      	nop
 8002e94:	08002dcd 	.word	0x08002dcd

08002e98 <__sfmoreglue>:
 8002e98:	b570      	push	{r4, r5, r6, lr}
 8002e9a:	1e4a      	subs	r2, r1, #1
 8002e9c:	2568      	movs	r5, #104	; 0x68
 8002e9e:	4355      	muls	r5, r2
 8002ea0:	460e      	mov	r6, r1
 8002ea2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002ea6:	f000 f981 	bl	80031ac <_malloc_r>
 8002eaa:	4604      	mov	r4, r0
 8002eac:	b140      	cbz	r0, 8002ec0 <__sfmoreglue+0x28>
 8002eae:	2100      	movs	r1, #0
 8002eb0:	e9c0 1600 	strd	r1, r6, [r0]
 8002eb4:	300c      	adds	r0, #12
 8002eb6:	60a0      	str	r0, [r4, #8]
 8002eb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ebc:	f7ff fcf4 	bl	80028a8 <memset>
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}

08002ec4 <__sfp_lock_acquire>:
 8002ec4:	4801      	ldr	r0, [pc, #4]	; (8002ecc <__sfp_lock_acquire+0x8>)
 8002ec6:	f000 b8b3 	b.w	8003030 <__retarget_lock_acquire_recursive>
 8002eca:	bf00      	nop
 8002ecc:	2000012c 	.word	0x2000012c

08002ed0 <__sfp_lock_release>:
 8002ed0:	4801      	ldr	r0, [pc, #4]	; (8002ed8 <__sfp_lock_release+0x8>)
 8002ed2:	f000 b8ae 	b.w	8003032 <__retarget_lock_release_recursive>
 8002ed6:	bf00      	nop
 8002ed8:	2000012c 	.word	0x2000012c

08002edc <__sinit_lock_acquire>:
 8002edc:	4801      	ldr	r0, [pc, #4]	; (8002ee4 <__sinit_lock_acquire+0x8>)
 8002ede:	f000 b8a7 	b.w	8003030 <__retarget_lock_acquire_recursive>
 8002ee2:	bf00      	nop
 8002ee4:	20000127 	.word	0x20000127

08002ee8 <__sinit_lock_release>:
 8002ee8:	4801      	ldr	r0, [pc, #4]	; (8002ef0 <__sinit_lock_release+0x8>)
 8002eea:	f000 b8a2 	b.w	8003032 <__retarget_lock_release_recursive>
 8002eee:	bf00      	nop
 8002ef0:	20000127 	.word	0x20000127

08002ef4 <__sinit>:
 8002ef4:	b510      	push	{r4, lr}
 8002ef6:	4604      	mov	r4, r0
 8002ef8:	f7ff fff0 	bl	8002edc <__sinit_lock_acquire>
 8002efc:	69a3      	ldr	r3, [r4, #24]
 8002efe:	b11b      	cbz	r3, 8002f08 <__sinit+0x14>
 8002f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f04:	f7ff bff0 	b.w	8002ee8 <__sinit_lock_release>
 8002f08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002f0c:	6523      	str	r3, [r4, #80]	; 0x50
 8002f0e:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <__sinit+0x68>)
 8002f10:	4a13      	ldr	r2, [pc, #76]	; (8002f60 <__sinit+0x6c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	62a2      	str	r2, [r4, #40]	; 0x28
 8002f16:	42a3      	cmp	r3, r4
 8002f18:	bf04      	itt	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	61a3      	streq	r3, [r4, #24]
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f000 f820 	bl	8002f64 <__sfp>
 8002f24:	6060      	str	r0, [r4, #4]
 8002f26:	4620      	mov	r0, r4
 8002f28:	f000 f81c 	bl	8002f64 <__sfp>
 8002f2c:	60a0      	str	r0, [r4, #8]
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f000 f818 	bl	8002f64 <__sfp>
 8002f34:	2200      	movs	r2, #0
 8002f36:	60e0      	str	r0, [r4, #12]
 8002f38:	2104      	movs	r1, #4
 8002f3a:	6860      	ldr	r0, [r4, #4]
 8002f3c:	f7ff ff82 	bl	8002e44 <std>
 8002f40:	68a0      	ldr	r0, [r4, #8]
 8002f42:	2201      	movs	r2, #1
 8002f44:	2109      	movs	r1, #9
 8002f46:	f7ff ff7d 	bl	8002e44 <std>
 8002f4a:	68e0      	ldr	r0, [r4, #12]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	2112      	movs	r1, #18
 8002f50:	f7ff ff78 	bl	8002e44 <std>
 8002f54:	2301      	movs	r3, #1
 8002f56:	61a3      	str	r3, [r4, #24]
 8002f58:	e7d2      	b.n	8002f00 <__sinit+0xc>
 8002f5a:	bf00      	nop
 8002f5c:	0800344c 	.word	0x0800344c
 8002f60:	08002e8d 	.word	0x08002e8d

08002f64 <__sfp>:
 8002f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f66:	4607      	mov	r7, r0
 8002f68:	f7ff ffac 	bl	8002ec4 <__sfp_lock_acquire>
 8002f6c:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <__sfp+0x84>)
 8002f6e:	681e      	ldr	r6, [r3, #0]
 8002f70:	69b3      	ldr	r3, [r6, #24]
 8002f72:	b913      	cbnz	r3, 8002f7a <__sfp+0x16>
 8002f74:	4630      	mov	r0, r6
 8002f76:	f7ff ffbd 	bl	8002ef4 <__sinit>
 8002f7a:	3648      	adds	r6, #72	; 0x48
 8002f7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	d503      	bpl.n	8002f8c <__sfp+0x28>
 8002f84:	6833      	ldr	r3, [r6, #0]
 8002f86:	b30b      	cbz	r3, 8002fcc <__sfp+0x68>
 8002f88:	6836      	ldr	r6, [r6, #0]
 8002f8a:	e7f7      	b.n	8002f7c <__sfp+0x18>
 8002f8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f90:	b9d5      	cbnz	r5, 8002fc8 <__sfp+0x64>
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <__sfp+0x88>)
 8002f94:	60e3      	str	r3, [r4, #12]
 8002f96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f9a:	6665      	str	r5, [r4, #100]	; 0x64
 8002f9c:	f000 f847 	bl	800302e <__retarget_lock_init_recursive>
 8002fa0:	f7ff ff96 	bl	8002ed0 <__sfp_lock_release>
 8002fa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002fa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002fac:	6025      	str	r5, [r4, #0]
 8002fae:	61a5      	str	r5, [r4, #24]
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002fb8:	f7ff fc76 	bl	80028a8 <memset>
 8002fbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002fc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fc8:	3468      	adds	r4, #104	; 0x68
 8002fca:	e7d9      	b.n	8002f80 <__sfp+0x1c>
 8002fcc:	2104      	movs	r1, #4
 8002fce:	4638      	mov	r0, r7
 8002fd0:	f7ff ff62 	bl	8002e98 <__sfmoreglue>
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	6030      	str	r0, [r6, #0]
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	d1d5      	bne.n	8002f88 <__sfp+0x24>
 8002fdc:	f7ff ff78 	bl	8002ed0 <__sfp_lock_release>
 8002fe0:	230c      	movs	r3, #12
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	e7ee      	b.n	8002fc4 <__sfp+0x60>
 8002fe6:	bf00      	nop
 8002fe8:	0800344c 	.word	0x0800344c
 8002fec:	ffff0001 	.word	0xffff0001

08002ff0 <_fwalk_reent>:
 8002ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ff4:	4606      	mov	r6, r0
 8002ff6:	4688      	mov	r8, r1
 8002ff8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002ffc:	2700      	movs	r7, #0
 8002ffe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003002:	f1b9 0901 	subs.w	r9, r9, #1
 8003006:	d505      	bpl.n	8003014 <_fwalk_reent+0x24>
 8003008:	6824      	ldr	r4, [r4, #0]
 800300a:	2c00      	cmp	r4, #0
 800300c:	d1f7      	bne.n	8002ffe <_fwalk_reent+0xe>
 800300e:	4638      	mov	r0, r7
 8003010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003014:	89ab      	ldrh	r3, [r5, #12]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d907      	bls.n	800302a <_fwalk_reent+0x3a>
 800301a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800301e:	3301      	adds	r3, #1
 8003020:	d003      	beq.n	800302a <_fwalk_reent+0x3a>
 8003022:	4629      	mov	r1, r5
 8003024:	4630      	mov	r0, r6
 8003026:	47c0      	blx	r8
 8003028:	4307      	orrs	r7, r0
 800302a:	3568      	adds	r5, #104	; 0x68
 800302c:	e7e9      	b.n	8003002 <_fwalk_reent+0x12>

0800302e <__retarget_lock_init_recursive>:
 800302e:	4770      	bx	lr

08003030 <__retarget_lock_acquire_recursive>:
 8003030:	4770      	bx	lr

08003032 <__retarget_lock_release_recursive>:
 8003032:	4770      	bx	lr

08003034 <__swhatbuf_r>:
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	460e      	mov	r6, r1
 8003038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800303c:	2900      	cmp	r1, #0
 800303e:	b096      	sub	sp, #88	; 0x58
 8003040:	4614      	mov	r4, r2
 8003042:	461d      	mov	r5, r3
 8003044:	da07      	bge.n	8003056 <__swhatbuf_r+0x22>
 8003046:	2300      	movs	r3, #0
 8003048:	602b      	str	r3, [r5, #0]
 800304a:	89b3      	ldrh	r3, [r6, #12]
 800304c:	061a      	lsls	r2, r3, #24
 800304e:	d410      	bmi.n	8003072 <__swhatbuf_r+0x3e>
 8003050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003054:	e00e      	b.n	8003074 <__swhatbuf_r+0x40>
 8003056:	466a      	mov	r2, sp
 8003058:	f000 f978 	bl	800334c <_fstat_r>
 800305c:	2800      	cmp	r0, #0
 800305e:	dbf2      	blt.n	8003046 <__swhatbuf_r+0x12>
 8003060:	9a01      	ldr	r2, [sp, #4]
 8003062:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003066:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800306a:	425a      	negs	r2, r3
 800306c:	415a      	adcs	r2, r3
 800306e:	602a      	str	r2, [r5, #0]
 8003070:	e7ee      	b.n	8003050 <__swhatbuf_r+0x1c>
 8003072:	2340      	movs	r3, #64	; 0x40
 8003074:	2000      	movs	r0, #0
 8003076:	6023      	str	r3, [r4, #0]
 8003078:	b016      	add	sp, #88	; 0x58
 800307a:	bd70      	pop	{r4, r5, r6, pc}

0800307c <__smakebuf_r>:
 800307c:	898b      	ldrh	r3, [r1, #12]
 800307e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003080:	079d      	lsls	r5, r3, #30
 8003082:	4606      	mov	r6, r0
 8003084:	460c      	mov	r4, r1
 8003086:	d507      	bpl.n	8003098 <__smakebuf_r+0x1c>
 8003088:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800308c:	6023      	str	r3, [r4, #0]
 800308e:	6123      	str	r3, [r4, #16]
 8003090:	2301      	movs	r3, #1
 8003092:	6163      	str	r3, [r4, #20]
 8003094:	b002      	add	sp, #8
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	ab01      	add	r3, sp, #4
 800309a:	466a      	mov	r2, sp
 800309c:	f7ff ffca 	bl	8003034 <__swhatbuf_r>
 80030a0:	9900      	ldr	r1, [sp, #0]
 80030a2:	4605      	mov	r5, r0
 80030a4:	4630      	mov	r0, r6
 80030a6:	f000 f881 	bl	80031ac <_malloc_r>
 80030aa:	b948      	cbnz	r0, 80030c0 <__smakebuf_r+0x44>
 80030ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030b0:	059a      	lsls	r2, r3, #22
 80030b2:	d4ef      	bmi.n	8003094 <__smakebuf_r+0x18>
 80030b4:	f023 0303 	bic.w	r3, r3, #3
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	81a3      	strh	r3, [r4, #12]
 80030be:	e7e3      	b.n	8003088 <__smakebuf_r+0xc>
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <__smakebuf_r+0x7c>)
 80030c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80030c4:	89a3      	ldrh	r3, [r4, #12]
 80030c6:	6020      	str	r0, [r4, #0]
 80030c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030cc:	81a3      	strh	r3, [r4, #12]
 80030ce:	9b00      	ldr	r3, [sp, #0]
 80030d0:	6163      	str	r3, [r4, #20]
 80030d2:	9b01      	ldr	r3, [sp, #4]
 80030d4:	6120      	str	r0, [r4, #16]
 80030d6:	b15b      	cbz	r3, 80030f0 <__smakebuf_r+0x74>
 80030d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030dc:	4630      	mov	r0, r6
 80030de:	f000 f947 	bl	8003370 <_isatty_r>
 80030e2:	b128      	cbz	r0, 80030f0 <__smakebuf_r+0x74>
 80030e4:	89a3      	ldrh	r3, [r4, #12]
 80030e6:	f023 0303 	bic.w	r3, r3, #3
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	81a3      	strh	r3, [r4, #12]
 80030f0:	89a0      	ldrh	r0, [r4, #12]
 80030f2:	4305      	orrs	r5, r0
 80030f4:	81a5      	strh	r5, [r4, #12]
 80030f6:	e7cd      	b.n	8003094 <__smakebuf_r+0x18>
 80030f8:	08002e8d 	.word	0x08002e8d

080030fc <malloc>:
 80030fc:	4b02      	ldr	r3, [pc, #8]	; (8003108 <malloc+0xc>)
 80030fe:	4601      	mov	r1, r0
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	f000 b853 	b.w	80031ac <_malloc_r>
 8003106:	bf00      	nop
 8003108:	2000000c 	.word	0x2000000c

0800310c <_free_r>:
 800310c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800310e:	2900      	cmp	r1, #0
 8003110:	d048      	beq.n	80031a4 <_free_r+0x98>
 8003112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003116:	9001      	str	r0, [sp, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	f1a1 0404 	sub.w	r4, r1, #4
 800311e:	bfb8      	it	lt
 8003120:	18e4      	addlt	r4, r4, r3
 8003122:	f000 f947 	bl	80033b4 <__malloc_lock>
 8003126:	4a20      	ldr	r2, [pc, #128]	; (80031a8 <_free_r+0x9c>)
 8003128:	9801      	ldr	r0, [sp, #4]
 800312a:	6813      	ldr	r3, [r2, #0]
 800312c:	4615      	mov	r5, r2
 800312e:	b933      	cbnz	r3, 800313e <_free_r+0x32>
 8003130:	6063      	str	r3, [r4, #4]
 8003132:	6014      	str	r4, [r2, #0]
 8003134:	b003      	add	sp, #12
 8003136:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800313a:	f000 b941 	b.w	80033c0 <__malloc_unlock>
 800313e:	42a3      	cmp	r3, r4
 8003140:	d90b      	bls.n	800315a <_free_r+0x4e>
 8003142:	6821      	ldr	r1, [r4, #0]
 8003144:	1862      	adds	r2, r4, r1
 8003146:	4293      	cmp	r3, r2
 8003148:	bf04      	itt	eq
 800314a:	681a      	ldreq	r2, [r3, #0]
 800314c:	685b      	ldreq	r3, [r3, #4]
 800314e:	6063      	str	r3, [r4, #4]
 8003150:	bf04      	itt	eq
 8003152:	1852      	addeq	r2, r2, r1
 8003154:	6022      	streq	r2, [r4, #0]
 8003156:	602c      	str	r4, [r5, #0]
 8003158:	e7ec      	b.n	8003134 <_free_r+0x28>
 800315a:	461a      	mov	r2, r3
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	b10b      	cbz	r3, 8003164 <_free_r+0x58>
 8003160:	42a3      	cmp	r3, r4
 8003162:	d9fa      	bls.n	800315a <_free_r+0x4e>
 8003164:	6811      	ldr	r1, [r2, #0]
 8003166:	1855      	adds	r5, r2, r1
 8003168:	42a5      	cmp	r5, r4
 800316a:	d10b      	bne.n	8003184 <_free_r+0x78>
 800316c:	6824      	ldr	r4, [r4, #0]
 800316e:	4421      	add	r1, r4
 8003170:	1854      	adds	r4, r2, r1
 8003172:	42a3      	cmp	r3, r4
 8003174:	6011      	str	r1, [r2, #0]
 8003176:	d1dd      	bne.n	8003134 <_free_r+0x28>
 8003178:	681c      	ldr	r4, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	6053      	str	r3, [r2, #4]
 800317e:	4421      	add	r1, r4
 8003180:	6011      	str	r1, [r2, #0]
 8003182:	e7d7      	b.n	8003134 <_free_r+0x28>
 8003184:	d902      	bls.n	800318c <_free_r+0x80>
 8003186:	230c      	movs	r3, #12
 8003188:	6003      	str	r3, [r0, #0]
 800318a:	e7d3      	b.n	8003134 <_free_r+0x28>
 800318c:	6825      	ldr	r5, [r4, #0]
 800318e:	1961      	adds	r1, r4, r5
 8003190:	428b      	cmp	r3, r1
 8003192:	bf04      	itt	eq
 8003194:	6819      	ldreq	r1, [r3, #0]
 8003196:	685b      	ldreq	r3, [r3, #4]
 8003198:	6063      	str	r3, [r4, #4]
 800319a:	bf04      	itt	eq
 800319c:	1949      	addeq	r1, r1, r5
 800319e:	6021      	streq	r1, [r4, #0]
 80031a0:	6054      	str	r4, [r2, #4]
 80031a2:	e7c7      	b.n	8003134 <_free_r+0x28>
 80031a4:	b003      	add	sp, #12
 80031a6:	bd30      	pop	{r4, r5, pc}
 80031a8:	20000090 	.word	0x20000090

080031ac <_malloc_r>:
 80031ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ae:	1ccd      	adds	r5, r1, #3
 80031b0:	f025 0503 	bic.w	r5, r5, #3
 80031b4:	3508      	adds	r5, #8
 80031b6:	2d0c      	cmp	r5, #12
 80031b8:	bf38      	it	cc
 80031ba:	250c      	movcc	r5, #12
 80031bc:	2d00      	cmp	r5, #0
 80031be:	4606      	mov	r6, r0
 80031c0:	db01      	blt.n	80031c6 <_malloc_r+0x1a>
 80031c2:	42a9      	cmp	r1, r5
 80031c4:	d903      	bls.n	80031ce <_malloc_r+0x22>
 80031c6:	230c      	movs	r3, #12
 80031c8:	6033      	str	r3, [r6, #0]
 80031ca:	2000      	movs	r0, #0
 80031cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ce:	f000 f8f1 	bl	80033b4 <__malloc_lock>
 80031d2:	4921      	ldr	r1, [pc, #132]	; (8003258 <_malloc_r+0xac>)
 80031d4:	680a      	ldr	r2, [r1, #0]
 80031d6:	4614      	mov	r4, r2
 80031d8:	b99c      	cbnz	r4, 8003202 <_malloc_r+0x56>
 80031da:	4f20      	ldr	r7, [pc, #128]	; (800325c <_malloc_r+0xb0>)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	b923      	cbnz	r3, 80031ea <_malloc_r+0x3e>
 80031e0:	4621      	mov	r1, r4
 80031e2:	4630      	mov	r0, r6
 80031e4:	f000 f83c 	bl	8003260 <_sbrk_r>
 80031e8:	6038      	str	r0, [r7, #0]
 80031ea:	4629      	mov	r1, r5
 80031ec:	4630      	mov	r0, r6
 80031ee:	f000 f837 	bl	8003260 <_sbrk_r>
 80031f2:	1c43      	adds	r3, r0, #1
 80031f4:	d123      	bne.n	800323e <_malloc_r+0x92>
 80031f6:	230c      	movs	r3, #12
 80031f8:	6033      	str	r3, [r6, #0]
 80031fa:	4630      	mov	r0, r6
 80031fc:	f000 f8e0 	bl	80033c0 <__malloc_unlock>
 8003200:	e7e3      	b.n	80031ca <_malloc_r+0x1e>
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	1b5b      	subs	r3, r3, r5
 8003206:	d417      	bmi.n	8003238 <_malloc_r+0x8c>
 8003208:	2b0b      	cmp	r3, #11
 800320a:	d903      	bls.n	8003214 <_malloc_r+0x68>
 800320c:	6023      	str	r3, [r4, #0]
 800320e:	441c      	add	r4, r3
 8003210:	6025      	str	r5, [r4, #0]
 8003212:	e004      	b.n	800321e <_malloc_r+0x72>
 8003214:	6863      	ldr	r3, [r4, #4]
 8003216:	42a2      	cmp	r2, r4
 8003218:	bf0c      	ite	eq
 800321a:	600b      	streq	r3, [r1, #0]
 800321c:	6053      	strne	r3, [r2, #4]
 800321e:	4630      	mov	r0, r6
 8003220:	f000 f8ce 	bl	80033c0 <__malloc_unlock>
 8003224:	f104 000b 	add.w	r0, r4, #11
 8003228:	1d23      	adds	r3, r4, #4
 800322a:	f020 0007 	bic.w	r0, r0, #7
 800322e:	1ac2      	subs	r2, r0, r3
 8003230:	d0cc      	beq.n	80031cc <_malloc_r+0x20>
 8003232:	1a1b      	subs	r3, r3, r0
 8003234:	50a3      	str	r3, [r4, r2]
 8003236:	e7c9      	b.n	80031cc <_malloc_r+0x20>
 8003238:	4622      	mov	r2, r4
 800323a:	6864      	ldr	r4, [r4, #4]
 800323c:	e7cc      	b.n	80031d8 <_malloc_r+0x2c>
 800323e:	1cc4      	adds	r4, r0, #3
 8003240:	f024 0403 	bic.w	r4, r4, #3
 8003244:	42a0      	cmp	r0, r4
 8003246:	d0e3      	beq.n	8003210 <_malloc_r+0x64>
 8003248:	1a21      	subs	r1, r4, r0
 800324a:	4630      	mov	r0, r6
 800324c:	f000 f808 	bl	8003260 <_sbrk_r>
 8003250:	3001      	adds	r0, #1
 8003252:	d1dd      	bne.n	8003210 <_malloc_r+0x64>
 8003254:	e7cf      	b.n	80031f6 <_malloc_r+0x4a>
 8003256:	bf00      	nop
 8003258:	20000090 	.word	0x20000090
 800325c:	20000094 	.word	0x20000094

08003260 <_sbrk_r>:
 8003260:	b538      	push	{r3, r4, r5, lr}
 8003262:	4d06      	ldr	r5, [pc, #24]	; (800327c <_sbrk_r+0x1c>)
 8003264:	2300      	movs	r3, #0
 8003266:	4604      	mov	r4, r0
 8003268:	4608      	mov	r0, r1
 800326a:	602b      	str	r3, [r5, #0]
 800326c:	f7fd fa24 	bl	80006b8 <_sbrk>
 8003270:	1c43      	adds	r3, r0, #1
 8003272:	d102      	bne.n	800327a <_sbrk_r+0x1a>
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	b103      	cbz	r3, 800327a <_sbrk_r+0x1a>
 8003278:	6023      	str	r3, [r4, #0]
 800327a:	bd38      	pop	{r3, r4, r5, pc}
 800327c:	20000130 	.word	0x20000130

08003280 <__sread>:
 8003280:	b510      	push	{r4, lr}
 8003282:	460c      	mov	r4, r1
 8003284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003288:	f000 f8a0 	bl	80033cc <_read_r>
 800328c:	2800      	cmp	r0, #0
 800328e:	bfab      	itete	ge
 8003290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003292:	89a3      	ldrhlt	r3, [r4, #12]
 8003294:	181b      	addge	r3, r3, r0
 8003296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800329a:	bfac      	ite	ge
 800329c:	6563      	strge	r3, [r4, #84]	; 0x54
 800329e:	81a3      	strhlt	r3, [r4, #12]
 80032a0:	bd10      	pop	{r4, pc}

080032a2 <__swrite>:
 80032a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032a6:	461f      	mov	r7, r3
 80032a8:	898b      	ldrh	r3, [r1, #12]
 80032aa:	05db      	lsls	r3, r3, #23
 80032ac:	4605      	mov	r5, r0
 80032ae:	460c      	mov	r4, r1
 80032b0:	4616      	mov	r6, r2
 80032b2:	d505      	bpl.n	80032c0 <__swrite+0x1e>
 80032b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032b8:	2302      	movs	r3, #2
 80032ba:	2200      	movs	r2, #0
 80032bc:	f000 f868 	bl	8003390 <_lseek_r>
 80032c0:	89a3      	ldrh	r3, [r4, #12]
 80032c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032ca:	81a3      	strh	r3, [r4, #12]
 80032cc:	4632      	mov	r2, r6
 80032ce:	463b      	mov	r3, r7
 80032d0:	4628      	mov	r0, r5
 80032d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032d6:	f000 b817 	b.w	8003308 <_write_r>

080032da <__sseek>:
 80032da:	b510      	push	{r4, lr}
 80032dc:	460c      	mov	r4, r1
 80032de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032e2:	f000 f855 	bl	8003390 <_lseek_r>
 80032e6:	1c43      	adds	r3, r0, #1
 80032e8:	89a3      	ldrh	r3, [r4, #12]
 80032ea:	bf15      	itete	ne
 80032ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80032ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032f6:	81a3      	strheq	r3, [r4, #12]
 80032f8:	bf18      	it	ne
 80032fa:	81a3      	strhne	r3, [r4, #12]
 80032fc:	bd10      	pop	{r4, pc}

080032fe <__sclose>:
 80032fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003302:	f000 b813 	b.w	800332c <_close_r>
	...

08003308 <_write_r>:
 8003308:	b538      	push	{r3, r4, r5, lr}
 800330a:	4d07      	ldr	r5, [pc, #28]	; (8003328 <_write_r+0x20>)
 800330c:	4604      	mov	r4, r0
 800330e:	4608      	mov	r0, r1
 8003310:	4611      	mov	r1, r2
 8003312:	2200      	movs	r2, #0
 8003314:	602a      	str	r2, [r5, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	f7fd f8ca 	bl	80004b0 <_write>
 800331c:	1c43      	adds	r3, r0, #1
 800331e:	d102      	bne.n	8003326 <_write_r+0x1e>
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	b103      	cbz	r3, 8003326 <_write_r+0x1e>
 8003324:	6023      	str	r3, [r4, #0]
 8003326:	bd38      	pop	{r3, r4, r5, pc}
 8003328:	20000130 	.word	0x20000130

0800332c <_close_r>:
 800332c:	b538      	push	{r3, r4, r5, lr}
 800332e:	4d06      	ldr	r5, [pc, #24]	; (8003348 <_close_r+0x1c>)
 8003330:	2300      	movs	r3, #0
 8003332:	4604      	mov	r4, r0
 8003334:	4608      	mov	r0, r1
 8003336:	602b      	str	r3, [r5, #0]
 8003338:	f7fd f98a 	bl	8000650 <_close>
 800333c:	1c43      	adds	r3, r0, #1
 800333e:	d102      	bne.n	8003346 <_close_r+0x1a>
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	b103      	cbz	r3, 8003346 <_close_r+0x1a>
 8003344:	6023      	str	r3, [r4, #0]
 8003346:	bd38      	pop	{r3, r4, r5, pc}
 8003348:	20000130 	.word	0x20000130

0800334c <_fstat_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	4d07      	ldr	r5, [pc, #28]	; (800336c <_fstat_r+0x20>)
 8003350:	2300      	movs	r3, #0
 8003352:	4604      	mov	r4, r0
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	602b      	str	r3, [r5, #0]
 800335a:	f7fd f985 	bl	8000668 <_fstat>
 800335e:	1c43      	adds	r3, r0, #1
 8003360:	d102      	bne.n	8003368 <_fstat_r+0x1c>
 8003362:	682b      	ldr	r3, [r5, #0]
 8003364:	b103      	cbz	r3, 8003368 <_fstat_r+0x1c>
 8003366:	6023      	str	r3, [r4, #0]
 8003368:	bd38      	pop	{r3, r4, r5, pc}
 800336a:	bf00      	nop
 800336c:	20000130 	.word	0x20000130

08003370 <_isatty_r>:
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4d06      	ldr	r5, [pc, #24]	; (800338c <_isatty_r+0x1c>)
 8003374:	2300      	movs	r3, #0
 8003376:	4604      	mov	r4, r0
 8003378:	4608      	mov	r0, r1
 800337a:	602b      	str	r3, [r5, #0]
 800337c:	f7fd f984 	bl	8000688 <_isatty>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d102      	bne.n	800338a <_isatty_r+0x1a>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	b103      	cbz	r3, 800338a <_isatty_r+0x1a>
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	bd38      	pop	{r3, r4, r5, pc}
 800338c:	20000130 	.word	0x20000130

08003390 <_lseek_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	4d07      	ldr	r5, [pc, #28]	; (80033b0 <_lseek_r+0x20>)
 8003394:	4604      	mov	r4, r0
 8003396:	4608      	mov	r0, r1
 8003398:	4611      	mov	r1, r2
 800339a:	2200      	movs	r2, #0
 800339c:	602a      	str	r2, [r5, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	f7fd f97d 	bl	800069e <_lseek>
 80033a4:	1c43      	adds	r3, r0, #1
 80033a6:	d102      	bne.n	80033ae <_lseek_r+0x1e>
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	b103      	cbz	r3, 80033ae <_lseek_r+0x1e>
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	bd38      	pop	{r3, r4, r5, pc}
 80033b0:	20000130 	.word	0x20000130

080033b4 <__malloc_lock>:
 80033b4:	4801      	ldr	r0, [pc, #4]	; (80033bc <__malloc_lock+0x8>)
 80033b6:	f7ff be3b 	b.w	8003030 <__retarget_lock_acquire_recursive>
 80033ba:	bf00      	nop
 80033bc:	20000128 	.word	0x20000128

080033c0 <__malloc_unlock>:
 80033c0:	4801      	ldr	r0, [pc, #4]	; (80033c8 <__malloc_unlock+0x8>)
 80033c2:	f7ff be36 	b.w	8003032 <__retarget_lock_release_recursive>
 80033c6:	bf00      	nop
 80033c8:	20000128 	.word	0x20000128

080033cc <_read_r>:
 80033cc:	b538      	push	{r3, r4, r5, lr}
 80033ce:	4d07      	ldr	r5, [pc, #28]	; (80033ec <_read_r+0x20>)
 80033d0:	4604      	mov	r4, r0
 80033d2:	4608      	mov	r0, r1
 80033d4:	4611      	mov	r1, r2
 80033d6:	2200      	movs	r2, #0
 80033d8:	602a      	str	r2, [r5, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	f7fd f91b 	bl	8000616 <_read>
 80033e0:	1c43      	adds	r3, r0, #1
 80033e2:	d102      	bne.n	80033ea <_read_r+0x1e>
 80033e4:	682b      	ldr	r3, [r5, #0]
 80033e6:	b103      	cbz	r3, 80033ea <_read_r+0x1e>
 80033e8:	6023      	str	r3, [r4, #0]
 80033ea:	bd38      	pop	{r3, r4, r5, pc}
 80033ec:	20000130 	.word	0x20000130

080033f0 <_init>:
 80033f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f2:	bf00      	nop
 80033f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f6:	bc08      	pop	{r3}
 80033f8:	469e      	mov	lr, r3
 80033fa:	4770      	bx	lr

080033fc <_fini>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	bf00      	nop
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr
