
f446_maxon_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004854  08004854  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004854  08004854  00014854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800485c  0800485c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800485c  0800485c  0001485c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004860  08004860  00014860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000070  080048d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080048d4  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee05  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c5  00000000  00000000  0002eea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00030f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00031e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a36  00000000  00000000  00032c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f60e  00000000  00000000  0005564e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d35a1  00000000  00000000  00064c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001381fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004610  00000000  00000000  00138250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004778 	.word	0x08004778

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004778 	.word	0x08004778

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fd9d 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f863 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 fa99 	bl	8000aec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 fa6d 	bl	8000a98 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005be:	f000 f8ff 	bl	80007c0 <MX_TIM1_Init>
  MX_SPI1_Init();
 80005c2:	f000 f8c7 	bl	8000754 <MX_SPI1_Init>
  MX_TIM2_Init();
 80005c6:	f000 f9bf 	bl	8000948 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005ca:	f000 fa11 	bl	80009f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  short duty;
  int cnt= 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
  int cnt2 = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80005d6:	2100      	movs	r1, #0
 80005d8:	4821      	ldr	r0, [pc, #132]	; (8000660 <main+0xb8>)
 80005da:	f001 fef7 	bl	80023cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80005de:	2104      	movs	r1, #4
 80005e0:	481f      	ldr	r0, [pc, #124]	; (8000660 <main+0xb8>)
 80005e2:	f001 fef3 	bl	80023cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80005e6:	2108      	movs	r1, #8
 80005e8:	481d      	ldr	r0, [pc, #116]	; (8000660 <main+0xb8>)
 80005ea:	f001 feef 	bl	80023cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 80005ee:	210c      	movs	r1, #12
 80005f0:	481b      	ldr	r0, [pc, #108]	; (8000660 <main+0xb8>)
 80005f2:	f001 feeb 	bl	80023cc <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80005f6:	213c      	movs	r1, #60	; 0x3c
 80005f8:	481a      	ldr	r0, [pc, #104]	; (8000664 <main+0xbc>)
 80005fa:	f002 f855 	bl	80026a8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80005fe:	213c      	movs	r1, #60	; 0x3c
 8000600:	4819      	ldr	r0, [pc, #100]	; (8000668 <main+0xc0>)
 8000602:	f002 f851 	bl	80026a8 <HAL_TIM_Encoder_Start>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060c:	4817      	ldr	r0, [pc, #92]	; (800066c <main+0xc4>)
 800060e:	f001 f87d 	bl	800170c <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,100);
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <main+0xb8>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2264      	movs	r2, #100	; 0x64
 8000618:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <main+0xb8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2200      	movs	r2, #0
 8000620:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2101      	movs	r1, #1
 8000626:	4812      	ldr	r0, [pc, #72]	; (8000670 <main+0xc8>)
 8000628:	f001 f870 	bl	800170c <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <main+0xb8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2264      	movs	r2, #100	; 0x64
 8000632:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <main+0xb8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	639a      	str	r2, [r3, #56]	; 0x38
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cnt = TIM2 -> CNT;
 800063c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000642:	607b      	str	r3, [r7, #4]
	  cnt2 = TIM3 -> CNT;
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <main+0xcc>)
 8000646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000648:	603b      	str	r3, [r7, #0]
//	  printf( "encoder = %d\r\n",count_total );
	  printf( "encoder = %d,%d\r\n",cnt,cnt2 );
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	480a      	ldr	r0, [pc, #40]	; (8000678 <main+0xd0>)
 8000650:	f003 f93c 	bl	80038cc <iprintf>
	  HAL_Delay(1000);
 8000654:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000658:	f000 fdba 	bl	80011d0 <HAL_Delay>
  {
 800065c:	e7ee      	b.n	800063c <main+0x94>
 800065e:	bf00      	nop
 8000660:	200000e0 	.word	0x200000e0
 8000664:	20000180 	.word	0x20000180
 8000668:	20000098 	.word	0x20000098
 800066c:	40020800 	.word	0x40020800
 8000670:	40020400 	.word	0x40020400
 8000674:	40000400 	.word	0x40000400
 8000678:	08004790 	.word	0x08004790

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	2234      	movs	r2, #52	; 0x34
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 f916 	bl	80038bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b29      	ldr	r3, [pc, #164]	; (800074c <SystemClock_Config+0xd0>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a28      	ldr	r2, [pc, #160]	; (800074c <SystemClock_Config+0xd0>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <SystemClock_Config+0xd0>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006bc:	2300      	movs	r3, #0
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4b23      	ldr	r3, [pc, #140]	; (8000750 <SystemClock_Config+0xd4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <SystemClock_Config+0xd4>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <SystemClock_Config+0xd4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80006f4:	2340      	movs	r3, #64	; 0x40
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4618      	mov	r0, r3
 800070a:	f001 fa8f 	bl	8001c2c <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000714:	f000 fa66 	bl	8000be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2302      	movs	r3, #2
 800071e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	2102      	movs	r1, #2
 8000734:	4618      	mov	r0, r3
 8000736:	f001 f803 	bl	8001740 <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000740:	f000 fa50 	bl	8000be4 <Error_Handler>
  }
}
 8000744:	bf00      	nop
 8000746:	3750      	adds	r7, #80	; 0x50
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_SPI1_Init+0x64>)
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <MX_SPI1_Init+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000760:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000764:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000784:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_SPI1_Init+0x64>)
 80007a0:	220a      	movs	r2, #10
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_SPI1_Init+0x64>)
 80007a6:	f001 fcdf 	bl	8002168 <HAL_SPI_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b0:	f000 fa18 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000128 	.word	0x20000128
 80007bc:	40013000 	.word	0x40013000

080007c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b096      	sub	sp, #88	; 0x58
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2220      	movs	r2, #32
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 f85f 	bl	80038bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007fe:	4b50      	ldr	r3, [pc, #320]	; (8000940 <MX_TIM1_Init+0x180>)
 8000800:	4a50      	ldr	r2, [pc, #320]	; (8000944 <MX_TIM1_Init+0x184>)
 8000802:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 8000804:	4b4e      	ldr	r3, [pc, #312]	; (8000940 <MX_TIM1_Init+0x180>)
 8000806:	220a      	movs	r2, #10
 8000808:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b4d      	ldr	r3, [pc, #308]	; (8000940 <MX_TIM1_Init+0x180>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000810:	4b4b      	ldr	r3, [pc, #300]	; (8000940 <MX_TIM1_Init+0x180>)
 8000812:	22ff      	movs	r2, #255	; 0xff
 8000814:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b4a      	ldr	r3, [pc, #296]	; (8000940 <MX_TIM1_Init+0x180>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800081c:	4b48      	ldr	r3, [pc, #288]	; (8000940 <MX_TIM1_Init+0x180>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	4b47      	ldr	r3, [pc, #284]	; (8000940 <MX_TIM1_Init+0x180>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000828:	4845      	ldr	r0, [pc, #276]	; (8000940 <MX_TIM1_Init+0x180>)
 800082a:	f001 fd26 	bl	800227a <HAL_TIM_Base_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000834:	f000 f9d6 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800083e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000842:	4619      	mov	r1, r3
 8000844:	483e      	ldr	r0, [pc, #248]	; (8000940 <MX_TIM1_Init+0x180>)
 8000846:	f002 f87b 	bl	8002940 <HAL_TIM_ConfigClockSource>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000850:	f000 f9c8 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000854:	483a      	ldr	r0, [pc, #232]	; (8000940 <MX_TIM1_Init+0x180>)
 8000856:	f001 fd5f 	bl	8002318 <HAL_TIM_PWM_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000860:	f000 f9c0 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800086c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000870:	4619      	mov	r1, r3
 8000872:	4833      	ldr	r0, [pc, #204]	; (8000940 <MX_TIM1_Init+0x180>)
 8000874:	f002 fc38 	bl	80030e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800087e:	f000 f9b1 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000882:	2360      	movs	r3, #96	; 0x60
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088a:	2300      	movs	r3, #0
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800088e:	2300      	movs	r3, #0
 8000890:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	4826      	ldr	r0, [pc, #152]	; (8000940 <MX_TIM1_Init+0x180>)
 80008a8:	f001 ff8c 	bl	80027c4 <HAL_TIM_PWM_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80008b2:	f000 f997 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	2204      	movs	r2, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	4820      	ldr	r0, [pc, #128]	; (8000940 <MX_TIM1_Init+0x180>)
 80008c0:	f001 ff80 	bl	80027c4 <HAL_TIM_PWM_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80008ca:	f000 f98b 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d2:	2208      	movs	r2, #8
 80008d4:	4619      	mov	r1, r3
 80008d6:	481a      	ldr	r0, [pc, #104]	; (8000940 <MX_TIM1_Init+0x180>)
 80008d8:	f001 ff74 	bl	80027c4 <HAL_TIM_PWM_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80008e2:	f000 f97f 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	220c      	movs	r2, #12
 80008ec:	4619      	mov	r1, r3
 80008ee:	4814      	ldr	r0, [pc, #80]	; (8000940 <MX_TIM1_Init+0x180>)
 80008f0:	f001 ff68 	bl	80027c4 <HAL_TIM_PWM_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 80008fa:	f000 f973 	bl	8000be4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000916:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <MX_TIM1_Init+0x180>)
 8000922:	f002 fc5d 	bl	80031e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 800092c:	f000 f95a 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000930:	4803      	ldr	r0, [pc, #12]	; (8000940 <MX_TIM1_Init+0x180>)
 8000932:	f000 fa6b 	bl	8000e0c <HAL_TIM_MspPostInit>

}
 8000936:	bf00      	nop
 8000938:	3758      	adds	r7, #88	; 0x58
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000e0 	.word	0x200000e0
 8000944:	40010000 	.word	0x40010000

08000948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	; 0x30
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	2224      	movs	r2, #36	; 0x24
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f002 ffb0 	bl	80038bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_TIM2_Init+0xa4>)
 8000966:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800096a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_TIM2_Init+0xa4>)
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_TIM2_Init+0xa4>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000978:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_TIM2_Init+0xa4>)
 800097a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800097e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_TIM2_Init+0xa4>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_TIM2_Init+0xa4>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800098c:	2301      	movs	r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000994:	2301      	movs	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009a4:	2301      	movs	r3, #1
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	4619      	mov	r1, r3
 80009b6:	480d      	ldr	r0, [pc, #52]	; (80009ec <MX_TIM2_Init+0xa4>)
 80009b8:	f001 fdd0 	bl	800255c <HAL_TIM_Encoder_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80009c2:	f000 f90f 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_TIM2_Init+0xa4>)
 80009d4:	f002 fb88 	bl	80030e8 <HAL_TIMEx_MasterConfigSynchronization>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80009de:	f000 f901 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3730      	adds	r7, #48	; 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000180 	.word	0x20000180

080009f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	; 0x30
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	2224      	movs	r2, #36	; 0x24
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 ff5c 	bl	80038bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a0c:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_TIM3_Init+0xa0>)
 8000a0e:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <MX_TIM3_Init+0xa4>)
 8000a10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_TIM3_Init+0xa0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_TIM3_Init+0xa0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_TIM3_Init+0xa0>)
 8000a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_TIM3_Init+0xa0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_TIM3_Init+0xa0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_TIM3_Init+0xa0>)
 8000a5e:	f001 fd7d 	bl	800255c <HAL_TIM_Encoder_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a68:	f000 f8bc 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_TIM3_Init+0xa0>)
 8000a7a:	f002 fb35 	bl	80030e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a84:	f000 f8ae 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3730      	adds	r7, #48	; 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000098 	.word	0x20000098
 8000a94:	40000400 	.word	0x40000400

08000a98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_USART2_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	f002 fbd8 	bl	8003284 <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f000 f883 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200001c8 	.word	0x200001c8
 8000ae8:	40004400 	.word	0x40004400

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <MX_GPIO_Init+0xc4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a29      	ldr	r2, [pc, #164]	; (8000bb0 <MX_GPIO_Init+0xc4>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <MX_GPIO_Init+0xc4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <MX_GPIO_Init+0xc4>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <MX_GPIO_Init+0xc4>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <MX_GPIO_Init+0xc4>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_GPIO_Init+0xc4>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <MX_GPIO_Init+0xc4>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_GPIO_Init+0xc4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5c:	4815      	ldr	r0, [pc, #84]	; (8000bb4 <MX_GPIO_Init+0xc8>)
 8000b5e:	f000 fdd5 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2101      	movs	r1, #1
 8000b66:	4814      	ldr	r0, [pc, #80]	; (8000bb8 <MX_GPIO_Init+0xcc>)
 8000b68:	f000 fdd0 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	4619      	mov	r1, r3
 8000b84:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <MX_GPIO_Init+0xc8>)
 8000b86:	f000 fc2d 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_GPIO_Init+0xcc>)
 8000ba2:	f000 fc1f 	bl	80013e4 <HAL_GPIO_Init>

}
 8000ba6:	bf00      	nop
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40020400 	.word	0x40020400

08000bbc <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	230a      	movs	r3, #10
 8000bce:	68b9      	ldr	r1, [r7, #8]
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <_write+0x24>)
 8000bd2:	f002 fba4 	bl	800331e <HAL_UART_Transmit>
  return len;
 8000bd6:	687b      	ldr	r3, [r7, #4]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200001c8 	.word	0x200001c8

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <HAL_SPI_MspInit+0x84>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d12b      	bne.n	8000cba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c9a:	23e0      	movs	r3, #224	; 0xe0
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000caa:	2305      	movs	r3, #5
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000cb6:	f000 fb95 	bl	80013e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40013000 	.word	0x40013000
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <HAL_TIM_Base_MspInit+0x3c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d10d      	bne.n	8000cfe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_TIM_Base_MspInit+0x40>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <HAL_TIM_Base_MspInit+0x40>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <HAL_TIM_Base_MspInit+0x40>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08c      	sub	sp, #48	; 0x30
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d34:	d12c      	bne.n	8000d90 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
 8000d3a:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	4a2f      	ldr	r2, [pc, #188]	; (8000dfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a28      	ldr	r2, [pc, #160]	; (8000dfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	481d      	ldr	r0, [pc, #116]	; (8000e00 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d8a:	f000 fb2b 	bl	80013e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d8e:	e030      	b.n	8000df2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM3)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a1b      	ldr	r2, [pc, #108]	; (8000e04 <HAL_TIM_Encoder_MspInit+0xf0>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12b      	bne.n	8000df2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd2:	23c0      	movs	r3, #192	; 0xc0
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000de2:	2302      	movs	r3, #2
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	4806      	ldr	r0, [pc, #24]	; (8000e08 <HAL_TIM_Encoder_MspInit+0xf4>)
 8000dee:	f000 faf9 	bl	80013e4 <HAL_GPIO_Init>
}
 8000df2:	bf00      	nop
 8000df4:	3730      	adds	r7, #48	; 0x30
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000
 8000e04:	40000400 	.word	0x40000400
 8000e08:	40020800 	.word	0x40020800

08000e0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <HAL_TIM_MspPostInit+0x68>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d11e      	bne.n	8000e6c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_TIM_MspPostInit+0x6c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <HAL_TIM_MspPostInit+0x6c>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_TIM_MspPostInit+0x6c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000e4a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4619      	mov	r1, r3
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <HAL_TIM_MspPostInit+0x70>)
 8000e68:	f000 fabc 	bl	80013e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40010000 	.word	0x40010000
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000

08000e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <HAL_UART_MspInit+0x84>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d12b      	bne.n	8000efa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_UART_MspInit+0x88>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <HAL_UART_MspInit+0x88>)
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_UART_MspInit+0x88>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_UART_MspInit+0x88>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <HAL_UART_MspInit+0x88>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_UART_MspInit+0x88>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eda:	230c      	movs	r3, #12
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eea:	2307      	movs	r3, #7
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <HAL_UART_MspInit+0x8c>)
 8000ef6:	f000 fa75 	bl	80013e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000efa:	bf00      	nop
 8000efc:	3728      	adds	r7, #40	; 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40004400 	.word	0x40004400
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5c:	f000 f918 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	e00a      	b.n	8000f8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f76:	f3af 8000 	nop.w
 8000f7a:	4601      	mov	r1, r0
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	60ba      	str	r2, [r7, #8]
 8000f82:	b2ca      	uxtb	r2, r1
 8000f84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbf0      	blt.n	8000f76 <_read+0x12>
	}

return len;
 8000f94:	687b      	ldr	r3, [r7, #4]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	return -1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fc6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <_isatty>:

int _isatty(int file)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
	return 1;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001010:	4a14      	ldr	r2, [pc, #80]	; (8001064 <_sbrk+0x5c>)
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <_sbrk+0x60>)
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <_sbrk+0x64>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <_sbrk+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	429a      	cmp	r2, r3
 8001036:	d207      	bcs.n	8001048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001038:	f002 fc16 	bl	8003868 <__errno>
 800103c:	4603      	mov	r3, r0
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001046:	e009      	b.n	800105c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <_sbrk+0x64>)
 8001058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20020000 	.word	0x20020000
 8001068:	00000400 	.word	0x00000400
 800106c:	2000008c 	.word	0x2000008c
 8001070:	20000220 	.word	0x20000220

08001074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <SystemInit+0x20>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <SystemInit+0x20>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800109e:	490e      	ldr	r1, [pc, #56]	; (80010d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a0:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010b4:	4c0b      	ldr	r4, [pc, #44]	; (80010e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010c2:	f7ff ffd7 	bl	8001074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c6:	f002 fbd5 	bl	8003874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fa6d 	bl	80005a8 <main>
  bx  lr    
 80010ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010dc:	08004864 	.word	0x08004864
  ldr r2, =_sbss
 80010e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010e4:	20000220 	.word	0x20000220

080010e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <HAL_Init+0x40>)
 80010f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_Init+0x40>)
 8001102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <HAL_Init+0x40>)
 800110e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 f931 	bl	800137c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111a:	2000      	movs	r0, #0
 800111c:	f000 f808 	bl	8001130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001120:	f7ff fd66 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023c00 	.word	0x40023c00

08001130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x54>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_InitTick+0x58>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	fbb3 f3f1 	udiv	r3, r3, r1
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f93b 	bl	80013ca <HAL_SYSTICK_Config>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e00e      	b.n	800117c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b0f      	cmp	r3, #15
 8001162:	d80a      	bhi.n	800117a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800116c:	f000 f911 	bl	8001392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_InitTick+0x5c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000000 	.word	0x20000000
 8001188:	20000008 	.word	0x20000008
 800118c:	20000004 	.word	0x20000004

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008
 80011b4:	2000020c 	.word	0x2000020c

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	2000020c 	.word	0x2000020c

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff ffee 	bl	80011b8 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffde 	bl	80011b8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008

08001218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0a      	blt.n	80012a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	490c      	ldr	r1, [pc, #48]	; (80012c8 <__NVIC_SetPriority+0x4c>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a4:	e00a      	b.n	80012bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4908      	ldr	r1, [pc, #32]	; (80012cc <__NVIC_SetPriority+0x50>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3b04      	subs	r3, #4
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	440b      	add	r3, r1
 80012ba:	761a      	strb	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f1c3 0307 	rsb	r3, r3, #7
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	bf28      	it	cs
 80012ee:	2304      	movcs	r3, #4
 80012f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3304      	adds	r3, #4
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d902      	bls.n	8001300 <NVIC_EncodePriority+0x30>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	e000      	b.n	8001302 <NVIC_EncodePriority+0x32>
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001318:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43d9      	mvns	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	4313      	orrs	r3, r2
         );
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	; 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001348:	d301      	bcc.n	800134e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2301      	movs	r3, #1
 800134c:	e00f      	b.n	800136e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <SysTick_Config+0x40>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001356:	210f      	movs	r1, #15
 8001358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800135c:	f7ff ff8e 	bl	800127c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Config+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SysTick_Config+0x40>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff47 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff5c 	bl	8001260 <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff8e 	bl	80012d0 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5d 	bl	800127c <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ffb0 	bl	8001338 <SysTick_Config>
 80013d8:	4603      	mov	r3, r0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	e165      	b.n	80016cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001400:	2201      	movs	r2, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	429a      	cmp	r2, r3
 800141a:	f040 8154 	bne.w	80016c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b01      	cmp	r3, #1
 8001428:	d005      	beq.n	8001436 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001432:	2b02      	cmp	r3, #2
 8001434:	d130      	bne.n	8001498 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800146c:	2201      	movs	r2, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	f003 0201 	and.w	r2, r3, #1
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d017      	beq.n	80014d4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d123      	bne.n	8001528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	08da      	lsrs	r2, r3, #3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3208      	adds	r2, #8
 80014e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	691a      	ldr	r2, [r3, #16]
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	69b9      	ldr	r1, [r7, #24]
 8001524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0203 	and.w	r2, r3, #3
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 80ae 	beq.w	80016c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b5d      	ldr	r3, [pc, #372]	; (80016e4 <HAL_GPIO_Init+0x300>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a5c      	ldr	r2, [pc, #368]	; (80016e4 <HAL_GPIO_Init+0x300>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b5a      	ldr	r3, [pc, #360]	; (80016e4 <HAL_GPIO_Init+0x300>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001586:	4a58      	ldr	r2, [pc, #352]	; (80016e8 <HAL_GPIO_Init+0x304>)
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	220f      	movs	r2, #15
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4f      	ldr	r2, [pc, #316]	; (80016ec <HAL_GPIO_Init+0x308>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d025      	beq.n	80015fe <HAL_GPIO_Init+0x21a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4e      	ldr	r2, [pc, #312]	; (80016f0 <HAL_GPIO_Init+0x30c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d01f      	beq.n	80015fa <HAL_GPIO_Init+0x216>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4d      	ldr	r2, [pc, #308]	; (80016f4 <HAL_GPIO_Init+0x310>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d019      	beq.n	80015f6 <HAL_GPIO_Init+0x212>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4c      	ldr	r2, [pc, #304]	; (80016f8 <HAL_GPIO_Init+0x314>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0x20e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4b      	ldr	r2, [pc, #300]	; (80016fc <HAL_GPIO_Init+0x318>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00d      	beq.n	80015ee <HAL_GPIO_Init+0x20a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4a      	ldr	r2, [pc, #296]	; (8001700 <HAL_GPIO_Init+0x31c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x206>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a49      	ldr	r2, [pc, #292]	; (8001704 <HAL_GPIO_Init+0x320>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_GPIO_Init+0x202>
 80015e2:	2306      	movs	r3, #6
 80015e4:	e00c      	b.n	8001600 <HAL_GPIO_Init+0x21c>
 80015e6:	2307      	movs	r3, #7
 80015e8:	e00a      	b.n	8001600 <HAL_GPIO_Init+0x21c>
 80015ea:	2305      	movs	r3, #5
 80015ec:	e008      	b.n	8001600 <HAL_GPIO_Init+0x21c>
 80015ee:	2304      	movs	r3, #4
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x21c>
 80015f2:	2303      	movs	r3, #3
 80015f4:	e004      	b.n	8001600 <HAL_GPIO_Init+0x21c>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_Init+0x21c>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x21c>
 80015fe:	2300      	movs	r3, #0
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	f002 0203 	and.w	r2, r2, #3
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	4093      	lsls	r3, r2
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001610:	4935      	ldr	r1, [pc, #212]	; (80016e8 <HAL_GPIO_Init+0x304>)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	3302      	adds	r3, #2
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800161e:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <HAL_GPIO_Init+0x324>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001642:	4a31      	ldr	r2, [pc, #196]	; (8001708 <HAL_GPIO_Init+0x324>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <HAL_GPIO_Init+0x324>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800166c:	4a26      	ldr	r2, [pc, #152]	; (8001708 <HAL_GPIO_Init+0x324>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001672:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_GPIO_Init+0x324>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001696:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <HAL_GPIO_Init+0x324>)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <HAL_GPIO_Init+0x324>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c0:	4a11      	ldr	r2, [pc, #68]	; (8001708 <HAL_GPIO_Init+0x324>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3301      	adds	r3, #1
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	2b0f      	cmp	r3, #15
 80016d0:	f67f ae96 	bls.w	8001400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40013800 	.word	0x40013800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020c00 	.word	0x40020c00
 80016fc:	40021000 	.word	0x40021000
 8001700:	40021400 	.word	0x40021400
 8001704:	40021800 	.word	0x40021800
 8001708:	40013c00 	.word	0x40013c00

0800170c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
 8001718:	4613      	mov	r3, r2
 800171a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800171c:	787b      	ldrb	r3, [r7, #1]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001722:	887a      	ldrh	r2, [r7, #2]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001728:	e003      	b.n	8001732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	041a      	lsls	r2, r3, #16
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	619a      	str	r2, [r3, #24]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0cc      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d90c      	bls.n	800177c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0b8      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a58      	ldr	r2, [pc, #352]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	494d      	ldr	r1, [pc, #308]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d044      	beq.n	8001860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d119      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e07f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d003      	beq.n	80017fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e06f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e067      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181e:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f023 0203 	bic.w	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4934      	ldr	r1, [pc, #208]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001830:	f7ff fcc2 	bl	80011b8 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	e00a      	b.n	800184e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7ff fcbe 	bl	80011b8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e04f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 020c 	and.w	r2, r3, #12
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	429a      	cmp	r2, r3
 800185e:	d1eb      	bne.n	8001838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 030f 	and.w	r3, r3, #15
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d20c      	bcs.n	8001888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e032      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4916      	ldr	r1, [pc, #88]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	490e      	ldr	r1, [pc, #56]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c6:	f000 f855 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 80018ca:	4602      	mov	r2, r0
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	490a      	ldr	r1, [pc, #40]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	5ccb      	ldrb	r3, [r1, r3]
 80018da:	fa22 f303 	lsr.w	r3, r2, r3
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fc22 	bl	8001130 <HAL_InitTick>

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023c00 	.word	0x40023c00
 80018fc:	40023800 	.word	0x40023800
 8001900:	080047a4 	.word	0x080047a4
 8001904:	20000000 	.word	0x20000000
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_RCC_GetHCLKFreq+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000000 	.word	0x20000000

08001924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001928:	f7ff fff0 	bl	800190c <HAL_RCC_GetHCLKFreq>
 800192c:	4602      	mov	r2, r0
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	0a9b      	lsrs	r3, r3, #10
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	4903      	ldr	r1, [pc, #12]	; (8001948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800193a:	5ccb      	ldrb	r3, [r1, r3]
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001940:	4618      	mov	r0, r3
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40023800 	.word	0x40023800
 8001948:	080047b4 	.word	0x080047b4

0800194c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001950:	f7ff ffdc 	bl	800190c <HAL_RCC_GetHCLKFreq>
 8001954:	4602      	mov	r2, r0
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	0b5b      	lsrs	r3, r3, #13
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	4903      	ldr	r1, [pc, #12]	; (8001970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001962:	5ccb      	ldrb	r3, [r1, r3]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	080047b4 	.word	0x080047b4

08001974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001978:	b087      	sub	sp, #28
 800197a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800197c:	2600      	movs	r6, #0
 800197e:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8001980:	2600      	movs	r6, #0
 8001982:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8001984:	2600      	movs	r6, #0
 8001986:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8001988:	2600      	movs	r6, #0
 800198a:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800198c:	2600      	movs	r6, #0
 800198e:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001990:	4ea3      	ldr	r6, [pc, #652]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001992:	68b6      	ldr	r6, [r6, #8]
 8001994:	f006 060c 	and.w	r6, r6, #12
 8001998:	2e0c      	cmp	r6, #12
 800199a:	f200 8137 	bhi.w	8001c0c <HAL_RCC_GetSysClockFreq+0x298>
 800199e:	f20f 0c08 	addw	ip, pc, #8
 80019a2:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80019a6:	bf00      	nop
 80019a8:	080019dd 	.word	0x080019dd
 80019ac:	08001c0d 	.word	0x08001c0d
 80019b0:	08001c0d 	.word	0x08001c0d
 80019b4:	08001c0d 	.word	0x08001c0d
 80019b8:	080019e3 	.word	0x080019e3
 80019bc:	08001c0d 	.word	0x08001c0d
 80019c0:	08001c0d 	.word	0x08001c0d
 80019c4:	08001c0d 	.word	0x08001c0d
 80019c8:	080019e9 	.word	0x080019e9
 80019cc:	08001c0d 	.word	0x08001c0d
 80019d0:	08001c0d 	.word	0x08001c0d
 80019d4:	08001c0d 	.word	0x08001c0d
 80019d8:	08001aff 	.word	0x08001aff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019dc:	4b91      	ldr	r3, [pc, #580]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80019de:	613b      	str	r3, [r7, #16]
       break;
 80019e0:	e117      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019e2:	4b91      	ldr	r3, [pc, #580]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80019e4:	613b      	str	r3, [r7, #16]
      break;
 80019e6:	e114      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e8:	4b8d      	ldr	r3, [pc, #564]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f2:	4b8b      	ldr	r3, [pc, #556]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d024      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fe:	4b88      	ldr	r3, [pc, #544]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	099b      	lsrs	r3, r3, #6
 8001a04:	461a      	mov	r2, r3
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001a0e:	f04f 0500 	mov.w	r5, #0
 8001a12:	ea02 0004 	and.w	r0, r2, r4
 8001a16:	ea03 0105 	and.w	r1, r3, r5
 8001a1a:	4b83      	ldr	r3, [pc, #524]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001a1c:	fb03 f201 	mul.w	r2, r3, r1
 8001a20:	2300      	movs	r3, #0
 8001a22:	fb03 f300 	mul.w	r3, r3, r0
 8001a26:	4413      	add	r3, r2
 8001a28:	4a7f      	ldr	r2, [pc, #508]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001a2a:	fba0 0102 	umull	r0, r1, r0, r2
 8001a2e:	440b      	add	r3, r1
 8001a30:	4619      	mov	r1, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	461a      	mov	r2, r3
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	f7fe fc39 	bl	80002b0 <__aeabi_uldivmod>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4613      	mov	r3, r2
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e04c      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a48:	4b75      	ldr	r3, [pc, #468]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a58:	f04f 0100 	mov.w	r1, #0
 8001a5c:	ea02 0800 	and.w	r8, r2, r0
 8001a60:	ea03 0901 	and.w	r9, r3, r1
 8001a64:	4640      	mov	r0, r8
 8001a66:	4649      	mov	r1, r9
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	014b      	lsls	r3, r1, #5
 8001a72:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a76:	0142      	lsls	r2, r0, #5
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	ebb0 0008 	subs.w	r0, r0, r8
 8001a80:	eb61 0109 	sbc.w	r1, r1, r9
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	018b      	lsls	r3, r1, #6
 8001a8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a92:	0182      	lsls	r2, r0, #6
 8001a94:	1a12      	subs	r2, r2, r0
 8001a96:	eb63 0301 	sbc.w	r3, r3, r1
 8001a9a:	f04f 0000 	mov.w	r0, #0
 8001a9e:	f04f 0100 	mov.w	r1, #0
 8001aa2:	00d9      	lsls	r1, r3, #3
 8001aa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aa8:	00d0      	lsls	r0, r2, #3
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	eb12 0208 	adds.w	r2, r2, r8
 8001ab2:	eb43 0309 	adc.w	r3, r3, r9
 8001ab6:	f04f 0000 	mov.w	r0, #0
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	0299      	lsls	r1, r3, #10
 8001ac0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ac4:	0290      	lsls	r0, r2, #10
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	f7fe fbeb 	bl	80002b0 <__aeabi_uldivmod>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4613      	mov	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae2:	4b4f      	ldr	r3, [pc, #316]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	0c1b      	lsrs	r3, r3, #16
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	3301      	adds	r3, #1
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	613b      	str	r3, [r7, #16]
      break;
 8001afc:	e089      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001afe:	4948      	ldr	r1, [pc, #288]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b00:	6849      	ldr	r1, [r1, #4]
 8001b02:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001b06:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b08:	4945      	ldr	r1, [pc, #276]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b0a:	6849      	ldr	r1, [r1, #4]
 8001b0c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001b10:	2900      	cmp	r1, #0
 8001b12:	d024      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b14:	4942      	ldr	r1, [pc, #264]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b16:	6849      	ldr	r1, [r1, #4]
 8001b18:	0989      	lsrs	r1, r1, #6
 8001b1a:	4608      	mov	r0, r1
 8001b1c:	f04f 0100 	mov.w	r1, #0
 8001b20:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001b24:	f04f 0500 	mov.w	r5, #0
 8001b28:	ea00 0204 	and.w	r2, r0, r4
 8001b2c:	ea01 0305 	and.w	r3, r1, r5
 8001b30:	493d      	ldr	r1, [pc, #244]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001b32:	fb01 f003 	mul.w	r0, r1, r3
 8001b36:	2100      	movs	r1, #0
 8001b38:	fb01 f102 	mul.w	r1, r1, r2
 8001b3c:	1844      	adds	r4, r0, r1
 8001b3e:	493a      	ldr	r1, [pc, #232]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001b40:	fba2 0101 	umull	r0, r1, r2, r1
 8001b44:	1863      	adds	r3, r4, r1
 8001b46:	4619      	mov	r1, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	f7fe fbae 	bl	80002b0 <__aeabi_uldivmod>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e04a      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5e:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	099b      	lsrs	r3, r3, #6
 8001b64:	461a      	mov	r2, r3
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b6e:	f04f 0100 	mov.w	r1, #0
 8001b72:	ea02 0400 	and.w	r4, r2, r0
 8001b76:	ea03 0501 	and.w	r5, r3, r1
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	014b      	lsls	r3, r1, #5
 8001b88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b8c:	0142      	lsls	r2, r0, #5
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	1b00      	subs	r0, r0, r4
 8001b94:	eb61 0105 	sbc.w	r1, r1, r5
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	018b      	lsls	r3, r1, #6
 8001ba2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ba6:	0182      	lsls	r2, r0, #6
 8001ba8:	1a12      	subs	r2, r2, r0
 8001baa:	eb63 0301 	sbc.w	r3, r3, r1
 8001bae:	f04f 0000 	mov.w	r0, #0
 8001bb2:	f04f 0100 	mov.w	r1, #0
 8001bb6:	00d9      	lsls	r1, r3, #3
 8001bb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bbc:	00d0      	lsls	r0, r2, #3
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	1912      	adds	r2, r2, r4
 8001bc4:	eb45 0303 	adc.w	r3, r5, r3
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	0299      	lsls	r1, r3, #10
 8001bd2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bd6:	0290      	lsls	r0, r2, #10
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	461a      	mov	r2, r3
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	f7fe fb62 	bl	80002b0 <__aeabi_uldivmod>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	0f1b      	lsrs	r3, r3, #28
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	613b      	str	r3, [r7, #16]
      break;
 8001c0a:	e002      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001c0e:	613b      	str	r3, [r7, #16]
      break;
 8001c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c12:	693b      	ldr	r3, [r7, #16]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	00f42400 	.word	0x00f42400
 8001c28:	017d7840 	.word	0x017d7840

08001c2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e28d      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8083 	beq.w	8001d52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c4c:	4b94      	ldr	r3, [pc, #592]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d019      	beq.n	8001c8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c58:	4b91      	ldr	r3, [pc, #580]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d106      	bne.n	8001c72 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c64:	4b8e      	ldr	r3, [pc, #568]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c70:	d00c      	beq.n	8001c8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c72:	4b8b      	ldr	r3, [pc, #556]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	d112      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	4b84      	ldr	r3, [pc, #528]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d05b      	beq.n	8001d50 <HAL_RCC_OscConfig+0x124>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d157      	bne.n	8001d50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e25a      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cac:	d106      	bne.n	8001cbc <HAL_RCC_OscConfig+0x90>
 8001cae:	4b7c      	ldr	r3, [pc, #496]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a7b      	ldr	r2, [pc, #492]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e01d      	b.n	8001cf8 <HAL_RCC_OscConfig+0xcc>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0xb4>
 8001cc6:	4b76      	ldr	r3, [pc, #472]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a75      	ldr	r2, [pc, #468]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b73      	ldr	r3, [pc, #460]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a72      	ldr	r2, [pc, #456]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCC_OscConfig+0xcc>
 8001ce0:	4b6f      	ldr	r3, [pc, #444]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a6e      	ldr	r2, [pc, #440]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b6c      	ldr	r3, [pc, #432]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a6b      	ldr	r2, [pc, #428]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fa5a 	bl	80011b8 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fa56 	bl	80011b8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e21f      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	4b61      	ldr	r3, [pc, #388]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0xdc>
 8001d26:	e014      	b.n	8001d52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff fa46 	bl	80011b8 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fa42 	bl	80011b8 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e20b      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	4b57      	ldr	r3, [pc, #348]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x104>
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d06f      	beq.n	8001e3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d5e:	4b50      	ldr	r3, [pc, #320]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d017      	beq.n	8001d9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d6a:	4b4d      	ldr	r3, [pc, #308]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d105      	bne.n	8001d82 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d76:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00b      	beq.n	8001d9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d82:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d11c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8e:	4b44      	ldr	r3, [pc, #272]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d116      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_RCC_OscConfig+0x186>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d001      	beq.n	8001db2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e1d3      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db2:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4937      	ldr	r1, [pc, #220]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	e03a      	b.n	8001e3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d020      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd0:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <HAL_RCC_OscConfig+0x278>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd6:	f7ff f9ef 	bl	80011b8 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dde:	f7ff f9eb 	bl	80011b8 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e1b4      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4925      	ldr	r1, [pc, #148]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
 8001e10:	e015      	b.n	8001e3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e12:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <HAL_RCC_OscConfig+0x278>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff f9ce 	bl	80011b8 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e20:	f7ff f9ca 	bl	80011b8 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e193      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d036      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d016      	beq.n	8001e80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_RCC_OscConfig+0x27c>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff f9ae 	bl	80011b8 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff f9aa 	bl	80011b8 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e173      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x234>
 8001e7e:	e01b      	b.n	8001eb8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_OscConfig+0x27c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e86:	f7ff f997 	bl	80011b8 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	e00e      	b.n	8001eac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f993 	bl	80011b8 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d907      	bls.n	8001eac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e15c      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	42470000 	.word	0x42470000
 8001ea8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eac:	4b8a      	ldr	r3, [pc, #552]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1ea      	bne.n	8001e8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8097 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eca:	4b83      	ldr	r3, [pc, #524]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10f      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b7f      	ldr	r3, [pc, #508]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a7e      	ldr	r2, [pc, #504]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b7c      	ldr	r3, [pc, #496]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef6:	4b79      	ldr	r3, [pc, #484]	; (80020dc <HAL_RCC_OscConfig+0x4b0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d118      	bne.n	8001f34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f02:	4b76      	ldr	r3, [pc, #472]	; (80020dc <HAL_RCC_OscConfig+0x4b0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a75      	ldr	r2, [pc, #468]	; (80020dc <HAL_RCC_OscConfig+0x4b0>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0e:	f7ff f953 	bl	80011b8 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7ff f94f 	bl	80011b8 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e118      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	4b6c      	ldr	r3, [pc, #432]	; (80020dc <HAL_RCC_OscConfig+0x4b0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x31e>
 8001f3c:	4b66      	ldr	r3, [pc, #408]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	4a65      	ldr	r2, [pc, #404]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6713      	str	r3, [r2, #112]	; 0x70
 8001f48:	e01c      	b.n	8001f84 <HAL_RCC_OscConfig+0x358>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x340>
 8001f52:	4b61      	ldr	r3, [pc, #388]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a60      	ldr	r2, [pc, #384]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5e:	4b5e      	ldr	r3, [pc, #376]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a5d      	ldr	r2, [pc, #372]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCC_OscConfig+0x358>
 8001f6c:	4b5a      	ldr	r3, [pc, #360]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f70:	4a59      	ldr	r2, [pc, #356]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	6713      	str	r3, [r2, #112]	; 0x70
 8001f78:	4b57      	ldr	r3, [pc, #348]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7c:	4a56      	ldr	r2, [pc, #344]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001f7e:	f023 0304 	bic.w	r3, r3, #4
 8001f82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d015      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7ff f914 	bl	80011b8 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f94:	f7ff f910 	bl	80011b8 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0d7      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001faa:	4b4b      	ldr	r3, [pc, #300]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0ee      	beq.n	8001f94 <HAL_RCC_OscConfig+0x368>
 8001fb6:	e014      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb8:	f7ff f8fe 	bl	80011b8 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc0:	f7ff f8fa 	bl	80011b8 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e0c1      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd6:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1ee      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d105      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe8:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	4a3a      	ldr	r2, [pc, #232]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8001fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80ad 	beq.w	8002158 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ffe:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b08      	cmp	r3, #8
 8002008:	d060      	beq.n	80020cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d145      	bne.n	800209e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002012:	4b33      	ldr	r3, [pc, #204]	; (80020e0 <HAL_RCC_OscConfig+0x4b4>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff f8ce 	bl	80011b8 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002020:	f7ff f8ca 	bl	80011b8 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e093      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002032:	4b29      	ldr	r3, [pc, #164]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	019b      	lsls	r3, r3, #6
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	085b      	lsrs	r3, r3, #1
 8002056:	3b01      	subs	r3, #1
 8002058:	041b      	lsls	r3, r3, #16
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	061b      	lsls	r3, r3, #24
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	071b      	lsls	r3, r3, #28
 800206a:	491b      	ldr	r1, [pc, #108]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_RCC_OscConfig+0x4b4>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff f89f 	bl	80011b8 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207e:	f7ff f89b 	bl	80011b8 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e064      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x452>
 800209c:	e05c      	b.n	8002158 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_RCC_OscConfig+0x4b4>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff f888 	bl	80011b8 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff f884 	bl	80011b8 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e04d      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCC_OscConfig+0x4ac>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x480>
 80020ca:	e045      	b.n	8002158 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e040      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40007000 	.word	0x40007000
 80020e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020e4:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <HAL_RCC_OscConfig+0x538>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d030      	beq.n	8002154 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d129      	bne.n	8002154 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d122      	bne.n	8002154 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002114:	4013      	ands	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800211a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800211c:	4293      	cmp	r3, r2
 800211e:	d119      	bne.n	8002154 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	085b      	lsrs	r3, r3, #1
 800212c:	3b01      	subs	r3, #1
 800212e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d10f      	bne.n	8002154 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002140:	429a      	cmp	r2, r3
 8002142:	d107      	bne.n	8002154 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800

08002168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e07b      	b.n	8002272 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	2b00      	cmp	r3, #0
 8002180:	d108      	bne.n	8002194 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800218a:	d009      	beq.n	80021a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
 8002192:	e005      	b.n	80021a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe fd40 	bl	8000c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002224:	ea42 0103 	orr.w	r1, r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	0c1b      	lsrs	r3, r3, #16
 800223e:	f003 0104 	and.w	r1, r3, #4
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	f003 0210 	and.w	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002260:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e041      	b.n	8002310 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d106      	bne.n	80022a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7fe fd15 	bl	8000cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2202      	movs	r2, #2
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3304      	adds	r3, #4
 80022b6:	4619      	mov	r1, r3
 80022b8:	4610      	mov	r0, r2
 80022ba:	f000 fc05 	bl	8002ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e041      	b.n	80023ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d106      	bne.n	8002344 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f839 	bl	80023b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3304      	adds	r3, #4
 8002354:	4619      	mov	r1, r3
 8002356:	4610      	mov	r0, r2
 8002358:	f000 fbb6 	bl	8002ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d109      	bne.n	80023f0 <HAL_TIM_PWM_Start+0x24>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	bf14      	ite	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	2300      	moveq	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e022      	b.n	8002436 <HAL_TIM_PWM_Start+0x6a>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d109      	bne.n	800240a <HAL_TIM_PWM_Start+0x3e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	bf14      	ite	ne
 8002402:	2301      	movne	r3, #1
 8002404:	2300      	moveq	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	e015      	b.n	8002436 <HAL_TIM_PWM_Start+0x6a>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b08      	cmp	r3, #8
 800240e:	d109      	bne.n	8002424 <HAL_TIM_PWM_Start+0x58>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	bf14      	ite	ne
 800241c:	2301      	movne	r3, #1
 800241e:	2300      	moveq	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	e008      	b.n	8002436 <HAL_TIM_PWM_Start+0x6a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	bf14      	ite	ne
 8002430:	2301      	movne	r3, #1
 8002432:	2300      	moveq	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e07c      	b.n	8002538 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d104      	bne.n	800244e <HAL_TIM_PWM_Start+0x82>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800244c:	e013      	b.n	8002476 <HAL_TIM_PWM_Start+0xaa>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d104      	bne.n	800245e <HAL_TIM_PWM_Start+0x92>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800245c:	e00b      	b.n	8002476 <HAL_TIM_PWM_Start+0xaa>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b08      	cmp	r3, #8
 8002462:	d104      	bne.n	800246e <HAL_TIM_PWM_Start+0xa2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800246c:	e003      	b.n	8002476 <HAL_TIM_PWM_Start+0xaa>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2201      	movs	r2, #1
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fe0c 	bl	800309c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a2d      	ldr	r2, [pc, #180]	; (8002540 <HAL_TIM_PWM_Start+0x174>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d004      	beq.n	8002498 <HAL_TIM_PWM_Start+0xcc>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a2c      	ldr	r2, [pc, #176]	; (8002544 <HAL_TIM_PWM_Start+0x178>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_TIM_PWM_Start+0xd0>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_TIM_PWM_Start+0xd2>
 800249c:	2300      	movs	r3, #0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a22      	ldr	r2, [pc, #136]	; (8002540 <HAL_TIM_PWM_Start+0x174>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d022      	beq.n	8002502 <HAL_TIM_PWM_Start+0x136>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c4:	d01d      	beq.n	8002502 <HAL_TIM_PWM_Start+0x136>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1f      	ldr	r2, [pc, #124]	; (8002548 <HAL_TIM_PWM_Start+0x17c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d018      	beq.n	8002502 <HAL_TIM_PWM_Start+0x136>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1d      	ldr	r2, [pc, #116]	; (800254c <HAL_TIM_PWM_Start+0x180>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_TIM_PWM_Start+0x136>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <HAL_TIM_PWM_Start+0x184>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00e      	beq.n	8002502 <HAL_TIM_PWM_Start+0x136>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a16      	ldr	r2, [pc, #88]	; (8002544 <HAL_TIM_PWM_Start+0x178>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d009      	beq.n	8002502 <HAL_TIM_PWM_Start+0x136>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a18      	ldr	r2, [pc, #96]	; (8002554 <HAL_TIM_PWM_Start+0x188>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_TIM_PWM_Start+0x136>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a16      	ldr	r2, [pc, #88]	; (8002558 <HAL_TIM_PWM_Start+0x18c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d111      	bne.n	8002526 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b06      	cmp	r3, #6
 8002512:	d010      	beq.n	8002536 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002524:	e007      	b.n	8002536 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40010000 	.word	0x40010000
 8002544:	40010400 	.word	0x40010400
 8002548:	40000400 	.word	0x40000400
 800254c:	40000800 	.word	0x40000800
 8002550:	40000c00 	.word	0x40000c00
 8002554:	40014000 	.word	0x40014000
 8002558:	40001800 	.word	0x40001800

0800255c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e097      	b.n	80026a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d106      	bne.n	800258a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7fe fbc5 	bl	8000d14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025a0:	f023 0307 	bic.w	r3, r3, #7
 80025a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3304      	adds	r3, #4
 80025ae:	4619      	mov	r1, r3
 80025b0:	4610      	mov	r0, r2
 80025b2:	f000 fa89 	bl	8002ac8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025de:	f023 0303 	bic.w	r3, r3, #3
 80025e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	4313      	orrs	r3, r2
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80025fc:	f023 030c 	bic.w	r3, r3, #12
 8002600:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002608:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800260c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	021b      	lsls	r3, r3, #8
 8002618:	4313      	orrs	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	011a      	lsls	r2, r3, #4
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	031b      	lsls	r3, r3, #12
 800262c:	4313      	orrs	r3, r2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800263a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002642:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	4313      	orrs	r3, r2
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80026d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d110      	bne.n	80026fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d102      	bne.n	80026e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80026de:	7b7b      	ldrb	r3, [r7, #13]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d001      	beq.n	80026e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e069      	b.n	80027bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026f8:	e031      	b.n	800275e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d110      	bne.n	8002722 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002700:	7bbb      	ldrb	r3, [r7, #14]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d102      	bne.n	800270c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002706:	7b3b      	ldrb	r3, [r7, #12]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d001      	beq.n	8002710 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e055      	b.n	80027bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002720:	e01d      	b.n	800275e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d108      	bne.n	800273a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002728:	7bbb      	ldrb	r3, [r7, #14]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d105      	bne.n	800273a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800272e:	7b7b      	ldrb	r3, [r7, #13]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d102      	bne.n	800273a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002734:	7b3b      	ldrb	r3, [r7, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d001      	beq.n	800273e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e03e      	b.n	80027bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2202      	movs	r2, #2
 800274a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2202      	movs	r2, #2
 8002752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2202      	movs	r2, #2
 800275a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_TIM_Encoder_Start+0xc4>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b04      	cmp	r3, #4
 8002768:	d008      	beq.n	800277c <HAL_TIM_Encoder_Start+0xd4>
 800276a:	e00f      	b.n	800278c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2201      	movs	r2, #1
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f000 fc91 	bl	800309c <TIM_CCxChannelCmd>
      break;
 800277a:	e016      	b.n	80027aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2201      	movs	r2, #1
 8002782:	2104      	movs	r1, #4
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fc89 	bl	800309c <TIM_CCxChannelCmd>
      break;
 800278a:	e00e      	b.n	80027aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2201      	movs	r2, #1
 8002792:	2100      	movs	r1, #0
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fc81 	bl	800309c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2201      	movs	r2, #1
 80027a0:	2104      	movs	r1, #4
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fc7a 	bl	800309c <TIM_CCxChannelCmd>
      break;
 80027a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80027da:	2302      	movs	r3, #2
 80027dc:	e0ac      	b.n	8002938 <HAL_TIM_PWM_ConfigChannel+0x174>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	f200 809f 	bhi.w	800292c <HAL_TIM_PWM_ConfigChannel+0x168>
 80027ee:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80027f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f4:	08002829 	.word	0x08002829
 80027f8:	0800292d 	.word	0x0800292d
 80027fc:	0800292d 	.word	0x0800292d
 8002800:	0800292d 	.word	0x0800292d
 8002804:	08002869 	.word	0x08002869
 8002808:	0800292d 	.word	0x0800292d
 800280c:	0800292d 	.word	0x0800292d
 8002810:	0800292d 	.word	0x0800292d
 8002814:	080028ab 	.word	0x080028ab
 8002818:	0800292d 	.word	0x0800292d
 800281c:	0800292d 	.word	0x0800292d
 8002820:	0800292d 	.word	0x0800292d
 8002824:	080028eb 	.word	0x080028eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f9ea 	bl	8002c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0208 	orr.w	r2, r2, #8
 8002842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0204 	bic.w	r2, r2, #4
 8002852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6999      	ldr	r1, [r3, #24]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	619a      	str	r2, [r3, #24]
      break;
 8002866:	e062      	b.n	800292e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fa3a 	bl	8002ce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6999      	ldr	r1, [r3, #24]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	021a      	lsls	r2, r3, #8
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	619a      	str	r2, [r3, #24]
      break;
 80028a8:	e041      	b.n	800292e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fa8f 	bl	8002dd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69da      	ldr	r2, [r3, #28]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0208 	orr.w	r2, r2, #8
 80028c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0204 	bic.w	r2, r2, #4
 80028d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69d9      	ldr	r1, [r3, #28]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	61da      	str	r2, [r3, #28]
      break;
 80028e8:	e021      	b.n	800292e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 fae3 	bl	8002ebc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69da      	ldr	r2, [r3, #28]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69da      	ldr	r2, [r3, #28]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69d9      	ldr	r1, [r3, #28]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	021a      	lsls	r2, r3, #8
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	61da      	str	r2, [r3, #28]
      break;
 800292a:	e000      	b.n	800292e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800292c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_TIM_ConfigClockSource+0x18>
 8002954:	2302      	movs	r3, #2
 8002956:	e0b3      	b.n	8002ac0 <HAL_TIM_ConfigClockSource+0x180>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002976:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800297e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002990:	d03e      	beq.n	8002a10 <HAL_TIM_ConfigClockSource+0xd0>
 8002992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002996:	f200 8087 	bhi.w	8002aa8 <HAL_TIM_ConfigClockSource+0x168>
 800299a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299e:	f000 8085 	beq.w	8002aac <HAL_TIM_ConfigClockSource+0x16c>
 80029a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a6:	d87f      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x168>
 80029a8:	2b70      	cmp	r3, #112	; 0x70
 80029aa:	d01a      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0xa2>
 80029ac:	2b70      	cmp	r3, #112	; 0x70
 80029ae:	d87b      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x168>
 80029b0:	2b60      	cmp	r3, #96	; 0x60
 80029b2:	d050      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x116>
 80029b4:	2b60      	cmp	r3, #96	; 0x60
 80029b6:	d877      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x168>
 80029b8:	2b50      	cmp	r3, #80	; 0x50
 80029ba:	d03c      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0xf6>
 80029bc:	2b50      	cmp	r3, #80	; 0x50
 80029be:	d873      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x168>
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	d058      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x136>
 80029c4:	2b40      	cmp	r3, #64	; 0x40
 80029c6:	d86f      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x168>
 80029c8:	2b30      	cmp	r3, #48	; 0x30
 80029ca:	d064      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x156>
 80029cc:	2b30      	cmp	r3, #48	; 0x30
 80029ce:	d86b      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x168>
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d060      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x156>
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d867      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x168>
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d05c      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x156>
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d05a      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80029e0:	e062      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f000 fb33 	bl	800305c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	609a      	str	r2, [r3, #8]
      break;
 8002a0e:	e04e      	b.n	8002aae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6899      	ldr	r1, [r3, #8]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f000 fb1c 	bl	800305c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a32:	609a      	str	r2, [r3, #8]
      break;
 8002a34:	e03b      	b.n	8002aae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	461a      	mov	r2, r3
 8002a44:	f000 fa90 	bl	8002f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2150      	movs	r1, #80	; 0x50
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fae9 	bl	8003026 <TIM_ITRx_SetConfig>
      break;
 8002a54:	e02b      	b.n	8002aae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6859      	ldr	r1, [r3, #4]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	461a      	mov	r2, r3
 8002a64:	f000 faaf 	bl	8002fc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2160      	movs	r1, #96	; 0x60
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fad9 	bl	8003026 <TIM_ITRx_SetConfig>
      break;
 8002a74:	e01b      	b.n	8002aae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6859      	ldr	r1, [r3, #4]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	461a      	mov	r2, r3
 8002a84:	f000 fa70 	bl	8002f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2140      	movs	r1, #64	; 0x40
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fac9 	bl	8003026 <TIM_ITRx_SetConfig>
      break;
 8002a94:	e00b      	b.n	8002aae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f000 fac0 	bl	8003026 <TIM_ITRx_SetConfig>
        break;
 8002aa6:	e002      	b.n	8002aae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002aa8:	bf00      	nop
 8002aaa:	e000      	b.n	8002aae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002aac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a40      	ldr	r2, [pc, #256]	; (8002bdc <TIM_Base_SetConfig+0x114>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d013      	beq.n	8002b08 <TIM_Base_SetConfig+0x40>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae6:	d00f      	beq.n	8002b08 <TIM_Base_SetConfig+0x40>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a3d      	ldr	r2, [pc, #244]	; (8002be0 <TIM_Base_SetConfig+0x118>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00b      	beq.n	8002b08 <TIM_Base_SetConfig+0x40>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a3c      	ldr	r2, [pc, #240]	; (8002be4 <TIM_Base_SetConfig+0x11c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d007      	beq.n	8002b08 <TIM_Base_SetConfig+0x40>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a3b      	ldr	r2, [pc, #236]	; (8002be8 <TIM_Base_SetConfig+0x120>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d003      	beq.n	8002b08 <TIM_Base_SetConfig+0x40>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a3a      	ldr	r2, [pc, #232]	; (8002bec <TIM_Base_SetConfig+0x124>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d108      	bne.n	8002b1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a2f      	ldr	r2, [pc, #188]	; (8002bdc <TIM_Base_SetConfig+0x114>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d02b      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b28:	d027      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a2c      	ldr	r2, [pc, #176]	; (8002be0 <TIM_Base_SetConfig+0x118>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d023      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a2b      	ldr	r2, [pc, #172]	; (8002be4 <TIM_Base_SetConfig+0x11c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01f      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a2a      	ldr	r2, [pc, #168]	; (8002be8 <TIM_Base_SetConfig+0x120>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01b      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a29      	ldr	r2, [pc, #164]	; (8002bec <TIM_Base_SetConfig+0x124>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d017      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a28      	ldr	r2, [pc, #160]	; (8002bf0 <TIM_Base_SetConfig+0x128>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a27      	ldr	r2, [pc, #156]	; (8002bf4 <TIM_Base_SetConfig+0x12c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00f      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a26      	ldr	r2, [pc, #152]	; (8002bf8 <TIM_Base_SetConfig+0x130>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00b      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a25      	ldr	r2, [pc, #148]	; (8002bfc <TIM_Base_SetConfig+0x134>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a24      	ldr	r2, [pc, #144]	; (8002c00 <TIM_Base_SetConfig+0x138>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d003      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a23      	ldr	r2, [pc, #140]	; (8002c04 <TIM_Base_SetConfig+0x13c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d108      	bne.n	8002b8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <TIM_Base_SetConfig+0x114>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d003      	beq.n	8002bc0 <TIM_Base_SetConfig+0xf8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <TIM_Base_SetConfig+0x124>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d103      	bne.n	8002bc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	615a      	str	r2, [r3, #20]
}
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40000800 	.word	0x40000800
 8002be8:	40000c00 	.word	0x40000c00
 8002bec:	40010400 	.word	0x40010400
 8002bf0:	40014000 	.word	0x40014000
 8002bf4:	40014400 	.word	0x40014400
 8002bf8:	40014800 	.word	0x40014800
 8002bfc:	40001800 	.word	0x40001800
 8002c00:	40001c00 	.word	0x40001c00
 8002c04:	40002000 	.word	0x40002000

08002c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f023 0201 	bic.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f023 0302 	bic.w	r3, r3, #2
 8002c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a20      	ldr	r2, [pc, #128]	; (8002ce0 <TIM_OC1_SetConfig+0xd8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d003      	beq.n	8002c6c <TIM_OC1_SetConfig+0x64>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <TIM_OC1_SetConfig+0xdc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d10c      	bne.n	8002c86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f023 0308 	bic.w	r3, r3, #8
 8002c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f023 0304 	bic.w	r3, r3, #4
 8002c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a15      	ldr	r2, [pc, #84]	; (8002ce0 <TIM_OC1_SetConfig+0xd8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d003      	beq.n	8002c96 <TIM_OC1_SetConfig+0x8e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <TIM_OC1_SetConfig+0xdc>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d111      	bne.n	8002cba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	621a      	str	r2, [r3, #32]
}
 8002cd4:	bf00      	nop
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40010400 	.word	0x40010400

08002ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f023 0210 	bic.w	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f023 0320 	bic.w	r3, r3, #32
 8002d32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a22      	ldr	r2, [pc, #136]	; (8002dcc <TIM_OC2_SetConfig+0xe4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d003      	beq.n	8002d50 <TIM_OC2_SetConfig+0x68>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a21      	ldr	r2, [pc, #132]	; (8002dd0 <TIM_OC2_SetConfig+0xe8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10d      	bne.n	8002d6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <TIM_OC2_SetConfig+0xe4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <TIM_OC2_SetConfig+0x94>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a16      	ldr	r2, [pc, #88]	; (8002dd0 <TIM_OC2_SetConfig+0xe8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d113      	bne.n	8002da4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	621a      	str	r2, [r3, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40010000 	.word	0x40010000
 8002dd0:	40010400 	.word	0x40010400

08002dd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0303 	bic.w	r3, r3, #3
 8002e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a21      	ldr	r2, [pc, #132]	; (8002eb4 <TIM_OC3_SetConfig+0xe0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d003      	beq.n	8002e3a <TIM_OC3_SetConfig+0x66>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <TIM_OC3_SetConfig+0xe4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d10d      	bne.n	8002e56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <TIM_OC3_SetConfig+0xe0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d003      	beq.n	8002e66 <TIM_OC3_SetConfig+0x92>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <TIM_OC3_SetConfig+0xe4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d113      	bne.n	8002e8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	621a      	str	r2, [r3, #32]
}
 8002ea8:	bf00      	nop
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	40010400 	.word	0x40010400

08002ebc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	031b      	lsls	r3, r3, #12
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <TIM_OC4_SetConfig+0xa4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d003      	beq.n	8002f24 <TIM_OC4_SetConfig+0x68>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a11      	ldr	r2, [pc, #68]	; (8002f64 <TIM_OC4_SetConfig+0xa8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d109      	bne.n	8002f38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	019b      	lsls	r3, r3, #6
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	621a      	str	r2, [r3, #32]
}
 8002f52:	bf00      	nop
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40010400 	.word	0x40010400

08002f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f023 0201 	bic.w	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f023 030a 	bic.w	r3, r3, #10
 8002fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b087      	sub	sp, #28
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	f023 0210 	bic.w	r2, r3, #16
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ff0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	031b      	lsls	r3, r3, #12
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003002:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	621a      	str	r2, [r3, #32]
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	f043 0307 	orr.w	r3, r3, #7
 8003048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	609a      	str	r2, [r3, #8]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	021a      	lsls	r2, r3, #8
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	431a      	orrs	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4313      	orrs	r3, r2
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	609a      	str	r2, [r3, #8]
}
 8003090:	bf00      	nop
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	2201      	movs	r2, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a1a      	ldr	r2, [r3, #32]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	43db      	mvns	r3, r3
 80030be:	401a      	ands	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	431a      	orrs	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	621a      	str	r2, [r3, #32]
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e05a      	b.n	80031b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d022      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314c:	d01d      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d018      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1a      	ldr	r2, [pc, #104]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00e      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a18      	ldr	r2, [pc, #96]	; (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d009      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d004      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a15      	ldr	r2, [pc, #84]	; (80031dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d10c      	bne.n	80031a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	4313      	orrs	r3, r2
 800319a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40000400 	.word	0x40000400
 80031cc:	40000800 	.word	0x40000800
 80031d0:	40000c00 	.word	0x40000c00
 80031d4:	40010400 	.word	0x40010400
 80031d8:	40014000 	.word	0x40014000
 80031dc:	40001800 	.word	0x40001800

080031e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e03d      	b.n	8003278 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e03f      	b.n	8003316 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fd fde8 	bl	8000e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2224      	movs	r2, #36	; 0x24
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f905 	bl	80034d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b08a      	sub	sp, #40	; 0x28
 8003322:	af02      	add	r7, sp, #8
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	4613      	mov	r3, r2
 800332c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b20      	cmp	r3, #32
 800333c:	d17c      	bne.n	8003438 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_UART_Transmit+0x2c>
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e075      	b.n	800343a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_UART_Transmit+0x3e>
 8003358:	2302      	movs	r3, #2
 800335a:	e06e      	b.n	800343a <HAL_UART_Transmit+0x11c>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2221      	movs	r2, #33	; 0x21
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003372:	f7fd ff21 	bl	80011b8 <HAL_GetTick>
 8003376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	88fa      	ldrh	r2, [r7, #6]
 800337c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	88fa      	ldrh	r2, [r7, #6]
 8003382:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338c:	d108      	bne.n	80033a0 <HAL_UART_Transmit+0x82>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	e003      	b.n	80033a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033b0:	e02a      	b.n	8003408 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2200      	movs	r2, #0
 80033ba:	2180      	movs	r1, #128	; 0x80
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f840 	bl	8003442 <UART_WaitOnFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e036      	b.n	800343a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10b      	bne.n	80033ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	3302      	adds	r3, #2
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	e007      	b.n	80033fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	3301      	adds	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1cf      	bne.n	80033b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2200      	movs	r2, #0
 800341a:	2140      	movs	r1, #64	; 0x40
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f810 	bl	8003442 <UART_WaitOnFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e006      	b.n	800343a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	e000      	b.n	800343a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	3720      	adds	r7, #32
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	603b      	str	r3, [r7, #0]
 800344e:	4613      	mov	r3, r2
 8003450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003452:	e02c      	b.n	80034ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800345a:	d028      	beq.n	80034ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <UART_WaitOnFlagUntilTimeout+0x30>
 8003462:	f7fd fea9 	bl	80011b8 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	429a      	cmp	r2, r3
 8003470:	d21d      	bcs.n	80034ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003480:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e00f      	b.n	80034ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4013      	ands	r3, r2
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	bf0c      	ite	eq
 80034be:	2301      	moveq	r3, #1
 80034c0:	2300      	movne	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d0c3      	beq.n	8003454 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034dc:	b09f      	sub	sp, #124	; 0x7c
 80034de:	af00      	add	r7, sp, #0
 80034e0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ee:	68d9      	ldr	r1, [r3, #12]
 80034f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	ea40 0301 	orr.w	r3, r0, r1
 80034f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	431a      	orrs	r2, r3
 8003504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	431a      	orrs	r2, r3
 800350a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	4313      	orrs	r3, r2
 8003510:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800351c:	f021 010c 	bic.w	r1, r1, #12
 8003520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003526:	430b      	orrs	r3, r1
 8003528:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800352a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003536:	6999      	ldr	r1, [r3, #24]
 8003538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	ea40 0301 	orr.w	r3, r0, r1
 8003540:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4bc5      	ldr	r3, [pc, #788]	; (800385c <UART_SetConfig+0x384>)
 8003548:	429a      	cmp	r2, r3
 800354a:	d004      	beq.n	8003556 <UART_SetConfig+0x7e>
 800354c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4bc3      	ldr	r3, [pc, #780]	; (8003860 <UART_SetConfig+0x388>)
 8003552:	429a      	cmp	r2, r3
 8003554:	d103      	bne.n	800355e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003556:	f7fe f9f9 	bl	800194c <HAL_RCC_GetPCLK2Freq>
 800355a:	6778      	str	r0, [r7, #116]	; 0x74
 800355c:	e002      	b.n	8003564 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800355e:	f7fe f9e1 	bl	8001924 <HAL_RCC_GetPCLK1Freq>
 8003562:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356c:	f040 80b6 	bne.w	80036dc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003572:	461c      	mov	r4, r3
 8003574:	f04f 0500 	mov.w	r5, #0
 8003578:	4622      	mov	r2, r4
 800357a:	462b      	mov	r3, r5
 800357c:	1891      	adds	r1, r2, r2
 800357e:	6439      	str	r1, [r7, #64]	; 0x40
 8003580:	415b      	adcs	r3, r3
 8003582:	647b      	str	r3, [r7, #68]	; 0x44
 8003584:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003588:	1912      	adds	r2, r2, r4
 800358a:	eb45 0303 	adc.w	r3, r5, r3
 800358e:	f04f 0000 	mov.w	r0, #0
 8003592:	f04f 0100 	mov.w	r1, #0
 8003596:	00d9      	lsls	r1, r3, #3
 8003598:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800359c:	00d0      	lsls	r0, r2, #3
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	1911      	adds	r1, r2, r4
 80035a4:	6639      	str	r1, [r7, #96]	; 0x60
 80035a6:	416b      	adcs	r3, r5
 80035a8:	667b      	str	r3, [r7, #100]	; 0x64
 80035aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	461a      	mov	r2, r3
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	1891      	adds	r1, r2, r2
 80035b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80035b8:	415b      	adcs	r3, r3
 80035ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80035c4:	f7fc fe74 	bl	80002b0 <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4ba5      	ldr	r3, [pc, #660]	; (8003864 <UART_SetConfig+0x38c>)
 80035ce:	fba3 2302 	umull	r2, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	011e      	lsls	r6, r3, #4
 80035d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d8:	461c      	mov	r4, r3
 80035da:	f04f 0500 	mov.w	r5, #0
 80035de:	4622      	mov	r2, r4
 80035e0:	462b      	mov	r3, r5
 80035e2:	1891      	adds	r1, r2, r2
 80035e4:	6339      	str	r1, [r7, #48]	; 0x30
 80035e6:	415b      	adcs	r3, r3
 80035e8:	637b      	str	r3, [r7, #52]	; 0x34
 80035ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035ee:	1912      	adds	r2, r2, r4
 80035f0:	eb45 0303 	adc.w	r3, r5, r3
 80035f4:	f04f 0000 	mov.w	r0, #0
 80035f8:	f04f 0100 	mov.w	r1, #0
 80035fc:	00d9      	lsls	r1, r3, #3
 80035fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003602:	00d0      	lsls	r0, r2, #3
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	1911      	adds	r1, r2, r4
 800360a:	65b9      	str	r1, [r7, #88]	; 0x58
 800360c:	416b      	adcs	r3, r5
 800360e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	461a      	mov	r2, r3
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	1891      	adds	r1, r2, r2
 800361c:	62b9      	str	r1, [r7, #40]	; 0x28
 800361e:	415b      	adcs	r3, r3
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003622:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003626:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800362a:	f7fc fe41 	bl	80002b0 <__aeabi_uldivmod>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4b8c      	ldr	r3, [pc, #560]	; (8003864 <UART_SetConfig+0x38c>)
 8003634:	fba3 1302 	umull	r1, r3, r3, r2
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	2164      	movs	r1, #100	; 0x64
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	3332      	adds	r3, #50	; 0x32
 8003646:	4a87      	ldr	r2, [pc, #540]	; (8003864 <UART_SetConfig+0x38c>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003654:	441e      	add	r6, r3
 8003656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003658:	4618      	mov	r0, r3
 800365a:	f04f 0100 	mov.w	r1, #0
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	1894      	adds	r4, r2, r2
 8003664:	623c      	str	r4, [r7, #32]
 8003666:	415b      	adcs	r3, r3
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
 800366a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800366e:	1812      	adds	r2, r2, r0
 8003670:	eb41 0303 	adc.w	r3, r1, r3
 8003674:	f04f 0400 	mov.w	r4, #0
 8003678:	f04f 0500 	mov.w	r5, #0
 800367c:	00dd      	lsls	r5, r3, #3
 800367e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003682:	00d4      	lsls	r4, r2, #3
 8003684:	4622      	mov	r2, r4
 8003686:	462b      	mov	r3, r5
 8003688:	1814      	adds	r4, r2, r0
 800368a:	653c      	str	r4, [r7, #80]	; 0x50
 800368c:	414b      	adcs	r3, r1
 800368e:	657b      	str	r3, [r7, #84]	; 0x54
 8003690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	461a      	mov	r2, r3
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	1891      	adds	r1, r2, r2
 800369c:	61b9      	str	r1, [r7, #24]
 800369e:	415b      	adcs	r3, r3
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80036aa:	f7fc fe01 	bl	80002b0 <__aeabi_uldivmod>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4b6c      	ldr	r3, [pc, #432]	; (8003864 <UART_SetConfig+0x38c>)
 80036b4:	fba3 1302 	umull	r1, r3, r3, r2
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	2164      	movs	r1, #100	; 0x64
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	3332      	adds	r3, #50	; 0x32
 80036c6:	4a67      	ldr	r2, [pc, #412]	; (8003864 <UART_SetConfig+0x38c>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	f003 0207 	and.w	r2, r3, #7
 80036d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4432      	add	r2, r6
 80036d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036da:	e0b9      	b.n	8003850 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036de:	461c      	mov	r4, r3
 80036e0:	f04f 0500 	mov.w	r5, #0
 80036e4:	4622      	mov	r2, r4
 80036e6:	462b      	mov	r3, r5
 80036e8:	1891      	adds	r1, r2, r2
 80036ea:	6139      	str	r1, [r7, #16]
 80036ec:	415b      	adcs	r3, r3
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036f4:	1912      	adds	r2, r2, r4
 80036f6:	eb45 0303 	adc.w	r3, r5, r3
 80036fa:	f04f 0000 	mov.w	r0, #0
 80036fe:	f04f 0100 	mov.w	r1, #0
 8003702:	00d9      	lsls	r1, r3, #3
 8003704:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003708:	00d0      	lsls	r0, r2, #3
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	eb12 0804 	adds.w	r8, r2, r4
 8003712:	eb43 0905 	adc.w	r9, r3, r5
 8003716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4618      	mov	r0, r3
 800371c:	f04f 0100 	mov.w	r1, #0
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	008b      	lsls	r3, r1, #2
 800372a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800372e:	0082      	lsls	r2, r0, #2
 8003730:	4640      	mov	r0, r8
 8003732:	4649      	mov	r1, r9
 8003734:	f7fc fdbc 	bl	80002b0 <__aeabi_uldivmod>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4b49      	ldr	r3, [pc, #292]	; (8003864 <UART_SetConfig+0x38c>)
 800373e:	fba3 2302 	umull	r2, r3, r3, r2
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	011e      	lsls	r6, r3, #4
 8003746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003748:	4618      	mov	r0, r3
 800374a:	f04f 0100 	mov.w	r1, #0
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	1894      	adds	r4, r2, r2
 8003754:	60bc      	str	r4, [r7, #8]
 8003756:	415b      	adcs	r3, r3
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800375e:	1812      	adds	r2, r2, r0
 8003760:	eb41 0303 	adc.w	r3, r1, r3
 8003764:	f04f 0400 	mov.w	r4, #0
 8003768:	f04f 0500 	mov.w	r5, #0
 800376c:	00dd      	lsls	r5, r3, #3
 800376e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003772:	00d4      	lsls	r4, r2, #3
 8003774:	4622      	mov	r2, r4
 8003776:	462b      	mov	r3, r5
 8003778:	1814      	adds	r4, r2, r0
 800377a:	64bc      	str	r4, [r7, #72]	; 0x48
 800377c:	414b      	adcs	r3, r1
 800377e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4618      	mov	r0, r3
 8003786:	f04f 0100 	mov.w	r1, #0
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	008b      	lsls	r3, r1, #2
 8003794:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003798:	0082      	lsls	r2, r0, #2
 800379a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800379e:	f7fc fd87 	bl	80002b0 <__aeabi_uldivmod>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4b2f      	ldr	r3, [pc, #188]	; (8003864 <UART_SetConfig+0x38c>)
 80037a8:	fba3 1302 	umull	r1, r3, r3, r2
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	2164      	movs	r1, #100	; 0x64
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	3332      	adds	r3, #50	; 0x32
 80037ba:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <UART_SetConfig+0x38c>)
 80037bc:	fba2 2303 	umull	r2, r3, r2, r3
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037c6:	441e      	add	r6, r3
 80037c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ca:	4618      	mov	r0, r3
 80037cc:	f04f 0100 	mov.w	r1, #0
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	1894      	adds	r4, r2, r2
 80037d6:	603c      	str	r4, [r7, #0]
 80037d8:	415b      	adcs	r3, r3
 80037da:	607b      	str	r3, [r7, #4]
 80037dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037e0:	1812      	adds	r2, r2, r0
 80037e2:	eb41 0303 	adc.w	r3, r1, r3
 80037e6:	f04f 0400 	mov.w	r4, #0
 80037ea:	f04f 0500 	mov.w	r5, #0
 80037ee:	00dd      	lsls	r5, r3, #3
 80037f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037f4:	00d4      	lsls	r4, r2, #3
 80037f6:	4622      	mov	r2, r4
 80037f8:	462b      	mov	r3, r5
 80037fa:	eb12 0a00 	adds.w	sl, r2, r0
 80037fe:	eb43 0b01 	adc.w	fp, r3, r1
 8003802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4618      	mov	r0, r3
 8003808:	f04f 0100 	mov.w	r1, #0
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	008b      	lsls	r3, r1, #2
 8003816:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800381a:	0082      	lsls	r2, r0, #2
 800381c:	4650      	mov	r0, sl
 800381e:	4659      	mov	r1, fp
 8003820:	f7fc fd46 	bl	80002b0 <__aeabi_uldivmod>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <UART_SetConfig+0x38c>)
 800382a:	fba3 1302 	umull	r1, r3, r3, r2
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2164      	movs	r1, #100	; 0x64
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	3332      	adds	r3, #50	; 0x32
 800383c:	4a09      	ldr	r2, [pc, #36]	; (8003864 <UART_SetConfig+0x38c>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	f003 020f 	and.w	r2, r3, #15
 8003848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4432      	add	r2, r6
 800384e:	609a      	str	r2, [r3, #8]
}
 8003850:	bf00      	nop
 8003852:	377c      	adds	r7, #124	; 0x7c
 8003854:	46bd      	mov	sp, r7
 8003856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800385a:	bf00      	nop
 800385c:	40011000 	.word	0x40011000
 8003860:	40011400 	.word	0x40011400
 8003864:	51eb851f 	.word	0x51eb851f

08003868 <__errno>:
 8003868:	4b01      	ldr	r3, [pc, #4]	; (8003870 <__errno+0x8>)
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	2000000c 	.word	0x2000000c

08003874 <__libc_init_array>:
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	4d0d      	ldr	r5, [pc, #52]	; (80038ac <__libc_init_array+0x38>)
 8003878:	4c0d      	ldr	r4, [pc, #52]	; (80038b0 <__libc_init_array+0x3c>)
 800387a:	1b64      	subs	r4, r4, r5
 800387c:	10a4      	asrs	r4, r4, #2
 800387e:	2600      	movs	r6, #0
 8003880:	42a6      	cmp	r6, r4
 8003882:	d109      	bne.n	8003898 <__libc_init_array+0x24>
 8003884:	4d0b      	ldr	r5, [pc, #44]	; (80038b4 <__libc_init_array+0x40>)
 8003886:	4c0c      	ldr	r4, [pc, #48]	; (80038b8 <__libc_init_array+0x44>)
 8003888:	f000 ff76 	bl	8004778 <_init>
 800388c:	1b64      	subs	r4, r4, r5
 800388e:	10a4      	asrs	r4, r4, #2
 8003890:	2600      	movs	r6, #0
 8003892:	42a6      	cmp	r6, r4
 8003894:	d105      	bne.n	80038a2 <__libc_init_array+0x2e>
 8003896:	bd70      	pop	{r4, r5, r6, pc}
 8003898:	f855 3b04 	ldr.w	r3, [r5], #4
 800389c:	4798      	blx	r3
 800389e:	3601      	adds	r6, #1
 80038a0:	e7ee      	b.n	8003880 <__libc_init_array+0xc>
 80038a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a6:	4798      	blx	r3
 80038a8:	3601      	adds	r6, #1
 80038aa:	e7f2      	b.n	8003892 <__libc_init_array+0x1e>
 80038ac:	0800485c 	.word	0x0800485c
 80038b0:	0800485c 	.word	0x0800485c
 80038b4:	0800485c 	.word	0x0800485c
 80038b8:	08004860 	.word	0x08004860

080038bc <memset>:
 80038bc:	4402      	add	r2, r0
 80038be:	4603      	mov	r3, r0
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d100      	bne.n	80038c6 <memset+0xa>
 80038c4:	4770      	bx	lr
 80038c6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ca:	e7f9      	b.n	80038c0 <memset+0x4>

080038cc <iprintf>:
 80038cc:	b40f      	push	{r0, r1, r2, r3}
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <iprintf+0x2c>)
 80038d0:	b513      	push	{r0, r1, r4, lr}
 80038d2:	681c      	ldr	r4, [r3, #0]
 80038d4:	b124      	cbz	r4, 80038e0 <iprintf+0x14>
 80038d6:	69a3      	ldr	r3, [r4, #24]
 80038d8:	b913      	cbnz	r3, 80038e0 <iprintf+0x14>
 80038da:	4620      	mov	r0, r4
 80038dc:	f000 f866 	bl	80039ac <__sinit>
 80038e0:	ab05      	add	r3, sp, #20
 80038e2:	9a04      	ldr	r2, [sp, #16]
 80038e4:	68a1      	ldr	r1, [r4, #8]
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	4620      	mov	r0, r4
 80038ea:	f000 f983 	bl	8003bf4 <_vfiprintf_r>
 80038ee:	b002      	add	sp, #8
 80038f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038f4:	b004      	add	sp, #16
 80038f6:	4770      	bx	lr
 80038f8:	2000000c 	.word	0x2000000c

080038fc <std>:
 80038fc:	2300      	movs	r3, #0
 80038fe:	b510      	push	{r4, lr}
 8003900:	4604      	mov	r4, r0
 8003902:	e9c0 3300 	strd	r3, r3, [r0]
 8003906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800390a:	6083      	str	r3, [r0, #8]
 800390c:	8181      	strh	r1, [r0, #12]
 800390e:	6643      	str	r3, [r0, #100]	; 0x64
 8003910:	81c2      	strh	r2, [r0, #14]
 8003912:	6183      	str	r3, [r0, #24]
 8003914:	4619      	mov	r1, r3
 8003916:	2208      	movs	r2, #8
 8003918:	305c      	adds	r0, #92	; 0x5c
 800391a:	f7ff ffcf 	bl	80038bc <memset>
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <std+0x38>)
 8003920:	6263      	str	r3, [r4, #36]	; 0x24
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <std+0x3c>)
 8003924:	62a3      	str	r3, [r4, #40]	; 0x28
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <std+0x40>)
 8003928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <std+0x44>)
 800392c:	6224      	str	r4, [r4, #32]
 800392e:	6323      	str	r3, [r4, #48]	; 0x30
 8003930:	bd10      	pop	{r4, pc}
 8003932:	bf00      	nop
 8003934:	0800419d 	.word	0x0800419d
 8003938:	080041bf 	.word	0x080041bf
 800393c:	080041f7 	.word	0x080041f7
 8003940:	0800421b 	.word	0x0800421b

08003944 <_cleanup_r>:
 8003944:	4901      	ldr	r1, [pc, #4]	; (800394c <_cleanup_r+0x8>)
 8003946:	f000 b8af 	b.w	8003aa8 <_fwalk_reent>
 800394a:	bf00      	nop
 800394c:	080044f5 	.word	0x080044f5

08003950 <__sfmoreglue>:
 8003950:	b570      	push	{r4, r5, r6, lr}
 8003952:	1e4a      	subs	r2, r1, #1
 8003954:	2568      	movs	r5, #104	; 0x68
 8003956:	4355      	muls	r5, r2
 8003958:	460e      	mov	r6, r1
 800395a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800395e:	f000 f8c5 	bl	8003aec <_malloc_r>
 8003962:	4604      	mov	r4, r0
 8003964:	b140      	cbz	r0, 8003978 <__sfmoreglue+0x28>
 8003966:	2100      	movs	r1, #0
 8003968:	e9c0 1600 	strd	r1, r6, [r0]
 800396c:	300c      	adds	r0, #12
 800396e:	60a0      	str	r0, [r4, #8]
 8003970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003974:	f7ff ffa2 	bl	80038bc <memset>
 8003978:	4620      	mov	r0, r4
 800397a:	bd70      	pop	{r4, r5, r6, pc}

0800397c <__sfp_lock_acquire>:
 800397c:	4801      	ldr	r0, [pc, #4]	; (8003984 <__sfp_lock_acquire+0x8>)
 800397e:	f000 b8b3 	b.w	8003ae8 <__retarget_lock_acquire_recursive>
 8003982:	bf00      	nop
 8003984:	20000218 	.word	0x20000218

08003988 <__sfp_lock_release>:
 8003988:	4801      	ldr	r0, [pc, #4]	; (8003990 <__sfp_lock_release+0x8>)
 800398a:	f000 b8ae 	b.w	8003aea <__retarget_lock_release_recursive>
 800398e:	bf00      	nop
 8003990:	20000218 	.word	0x20000218

08003994 <__sinit_lock_acquire>:
 8003994:	4801      	ldr	r0, [pc, #4]	; (800399c <__sinit_lock_acquire+0x8>)
 8003996:	f000 b8a7 	b.w	8003ae8 <__retarget_lock_acquire_recursive>
 800399a:	bf00      	nop
 800399c:	20000213 	.word	0x20000213

080039a0 <__sinit_lock_release>:
 80039a0:	4801      	ldr	r0, [pc, #4]	; (80039a8 <__sinit_lock_release+0x8>)
 80039a2:	f000 b8a2 	b.w	8003aea <__retarget_lock_release_recursive>
 80039a6:	bf00      	nop
 80039a8:	20000213 	.word	0x20000213

080039ac <__sinit>:
 80039ac:	b510      	push	{r4, lr}
 80039ae:	4604      	mov	r4, r0
 80039b0:	f7ff fff0 	bl	8003994 <__sinit_lock_acquire>
 80039b4:	69a3      	ldr	r3, [r4, #24]
 80039b6:	b11b      	cbz	r3, 80039c0 <__sinit+0x14>
 80039b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039bc:	f7ff bff0 	b.w	80039a0 <__sinit_lock_release>
 80039c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039c4:	6523      	str	r3, [r4, #80]	; 0x50
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <__sinit+0x68>)
 80039c8:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <__sinit+0x6c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80039ce:	42a3      	cmp	r3, r4
 80039d0:	bf04      	itt	eq
 80039d2:	2301      	moveq	r3, #1
 80039d4:	61a3      	streq	r3, [r4, #24]
 80039d6:	4620      	mov	r0, r4
 80039d8:	f000 f820 	bl	8003a1c <__sfp>
 80039dc:	6060      	str	r0, [r4, #4]
 80039de:	4620      	mov	r0, r4
 80039e0:	f000 f81c 	bl	8003a1c <__sfp>
 80039e4:	60a0      	str	r0, [r4, #8]
 80039e6:	4620      	mov	r0, r4
 80039e8:	f000 f818 	bl	8003a1c <__sfp>
 80039ec:	2200      	movs	r2, #0
 80039ee:	60e0      	str	r0, [r4, #12]
 80039f0:	2104      	movs	r1, #4
 80039f2:	6860      	ldr	r0, [r4, #4]
 80039f4:	f7ff ff82 	bl	80038fc <std>
 80039f8:	68a0      	ldr	r0, [r4, #8]
 80039fa:	2201      	movs	r2, #1
 80039fc:	2109      	movs	r1, #9
 80039fe:	f7ff ff7d 	bl	80038fc <std>
 8003a02:	68e0      	ldr	r0, [r4, #12]
 8003a04:	2202      	movs	r2, #2
 8003a06:	2112      	movs	r1, #18
 8003a08:	f7ff ff78 	bl	80038fc <std>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	61a3      	str	r3, [r4, #24]
 8003a10:	e7d2      	b.n	80039b8 <__sinit+0xc>
 8003a12:	bf00      	nop
 8003a14:	080047bc 	.word	0x080047bc
 8003a18:	08003945 	.word	0x08003945

08003a1c <__sfp>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	4607      	mov	r7, r0
 8003a20:	f7ff ffac 	bl	800397c <__sfp_lock_acquire>
 8003a24:	4b1e      	ldr	r3, [pc, #120]	; (8003aa0 <__sfp+0x84>)
 8003a26:	681e      	ldr	r6, [r3, #0]
 8003a28:	69b3      	ldr	r3, [r6, #24]
 8003a2a:	b913      	cbnz	r3, 8003a32 <__sfp+0x16>
 8003a2c:	4630      	mov	r0, r6
 8003a2e:	f7ff ffbd 	bl	80039ac <__sinit>
 8003a32:	3648      	adds	r6, #72	; 0x48
 8003a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	d503      	bpl.n	8003a44 <__sfp+0x28>
 8003a3c:	6833      	ldr	r3, [r6, #0]
 8003a3e:	b30b      	cbz	r3, 8003a84 <__sfp+0x68>
 8003a40:	6836      	ldr	r6, [r6, #0]
 8003a42:	e7f7      	b.n	8003a34 <__sfp+0x18>
 8003a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a48:	b9d5      	cbnz	r5, 8003a80 <__sfp+0x64>
 8003a4a:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <__sfp+0x88>)
 8003a4c:	60e3      	str	r3, [r4, #12]
 8003a4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a52:	6665      	str	r5, [r4, #100]	; 0x64
 8003a54:	f000 f847 	bl	8003ae6 <__retarget_lock_init_recursive>
 8003a58:	f7ff ff96 	bl	8003988 <__sfp_lock_release>
 8003a5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a64:	6025      	str	r5, [r4, #0]
 8003a66:	61a5      	str	r5, [r4, #24]
 8003a68:	2208      	movs	r2, #8
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a70:	f7ff ff24 	bl	80038bc <memset>
 8003a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a80:	3468      	adds	r4, #104	; 0x68
 8003a82:	e7d9      	b.n	8003a38 <__sfp+0x1c>
 8003a84:	2104      	movs	r1, #4
 8003a86:	4638      	mov	r0, r7
 8003a88:	f7ff ff62 	bl	8003950 <__sfmoreglue>
 8003a8c:	4604      	mov	r4, r0
 8003a8e:	6030      	str	r0, [r6, #0]
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d1d5      	bne.n	8003a40 <__sfp+0x24>
 8003a94:	f7ff ff78 	bl	8003988 <__sfp_lock_release>
 8003a98:	230c      	movs	r3, #12
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	e7ee      	b.n	8003a7c <__sfp+0x60>
 8003a9e:	bf00      	nop
 8003aa0:	080047bc 	.word	0x080047bc
 8003aa4:	ffff0001 	.word	0xffff0001

08003aa8 <_fwalk_reent>:
 8003aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aac:	4606      	mov	r6, r0
 8003aae:	4688      	mov	r8, r1
 8003ab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ab4:	2700      	movs	r7, #0
 8003ab6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003aba:	f1b9 0901 	subs.w	r9, r9, #1
 8003abe:	d505      	bpl.n	8003acc <_fwalk_reent+0x24>
 8003ac0:	6824      	ldr	r4, [r4, #0]
 8003ac2:	2c00      	cmp	r4, #0
 8003ac4:	d1f7      	bne.n	8003ab6 <_fwalk_reent+0xe>
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003acc:	89ab      	ldrh	r3, [r5, #12]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d907      	bls.n	8003ae2 <_fwalk_reent+0x3a>
 8003ad2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	d003      	beq.n	8003ae2 <_fwalk_reent+0x3a>
 8003ada:	4629      	mov	r1, r5
 8003adc:	4630      	mov	r0, r6
 8003ade:	47c0      	blx	r8
 8003ae0:	4307      	orrs	r7, r0
 8003ae2:	3568      	adds	r5, #104	; 0x68
 8003ae4:	e7e9      	b.n	8003aba <_fwalk_reent+0x12>

08003ae6 <__retarget_lock_init_recursive>:
 8003ae6:	4770      	bx	lr

08003ae8 <__retarget_lock_acquire_recursive>:
 8003ae8:	4770      	bx	lr

08003aea <__retarget_lock_release_recursive>:
 8003aea:	4770      	bx	lr

08003aec <_malloc_r>:
 8003aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aee:	1ccd      	adds	r5, r1, #3
 8003af0:	f025 0503 	bic.w	r5, r5, #3
 8003af4:	3508      	adds	r5, #8
 8003af6:	2d0c      	cmp	r5, #12
 8003af8:	bf38      	it	cc
 8003afa:	250c      	movcc	r5, #12
 8003afc:	2d00      	cmp	r5, #0
 8003afe:	4606      	mov	r6, r0
 8003b00:	db01      	blt.n	8003b06 <_malloc_r+0x1a>
 8003b02:	42a9      	cmp	r1, r5
 8003b04:	d903      	bls.n	8003b0e <_malloc_r+0x22>
 8003b06:	230c      	movs	r3, #12
 8003b08:	6033      	str	r3, [r6, #0]
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b0e:	f000 fda3 	bl	8004658 <__malloc_lock>
 8003b12:	4921      	ldr	r1, [pc, #132]	; (8003b98 <_malloc_r+0xac>)
 8003b14:	680a      	ldr	r2, [r1, #0]
 8003b16:	4614      	mov	r4, r2
 8003b18:	b99c      	cbnz	r4, 8003b42 <_malloc_r+0x56>
 8003b1a:	4f20      	ldr	r7, [pc, #128]	; (8003b9c <_malloc_r+0xb0>)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	b923      	cbnz	r3, 8003b2a <_malloc_r+0x3e>
 8003b20:	4621      	mov	r1, r4
 8003b22:	4630      	mov	r0, r6
 8003b24:	f000 fb2a 	bl	800417c <_sbrk_r>
 8003b28:	6038      	str	r0, [r7, #0]
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f000 fb25 	bl	800417c <_sbrk_r>
 8003b32:	1c43      	adds	r3, r0, #1
 8003b34:	d123      	bne.n	8003b7e <_malloc_r+0x92>
 8003b36:	230c      	movs	r3, #12
 8003b38:	6033      	str	r3, [r6, #0]
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	f000 fd92 	bl	8004664 <__malloc_unlock>
 8003b40:	e7e3      	b.n	8003b0a <_malloc_r+0x1e>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	1b5b      	subs	r3, r3, r5
 8003b46:	d417      	bmi.n	8003b78 <_malloc_r+0x8c>
 8003b48:	2b0b      	cmp	r3, #11
 8003b4a:	d903      	bls.n	8003b54 <_malloc_r+0x68>
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	441c      	add	r4, r3
 8003b50:	6025      	str	r5, [r4, #0]
 8003b52:	e004      	b.n	8003b5e <_malloc_r+0x72>
 8003b54:	6863      	ldr	r3, [r4, #4]
 8003b56:	42a2      	cmp	r2, r4
 8003b58:	bf0c      	ite	eq
 8003b5a:	600b      	streq	r3, [r1, #0]
 8003b5c:	6053      	strne	r3, [r2, #4]
 8003b5e:	4630      	mov	r0, r6
 8003b60:	f000 fd80 	bl	8004664 <__malloc_unlock>
 8003b64:	f104 000b 	add.w	r0, r4, #11
 8003b68:	1d23      	adds	r3, r4, #4
 8003b6a:	f020 0007 	bic.w	r0, r0, #7
 8003b6e:	1ac2      	subs	r2, r0, r3
 8003b70:	d0cc      	beq.n	8003b0c <_malloc_r+0x20>
 8003b72:	1a1b      	subs	r3, r3, r0
 8003b74:	50a3      	str	r3, [r4, r2]
 8003b76:	e7c9      	b.n	8003b0c <_malloc_r+0x20>
 8003b78:	4622      	mov	r2, r4
 8003b7a:	6864      	ldr	r4, [r4, #4]
 8003b7c:	e7cc      	b.n	8003b18 <_malloc_r+0x2c>
 8003b7e:	1cc4      	adds	r4, r0, #3
 8003b80:	f024 0403 	bic.w	r4, r4, #3
 8003b84:	42a0      	cmp	r0, r4
 8003b86:	d0e3      	beq.n	8003b50 <_malloc_r+0x64>
 8003b88:	1a21      	subs	r1, r4, r0
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f000 faf6 	bl	800417c <_sbrk_r>
 8003b90:	3001      	adds	r0, #1
 8003b92:	d1dd      	bne.n	8003b50 <_malloc_r+0x64>
 8003b94:	e7cf      	b.n	8003b36 <_malloc_r+0x4a>
 8003b96:	bf00      	nop
 8003b98:	20000090 	.word	0x20000090
 8003b9c:	20000094 	.word	0x20000094

08003ba0 <__sfputc_r>:
 8003ba0:	6893      	ldr	r3, [r2, #8]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	b410      	push	{r4}
 8003ba8:	6093      	str	r3, [r2, #8]
 8003baa:	da08      	bge.n	8003bbe <__sfputc_r+0x1e>
 8003bac:	6994      	ldr	r4, [r2, #24]
 8003bae:	42a3      	cmp	r3, r4
 8003bb0:	db01      	blt.n	8003bb6 <__sfputc_r+0x16>
 8003bb2:	290a      	cmp	r1, #10
 8003bb4:	d103      	bne.n	8003bbe <__sfputc_r+0x1e>
 8003bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bba:	f000 bb33 	b.w	8004224 <__swbuf_r>
 8003bbe:	6813      	ldr	r3, [r2, #0]
 8003bc0:	1c58      	adds	r0, r3, #1
 8003bc2:	6010      	str	r0, [r2, #0]
 8003bc4:	7019      	strb	r1, [r3, #0]
 8003bc6:	4608      	mov	r0, r1
 8003bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <__sfputs_r>:
 8003bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	460f      	mov	r7, r1
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	18d5      	adds	r5, r2, r3
 8003bd8:	42ac      	cmp	r4, r5
 8003bda:	d101      	bne.n	8003be0 <__sfputs_r+0x12>
 8003bdc:	2000      	movs	r0, #0
 8003bde:	e007      	b.n	8003bf0 <__sfputs_r+0x22>
 8003be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003be4:	463a      	mov	r2, r7
 8003be6:	4630      	mov	r0, r6
 8003be8:	f7ff ffda 	bl	8003ba0 <__sfputc_r>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d1f3      	bne.n	8003bd8 <__sfputs_r+0xa>
 8003bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bf4 <_vfiprintf_r>:
 8003bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf8:	460d      	mov	r5, r1
 8003bfa:	b09d      	sub	sp, #116	; 0x74
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	4698      	mov	r8, r3
 8003c00:	4606      	mov	r6, r0
 8003c02:	b118      	cbz	r0, 8003c0c <_vfiprintf_r+0x18>
 8003c04:	6983      	ldr	r3, [r0, #24]
 8003c06:	b90b      	cbnz	r3, 8003c0c <_vfiprintf_r+0x18>
 8003c08:	f7ff fed0 	bl	80039ac <__sinit>
 8003c0c:	4b89      	ldr	r3, [pc, #548]	; (8003e34 <_vfiprintf_r+0x240>)
 8003c0e:	429d      	cmp	r5, r3
 8003c10:	d11b      	bne.n	8003c4a <_vfiprintf_r+0x56>
 8003c12:	6875      	ldr	r5, [r6, #4]
 8003c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c16:	07d9      	lsls	r1, r3, #31
 8003c18:	d405      	bmi.n	8003c26 <_vfiprintf_r+0x32>
 8003c1a:	89ab      	ldrh	r3, [r5, #12]
 8003c1c:	059a      	lsls	r2, r3, #22
 8003c1e:	d402      	bmi.n	8003c26 <_vfiprintf_r+0x32>
 8003c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c22:	f7ff ff61 	bl	8003ae8 <__retarget_lock_acquire_recursive>
 8003c26:	89ab      	ldrh	r3, [r5, #12]
 8003c28:	071b      	lsls	r3, r3, #28
 8003c2a:	d501      	bpl.n	8003c30 <_vfiprintf_r+0x3c>
 8003c2c:	692b      	ldr	r3, [r5, #16]
 8003c2e:	b9eb      	cbnz	r3, 8003c6c <_vfiprintf_r+0x78>
 8003c30:	4629      	mov	r1, r5
 8003c32:	4630      	mov	r0, r6
 8003c34:	f000 fb5a 	bl	80042ec <__swsetup_r>
 8003c38:	b1c0      	cbz	r0, 8003c6c <_vfiprintf_r+0x78>
 8003c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c3c:	07dc      	lsls	r4, r3, #31
 8003c3e:	d50e      	bpl.n	8003c5e <_vfiprintf_r+0x6a>
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c44:	b01d      	add	sp, #116	; 0x74
 8003c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c4a:	4b7b      	ldr	r3, [pc, #492]	; (8003e38 <_vfiprintf_r+0x244>)
 8003c4c:	429d      	cmp	r5, r3
 8003c4e:	d101      	bne.n	8003c54 <_vfiprintf_r+0x60>
 8003c50:	68b5      	ldr	r5, [r6, #8]
 8003c52:	e7df      	b.n	8003c14 <_vfiprintf_r+0x20>
 8003c54:	4b79      	ldr	r3, [pc, #484]	; (8003e3c <_vfiprintf_r+0x248>)
 8003c56:	429d      	cmp	r5, r3
 8003c58:	bf08      	it	eq
 8003c5a:	68f5      	ldreq	r5, [r6, #12]
 8003c5c:	e7da      	b.n	8003c14 <_vfiprintf_r+0x20>
 8003c5e:	89ab      	ldrh	r3, [r5, #12]
 8003c60:	0598      	lsls	r0, r3, #22
 8003c62:	d4ed      	bmi.n	8003c40 <_vfiprintf_r+0x4c>
 8003c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c66:	f7ff ff40 	bl	8003aea <__retarget_lock_release_recursive>
 8003c6a:	e7e9      	b.n	8003c40 <_vfiprintf_r+0x4c>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c70:	2320      	movs	r3, #32
 8003c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c7a:	2330      	movs	r3, #48	; 0x30
 8003c7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003e40 <_vfiprintf_r+0x24c>
 8003c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c84:	f04f 0901 	mov.w	r9, #1
 8003c88:	4623      	mov	r3, r4
 8003c8a:	469a      	mov	sl, r3
 8003c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c90:	b10a      	cbz	r2, 8003c96 <_vfiprintf_r+0xa2>
 8003c92:	2a25      	cmp	r2, #37	; 0x25
 8003c94:	d1f9      	bne.n	8003c8a <_vfiprintf_r+0x96>
 8003c96:	ebba 0b04 	subs.w	fp, sl, r4
 8003c9a:	d00b      	beq.n	8003cb4 <_vfiprintf_r+0xc0>
 8003c9c:	465b      	mov	r3, fp
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	f7ff ff93 	bl	8003bce <__sfputs_r>
 8003ca8:	3001      	adds	r0, #1
 8003caa:	f000 80aa 	beq.w	8003e02 <_vfiprintf_r+0x20e>
 8003cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cb0:	445a      	add	r2, fp
 8003cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8003cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80a2 	beq.w	8003e02 <_vfiprintf_r+0x20e>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cc8:	f10a 0a01 	add.w	sl, sl, #1
 8003ccc:	9304      	str	r3, [sp, #16]
 8003cce:	9307      	str	r3, [sp, #28]
 8003cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8003cd6:	4654      	mov	r4, sl
 8003cd8:	2205      	movs	r2, #5
 8003cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cde:	4858      	ldr	r0, [pc, #352]	; (8003e40 <_vfiprintf_r+0x24c>)
 8003ce0:	f7fc fa96 	bl	8000210 <memchr>
 8003ce4:	9a04      	ldr	r2, [sp, #16]
 8003ce6:	b9d8      	cbnz	r0, 8003d20 <_vfiprintf_r+0x12c>
 8003ce8:	06d1      	lsls	r1, r2, #27
 8003cea:	bf44      	itt	mi
 8003cec:	2320      	movmi	r3, #32
 8003cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cf2:	0713      	lsls	r3, r2, #28
 8003cf4:	bf44      	itt	mi
 8003cf6:	232b      	movmi	r3, #43	; 0x2b
 8003cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8003d00:	2b2a      	cmp	r3, #42	; 0x2a
 8003d02:	d015      	beq.n	8003d30 <_vfiprintf_r+0x13c>
 8003d04:	9a07      	ldr	r2, [sp, #28]
 8003d06:	4654      	mov	r4, sl
 8003d08:	2000      	movs	r0, #0
 8003d0a:	f04f 0c0a 	mov.w	ip, #10
 8003d0e:	4621      	mov	r1, r4
 8003d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d14:	3b30      	subs	r3, #48	; 0x30
 8003d16:	2b09      	cmp	r3, #9
 8003d18:	d94e      	bls.n	8003db8 <_vfiprintf_r+0x1c4>
 8003d1a:	b1b0      	cbz	r0, 8003d4a <_vfiprintf_r+0x156>
 8003d1c:	9207      	str	r2, [sp, #28]
 8003d1e:	e014      	b.n	8003d4a <_vfiprintf_r+0x156>
 8003d20:	eba0 0308 	sub.w	r3, r0, r8
 8003d24:	fa09 f303 	lsl.w	r3, r9, r3
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	9304      	str	r3, [sp, #16]
 8003d2c:	46a2      	mov	sl, r4
 8003d2e:	e7d2      	b.n	8003cd6 <_vfiprintf_r+0xe2>
 8003d30:	9b03      	ldr	r3, [sp, #12]
 8003d32:	1d19      	adds	r1, r3, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	9103      	str	r1, [sp, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bfbb      	ittet	lt
 8003d3c:	425b      	neglt	r3, r3
 8003d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8003d42:	9307      	strge	r3, [sp, #28]
 8003d44:	9307      	strlt	r3, [sp, #28]
 8003d46:	bfb8      	it	lt
 8003d48:	9204      	strlt	r2, [sp, #16]
 8003d4a:	7823      	ldrb	r3, [r4, #0]
 8003d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8003d4e:	d10c      	bne.n	8003d6a <_vfiprintf_r+0x176>
 8003d50:	7863      	ldrb	r3, [r4, #1]
 8003d52:	2b2a      	cmp	r3, #42	; 0x2a
 8003d54:	d135      	bne.n	8003dc2 <_vfiprintf_r+0x1ce>
 8003d56:	9b03      	ldr	r3, [sp, #12]
 8003d58:	1d1a      	adds	r2, r3, #4
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	9203      	str	r2, [sp, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bfb8      	it	lt
 8003d62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003d66:	3402      	adds	r4, #2
 8003d68:	9305      	str	r3, [sp, #20]
 8003d6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003e50 <_vfiprintf_r+0x25c>
 8003d6e:	7821      	ldrb	r1, [r4, #0]
 8003d70:	2203      	movs	r2, #3
 8003d72:	4650      	mov	r0, sl
 8003d74:	f7fc fa4c 	bl	8000210 <memchr>
 8003d78:	b140      	cbz	r0, 8003d8c <_vfiprintf_r+0x198>
 8003d7a:	2340      	movs	r3, #64	; 0x40
 8003d7c:	eba0 000a 	sub.w	r0, r0, sl
 8003d80:	fa03 f000 	lsl.w	r0, r3, r0
 8003d84:	9b04      	ldr	r3, [sp, #16]
 8003d86:	4303      	orrs	r3, r0
 8003d88:	3401      	adds	r4, #1
 8003d8a:	9304      	str	r3, [sp, #16]
 8003d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d90:	482c      	ldr	r0, [pc, #176]	; (8003e44 <_vfiprintf_r+0x250>)
 8003d92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d96:	2206      	movs	r2, #6
 8003d98:	f7fc fa3a 	bl	8000210 <memchr>
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	d03f      	beq.n	8003e20 <_vfiprintf_r+0x22c>
 8003da0:	4b29      	ldr	r3, [pc, #164]	; (8003e48 <_vfiprintf_r+0x254>)
 8003da2:	bb1b      	cbnz	r3, 8003dec <_vfiprintf_r+0x1f8>
 8003da4:	9b03      	ldr	r3, [sp, #12]
 8003da6:	3307      	adds	r3, #7
 8003da8:	f023 0307 	bic.w	r3, r3, #7
 8003dac:	3308      	adds	r3, #8
 8003dae:	9303      	str	r3, [sp, #12]
 8003db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003db2:	443b      	add	r3, r7
 8003db4:	9309      	str	r3, [sp, #36]	; 0x24
 8003db6:	e767      	b.n	8003c88 <_vfiprintf_r+0x94>
 8003db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	2001      	movs	r0, #1
 8003dc0:	e7a5      	b.n	8003d0e <_vfiprintf_r+0x11a>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	3401      	adds	r4, #1
 8003dc6:	9305      	str	r3, [sp, #20]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f04f 0c0a 	mov.w	ip, #10
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dd4:	3a30      	subs	r2, #48	; 0x30
 8003dd6:	2a09      	cmp	r2, #9
 8003dd8:	d903      	bls.n	8003de2 <_vfiprintf_r+0x1ee>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0c5      	beq.n	8003d6a <_vfiprintf_r+0x176>
 8003dde:	9105      	str	r1, [sp, #20]
 8003de0:	e7c3      	b.n	8003d6a <_vfiprintf_r+0x176>
 8003de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003de6:	4604      	mov	r4, r0
 8003de8:	2301      	movs	r3, #1
 8003dea:	e7f0      	b.n	8003dce <_vfiprintf_r+0x1da>
 8003dec:	ab03      	add	r3, sp, #12
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	462a      	mov	r2, r5
 8003df2:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <_vfiprintf_r+0x258>)
 8003df4:	a904      	add	r1, sp, #16
 8003df6:	4630      	mov	r0, r6
 8003df8:	f3af 8000 	nop.w
 8003dfc:	4607      	mov	r7, r0
 8003dfe:	1c78      	adds	r0, r7, #1
 8003e00:	d1d6      	bne.n	8003db0 <_vfiprintf_r+0x1bc>
 8003e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e04:	07d9      	lsls	r1, r3, #31
 8003e06:	d405      	bmi.n	8003e14 <_vfiprintf_r+0x220>
 8003e08:	89ab      	ldrh	r3, [r5, #12]
 8003e0a:	059a      	lsls	r2, r3, #22
 8003e0c:	d402      	bmi.n	8003e14 <_vfiprintf_r+0x220>
 8003e0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e10:	f7ff fe6b 	bl	8003aea <__retarget_lock_release_recursive>
 8003e14:	89ab      	ldrh	r3, [r5, #12]
 8003e16:	065b      	lsls	r3, r3, #25
 8003e18:	f53f af12 	bmi.w	8003c40 <_vfiprintf_r+0x4c>
 8003e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e1e:	e711      	b.n	8003c44 <_vfiprintf_r+0x50>
 8003e20:	ab03      	add	r3, sp, #12
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	462a      	mov	r2, r5
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <_vfiprintf_r+0x258>)
 8003e28:	a904      	add	r1, sp, #16
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	f000 f880 	bl	8003f30 <_printf_i>
 8003e30:	e7e4      	b.n	8003dfc <_vfiprintf_r+0x208>
 8003e32:	bf00      	nop
 8003e34:	080047e0 	.word	0x080047e0
 8003e38:	08004800 	.word	0x08004800
 8003e3c:	080047c0 	.word	0x080047c0
 8003e40:	08004820 	.word	0x08004820
 8003e44:	0800482a 	.word	0x0800482a
 8003e48:	00000000 	.word	0x00000000
 8003e4c:	08003bcf 	.word	0x08003bcf
 8003e50:	08004826 	.word	0x08004826

08003e54 <_printf_common>:
 8003e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e58:	4616      	mov	r6, r2
 8003e5a:	4699      	mov	r9, r3
 8003e5c:	688a      	ldr	r2, [r1, #8]
 8003e5e:	690b      	ldr	r3, [r1, #16]
 8003e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e64:	4293      	cmp	r3, r2
 8003e66:	bfb8      	it	lt
 8003e68:	4613      	movlt	r3, r2
 8003e6a:	6033      	str	r3, [r6, #0]
 8003e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e70:	4607      	mov	r7, r0
 8003e72:	460c      	mov	r4, r1
 8003e74:	b10a      	cbz	r2, 8003e7a <_printf_common+0x26>
 8003e76:	3301      	adds	r3, #1
 8003e78:	6033      	str	r3, [r6, #0]
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	0699      	lsls	r1, r3, #26
 8003e7e:	bf42      	ittt	mi
 8003e80:	6833      	ldrmi	r3, [r6, #0]
 8003e82:	3302      	addmi	r3, #2
 8003e84:	6033      	strmi	r3, [r6, #0]
 8003e86:	6825      	ldr	r5, [r4, #0]
 8003e88:	f015 0506 	ands.w	r5, r5, #6
 8003e8c:	d106      	bne.n	8003e9c <_printf_common+0x48>
 8003e8e:	f104 0a19 	add.w	sl, r4, #25
 8003e92:	68e3      	ldr	r3, [r4, #12]
 8003e94:	6832      	ldr	r2, [r6, #0]
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	42ab      	cmp	r3, r5
 8003e9a:	dc26      	bgt.n	8003eea <_printf_common+0x96>
 8003e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ea0:	1e13      	subs	r3, r2, #0
 8003ea2:	6822      	ldr	r2, [r4, #0]
 8003ea4:	bf18      	it	ne
 8003ea6:	2301      	movne	r3, #1
 8003ea8:	0692      	lsls	r2, r2, #26
 8003eaa:	d42b      	bmi.n	8003f04 <_printf_common+0xb0>
 8003eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eb0:	4649      	mov	r1, r9
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	47c0      	blx	r8
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	d01e      	beq.n	8003ef8 <_printf_common+0xa4>
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	68e5      	ldr	r5, [r4, #12]
 8003ebe:	6832      	ldr	r2, [r6, #0]
 8003ec0:	f003 0306 	and.w	r3, r3, #6
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	bf08      	it	eq
 8003ec8:	1aad      	subeq	r5, r5, r2
 8003eca:	68a3      	ldr	r3, [r4, #8]
 8003ecc:	6922      	ldr	r2, [r4, #16]
 8003ece:	bf0c      	ite	eq
 8003ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ed4:	2500      	movne	r5, #0
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	bfc4      	itt	gt
 8003eda:	1a9b      	subgt	r3, r3, r2
 8003edc:	18ed      	addgt	r5, r5, r3
 8003ede:	2600      	movs	r6, #0
 8003ee0:	341a      	adds	r4, #26
 8003ee2:	42b5      	cmp	r5, r6
 8003ee4:	d11a      	bne.n	8003f1c <_printf_common+0xc8>
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	e008      	b.n	8003efc <_printf_common+0xa8>
 8003eea:	2301      	movs	r3, #1
 8003eec:	4652      	mov	r2, sl
 8003eee:	4649      	mov	r1, r9
 8003ef0:	4638      	mov	r0, r7
 8003ef2:	47c0      	blx	r8
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	d103      	bne.n	8003f00 <_printf_common+0xac>
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f00:	3501      	adds	r5, #1
 8003f02:	e7c6      	b.n	8003e92 <_printf_common+0x3e>
 8003f04:	18e1      	adds	r1, r4, r3
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	2030      	movs	r0, #48	; 0x30
 8003f0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f0e:	4422      	add	r2, r4
 8003f10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f18:	3302      	adds	r3, #2
 8003f1a:	e7c7      	b.n	8003eac <_printf_common+0x58>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	4622      	mov	r2, r4
 8003f20:	4649      	mov	r1, r9
 8003f22:	4638      	mov	r0, r7
 8003f24:	47c0      	blx	r8
 8003f26:	3001      	adds	r0, #1
 8003f28:	d0e6      	beq.n	8003ef8 <_printf_common+0xa4>
 8003f2a:	3601      	adds	r6, #1
 8003f2c:	e7d9      	b.n	8003ee2 <_printf_common+0x8e>
	...

08003f30 <_printf_i>:
 8003f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f34:	460c      	mov	r4, r1
 8003f36:	4691      	mov	r9, r2
 8003f38:	7e27      	ldrb	r7, [r4, #24]
 8003f3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f3c:	2f78      	cmp	r7, #120	; 0x78
 8003f3e:	4680      	mov	r8, r0
 8003f40:	469a      	mov	sl, r3
 8003f42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f46:	d807      	bhi.n	8003f58 <_printf_i+0x28>
 8003f48:	2f62      	cmp	r7, #98	; 0x62
 8003f4a:	d80a      	bhi.n	8003f62 <_printf_i+0x32>
 8003f4c:	2f00      	cmp	r7, #0
 8003f4e:	f000 80d8 	beq.w	8004102 <_printf_i+0x1d2>
 8003f52:	2f58      	cmp	r7, #88	; 0x58
 8003f54:	f000 80a3 	beq.w	800409e <_printf_i+0x16e>
 8003f58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f60:	e03a      	b.n	8003fd8 <_printf_i+0xa8>
 8003f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f66:	2b15      	cmp	r3, #21
 8003f68:	d8f6      	bhi.n	8003f58 <_printf_i+0x28>
 8003f6a:	a001      	add	r0, pc, #4	; (adr r0, 8003f70 <_printf_i+0x40>)
 8003f6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f70:	08003fc9 	.word	0x08003fc9
 8003f74:	08003fdd 	.word	0x08003fdd
 8003f78:	08003f59 	.word	0x08003f59
 8003f7c:	08003f59 	.word	0x08003f59
 8003f80:	08003f59 	.word	0x08003f59
 8003f84:	08003f59 	.word	0x08003f59
 8003f88:	08003fdd 	.word	0x08003fdd
 8003f8c:	08003f59 	.word	0x08003f59
 8003f90:	08003f59 	.word	0x08003f59
 8003f94:	08003f59 	.word	0x08003f59
 8003f98:	08003f59 	.word	0x08003f59
 8003f9c:	080040e9 	.word	0x080040e9
 8003fa0:	0800400d 	.word	0x0800400d
 8003fa4:	080040cb 	.word	0x080040cb
 8003fa8:	08003f59 	.word	0x08003f59
 8003fac:	08003f59 	.word	0x08003f59
 8003fb0:	0800410b 	.word	0x0800410b
 8003fb4:	08003f59 	.word	0x08003f59
 8003fb8:	0800400d 	.word	0x0800400d
 8003fbc:	08003f59 	.word	0x08003f59
 8003fc0:	08003f59 	.word	0x08003f59
 8003fc4:	080040d3 	.word	0x080040d3
 8003fc8:	680b      	ldr	r3, [r1, #0]
 8003fca:	1d1a      	adds	r2, r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	600a      	str	r2, [r1, #0]
 8003fd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0a3      	b.n	8004124 <_printf_i+0x1f4>
 8003fdc:	6825      	ldr	r5, [r4, #0]
 8003fde:	6808      	ldr	r0, [r1, #0]
 8003fe0:	062e      	lsls	r6, r5, #24
 8003fe2:	f100 0304 	add.w	r3, r0, #4
 8003fe6:	d50a      	bpl.n	8003ffe <_printf_i+0xce>
 8003fe8:	6805      	ldr	r5, [r0, #0]
 8003fea:	600b      	str	r3, [r1, #0]
 8003fec:	2d00      	cmp	r5, #0
 8003fee:	da03      	bge.n	8003ff8 <_printf_i+0xc8>
 8003ff0:	232d      	movs	r3, #45	; 0x2d
 8003ff2:	426d      	negs	r5, r5
 8003ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ff8:	485e      	ldr	r0, [pc, #376]	; (8004174 <_printf_i+0x244>)
 8003ffa:	230a      	movs	r3, #10
 8003ffc:	e019      	b.n	8004032 <_printf_i+0x102>
 8003ffe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004002:	6805      	ldr	r5, [r0, #0]
 8004004:	600b      	str	r3, [r1, #0]
 8004006:	bf18      	it	ne
 8004008:	b22d      	sxthne	r5, r5
 800400a:	e7ef      	b.n	8003fec <_printf_i+0xbc>
 800400c:	680b      	ldr	r3, [r1, #0]
 800400e:	6825      	ldr	r5, [r4, #0]
 8004010:	1d18      	adds	r0, r3, #4
 8004012:	6008      	str	r0, [r1, #0]
 8004014:	0628      	lsls	r0, r5, #24
 8004016:	d501      	bpl.n	800401c <_printf_i+0xec>
 8004018:	681d      	ldr	r5, [r3, #0]
 800401a:	e002      	b.n	8004022 <_printf_i+0xf2>
 800401c:	0669      	lsls	r1, r5, #25
 800401e:	d5fb      	bpl.n	8004018 <_printf_i+0xe8>
 8004020:	881d      	ldrh	r5, [r3, #0]
 8004022:	4854      	ldr	r0, [pc, #336]	; (8004174 <_printf_i+0x244>)
 8004024:	2f6f      	cmp	r7, #111	; 0x6f
 8004026:	bf0c      	ite	eq
 8004028:	2308      	moveq	r3, #8
 800402a:	230a      	movne	r3, #10
 800402c:	2100      	movs	r1, #0
 800402e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004032:	6866      	ldr	r6, [r4, #4]
 8004034:	60a6      	str	r6, [r4, #8]
 8004036:	2e00      	cmp	r6, #0
 8004038:	bfa2      	ittt	ge
 800403a:	6821      	ldrge	r1, [r4, #0]
 800403c:	f021 0104 	bicge.w	r1, r1, #4
 8004040:	6021      	strge	r1, [r4, #0]
 8004042:	b90d      	cbnz	r5, 8004048 <_printf_i+0x118>
 8004044:	2e00      	cmp	r6, #0
 8004046:	d04d      	beq.n	80040e4 <_printf_i+0x1b4>
 8004048:	4616      	mov	r6, r2
 800404a:	fbb5 f1f3 	udiv	r1, r5, r3
 800404e:	fb03 5711 	mls	r7, r3, r1, r5
 8004052:	5dc7      	ldrb	r7, [r0, r7]
 8004054:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004058:	462f      	mov	r7, r5
 800405a:	42bb      	cmp	r3, r7
 800405c:	460d      	mov	r5, r1
 800405e:	d9f4      	bls.n	800404a <_printf_i+0x11a>
 8004060:	2b08      	cmp	r3, #8
 8004062:	d10b      	bne.n	800407c <_printf_i+0x14c>
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	07df      	lsls	r7, r3, #31
 8004068:	d508      	bpl.n	800407c <_printf_i+0x14c>
 800406a:	6923      	ldr	r3, [r4, #16]
 800406c:	6861      	ldr	r1, [r4, #4]
 800406e:	4299      	cmp	r1, r3
 8004070:	bfde      	ittt	le
 8004072:	2330      	movle	r3, #48	; 0x30
 8004074:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004078:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800407c:	1b92      	subs	r2, r2, r6
 800407e:	6122      	str	r2, [r4, #16]
 8004080:	f8cd a000 	str.w	sl, [sp]
 8004084:	464b      	mov	r3, r9
 8004086:	aa03      	add	r2, sp, #12
 8004088:	4621      	mov	r1, r4
 800408a:	4640      	mov	r0, r8
 800408c:	f7ff fee2 	bl	8003e54 <_printf_common>
 8004090:	3001      	adds	r0, #1
 8004092:	d14c      	bne.n	800412e <_printf_i+0x1fe>
 8004094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004098:	b004      	add	sp, #16
 800409a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800409e:	4835      	ldr	r0, [pc, #212]	; (8004174 <_printf_i+0x244>)
 80040a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	680e      	ldr	r6, [r1, #0]
 80040a8:	061f      	lsls	r7, r3, #24
 80040aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80040ae:	600e      	str	r6, [r1, #0]
 80040b0:	d514      	bpl.n	80040dc <_printf_i+0x1ac>
 80040b2:	07d9      	lsls	r1, r3, #31
 80040b4:	bf44      	itt	mi
 80040b6:	f043 0320 	orrmi.w	r3, r3, #32
 80040ba:	6023      	strmi	r3, [r4, #0]
 80040bc:	b91d      	cbnz	r5, 80040c6 <_printf_i+0x196>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	f023 0320 	bic.w	r3, r3, #32
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	2310      	movs	r3, #16
 80040c8:	e7b0      	b.n	800402c <_printf_i+0xfc>
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	f043 0320 	orr.w	r3, r3, #32
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	2378      	movs	r3, #120	; 0x78
 80040d4:	4828      	ldr	r0, [pc, #160]	; (8004178 <_printf_i+0x248>)
 80040d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040da:	e7e3      	b.n	80040a4 <_printf_i+0x174>
 80040dc:	065e      	lsls	r6, r3, #25
 80040de:	bf48      	it	mi
 80040e0:	b2ad      	uxthmi	r5, r5
 80040e2:	e7e6      	b.n	80040b2 <_printf_i+0x182>
 80040e4:	4616      	mov	r6, r2
 80040e6:	e7bb      	b.n	8004060 <_printf_i+0x130>
 80040e8:	680b      	ldr	r3, [r1, #0]
 80040ea:	6826      	ldr	r6, [r4, #0]
 80040ec:	6960      	ldr	r0, [r4, #20]
 80040ee:	1d1d      	adds	r5, r3, #4
 80040f0:	600d      	str	r5, [r1, #0]
 80040f2:	0635      	lsls	r5, r6, #24
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	d501      	bpl.n	80040fc <_printf_i+0x1cc>
 80040f8:	6018      	str	r0, [r3, #0]
 80040fa:	e002      	b.n	8004102 <_printf_i+0x1d2>
 80040fc:	0671      	lsls	r1, r6, #25
 80040fe:	d5fb      	bpl.n	80040f8 <_printf_i+0x1c8>
 8004100:	8018      	strh	r0, [r3, #0]
 8004102:	2300      	movs	r3, #0
 8004104:	6123      	str	r3, [r4, #16]
 8004106:	4616      	mov	r6, r2
 8004108:	e7ba      	b.n	8004080 <_printf_i+0x150>
 800410a:	680b      	ldr	r3, [r1, #0]
 800410c:	1d1a      	adds	r2, r3, #4
 800410e:	600a      	str	r2, [r1, #0]
 8004110:	681e      	ldr	r6, [r3, #0]
 8004112:	6862      	ldr	r2, [r4, #4]
 8004114:	2100      	movs	r1, #0
 8004116:	4630      	mov	r0, r6
 8004118:	f7fc f87a 	bl	8000210 <memchr>
 800411c:	b108      	cbz	r0, 8004122 <_printf_i+0x1f2>
 800411e:	1b80      	subs	r0, r0, r6
 8004120:	6060      	str	r0, [r4, #4]
 8004122:	6863      	ldr	r3, [r4, #4]
 8004124:	6123      	str	r3, [r4, #16]
 8004126:	2300      	movs	r3, #0
 8004128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800412c:	e7a8      	b.n	8004080 <_printf_i+0x150>
 800412e:	6923      	ldr	r3, [r4, #16]
 8004130:	4632      	mov	r2, r6
 8004132:	4649      	mov	r1, r9
 8004134:	4640      	mov	r0, r8
 8004136:	47d0      	blx	sl
 8004138:	3001      	adds	r0, #1
 800413a:	d0ab      	beq.n	8004094 <_printf_i+0x164>
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	079b      	lsls	r3, r3, #30
 8004140:	d413      	bmi.n	800416a <_printf_i+0x23a>
 8004142:	68e0      	ldr	r0, [r4, #12]
 8004144:	9b03      	ldr	r3, [sp, #12]
 8004146:	4298      	cmp	r0, r3
 8004148:	bfb8      	it	lt
 800414a:	4618      	movlt	r0, r3
 800414c:	e7a4      	b.n	8004098 <_printf_i+0x168>
 800414e:	2301      	movs	r3, #1
 8004150:	4632      	mov	r2, r6
 8004152:	4649      	mov	r1, r9
 8004154:	4640      	mov	r0, r8
 8004156:	47d0      	blx	sl
 8004158:	3001      	adds	r0, #1
 800415a:	d09b      	beq.n	8004094 <_printf_i+0x164>
 800415c:	3501      	adds	r5, #1
 800415e:	68e3      	ldr	r3, [r4, #12]
 8004160:	9903      	ldr	r1, [sp, #12]
 8004162:	1a5b      	subs	r3, r3, r1
 8004164:	42ab      	cmp	r3, r5
 8004166:	dcf2      	bgt.n	800414e <_printf_i+0x21e>
 8004168:	e7eb      	b.n	8004142 <_printf_i+0x212>
 800416a:	2500      	movs	r5, #0
 800416c:	f104 0619 	add.w	r6, r4, #25
 8004170:	e7f5      	b.n	800415e <_printf_i+0x22e>
 8004172:	bf00      	nop
 8004174:	08004831 	.word	0x08004831
 8004178:	08004842 	.word	0x08004842

0800417c <_sbrk_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4d06      	ldr	r5, [pc, #24]	; (8004198 <_sbrk_r+0x1c>)
 8004180:	2300      	movs	r3, #0
 8004182:	4604      	mov	r4, r0
 8004184:	4608      	mov	r0, r1
 8004186:	602b      	str	r3, [r5, #0]
 8004188:	f7fc ff3e 	bl	8001008 <_sbrk>
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	d102      	bne.n	8004196 <_sbrk_r+0x1a>
 8004190:	682b      	ldr	r3, [r5, #0]
 8004192:	b103      	cbz	r3, 8004196 <_sbrk_r+0x1a>
 8004194:	6023      	str	r3, [r4, #0]
 8004196:	bd38      	pop	{r3, r4, r5, pc}
 8004198:	2000021c 	.word	0x2000021c

0800419c <__sread>:
 800419c:	b510      	push	{r4, lr}
 800419e:	460c      	mov	r4, r1
 80041a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a4:	f000 fab4 	bl	8004710 <_read_r>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	bfab      	itete	ge
 80041ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041ae:	89a3      	ldrhlt	r3, [r4, #12]
 80041b0:	181b      	addge	r3, r3, r0
 80041b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041b6:	bfac      	ite	ge
 80041b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80041ba:	81a3      	strhlt	r3, [r4, #12]
 80041bc:	bd10      	pop	{r4, pc}

080041be <__swrite>:
 80041be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c2:	461f      	mov	r7, r3
 80041c4:	898b      	ldrh	r3, [r1, #12]
 80041c6:	05db      	lsls	r3, r3, #23
 80041c8:	4605      	mov	r5, r0
 80041ca:	460c      	mov	r4, r1
 80041cc:	4616      	mov	r6, r2
 80041ce:	d505      	bpl.n	80041dc <__swrite+0x1e>
 80041d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d4:	2302      	movs	r3, #2
 80041d6:	2200      	movs	r2, #0
 80041d8:	f000 f9c8 	bl	800456c <_lseek_r>
 80041dc:	89a3      	ldrh	r3, [r4, #12]
 80041de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041e6:	81a3      	strh	r3, [r4, #12]
 80041e8:	4632      	mov	r2, r6
 80041ea:	463b      	mov	r3, r7
 80041ec:	4628      	mov	r0, r5
 80041ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041f2:	f000 b869 	b.w	80042c8 <_write_r>

080041f6 <__sseek>:
 80041f6:	b510      	push	{r4, lr}
 80041f8:	460c      	mov	r4, r1
 80041fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041fe:	f000 f9b5 	bl	800456c <_lseek_r>
 8004202:	1c43      	adds	r3, r0, #1
 8004204:	89a3      	ldrh	r3, [r4, #12]
 8004206:	bf15      	itete	ne
 8004208:	6560      	strne	r0, [r4, #84]	; 0x54
 800420a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800420e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004212:	81a3      	strheq	r3, [r4, #12]
 8004214:	bf18      	it	ne
 8004216:	81a3      	strhne	r3, [r4, #12]
 8004218:	bd10      	pop	{r4, pc}

0800421a <__sclose>:
 800421a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800421e:	f000 b8d3 	b.w	80043c8 <_close_r>
	...

08004224 <__swbuf_r>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	460e      	mov	r6, r1
 8004228:	4614      	mov	r4, r2
 800422a:	4605      	mov	r5, r0
 800422c:	b118      	cbz	r0, 8004236 <__swbuf_r+0x12>
 800422e:	6983      	ldr	r3, [r0, #24]
 8004230:	b90b      	cbnz	r3, 8004236 <__swbuf_r+0x12>
 8004232:	f7ff fbbb 	bl	80039ac <__sinit>
 8004236:	4b21      	ldr	r3, [pc, #132]	; (80042bc <__swbuf_r+0x98>)
 8004238:	429c      	cmp	r4, r3
 800423a:	d12b      	bne.n	8004294 <__swbuf_r+0x70>
 800423c:	686c      	ldr	r4, [r5, #4]
 800423e:	69a3      	ldr	r3, [r4, #24]
 8004240:	60a3      	str	r3, [r4, #8]
 8004242:	89a3      	ldrh	r3, [r4, #12]
 8004244:	071a      	lsls	r2, r3, #28
 8004246:	d52f      	bpl.n	80042a8 <__swbuf_r+0x84>
 8004248:	6923      	ldr	r3, [r4, #16]
 800424a:	b36b      	cbz	r3, 80042a8 <__swbuf_r+0x84>
 800424c:	6923      	ldr	r3, [r4, #16]
 800424e:	6820      	ldr	r0, [r4, #0]
 8004250:	1ac0      	subs	r0, r0, r3
 8004252:	6963      	ldr	r3, [r4, #20]
 8004254:	b2f6      	uxtb	r6, r6
 8004256:	4283      	cmp	r3, r0
 8004258:	4637      	mov	r7, r6
 800425a:	dc04      	bgt.n	8004266 <__swbuf_r+0x42>
 800425c:	4621      	mov	r1, r4
 800425e:	4628      	mov	r0, r5
 8004260:	f000 f948 	bl	80044f4 <_fflush_r>
 8004264:	bb30      	cbnz	r0, 80042b4 <__swbuf_r+0x90>
 8004266:	68a3      	ldr	r3, [r4, #8]
 8004268:	3b01      	subs	r3, #1
 800426a:	60a3      	str	r3, [r4, #8]
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	6022      	str	r2, [r4, #0]
 8004272:	701e      	strb	r6, [r3, #0]
 8004274:	6963      	ldr	r3, [r4, #20]
 8004276:	3001      	adds	r0, #1
 8004278:	4283      	cmp	r3, r0
 800427a:	d004      	beq.n	8004286 <__swbuf_r+0x62>
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	07db      	lsls	r3, r3, #31
 8004280:	d506      	bpl.n	8004290 <__swbuf_r+0x6c>
 8004282:	2e0a      	cmp	r6, #10
 8004284:	d104      	bne.n	8004290 <__swbuf_r+0x6c>
 8004286:	4621      	mov	r1, r4
 8004288:	4628      	mov	r0, r5
 800428a:	f000 f933 	bl	80044f4 <_fflush_r>
 800428e:	b988      	cbnz	r0, 80042b4 <__swbuf_r+0x90>
 8004290:	4638      	mov	r0, r7
 8004292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <__swbuf_r+0x9c>)
 8004296:	429c      	cmp	r4, r3
 8004298:	d101      	bne.n	800429e <__swbuf_r+0x7a>
 800429a:	68ac      	ldr	r4, [r5, #8]
 800429c:	e7cf      	b.n	800423e <__swbuf_r+0x1a>
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <__swbuf_r+0xa0>)
 80042a0:	429c      	cmp	r4, r3
 80042a2:	bf08      	it	eq
 80042a4:	68ec      	ldreq	r4, [r5, #12]
 80042a6:	e7ca      	b.n	800423e <__swbuf_r+0x1a>
 80042a8:	4621      	mov	r1, r4
 80042aa:	4628      	mov	r0, r5
 80042ac:	f000 f81e 	bl	80042ec <__swsetup_r>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d0cb      	beq.n	800424c <__swbuf_r+0x28>
 80042b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80042b8:	e7ea      	b.n	8004290 <__swbuf_r+0x6c>
 80042ba:	bf00      	nop
 80042bc:	080047e0 	.word	0x080047e0
 80042c0:	08004800 	.word	0x08004800
 80042c4:	080047c0 	.word	0x080047c0

080042c8 <_write_r>:
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	4d07      	ldr	r5, [pc, #28]	; (80042e8 <_write_r+0x20>)
 80042cc:	4604      	mov	r4, r0
 80042ce:	4608      	mov	r0, r1
 80042d0:	4611      	mov	r1, r2
 80042d2:	2200      	movs	r2, #0
 80042d4:	602a      	str	r2, [r5, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f7fc fc70 	bl	8000bbc <_write>
 80042dc:	1c43      	adds	r3, r0, #1
 80042de:	d102      	bne.n	80042e6 <_write_r+0x1e>
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	b103      	cbz	r3, 80042e6 <_write_r+0x1e>
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
 80042e8:	2000021c 	.word	0x2000021c

080042ec <__swsetup_r>:
 80042ec:	4b32      	ldr	r3, [pc, #200]	; (80043b8 <__swsetup_r+0xcc>)
 80042ee:	b570      	push	{r4, r5, r6, lr}
 80042f0:	681d      	ldr	r5, [r3, #0]
 80042f2:	4606      	mov	r6, r0
 80042f4:	460c      	mov	r4, r1
 80042f6:	b125      	cbz	r5, 8004302 <__swsetup_r+0x16>
 80042f8:	69ab      	ldr	r3, [r5, #24]
 80042fa:	b913      	cbnz	r3, 8004302 <__swsetup_r+0x16>
 80042fc:	4628      	mov	r0, r5
 80042fe:	f7ff fb55 	bl	80039ac <__sinit>
 8004302:	4b2e      	ldr	r3, [pc, #184]	; (80043bc <__swsetup_r+0xd0>)
 8004304:	429c      	cmp	r4, r3
 8004306:	d10f      	bne.n	8004328 <__swsetup_r+0x3c>
 8004308:	686c      	ldr	r4, [r5, #4]
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004310:	0719      	lsls	r1, r3, #28
 8004312:	d42c      	bmi.n	800436e <__swsetup_r+0x82>
 8004314:	06dd      	lsls	r5, r3, #27
 8004316:	d411      	bmi.n	800433c <__swsetup_r+0x50>
 8004318:	2309      	movs	r3, #9
 800431a:	6033      	str	r3, [r6, #0]
 800431c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004320:	81a3      	strh	r3, [r4, #12]
 8004322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004326:	e03e      	b.n	80043a6 <__swsetup_r+0xba>
 8004328:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <__swsetup_r+0xd4>)
 800432a:	429c      	cmp	r4, r3
 800432c:	d101      	bne.n	8004332 <__swsetup_r+0x46>
 800432e:	68ac      	ldr	r4, [r5, #8]
 8004330:	e7eb      	b.n	800430a <__swsetup_r+0x1e>
 8004332:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <__swsetup_r+0xd8>)
 8004334:	429c      	cmp	r4, r3
 8004336:	bf08      	it	eq
 8004338:	68ec      	ldreq	r4, [r5, #12]
 800433a:	e7e6      	b.n	800430a <__swsetup_r+0x1e>
 800433c:	0758      	lsls	r0, r3, #29
 800433e:	d512      	bpl.n	8004366 <__swsetup_r+0x7a>
 8004340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004342:	b141      	cbz	r1, 8004356 <__swsetup_r+0x6a>
 8004344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004348:	4299      	cmp	r1, r3
 800434a:	d002      	beq.n	8004352 <__swsetup_r+0x66>
 800434c:	4630      	mov	r0, r6
 800434e:	f000 f98f 	bl	8004670 <_free_r>
 8004352:	2300      	movs	r3, #0
 8004354:	6363      	str	r3, [r4, #52]	; 0x34
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800435c:	81a3      	strh	r3, [r4, #12]
 800435e:	2300      	movs	r3, #0
 8004360:	6063      	str	r3, [r4, #4]
 8004362:	6923      	ldr	r3, [r4, #16]
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	89a3      	ldrh	r3, [r4, #12]
 8004368:	f043 0308 	orr.w	r3, r3, #8
 800436c:	81a3      	strh	r3, [r4, #12]
 800436e:	6923      	ldr	r3, [r4, #16]
 8004370:	b94b      	cbnz	r3, 8004386 <__swsetup_r+0x9a>
 8004372:	89a3      	ldrh	r3, [r4, #12]
 8004374:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437c:	d003      	beq.n	8004386 <__swsetup_r+0x9a>
 800437e:	4621      	mov	r1, r4
 8004380:	4630      	mov	r0, r6
 8004382:	f000 f929 	bl	80045d8 <__smakebuf_r>
 8004386:	89a0      	ldrh	r0, [r4, #12]
 8004388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800438c:	f010 0301 	ands.w	r3, r0, #1
 8004390:	d00a      	beq.n	80043a8 <__swsetup_r+0xbc>
 8004392:	2300      	movs	r3, #0
 8004394:	60a3      	str	r3, [r4, #8]
 8004396:	6963      	ldr	r3, [r4, #20]
 8004398:	425b      	negs	r3, r3
 800439a:	61a3      	str	r3, [r4, #24]
 800439c:	6923      	ldr	r3, [r4, #16]
 800439e:	b943      	cbnz	r3, 80043b2 <__swsetup_r+0xc6>
 80043a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043a4:	d1ba      	bne.n	800431c <__swsetup_r+0x30>
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
 80043a8:	0781      	lsls	r1, r0, #30
 80043aa:	bf58      	it	pl
 80043ac:	6963      	ldrpl	r3, [r4, #20]
 80043ae:	60a3      	str	r3, [r4, #8]
 80043b0:	e7f4      	b.n	800439c <__swsetup_r+0xb0>
 80043b2:	2000      	movs	r0, #0
 80043b4:	e7f7      	b.n	80043a6 <__swsetup_r+0xba>
 80043b6:	bf00      	nop
 80043b8:	2000000c 	.word	0x2000000c
 80043bc:	080047e0 	.word	0x080047e0
 80043c0:	08004800 	.word	0x08004800
 80043c4:	080047c0 	.word	0x080047c0

080043c8 <_close_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	4d06      	ldr	r5, [pc, #24]	; (80043e4 <_close_r+0x1c>)
 80043cc:	2300      	movs	r3, #0
 80043ce:	4604      	mov	r4, r0
 80043d0:	4608      	mov	r0, r1
 80043d2:	602b      	str	r3, [r5, #0]
 80043d4:	f7fc fde3 	bl	8000f9e <_close>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	d102      	bne.n	80043e2 <_close_r+0x1a>
 80043dc:	682b      	ldr	r3, [r5, #0]
 80043de:	b103      	cbz	r3, 80043e2 <_close_r+0x1a>
 80043e0:	6023      	str	r3, [r4, #0]
 80043e2:	bd38      	pop	{r3, r4, r5, pc}
 80043e4:	2000021c 	.word	0x2000021c

080043e8 <__sflush_r>:
 80043e8:	898a      	ldrh	r2, [r1, #12]
 80043ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ee:	4605      	mov	r5, r0
 80043f0:	0710      	lsls	r0, r2, #28
 80043f2:	460c      	mov	r4, r1
 80043f4:	d458      	bmi.n	80044a8 <__sflush_r+0xc0>
 80043f6:	684b      	ldr	r3, [r1, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	dc05      	bgt.n	8004408 <__sflush_r+0x20>
 80043fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	dc02      	bgt.n	8004408 <__sflush_r+0x20>
 8004402:	2000      	movs	r0, #0
 8004404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800440a:	2e00      	cmp	r6, #0
 800440c:	d0f9      	beq.n	8004402 <__sflush_r+0x1a>
 800440e:	2300      	movs	r3, #0
 8004410:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004414:	682f      	ldr	r7, [r5, #0]
 8004416:	602b      	str	r3, [r5, #0]
 8004418:	d032      	beq.n	8004480 <__sflush_r+0x98>
 800441a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800441c:	89a3      	ldrh	r3, [r4, #12]
 800441e:	075a      	lsls	r2, r3, #29
 8004420:	d505      	bpl.n	800442e <__sflush_r+0x46>
 8004422:	6863      	ldr	r3, [r4, #4]
 8004424:	1ac0      	subs	r0, r0, r3
 8004426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004428:	b10b      	cbz	r3, 800442e <__sflush_r+0x46>
 800442a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800442c:	1ac0      	subs	r0, r0, r3
 800442e:	2300      	movs	r3, #0
 8004430:	4602      	mov	r2, r0
 8004432:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004434:	6a21      	ldr	r1, [r4, #32]
 8004436:	4628      	mov	r0, r5
 8004438:	47b0      	blx	r6
 800443a:	1c43      	adds	r3, r0, #1
 800443c:	89a3      	ldrh	r3, [r4, #12]
 800443e:	d106      	bne.n	800444e <__sflush_r+0x66>
 8004440:	6829      	ldr	r1, [r5, #0]
 8004442:	291d      	cmp	r1, #29
 8004444:	d82c      	bhi.n	80044a0 <__sflush_r+0xb8>
 8004446:	4a2a      	ldr	r2, [pc, #168]	; (80044f0 <__sflush_r+0x108>)
 8004448:	40ca      	lsrs	r2, r1
 800444a:	07d6      	lsls	r6, r2, #31
 800444c:	d528      	bpl.n	80044a0 <__sflush_r+0xb8>
 800444e:	2200      	movs	r2, #0
 8004450:	6062      	str	r2, [r4, #4]
 8004452:	04d9      	lsls	r1, r3, #19
 8004454:	6922      	ldr	r2, [r4, #16]
 8004456:	6022      	str	r2, [r4, #0]
 8004458:	d504      	bpl.n	8004464 <__sflush_r+0x7c>
 800445a:	1c42      	adds	r2, r0, #1
 800445c:	d101      	bne.n	8004462 <__sflush_r+0x7a>
 800445e:	682b      	ldr	r3, [r5, #0]
 8004460:	b903      	cbnz	r3, 8004464 <__sflush_r+0x7c>
 8004462:	6560      	str	r0, [r4, #84]	; 0x54
 8004464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004466:	602f      	str	r7, [r5, #0]
 8004468:	2900      	cmp	r1, #0
 800446a:	d0ca      	beq.n	8004402 <__sflush_r+0x1a>
 800446c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004470:	4299      	cmp	r1, r3
 8004472:	d002      	beq.n	800447a <__sflush_r+0x92>
 8004474:	4628      	mov	r0, r5
 8004476:	f000 f8fb 	bl	8004670 <_free_r>
 800447a:	2000      	movs	r0, #0
 800447c:	6360      	str	r0, [r4, #52]	; 0x34
 800447e:	e7c1      	b.n	8004404 <__sflush_r+0x1c>
 8004480:	6a21      	ldr	r1, [r4, #32]
 8004482:	2301      	movs	r3, #1
 8004484:	4628      	mov	r0, r5
 8004486:	47b0      	blx	r6
 8004488:	1c41      	adds	r1, r0, #1
 800448a:	d1c7      	bne.n	800441c <__sflush_r+0x34>
 800448c:	682b      	ldr	r3, [r5, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0c4      	beq.n	800441c <__sflush_r+0x34>
 8004492:	2b1d      	cmp	r3, #29
 8004494:	d001      	beq.n	800449a <__sflush_r+0xb2>
 8004496:	2b16      	cmp	r3, #22
 8004498:	d101      	bne.n	800449e <__sflush_r+0xb6>
 800449a:	602f      	str	r7, [r5, #0]
 800449c:	e7b1      	b.n	8004402 <__sflush_r+0x1a>
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044a4:	81a3      	strh	r3, [r4, #12]
 80044a6:	e7ad      	b.n	8004404 <__sflush_r+0x1c>
 80044a8:	690f      	ldr	r7, [r1, #16]
 80044aa:	2f00      	cmp	r7, #0
 80044ac:	d0a9      	beq.n	8004402 <__sflush_r+0x1a>
 80044ae:	0793      	lsls	r3, r2, #30
 80044b0:	680e      	ldr	r6, [r1, #0]
 80044b2:	bf08      	it	eq
 80044b4:	694b      	ldreq	r3, [r1, #20]
 80044b6:	600f      	str	r7, [r1, #0]
 80044b8:	bf18      	it	ne
 80044ba:	2300      	movne	r3, #0
 80044bc:	eba6 0807 	sub.w	r8, r6, r7
 80044c0:	608b      	str	r3, [r1, #8]
 80044c2:	f1b8 0f00 	cmp.w	r8, #0
 80044c6:	dd9c      	ble.n	8004402 <__sflush_r+0x1a>
 80044c8:	6a21      	ldr	r1, [r4, #32]
 80044ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044cc:	4643      	mov	r3, r8
 80044ce:	463a      	mov	r2, r7
 80044d0:	4628      	mov	r0, r5
 80044d2:	47b0      	blx	r6
 80044d4:	2800      	cmp	r0, #0
 80044d6:	dc06      	bgt.n	80044e6 <__sflush_r+0xfe>
 80044d8:	89a3      	ldrh	r3, [r4, #12]
 80044da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044de:	81a3      	strh	r3, [r4, #12]
 80044e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044e4:	e78e      	b.n	8004404 <__sflush_r+0x1c>
 80044e6:	4407      	add	r7, r0
 80044e8:	eba8 0800 	sub.w	r8, r8, r0
 80044ec:	e7e9      	b.n	80044c2 <__sflush_r+0xda>
 80044ee:	bf00      	nop
 80044f0:	20400001 	.word	0x20400001

080044f4 <_fflush_r>:
 80044f4:	b538      	push	{r3, r4, r5, lr}
 80044f6:	690b      	ldr	r3, [r1, #16]
 80044f8:	4605      	mov	r5, r0
 80044fa:	460c      	mov	r4, r1
 80044fc:	b913      	cbnz	r3, 8004504 <_fflush_r+0x10>
 80044fe:	2500      	movs	r5, #0
 8004500:	4628      	mov	r0, r5
 8004502:	bd38      	pop	{r3, r4, r5, pc}
 8004504:	b118      	cbz	r0, 800450e <_fflush_r+0x1a>
 8004506:	6983      	ldr	r3, [r0, #24]
 8004508:	b90b      	cbnz	r3, 800450e <_fflush_r+0x1a>
 800450a:	f7ff fa4f 	bl	80039ac <__sinit>
 800450e:	4b14      	ldr	r3, [pc, #80]	; (8004560 <_fflush_r+0x6c>)
 8004510:	429c      	cmp	r4, r3
 8004512:	d11b      	bne.n	800454c <_fflush_r+0x58>
 8004514:	686c      	ldr	r4, [r5, #4]
 8004516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0ef      	beq.n	80044fe <_fflush_r+0xa>
 800451e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004520:	07d0      	lsls	r0, r2, #31
 8004522:	d404      	bmi.n	800452e <_fflush_r+0x3a>
 8004524:	0599      	lsls	r1, r3, #22
 8004526:	d402      	bmi.n	800452e <_fflush_r+0x3a>
 8004528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800452a:	f7ff fadd 	bl	8003ae8 <__retarget_lock_acquire_recursive>
 800452e:	4628      	mov	r0, r5
 8004530:	4621      	mov	r1, r4
 8004532:	f7ff ff59 	bl	80043e8 <__sflush_r>
 8004536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004538:	07da      	lsls	r2, r3, #31
 800453a:	4605      	mov	r5, r0
 800453c:	d4e0      	bmi.n	8004500 <_fflush_r+0xc>
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	059b      	lsls	r3, r3, #22
 8004542:	d4dd      	bmi.n	8004500 <_fflush_r+0xc>
 8004544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004546:	f7ff fad0 	bl	8003aea <__retarget_lock_release_recursive>
 800454a:	e7d9      	b.n	8004500 <_fflush_r+0xc>
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <_fflush_r+0x70>)
 800454e:	429c      	cmp	r4, r3
 8004550:	d101      	bne.n	8004556 <_fflush_r+0x62>
 8004552:	68ac      	ldr	r4, [r5, #8]
 8004554:	e7df      	b.n	8004516 <_fflush_r+0x22>
 8004556:	4b04      	ldr	r3, [pc, #16]	; (8004568 <_fflush_r+0x74>)
 8004558:	429c      	cmp	r4, r3
 800455a:	bf08      	it	eq
 800455c:	68ec      	ldreq	r4, [r5, #12]
 800455e:	e7da      	b.n	8004516 <_fflush_r+0x22>
 8004560:	080047e0 	.word	0x080047e0
 8004564:	08004800 	.word	0x08004800
 8004568:	080047c0 	.word	0x080047c0

0800456c <_lseek_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d07      	ldr	r5, [pc, #28]	; (800458c <_lseek_r+0x20>)
 8004570:	4604      	mov	r4, r0
 8004572:	4608      	mov	r0, r1
 8004574:	4611      	mov	r1, r2
 8004576:	2200      	movs	r2, #0
 8004578:	602a      	str	r2, [r5, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	f7fc fd36 	bl	8000fec <_lseek>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d102      	bne.n	800458a <_lseek_r+0x1e>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	b103      	cbz	r3, 800458a <_lseek_r+0x1e>
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	2000021c 	.word	0x2000021c

08004590 <__swhatbuf_r>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	460e      	mov	r6, r1
 8004594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004598:	2900      	cmp	r1, #0
 800459a:	b096      	sub	sp, #88	; 0x58
 800459c:	4614      	mov	r4, r2
 800459e:	461d      	mov	r5, r3
 80045a0:	da07      	bge.n	80045b2 <__swhatbuf_r+0x22>
 80045a2:	2300      	movs	r3, #0
 80045a4:	602b      	str	r3, [r5, #0]
 80045a6:	89b3      	ldrh	r3, [r6, #12]
 80045a8:	061a      	lsls	r2, r3, #24
 80045aa:	d410      	bmi.n	80045ce <__swhatbuf_r+0x3e>
 80045ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045b0:	e00e      	b.n	80045d0 <__swhatbuf_r+0x40>
 80045b2:	466a      	mov	r2, sp
 80045b4:	f000 f8be 	bl	8004734 <_fstat_r>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	dbf2      	blt.n	80045a2 <__swhatbuf_r+0x12>
 80045bc:	9a01      	ldr	r2, [sp, #4]
 80045be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045c6:	425a      	negs	r2, r3
 80045c8:	415a      	adcs	r2, r3
 80045ca:	602a      	str	r2, [r5, #0]
 80045cc:	e7ee      	b.n	80045ac <__swhatbuf_r+0x1c>
 80045ce:	2340      	movs	r3, #64	; 0x40
 80045d0:	2000      	movs	r0, #0
 80045d2:	6023      	str	r3, [r4, #0]
 80045d4:	b016      	add	sp, #88	; 0x58
 80045d6:	bd70      	pop	{r4, r5, r6, pc}

080045d8 <__smakebuf_r>:
 80045d8:	898b      	ldrh	r3, [r1, #12]
 80045da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045dc:	079d      	lsls	r5, r3, #30
 80045de:	4606      	mov	r6, r0
 80045e0:	460c      	mov	r4, r1
 80045e2:	d507      	bpl.n	80045f4 <__smakebuf_r+0x1c>
 80045e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	6123      	str	r3, [r4, #16]
 80045ec:	2301      	movs	r3, #1
 80045ee:	6163      	str	r3, [r4, #20]
 80045f0:	b002      	add	sp, #8
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
 80045f4:	ab01      	add	r3, sp, #4
 80045f6:	466a      	mov	r2, sp
 80045f8:	f7ff ffca 	bl	8004590 <__swhatbuf_r>
 80045fc:	9900      	ldr	r1, [sp, #0]
 80045fe:	4605      	mov	r5, r0
 8004600:	4630      	mov	r0, r6
 8004602:	f7ff fa73 	bl	8003aec <_malloc_r>
 8004606:	b948      	cbnz	r0, 800461c <__smakebuf_r+0x44>
 8004608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800460c:	059a      	lsls	r2, r3, #22
 800460e:	d4ef      	bmi.n	80045f0 <__smakebuf_r+0x18>
 8004610:	f023 0303 	bic.w	r3, r3, #3
 8004614:	f043 0302 	orr.w	r3, r3, #2
 8004618:	81a3      	strh	r3, [r4, #12]
 800461a:	e7e3      	b.n	80045e4 <__smakebuf_r+0xc>
 800461c:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <__smakebuf_r+0x7c>)
 800461e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004620:	89a3      	ldrh	r3, [r4, #12]
 8004622:	6020      	str	r0, [r4, #0]
 8004624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004628:	81a3      	strh	r3, [r4, #12]
 800462a:	9b00      	ldr	r3, [sp, #0]
 800462c:	6163      	str	r3, [r4, #20]
 800462e:	9b01      	ldr	r3, [sp, #4]
 8004630:	6120      	str	r0, [r4, #16]
 8004632:	b15b      	cbz	r3, 800464c <__smakebuf_r+0x74>
 8004634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004638:	4630      	mov	r0, r6
 800463a:	f000 f88d 	bl	8004758 <_isatty_r>
 800463e:	b128      	cbz	r0, 800464c <__smakebuf_r+0x74>
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	81a3      	strh	r3, [r4, #12]
 800464c:	89a0      	ldrh	r0, [r4, #12]
 800464e:	4305      	orrs	r5, r0
 8004650:	81a5      	strh	r5, [r4, #12]
 8004652:	e7cd      	b.n	80045f0 <__smakebuf_r+0x18>
 8004654:	08003945 	.word	0x08003945

08004658 <__malloc_lock>:
 8004658:	4801      	ldr	r0, [pc, #4]	; (8004660 <__malloc_lock+0x8>)
 800465a:	f7ff ba45 	b.w	8003ae8 <__retarget_lock_acquire_recursive>
 800465e:	bf00      	nop
 8004660:	20000214 	.word	0x20000214

08004664 <__malloc_unlock>:
 8004664:	4801      	ldr	r0, [pc, #4]	; (800466c <__malloc_unlock+0x8>)
 8004666:	f7ff ba40 	b.w	8003aea <__retarget_lock_release_recursive>
 800466a:	bf00      	nop
 800466c:	20000214 	.word	0x20000214

08004670 <_free_r>:
 8004670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004672:	2900      	cmp	r1, #0
 8004674:	d048      	beq.n	8004708 <_free_r+0x98>
 8004676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800467a:	9001      	str	r0, [sp, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f1a1 0404 	sub.w	r4, r1, #4
 8004682:	bfb8      	it	lt
 8004684:	18e4      	addlt	r4, r4, r3
 8004686:	f7ff ffe7 	bl	8004658 <__malloc_lock>
 800468a:	4a20      	ldr	r2, [pc, #128]	; (800470c <_free_r+0x9c>)
 800468c:	9801      	ldr	r0, [sp, #4]
 800468e:	6813      	ldr	r3, [r2, #0]
 8004690:	4615      	mov	r5, r2
 8004692:	b933      	cbnz	r3, 80046a2 <_free_r+0x32>
 8004694:	6063      	str	r3, [r4, #4]
 8004696:	6014      	str	r4, [r2, #0]
 8004698:	b003      	add	sp, #12
 800469a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800469e:	f7ff bfe1 	b.w	8004664 <__malloc_unlock>
 80046a2:	42a3      	cmp	r3, r4
 80046a4:	d90b      	bls.n	80046be <_free_r+0x4e>
 80046a6:	6821      	ldr	r1, [r4, #0]
 80046a8:	1862      	adds	r2, r4, r1
 80046aa:	4293      	cmp	r3, r2
 80046ac:	bf04      	itt	eq
 80046ae:	681a      	ldreq	r2, [r3, #0]
 80046b0:	685b      	ldreq	r3, [r3, #4]
 80046b2:	6063      	str	r3, [r4, #4]
 80046b4:	bf04      	itt	eq
 80046b6:	1852      	addeq	r2, r2, r1
 80046b8:	6022      	streq	r2, [r4, #0]
 80046ba:	602c      	str	r4, [r5, #0]
 80046bc:	e7ec      	b.n	8004698 <_free_r+0x28>
 80046be:	461a      	mov	r2, r3
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	b10b      	cbz	r3, 80046c8 <_free_r+0x58>
 80046c4:	42a3      	cmp	r3, r4
 80046c6:	d9fa      	bls.n	80046be <_free_r+0x4e>
 80046c8:	6811      	ldr	r1, [r2, #0]
 80046ca:	1855      	adds	r5, r2, r1
 80046cc:	42a5      	cmp	r5, r4
 80046ce:	d10b      	bne.n	80046e8 <_free_r+0x78>
 80046d0:	6824      	ldr	r4, [r4, #0]
 80046d2:	4421      	add	r1, r4
 80046d4:	1854      	adds	r4, r2, r1
 80046d6:	42a3      	cmp	r3, r4
 80046d8:	6011      	str	r1, [r2, #0]
 80046da:	d1dd      	bne.n	8004698 <_free_r+0x28>
 80046dc:	681c      	ldr	r4, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	6053      	str	r3, [r2, #4]
 80046e2:	4421      	add	r1, r4
 80046e4:	6011      	str	r1, [r2, #0]
 80046e6:	e7d7      	b.n	8004698 <_free_r+0x28>
 80046e8:	d902      	bls.n	80046f0 <_free_r+0x80>
 80046ea:	230c      	movs	r3, #12
 80046ec:	6003      	str	r3, [r0, #0]
 80046ee:	e7d3      	b.n	8004698 <_free_r+0x28>
 80046f0:	6825      	ldr	r5, [r4, #0]
 80046f2:	1961      	adds	r1, r4, r5
 80046f4:	428b      	cmp	r3, r1
 80046f6:	bf04      	itt	eq
 80046f8:	6819      	ldreq	r1, [r3, #0]
 80046fa:	685b      	ldreq	r3, [r3, #4]
 80046fc:	6063      	str	r3, [r4, #4]
 80046fe:	bf04      	itt	eq
 8004700:	1949      	addeq	r1, r1, r5
 8004702:	6021      	streq	r1, [r4, #0]
 8004704:	6054      	str	r4, [r2, #4]
 8004706:	e7c7      	b.n	8004698 <_free_r+0x28>
 8004708:	b003      	add	sp, #12
 800470a:	bd30      	pop	{r4, r5, pc}
 800470c:	20000090 	.word	0x20000090

08004710 <_read_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	4d07      	ldr	r5, [pc, #28]	; (8004730 <_read_r+0x20>)
 8004714:	4604      	mov	r4, r0
 8004716:	4608      	mov	r0, r1
 8004718:	4611      	mov	r1, r2
 800471a:	2200      	movs	r2, #0
 800471c:	602a      	str	r2, [r5, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	f7fc fc20 	bl	8000f64 <_read>
 8004724:	1c43      	adds	r3, r0, #1
 8004726:	d102      	bne.n	800472e <_read_r+0x1e>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	b103      	cbz	r3, 800472e <_read_r+0x1e>
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	bd38      	pop	{r3, r4, r5, pc}
 8004730:	2000021c 	.word	0x2000021c

08004734 <_fstat_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4d07      	ldr	r5, [pc, #28]	; (8004754 <_fstat_r+0x20>)
 8004738:	2300      	movs	r3, #0
 800473a:	4604      	mov	r4, r0
 800473c:	4608      	mov	r0, r1
 800473e:	4611      	mov	r1, r2
 8004740:	602b      	str	r3, [r5, #0]
 8004742:	f7fc fc38 	bl	8000fb6 <_fstat>
 8004746:	1c43      	adds	r3, r0, #1
 8004748:	d102      	bne.n	8004750 <_fstat_r+0x1c>
 800474a:	682b      	ldr	r3, [r5, #0]
 800474c:	b103      	cbz	r3, 8004750 <_fstat_r+0x1c>
 800474e:	6023      	str	r3, [r4, #0]
 8004750:	bd38      	pop	{r3, r4, r5, pc}
 8004752:	bf00      	nop
 8004754:	2000021c 	.word	0x2000021c

08004758 <_isatty_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4d06      	ldr	r5, [pc, #24]	; (8004774 <_isatty_r+0x1c>)
 800475c:	2300      	movs	r3, #0
 800475e:	4604      	mov	r4, r0
 8004760:	4608      	mov	r0, r1
 8004762:	602b      	str	r3, [r5, #0]
 8004764:	f7fc fc37 	bl	8000fd6 <_isatty>
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	d102      	bne.n	8004772 <_isatty_r+0x1a>
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	b103      	cbz	r3, 8004772 <_isatty_r+0x1a>
 8004770:	6023      	str	r3, [r4, #0]
 8004772:	bd38      	pop	{r3, r4, r5, pc}
 8004774:	2000021c 	.word	0x2000021c

08004778 <_init>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr

08004784 <_fini>:
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004786:	bf00      	nop
 8004788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478a:	bc08      	pop	{r3}
 800478c:	469e      	mov	lr, r3
 800478e:	4770      	bx	lr
