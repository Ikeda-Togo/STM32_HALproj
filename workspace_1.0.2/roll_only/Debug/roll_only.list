
roll_only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a0c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf4  08002bf4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bfc  08002bfc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bfc  08002bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c00  08002c00  00012c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002c10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002c10  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f30  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014f4  00000000  00000000  00027f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000850  00000000  00000000  00029460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000798  00000000  00000000  00029cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020322  00000000  00000000  0002a448  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bb0  00000000  00000000  0004a76a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4f40  00000000  00000000  0005131a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011625a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a4  00000000  00000000  001162d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002bb8 	.word	0x08002bb8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002bb8 	.word	0x08002bb8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f92f 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f002 f9b6 	bl	80028a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f939 	bl	80007de <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f90f 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000028 	.word	0x20000028

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_Delay+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000004 	.word	0x20000004

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff47 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff5c 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ffb0 	bl	800074c <SysTick_Config>
 80007ec:	4603      	mov	r3, r0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	; 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
 8000812:	e165      	b.n	8000ae0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000814:	2201      	movs	r2, #1
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	4013      	ands	r3, r2
 8000826:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	429a      	cmp	r2, r3
 800082e:	f040 8154 	bne.w	8000ada <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d00b      	beq.n	8000852 <HAL_GPIO_Init+0x5a>
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d007      	beq.n	8000852 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000846:	2b11      	cmp	r3, #17
 8000848:	d003      	beq.n	8000852 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b12      	cmp	r3, #18
 8000850:	d130      	bne.n	80008b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	2203      	movs	r2, #3
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43db      	mvns	r3, r3
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	4013      	ands	r3, r2
 8000868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	68da      	ldr	r2, [r3, #12]
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	69ba      	ldr	r2, [r7, #24]
 8000878:	4313      	orrs	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000888:	2201      	movs	r2, #1
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	43db      	mvns	r3, r3
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4013      	ands	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	091b      	lsrs	r3, r3, #4
 800089e:	f003 0201 	and.w	r2, r3, #1
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	2203      	movs	r2, #3
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	4013      	ands	r3, r2
 80008ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	4313      	orrs	r3, r2
 80008dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d003      	beq.n	80008f4 <HAL_GPIO_Init+0xfc>
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b12      	cmp	r3, #18
 80008f2:	d123      	bne.n	800093c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	08da      	lsrs	r2, r3, #3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3208      	adds	r2, #8
 80008fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000900:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	f003 0307 	and.w	r3, r3, #7
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	220f      	movs	r2, #15
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4013      	ands	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	691a      	ldr	r2, [r3, #16]
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4313      	orrs	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	08da      	lsrs	r2, r3, #3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3208      	adds	r2, #8
 8000936:	69b9      	ldr	r1, [r7, #24]
 8000938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2203      	movs	r2, #3
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 0203 	and.w	r2, r3, #3
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4313      	orrs	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	2b00      	cmp	r3, #0
 800097a:	f000 80ae 	beq.w	8000ada <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b5c      	ldr	r3, [pc, #368]	; (8000af4 <HAL_GPIO_Init+0x2fc>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a5b      	ldr	r2, [pc, #364]	; (8000af4 <HAL_GPIO_Init+0x2fc>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b59      	ldr	r3, [pc, #356]	; (8000af4 <HAL_GPIO_Init+0x2fc>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800099a:	4a57      	ldr	r2, [pc, #348]	; (8000af8 <HAL_GPIO_Init+0x300>)
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	089b      	lsrs	r3, r3, #2
 80009a0:	3302      	adds	r3, #2
 80009a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	220f      	movs	r2, #15
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	4013      	ands	r3, r2
 80009bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a4e      	ldr	r2, [pc, #312]	; (8000afc <HAL_GPIO_Init+0x304>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d025      	beq.n	8000a12 <HAL_GPIO_Init+0x21a>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a4d      	ldr	r2, [pc, #308]	; (8000b00 <HAL_GPIO_Init+0x308>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d01f      	beq.n	8000a0e <HAL_GPIO_Init+0x216>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a4c      	ldr	r2, [pc, #304]	; (8000b04 <HAL_GPIO_Init+0x30c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d019      	beq.n	8000a0a <HAL_GPIO_Init+0x212>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a4b      	ldr	r2, [pc, #300]	; (8000b08 <HAL_GPIO_Init+0x310>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d013      	beq.n	8000a06 <HAL_GPIO_Init+0x20e>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4a      	ldr	r2, [pc, #296]	; (8000b0c <HAL_GPIO_Init+0x314>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d00d      	beq.n	8000a02 <HAL_GPIO_Init+0x20a>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a49      	ldr	r2, [pc, #292]	; (8000b10 <HAL_GPIO_Init+0x318>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d007      	beq.n	80009fe <HAL_GPIO_Init+0x206>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a48      	ldr	r2, [pc, #288]	; (8000b14 <HAL_GPIO_Init+0x31c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <HAL_GPIO_Init+0x202>
 80009f6:	2306      	movs	r3, #6
 80009f8:	e00c      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 80009fa:	2307      	movs	r3, #7
 80009fc:	e00a      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 80009fe:	2305      	movs	r3, #5
 8000a00:	e008      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 8000a02:	2304      	movs	r3, #4
 8000a04:	e006      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 8000a06:	2303      	movs	r3, #3
 8000a08:	e004      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	e002      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e000      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 8000a12:	2300      	movs	r3, #0
 8000a14:	69fa      	ldr	r2, [r7, #28]
 8000a16:	f002 0203 	and.w	r2, r2, #3
 8000a1a:	0092      	lsls	r2, r2, #2
 8000a1c:	4093      	lsls	r3, r2
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a24:	4934      	ldr	r1, [pc, #208]	; (8000af8 <HAL_GPIO_Init+0x300>)
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	089b      	lsrs	r3, r3, #2
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a32:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a56:	4a30      	ldr	r2, [pc, #192]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	43db      	mvns	r3, r3
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d003      	beq.n	8000a80 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a80:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a86:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	4013      	ands	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aaa:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	4013      	ands	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ad4:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3301      	adds	r3, #1
 8000ade:	61fb      	str	r3, [r7, #28]
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	2b0f      	cmp	r3, #15
 8000ae4:	f67f ae96 	bls.w	8000814 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3724      	adds	r7, #36	; 0x24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40013800 	.word	0x40013800
 8000afc:	40020000 	.word	0x40020000
 8000b00:	40020400 	.word	0x40020400
 8000b04:	40020800 	.word	0x40020800
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40021400 	.word	0x40021400
 8000b14:	40021800 	.word	0x40021800
 8000b18:	40013c00 	.word	0x40013c00

08000b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	807b      	strh	r3, [r7, #2]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b2c:	787b      	ldrb	r3, [r7, #1]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b32:	887a      	ldrh	r2, [r7, #2]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b38:	e003      	b.n	8000b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	041a      	lsls	r2, r3, #16
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	619a      	str	r2, [r3, #24]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d101      	bne.n	8000b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e0cc      	b.n	8000cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b64:	4b68      	ldr	r3, [pc, #416]	; (8000d08 <HAL_RCC_ClockConfig+0x1b8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f003 030f 	and.w	r3, r3, #15
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d90c      	bls.n	8000b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b72:	4b65      	ldr	r3, [pc, #404]	; (8000d08 <HAL_RCC_ClockConfig+0x1b8>)
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b7a:	4b63      	ldr	r3, [pc, #396]	; (8000d08 <HAL_RCC_ClockConfig+0x1b8>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d001      	beq.n	8000b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e0b8      	b.n	8000cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d020      	beq.n	8000bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d005      	beq.n	8000bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ba4:	4b59      	ldr	r3, [pc, #356]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	4a58      	ldr	r2, [pc, #352]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000baa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000bae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d005      	beq.n	8000bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bbc:	4b53      	ldr	r3, [pc, #332]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	4a52      	ldr	r2, [pc, #328]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000bc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bc8:	4b50      	ldr	r3, [pc, #320]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	494d      	ldr	r1, [pc, #308]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d044      	beq.n	8000c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d107      	bne.n	8000bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bee:	4b47      	ldr	r3, [pc, #284]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d119      	bne.n	8000c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e07f      	b.n	8000cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d003      	beq.n	8000c0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d107      	bne.n	8000c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c0e:	4b3f      	ldr	r3, [pc, #252]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d109      	bne.n	8000c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e06f      	b.n	8000cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c1e:	4b3b      	ldr	r3, [pc, #236]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d101      	bne.n	8000c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e067      	b.n	8000cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c2e:	4b37      	ldr	r3, [pc, #220]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f023 0203 	bic.w	r2, r3, #3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	4934      	ldr	r1, [pc, #208]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c40:	f7ff fcc6 	bl	80005d0 <HAL_GetTick>
 8000c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c46:	e00a      	b.n	8000c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c48:	f7ff fcc2 	bl	80005d0 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e04f      	b.n	8000cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	f003 020c 	and.w	r2, r3, #12
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d1eb      	bne.n	8000c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c70:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <HAL_RCC_ClockConfig+0x1b8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 030f 	and.w	r3, r3, #15
 8000c78:	683a      	ldr	r2, [r7, #0]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d20c      	bcs.n	8000c98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c7e:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <HAL_RCC_ClockConfig+0x1b8>)
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <HAL_RCC_ClockConfig+0x1b8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d001      	beq.n	8000c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e032      	b.n	8000cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d008      	beq.n	8000cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	4916      	ldr	r1, [pc, #88]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0308 	and.w	r3, r3, #8
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d009      	beq.n	8000cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	490e      	ldr	r1, [pc, #56]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cd6:	f000 f855 	bl	8000d84 <HAL_RCC_GetSysClockFreq>
 8000cda:	4601      	mov	r1, r0
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_RCC_ClockConfig+0x1bc>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	091b      	lsrs	r3, r3, #4
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_RCC_ClockConfig+0x1c0>)
 8000ce8:	5cd3      	ldrb	r3, [r2, r3]
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <HAL_RCC_ClockConfig+0x1c4>)
 8000cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_RCC_ClockConfig+0x1c8>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fc26 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	08002bdc 	.word	0x08002bdc
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000000 	.word	0x20000000

08000d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008

08000d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d38:	f7ff fff0 	bl	8000d1c <HAL_RCC_GetHCLKFreq>
 8000d3c:	4601      	mov	r1, r0
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	0a9b      	lsrs	r3, r3, #10
 8000d44:	f003 0307 	and.w	r3, r3, #7
 8000d48:	4a03      	ldr	r2, [pc, #12]	; (8000d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d4a:	5cd3      	ldrb	r3, [r2, r3]
 8000d4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800
 8000d58:	08002bec 	.word	0x08002bec

08000d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d60:	f7ff ffdc 	bl	8000d1c <HAL_RCC_GetHCLKFreq>
 8000d64:	4601      	mov	r1, r0
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	0b5b      	lsrs	r3, r3, #13
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	4a03      	ldr	r2, [pc, #12]	; (8000d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d72:	5cd3      	ldrb	r3, [r2, r3]
 8000d74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	08002bec 	.word	0x08002bec

08000d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d9e:	4b9f      	ldr	r3, [pc, #636]	; (800101c <HAL_RCC_GetSysClockFreq+0x298>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 030c 	and.w	r3, r3, #12
 8000da6:	2b0c      	cmp	r3, #12
 8000da8:	f200 8130 	bhi.w	800100c <HAL_RCC_GetSysClockFreq+0x288>
 8000dac:	a201      	add	r2, pc, #4	; (adr r2, 8000db4 <HAL_RCC_GetSysClockFreq+0x30>)
 8000dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db2:	bf00      	nop
 8000db4:	08000de9 	.word	0x08000de9
 8000db8:	0800100d 	.word	0x0800100d
 8000dbc:	0800100d 	.word	0x0800100d
 8000dc0:	0800100d 	.word	0x0800100d
 8000dc4:	08000def 	.word	0x08000def
 8000dc8:	0800100d 	.word	0x0800100d
 8000dcc:	0800100d 	.word	0x0800100d
 8000dd0:	0800100d 	.word	0x0800100d
 8000dd4:	08000df5 	.word	0x08000df5
 8000dd8:	0800100d 	.word	0x0800100d
 8000ddc:	0800100d 	.word	0x0800100d
 8000de0:	0800100d 	.word	0x0800100d
 8000de4:	08000f03 	.word	0x08000f03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000de8:	4b8d      	ldr	r3, [pc, #564]	; (8001020 <HAL_RCC_GetSysClockFreq+0x29c>)
 8000dea:	613b      	str	r3, [r7, #16]
       break;
 8000dec:	e111      	b.n	8001012 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000dee:	4b8d      	ldr	r3, [pc, #564]	; (8001024 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000df0:	613b      	str	r3, [r7, #16]
      break;
 8000df2:	e10e      	b.n	8001012 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000df4:	4b89      	ldr	r3, [pc, #548]	; (800101c <HAL_RCC_GetSysClockFreq+0x298>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000dfc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000dfe:	4b87      	ldr	r3, [pc, #540]	; (800101c <HAL_RCC_GetSysClockFreq+0x298>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d023      	beq.n	8000e52 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e0a:	4b84      	ldr	r3, [pc, #528]	; (800101c <HAL_RCC_GetSysClockFreq+0x298>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	099b      	lsrs	r3, r3, #6
 8000e10:	f04f 0400 	mov.w	r4, #0
 8000e14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	ea03 0501 	and.w	r5, r3, r1
 8000e20:	ea04 0602 	and.w	r6, r4, r2
 8000e24:	4a7f      	ldr	r2, [pc, #508]	; (8001024 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000e26:	fb02 f106 	mul.w	r1, r2, r6
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	fb02 f205 	mul.w	r2, r2, r5
 8000e30:	440a      	add	r2, r1
 8000e32:	497c      	ldr	r1, [pc, #496]	; (8001024 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000e34:	fba5 0101 	umull	r0, r1, r5, r1
 8000e38:	1853      	adds	r3, r2, r1
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f04f 0400 	mov.w	r4, #0
 8000e42:	461a      	mov	r2, r3
 8000e44:	4623      	mov	r3, r4
 8000e46:	f7ff f9dd 	bl	8000204 <__aeabi_uldivmod>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	460c      	mov	r4, r1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e049      	b.n	8000ee6 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e52:	4b72      	ldr	r3, [pc, #456]	; (800101c <HAL_RCC_GetSysClockFreq+0x298>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	099b      	lsrs	r3, r3, #6
 8000e58:	f04f 0400 	mov.w	r4, #0
 8000e5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	ea03 0501 	and.w	r5, r3, r1
 8000e68:	ea04 0602 	and.w	r6, r4, r2
 8000e6c:	4629      	mov	r1, r5
 8000e6e:	4632      	mov	r2, r6
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	f04f 0400 	mov.w	r4, #0
 8000e78:	0154      	lsls	r4, r2, #5
 8000e7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000e7e:	014b      	lsls	r3, r1, #5
 8000e80:	4619      	mov	r1, r3
 8000e82:	4622      	mov	r2, r4
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	eb62 0206 	sbc.w	r2, r2, r6
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	f04f 0400 	mov.w	r4, #0
 8000e92:	0194      	lsls	r4, r2, #6
 8000e94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000e98:	018b      	lsls	r3, r1, #6
 8000e9a:	1a5b      	subs	r3, r3, r1
 8000e9c:	eb64 0402 	sbc.w	r4, r4, r2
 8000ea0:	f04f 0100 	mov.w	r1, #0
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	00e2      	lsls	r2, r4, #3
 8000eaa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000eae:	00d9      	lsls	r1, r3, #3
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4614      	mov	r4, r2
 8000eb4:	195b      	adds	r3, r3, r5
 8000eb6:	eb44 0406 	adc.w	r4, r4, r6
 8000eba:	f04f 0100 	mov.w	r1, #0
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	02a2      	lsls	r2, r4, #10
 8000ec4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000ec8:	0299      	lsls	r1, r3, #10
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4614      	mov	r4, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f04f 0400 	mov.w	r4, #0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4623      	mov	r3, r4
 8000edc:	f7ff f992 	bl	8000204 <__aeabi_uldivmod>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	460c      	mov	r4, r1
 8000ee4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000ee6:	4b4d      	ldr	r3, [pc, #308]	; (800101c <HAL_RCC_GetSysClockFreq+0x298>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	0c1b      	lsrs	r3, r3, #16
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	613b      	str	r3, [r7, #16]
      break;
 8000f00:	e087      	b.n	8001012 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f02:	4b46      	ldr	r3, [pc, #280]	; (800101c <HAL_RCC_GetSysClockFreq+0x298>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f0a:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <HAL_RCC_GetSysClockFreq+0x298>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d023      	beq.n	8000f60 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f18:	4b40      	ldr	r3, [pc, #256]	; (800101c <HAL_RCC_GetSysClockFreq+0x298>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	099b      	lsrs	r3, r3, #6
 8000f1e:	f04f 0400 	mov.w	r4, #0
 8000f22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	ea03 0501 	and.w	r5, r3, r1
 8000f2e:	ea04 0602 	and.w	r6, r4, r2
 8000f32:	4a3c      	ldr	r2, [pc, #240]	; (8001024 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000f34:	fb02 f106 	mul.w	r1, r2, r6
 8000f38:	2200      	movs	r2, #0
 8000f3a:	fb02 f205 	mul.w	r2, r2, r5
 8000f3e:	440a      	add	r2, r1
 8000f40:	4938      	ldr	r1, [pc, #224]	; (8001024 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000f42:	fba5 0101 	umull	r0, r1, r5, r1
 8000f46:	1853      	adds	r3, r2, r1
 8000f48:	4619      	mov	r1, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f04f 0400 	mov.w	r4, #0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4623      	mov	r3, r4
 8000f54:	f7ff f956 	bl	8000204 <__aeabi_uldivmod>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	460c      	mov	r4, r1
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	e049      	b.n	8000ff4 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f60:	4b2e      	ldr	r3, [pc, #184]	; (800101c <HAL_RCC_GetSysClockFreq+0x298>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	099b      	lsrs	r3, r3, #6
 8000f66:	f04f 0400 	mov.w	r4, #0
 8000f6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	ea03 0501 	and.w	r5, r3, r1
 8000f76:	ea04 0602 	and.w	r6, r4, r2
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	4632      	mov	r2, r6
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	f04f 0400 	mov.w	r4, #0
 8000f86:	0154      	lsls	r4, r2, #5
 8000f88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f8c:	014b      	lsls	r3, r1, #5
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4622      	mov	r2, r4
 8000f92:	1b49      	subs	r1, r1, r5
 8000f94:	eb62 0206 	sbc.w	r2, r2, r6
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	f04f 0400 	mov.w	r4, #0
 8000fa0:	0194      	lsls	r4, r2, #6
 8000fa2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000fa6:	018b      	lsls	r3, r1, #6
 8000fa8:	1a5b      	subs	r3, r3, r1
 8000faa:	eb64 0402 	sbc.w	r4, r4, r2
 8000fae:	f04f 0100 	mov.w	r1, #0
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	00e2      	lsls	r2, r4, #3
 8000fb8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000fbc:	00d9      	lsls	r1, r3, #3
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4614      	mov	r4, r2
 8000fc2:	195b      	adds	r3, r3, r5
 8000fc4:	eb44 0406 	adc.w	r4, r4, r6
 8000fc8:	f04f 0100 	mov.w	r1, #0
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	02a2      	lsls	r2, r4, #10
 8000fd2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000fd6:	0299      	lsls	r1, r3, #10
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4614      	mov	r4, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	4621      	mov	r1, r4
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f04f 0400 	mov.w	r4, #0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4623      	mov	r3, r4
 8000fea:	f7ff f90b 	bl	8000204 <__aeabi_uldivmod>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	460c      	mov	r4, r1
 8000ff2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_RCC_GetSysClockFreq+0x298>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	0f1b      	lsrs	r3, r3, #28
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	fbb2 f3f3 	udiv	r3, r2, r3
 8001008:	613b      	str	r3, [r7, #16]
      break;
 800100a:	e002      	b.n	8001012 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_RCC_GetSysClockFreq+0x29c>)
 800100e:	613b      	str	r3, [r7, #16]
      break;
 8001010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001012:	693b      	ldr	r3, [r7, #16]
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	00f42400 	.word	0x00f42400
 8001024:	017d7840 	.word	0x017d7840

08001028 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 8083 	beq.w	8001148 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001042:	4b95      	ldr	r3, [pc, #596]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 030c 	and.w	r3, r3, #12
 800104a:	2b04      	cmp	r3, #4
 800104c:	d019      	beq.n	8001082 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800104e:	4b92      	ldr	r3, [pc, #584]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001056:	2b08      	cmp	r3, #8
 8001058:	d106      	bne.n	8001068 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800105a:	4b8f      	ldr	r3, [pc, #572]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001062:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001066:	d00c      	beq.n	8001082 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001068:	4b8b      	ldr	r3, [pc, #556]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001070:	2b0c      	cmp	r3, #12
 8001072:	d112      	bne.n	800109a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001074:	4b88      	ldr	r3, [pc, #544]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001080:	d10b      	bne.n	800109a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001082:	4b85      	ldr	r3, [pc, #532]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d05b      	beq.n	8001146 <HAL_RCC_OscConfig+0x11e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d157      	bne.n	8001146 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e216      	b.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a2:	d106      	bne.n	80010b2 <HAL_RCC_OscConfig+0x8a>
 80010a4:	4b7c      	ldr	r3, [pc, #496]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a7b      	ldr	r2, [pc, #492]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	e01d      	b.n	80010ee <HAL_RCC_OscConfig+0xc6>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ba:	d10c      	bne.n	80010d6 <HAL_RCC_OscConfig+0xae>
 80010bc:	4b76      	ldr	r3, [pc, #472]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a75      	ldr	r2, [pc, #468]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b73      	ldr	r3, [pc, #460]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a72      	ldr	r2, [pc, #456]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	e00b      	b.n	80010ee <HAL_RCC_OscConfig+0xc6>
 80010d6:	4b70      	ldr	r3, [pc, #448]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a6f      	ldr	r2, [pc, #444]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b6d      	ldr	r3, [pc, #436]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a6c      	ldr	r2, [pc, #432]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d013      	beq.n	800111e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f6:	f7ff fa6b 	bl	80005d0 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010fe:	f7ff fa67 	bl	80005d0 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b64      	cmp	r3, #100	; 0x64
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e1db      	b.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001110:	4b61      	ldr	r3, [pc, #388]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0xd6>
 800111c:	e014      	b.n	8001148 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111e:	f7ff fa57 	bl	80005d0 <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001126:	f7ff fa53 	bl	80005d0 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b64      	cmp	r3, #100	; 0x64
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e1c7      	b.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001138:	4b57      	ldr	r3, [pc, #348]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f0      	bne.n	8001126 <HAL_RCC_OscConfig+0xfe>
 8001144:	e000      	b.n	8001148 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001146:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d06f      	beq.n	8001234 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001154:	4b50      	ldr	r3, [pc, #320]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b00      	cmp	r3, #0
 800115e:	d017      	beq.n	8001190 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001160:	4b4d      	ldr	r3, [pc, #308]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001168:	2b08      	cmp	r3, #8
 800116a:	d105      	bne.n	8001178 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800116c:	4b4a      	ldr	r3, [pc, #296]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00b      	beq.n	8001190 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001178:	4b47      	ldr	r3, [pc, #284]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001180:	2b0c      	cmp	r3, #12
 8001182:	d11c      	bne.n	80011be <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001184:	4b44      	ldr	r3, [pc, #272]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d116      	bne.n	80011be <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001190:	4b41      	ldr	r3, [pc, #260]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <HAL_RCC_OscConfig+0x180>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d001      	beq.n	80011a8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e18f      	b.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a8:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4938      	ldr	r1, [pc, #224]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011bc:	e03a      	b.n	8001234 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d020      	beq.n	8001208 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c6:	4b35      	ldr	r3, [pc, #212]	; (800129c <HAL_RCC_OscConfig+0x274>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011cc:	f7ff fa00 	bl	80005d0 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff f9fc 	bl	80005d0 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e170      	b.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e6:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f2:	4b29      	ldr	r3, [pc, #164]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4925      	ldr	r1, [pc, #148]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]
 8001206:	e015      	b.n	8001234 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <HAL_RCC_OscConfig+0x274>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120e:	f7ff f9df 	bl	80005d0 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001216:	f7ff f9db 	bl	80005d0 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e14f      	b.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f0      	bne.n	8001216 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	d037      	beq.n	80012b0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d016      	beq.n	8001276 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_RCC_OscConfig+0x278>)
 800124a:	2201      	movs	r2, #1
 800124c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124e:	f7ff f9bf 	bl	80005d0 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001256:	f7ff f9bb 	bl	80005d0 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e12f      	b.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800126a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0x22e>
 8001274:	e01c      	b.n	80012b0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_RCC_OscConfig+0x278>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127c:	f7ff f9a8 	bl	80005d0 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001282:	e00f      	b.n	80012a4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001284:	f7ff f9a4 	bl	80005d0 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d908      	bls.n	80012a4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e118      	b.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	42470000 	.word	0x42470000
 80012a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a4:	4b8a      	ldr	r3, [pc, #552]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 80012a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1e9      	bne.n	8001284 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 8097 	beq.w	80013ec <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c2:	4b83      	ldr	r3, [pc, #524]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10f      	bne.n	80012ee <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b7f      	ldr	r3, [pc, #508]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a7e      	ldr	r2, [pc, #504]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b7c      	ldr	r3, [pc, #496]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012ea:	2301      	movs	r3, #1
 80012ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ee:	4b79      	ldr	r3, [pc, #484]	; (80014d4 <HAL_RCC_OscConfig+0x4ac>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d118      	bne.n	800132c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012fa:	4b76      	ldr	r3, [pc, #472]	; (80014d4 <HAL_RCC_OscConfig+0x4ac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a75      	ldr	r2, [pc, #468]	; (80014d4 <HAL_RCC_OscConfig+0x4ac>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001306:	f7ff f963 	bl	80005d0 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130e:	f7ff f95f 	bl	80005d0 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e0d3      	b.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001320:	4b6c      	ldr	r3, [pc, #432]	; (80014d4 <HAL_RCC_OscConfig+0x4ac>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d106      	bne.n	8001342 <HAL_RCC_OscConfig+0x31a>
 8001334:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 8001336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001338:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6713      	str	r3, [r2, #112]	; 0x70
 8001340:	e01c      	b.n	800137c <HAL_RCC_OscConfig+0x354>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b05      	cmp	r3, #5
 8001348:	d10c      	bne.n	8001364 <HAL_RCC_OscConfig+0x33c>
 800134a:	4b61      	ldr	r3, [pc, #388]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 800134c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134e:	4a60      	ldr	r2, [pc, #384]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	6713      	str	r3, [r2, #112]	; 0x70
 8001356:	4b5e      	ldr	r3, [pc, #376]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 8001358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135a:	4a5d      	ldr	r2, [pc, #372]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6713      	str	r3, [r2, #112]	; 0x70
 8001362:	e00b      	b.n	800137c <HAL_RCC_OscConfig+0x354>
 8001364:	4b5a      	ldr	r3, [pc, #360]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 8001366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001368:	4a59      	ldr	r2, [pc, #356]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 800136a:	f023 0301 	bic.w	r3, r3, #1
 800136e:	6713      	str	r3, [r2, #112]	; 0x70
 8001370:	4b57      	ldr	r3, [pc, #348]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 8001372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001374:	4a56      	ldr	r2, [pc, #344]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 8001376:	f023 0304 	bic.w	r3, r3, #4
 800137a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d015      	beq.n	80013b0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001384:	f7ff f924 	bl	80005d0 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138a:	e00a      	b.n	80013a2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800138c:	f7ff f920 	bl	80005d0 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	f241 3288 	movw	r2, #5000	; 0x1388
 800139a:	4293      	cmp	r3, r2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e092      	b.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a2:	4b4b      	ldr	r3, [pc, #300]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0ee      	beq.n	800138c <HAL_RCC_OscConfig+0x364>
 80013ae:	e014      	b.n	80013da <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b0:	f7ff f90e 	bl	80005d0 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b6:	e00a      	b.n	80013ce <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b8:	f7ff f90a 	bl	80005d0 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e07c      	b.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ce:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 80013d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1ee      	bne.n	80013b8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013da:	7dfb      	ldrb	r3, [r7, #23]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d105      	bne.n	80013ec <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e0:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	4a3a      	ldr	r2, [pc, #232]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 80013e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d068      	beq.n	80014c6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013f4:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d060      	beq.n	80014c2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d145      	bne.n	8001494 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001408:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <HAL_RCC_OscConfig+0x4b0>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff f8df 	bl	80005d0 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001416:	f7ff f8db 	bl	80005d0 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e04f      	b.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001428:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f0      	bne.n	8001416 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69da      	ldr	r2, [r3, #28]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	019b      	lsls	r3, r3, #6
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	085b      	lsrs	r3, r3, #1
 800144c:	3b01      	subs	r3, #1
 800144e:	041b      	lsls	r3, r3, #16
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001456:	061b      	lsls	r3, r3, #24
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	071b      	lsls	r3, r3, #28
 8001460:	491b      	ldr	r1, [pc, #108]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 8001462:	4313      	orrs	r3, r2
 8001464:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <HAL_RCC_OscConfig+0x4b0>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff f8b0 	bl	80005d0 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff f8ac 	bl	80005d0 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e020      	b.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x44c>
 8001492:	e018      	b.n	80014c6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_RCC_OscConfig+0x4b0>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149a:	f7ff f899 	bl	80005d0 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a2:	f7ff f895 	bl	80005d0 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e009      	b.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_RCC_OscConfig+0x4a8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f0      	bne.n	80014a2 <HAL_RCC_OscConfig+0x47a>
 80014c0:	e001      	b.n	80014c6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000
 80014d8:	42470060 	.word	0x42470060

080014dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e056      	b.n	800159c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d106      	bne.n	800150e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f001 f9f5 	bl	80028f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2202      	movs	r2, #2
 8001512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001524:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	ea42 0103 	orr.w	r1, r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	0c1b      	lsrs	r3, r3, #16
 800156c:	f003 0104 	and.w	r1, r3, #4
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	69da      	ldr	r2, [r3, #28]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800158a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	; 0x30
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80015b2:	2301      	movs	r3, #1
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_SPI_TransmitReceive+0x26>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e18a      	b.n	80018e0 <HAL_SPI_TransmitReceive+0x33c>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80015d2:	f7fe fffd 	bl	80005d0 <HAL_GetTick>
 80015d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80015de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80015ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d00f      	beq.n	8001614 <HAL_SPI_TransmitReceive+0x70>
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015fa:	d107      	bne.n	800160c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d103      	bne.n	800160c <HAL_SPI_TransmitReceive+0x68>
 8001604:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001608:	2b04      	cmp	r3, #4
 800160a:	d003      	beq.n	8001614 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800160c:	2302      	movs	r3, #2
 800160e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001612:	e15b      	b.n	80018cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_SPI_TransmitReceive+0x82>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <HAL_SPI_TransmitReceive+0x82>
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d103      	bne.n	800162e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800162c:	e14e      	b.n	80018cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b04      	cmp	r3, #4
 8001638:	d003      	beq.n	8001642 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2205      	movs	r2, #5
 800163e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	887a      	ldrh	r2, [r7, #2]
 8001652:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	887a      	ldrh	r2, [r7, #2]
 800166a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001682:	2b40      	cmp	r3, #64	; 0x40
 8001684:	d007      	beq.n	8001696 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800169e:	d178      	bne.n	8001792 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <HAL_SPI_TransmitReceive+0x10a>
 80016a8:	8b7b      	ldrh	r3, [r7, #26]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d166      	bne.n	800177c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	881a      	ldrh	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	1c9a      	adds	r2, r3, #2
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	3b01      	subs	r3, #1
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80016d2:	e053      	b.n	800177c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d11b      	bne.n	800171a <HAL_SPI_TransmitReceive+0x176>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d016      	beq.n	800171a <HAL_SPI_TransmitReceive+0x176>
 80016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d113      	bne.n	800171a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	881a      	ldrh	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	1c9a      	adds	r2, r3, #2
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800170c:	b29b      	uxth	r3, r3
 800170e:	3b01      	subs	r3, #1
 8001710:	b29a      	uxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b01      	cmp	r3, #1
 8001726:	d119      	bne.n	800175c <HAL_SPI_TransmitReceive+0x1b8>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800172c:	b29b      	uxth	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d014      	beq.n	800175c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173c:	b292      	uxth	r2, r2
 800173e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001744:	1c9a      	adds	r2, r3, #2
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800174e:	b29b      	uxth	r3, r3
 8001750:	3b01      	subs	r3, #1
 8001752:	b29a      	uxth	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001758:	2301      	movs	r3, #1
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800175c:	f7fe ff38 	bl	80005d0 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001768:	429a      	cmp	r2, r3
 800176a:	d807      	bhi.n	800177c <HAL_SPI_TransmitReceive+0x1d8>
 800176c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800176e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001772:	d003      	beq.n	800177c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800177a:	e0a7      	b.n	80018cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001780:	b29b      	uxth	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1a6      	bne.n	80016d4 <HAL_SPI_TransmitReceive+0x130>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800178a:	b29b      	uxth	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1a1      	bne.n	80016d4 <HAL_SPI_TransmitReceive+0x130>
 8001790:	e07c      	b.n	800188c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <HAL_SPI_TransmitReceive+0x1fc>
 800179a:	8b7b      	ldrh	r3, [r7, #26]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d16b      	bne.n	8001878 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	330c      	adds	r3, #12
 80017aa:	7812      	ldrb	r2, [r2, #0]
 80017ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017bc:	b29b      	uxth	r3, r3
 80017be:	3b01      	subs	r3, #1
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017c6:	e057      	b.n	8001878 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d11c      	bne.n	8001810 <HAL_SPI_TransmitReceive+0x26c>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017da:	b29b      	uxth	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d017      	beq.n	8001810 <HAL_SPI_TransmitReceive+0x26c>
 80017e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d114      	bne.n	8001810 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	330c      	adds	r3, #12
 80017f0:	7812      	ldrb	r2, [r2, #0]
 80017f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001802:	b29b      	uxth	r3, r3
 8001804:	3b01      	subs	r3, #1
 8001806:	b29a      	uxth	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b01      	cmp	r3, #1
 800181c:	d119      	bne.n	8001852 <HAL_SPI_TransmitReceive+0x2ae>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001822:	b29b      	uxth	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d014      	beq.n	8001852 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001844:	b29b      	uxth	r3, r3
 8001846:	3b01      	subs	r3, #1
 8001848:	b29a      	uxth	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800184e:	2301      	movs	r3, #1
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001852:	f7fe febd 	bl	80005d0 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800185e:	429a      	cmp	r2, r3
 8001860:	d803      	bhi.n	800186a <HAL_SPI_TransmitReceive+0x2c6>
 8001862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d102      	bne.n	8001870 <HAL_SPI_TransmitReceive+0x2cc>
 800186a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800186c:	2b00      	cmp	r3, #0
 800186e:	d103      	bne.n	8001878 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001876:	e029      	b.n	80018cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800187c:	b29b      	uxth	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1a2      	bne.n	80017c8 <HAL_SPI_TransmitReceive+0x224>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001886:	b29b      	uxth	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d19d      	bne.n	80017c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800188c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 f893 	bl	80019bc <SPI_EndRxTxTransaction>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2220      	movs	r2, #32
 80018a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80018a8:	e010      	b.n	80018cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10b      	bne.n	80018ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	e000      	b.n	80018cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80018ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80018dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3730      	adds	r7, #48	; 0x30
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80018f8:	e04c      	b.n	8001994 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d048      	beq.n	8001994 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001902:	f7fe fe65 	bl	80005d0 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d902      	bls.n	8001918 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d13d      	bne.n	8001994 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001926:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001930:	d111      	bne.n	8001956 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800193a:	d004      	beq.n	8001946 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001944:	d107      	bne.n	8001956 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001954:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800195e:	d10f      	bne.n	8001980 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800197e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e00f      	b.n	80019b4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	4013      	ands	r3, r2
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	bf0c      	ite	eq
 80019a4:	2301      	moveq	r3, #1
 80019a6:	2300      	movne	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	461a      	mov	r2, r3
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d1a3      	bne.n	80018fa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <SPI_EndRxTxTransaction+0x7c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <SPI_EndRxTxTransaction+0x80>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0d5b      	lsrs	r3, r3, #21
 80019d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019d8:	fb02 f303 	mul.w	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019e6:	d112      	bne.n	8001a0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2200      	movs	r2, #0
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f7ff ff78 	bl	80018e8 <SPI_WaitFlagStateUntilTimeout>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d016      	beq.n	8001a2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a02:	f043 0220 	orr.w	r2, r3, #32
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e00f      	b.n	8001a2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00a      	beq.n	8001a2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a24:	2b80      	cmp	r3, #128	; 0x80
 8001a26:	d0f2      	beq.n	8001a0e <SPI_EndRxTxTransaction+0x52>
 8001a28:	e000      	b.n	8001a2c <SPI_EndRxTxTransaction+0x70>
        break;
 8001a2a:	bf00      	nop
  }

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	165e9f81 	.word	0x165e9f81

08001a40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e03f      	b.n	8001ad2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d106      	bne.n	8001a6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 ff8e 	bl	8002988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2224      	movs	r2, #36	; 0x24
 8001a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f90b 	bl	8001ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001aa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ab8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b088      	sub	sp, #32
 8001ade:	af02      	add	r7, sp, #8
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	f040 8083 	bne.w	8001c02 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <HAL_UART_Transmit+0x2e>
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e07b      	b.n	8001c04 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_UART_Transmit+0x40>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e074      	b.n	8001c04 <HAL_UART_Transmit+0x12a>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2221      	movs	r2, #33	; 0x21
 8001b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001b30:	f7fe fd4e 	bl	80005d0 <HAL_GetTick>
 8001b34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	88fa      	ldrh	r2, [r7, #6]
 8001b3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	88fa      	ldrh	r2, [r7, #6]
 8001b40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001b4a:	e042      	b.n	8001bd2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b62:	d122      	bne.n	8001baa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 f84c 	bl	8001c0c <UART_WaitOnFlagUntilTimeout>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e042      	b.n	8001c04 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b90:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d103      	bne.n	8001ba2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	e017      	b.n	8001bd2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	e013      	b.n	8001bd2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2180      	movs	r1, #128	; 0x80
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f829 	bl	8001c0c <UART_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e01f      	b.n	8001c04 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	60ba      	str	r2, [r7, #8]
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1b7      	bne.n	8001b4c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2200      	movs	r2, #0
 8001be4:	2140      	movs	r1, #64	; 0x40
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 f810 	bl	8001c0c <UART_WaitOnFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e006      	b.n	8001c04 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e000      	b.n	8001c04 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001c02:	2302      	movs	r3, #2
  }
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c1c:	e02c      	b.n	8001c78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d028      	beq.n	8001c78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8001c2c:	f7fe fcd0 	bl	80005d0 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d21d      	bcs.n	8001c78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e00f      	b.n	8001c98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	4013      	ands	r3, r2
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	bf0c      	ite	eq
 8001c88:	2301      	moveq	r3, #1
 8001c8a:	2300      	movne	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d0c3      	beq.n	8001c1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ca4:	b085      	sub	sp, #20
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001ce2:	f023 030c 	bic.w	r3, r3, #12
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	68f9      	ldr	r1, [r7, #12]
 8001cec:	430b      	orrs	r3, r1
 8001cee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699a      	ldr	r2, [r3, #24]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d0e:	f040 818b 	bne.w	8002028 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4ac1      	ldr	r2, [pc, #772]	; (800201c <UART_SetConfig+0x37c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d005      	beq.n	8001d28 <UART_SetConfig+0x88>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4abf      	ldr	r2, [pc, #764]	; (8002020 <UART_SetConfig+0x380>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	f040 80bd 	bne.w	8001ea2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d28:	f7ff f818 	bl	8000d5c <HAL_RCC_GetPCLK2Freq>
 8001d2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	461d      	mov	r5, r3
 8001d32:	f04f 0600 	mov.w	r6, #0
 8001d36:	46a8      	mov	r8, r5
 8001d38:	46b1      	mov	r9, r6
 8001d3a:	eb18 0308 	adds.w	r3, r8, r8
 8001d3e:	eb49 0409 	adc.w	r4, r9, r9
 8001d42:	4698      	mov	r8, r3
 8001d44:	46a1      	mov	r9, r4
 8001d46:	eb18 0805 	adds.w	r8, r8, r5
 8001d4a:	eb49 0906 	adc.w	r9, r9, r6
 8001d4e:	f04f 0100 	mov.w	r1, #0
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001d5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001d5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001d62:	4688      	mov	r8, r1
 8001d64:	4691      	mov	r9, r2
 8001d66:	eb18 0005 	adds.w	r0, r8, r5
 8001d6a:	eb49 0106 	adc.w	r1, r9, r6
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	461d      	mov	r5, r3
 8001d74:	f04f 0600 	mov.w	r6, #0
 8001d78:	196b      	adds	r3, r5, r5
 8001d7a:	eb46 0406 	adc.w	r4, r6, r6
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4623      	mov	r3, r4
 8001d82:	f7fe fa3f 	bl	8000204 <__aeabi_uldivmod>
 8001d86:	4603      	mov	r3, r0
 8001d88:	460c      	mov	r4, r1
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4ba5      	ldr	r3, [pc, #660]	; (8002024 <UART_SetConfig+0x384>)
 8001d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	461d      	mov	r5, r3
 8001d9c:	f04f 0600 	mov.w	r6, #0
 8001da0:	46a9      	mov	r9, r5
 8001da2:	46b2      	mov	sl, r6
 8001da4:	eb19 0309 	adds.w	r3, r9, r9
 8001da8:	eb4a 040a 	adc.w	r4, sl, sl
 8001dac:	4699      	mov	r9, r3
 8001dae:	46a2      	mov	sl, r4
 8001db0:	eb19 0905 	adds.w	r9, r9, r5
 8001db4:	eb4a 0a06 	adc.w	sl, sl, r6
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001dc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001dcc:	4689      	mov	r9, r1
 8001dce:	4692      	mov	sl, r2
 8001dd0:	eb19 0005 	adds.w	r0, r9, r5
 8001dd4:	eb4a 0106 	adc.w	r1, sl, r6
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	461d      	mov	r5, r3
 8001dde:	f04f 0600 	mov.w	r6, #0
 8001de2:	196b      	adds	r3, r5, r5
 8001de4:	eb46 0406 	adc.w	r4, r6, r6
 8001de8:	461a      	mov	r2, r3
 8001dea:	4623      	mov	r3, r4
 8001dec:	f7fe fa0a 	bl	8000204 <__aeabi_uldivmod>
 8001df0:	4603      	mov	r3, r0
 8001df2:	460c      	mov	r4, r1
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b8b      	ldr	r3, [pc, #556]	; (8002024 <UART_SetConfig+0x384>)
 8001df8:	fba3 1302 	umull	r1, r3, r3, r2
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	2164      	movs	r1, #100	; 0x64
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	3332      	adds	r3, #50	; 0x32
 8001e0a:	4a86      	ldr	r2, [pc, #536]	; (8002024 <UART_SetConfig+0x384>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e18:	4498      	add	r8, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	461d      	mov	r5, r3
 8001e1e:	f04f 0600 	mov.w	r6, #0
 8001e22:	46a9      	mov	r9, r5
 8001e24:	46b2      	mov	sl, r6
 8001e26:	eb19 0309 	adds.w	r3, r9, r9
 8001e2a:	eb4a 040a 	adc.w	r4, sl, sl
 8001e2e:	4699      	mov	r9, r3
 8001e30:	46a2      	mov	sl, r4
 8001e32:	eb19 0905 	adds.w	r9, r9, r5
 8001e36:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e3a:	f04f 0100 	mov.w	r1, #0
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e4e:	4689      	mov	r9, r1
 8001e50:	4692      	mov	sl, r2
 8001e52:	eb19 0005 	adds.w	r0, r9, r5
 8001e56:	eb4a 0106 	adc.w	r1, sl, r6
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	461d      	mov	r5, r3
 8001e60:	f04f 0600 	mov.w	r6, #0
 8001e64:	196b      	adds	r3, r5, r5
 8001e66:	eb46 0406 	adc.w	r4, r6, r6
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4623      	mov	r3, r4
 8001e6e:	f7fe f9c9 	bl	8000204 <__aeabi_uldivmod>
 8001e72:	4603      	mov	r3, r0
 8001e74:	460c      	mov	r4, r1
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <UART_SetConfig+0x384>)
 8001e7a:	fba3 1302 	umull	r1, r3, r3, r2
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	2164      	movs	r1, #100	; 0x64
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	3332      	adds	r3, #50	; 0x32
 8001e8c:	4a65      	ldr	r2, [pc, #404]	; (8002024 <UART_SetConfig+0x384>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	f003 0207 	and.w	r2, r3, #7
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4442      	add	r2, r8
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	e26f      	b.n	8002382 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ea2:	f7fe ff47 	bl	8000d34 <HAL_RCC_GetPCLK1Freq>
 8001ea6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	461d      	mov	r5, r3
 8001eac:	f04f 0600 	mov.w	r6, #0
 8001eb0:	46a8      	mov	r8, r5
 8001eb2:	46b1      	mov	r9, r6
 8001eb4:	eb18 0308 	adds.w	r3, r8, r8
 8001eb8:	eb49 0409 	adc.w	r4, r9, r9
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	46a1      	mov	r9, r4
 8001ec0:	eb18 0805 	adds.w	r8, r8, r5
 8001ec4:	eb49 0906 	adc.w	r9, r9, r6
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001ed4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001ed8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001edc:	4688      	mov	r8, r1
 8001ede:	4691      	mov	r9, r2
 8001ee0:	eb18 0005 	adds.w	r0, r8, r5
 8001ee4:	eb49 0106 	adc.w	r1, r9, r6
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	461d      	mov	r5, r3
 8001eee:	f04f 0600 	mov.w	r6, #0
 8001ef2:	196b      	adds	r3, r5, r5
 8001ef4:	eb46 0406 	adc.w	r4, r6, r6
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4623      	mov	r3, r4
 8001efc:	f7fe f982 	bl	8000204 <__aeabi_uldivmod>
 8001f00:	4603      	mov	r3, r0
 8001f02:	460c      	mov	r4, r1
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b47      	ldr	r3, [pc, #284]	; (8002024 <UART_SetConfig+0x384>)
 8001f08:	fba3 2302 	umull	r2, r3, r3, r2
 8001f0c:	095b      	lsrs	r3, r3, #5
 8001f0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	461d      	mov	r5, r3
 8001f16:	f04f 0600 	mov.w	r6, #0
 8001f1a:	46a9      	mov	r9, r5
 8001f1c:	46b2      	mov	sl, r6
 8001f1e:	eb19 0309 	adds.w	r3, r9, r9
 8001f22:	eb4a 040a 	adc.w	r4, sl, sl
 8001f26:	4699      	mov	r9, r3
 8001f28:	46a2      	mov	sl, r4
 8001f2a:	eb19 0905 	adds.w	r9, r9, r5
 8001f2e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f32:	f04f 0100 	mov.w	r1, #0
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f46:	4689      	mov	r9, r1
 8001f48:	4692      	mov	sl, r2
 8001f4a:	eb19 0005 	adds.w	r0, r9, r5
 8001f4e:	eb4a 0106 	adc.w	r1, sl, r6
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	461d      	mov	r5, r3
 8001f58:	f04f 0600 	mov.w	r6, #0
 8001f5c:	196b      	adds	r3, r5, r5
 8001f5e:	eb46 0406 	adc.w	r4, r6, r6
 8001f62:	461a      	mov	r2, r3
 8001f64:	4623      	mov	r3, r4
 8001f66:	f7fe f94d 	bl	8000204 <__aeabi_uldivmod>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	460c      	mov	r4, r1
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <UART_SetConfig+0x384>)
 8001f72:	fba3 1302 	umull	r1, r3, r3, r2
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	2164      	movs	r1, #100	; 0x64
 8001f7a:	fb01 f303 	mul.w	r3, r1, r3
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	3332      	adds	r3, #50	; 0x32
 8001f84:	4a27      	ldr	r2, [pc, #156]	; (8002024 <UART_SetConfig+0x384>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f92:	4498      	add	r8, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	461d      	mov	r5, r3
 8001f98:	f04f 0600 	mov.w	r6, #0
 8001f9c:	46a9      	mov	r9, r5
 8001f9e:	46b2      	mov	sl, r6
 8001fa0:	eb19 0309 	adds.w	r3, r9, r9
 8001fa4:	eb4a 040a 	adc.w	r4, sl, sl
 8001fa8:	4699      	mov	r9, r3
 8001faa:	46a2      	mov	sl, r4
 8001fac:	eb19 0905 	adds.w	r9, r9, r5
 8001fb0:	eb4a 0a06 	adc.w	sl, sl, r6
 8001fb4:	f04f 0100 	mov.w	r1, #0
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001fc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001fc8:	4689      	mov	r9, r1
 8001fca:	4692      	mov	sl, r2
 8001fcc:	eb19 0005 	adds.w	r0, r9, r5
 8001fd0:	eb4a 0106 	adc.w	r1, sl, r6
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	461d      	mov	r5, r3
 8001fda:	f04f 0600 	mov.w	r6, #0
 8001fde:	196b      	adds	r3, r5, r5
 8001fe0:	eb46 0406 	adc.w	r4, r6, r6
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4623      	mov	r3, r4
 8001fe8:	f7fe f90c 	bl	8000204 <__aeabi_uldivmod>
 8001fec:	4603      	mov	r3, r0
 8001fee:	460c      	mov	r4, r1
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <UART_SetConfig+0x384>)
 8001ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	2164      	movs	r1, #100	; 0x64
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	3332      	adds	r3, #50	; 0x32
 8002006:	4a07      	ldr	r2, [pc, #28]	; (8002024 <UART_SetConfig+0x384>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	f003 0207 	and.w	r2, r3, #7
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4442      	add	r2, r8
 8002018:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800201a:	e1b2      	b.n	8002382 <UART_SetConfig+0x6e2>
 800201c:	40011000 	.word	0x40011000
 8002020:	40011400 	.word	0x40011400
 8002024:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4ad7      	ldr	r2, [pc, #860]	; (800238c <UART_SetConfig+0x6ec>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d005      	beq.n	800203e <UART_SetConfig+0x39e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4ad6      	ldr	r2, [pc, #856]	; (8002390 <UART_SetConfig+0x6f0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	f040 80d1 	bne.w	80021e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800203e:	f7fe fe8d 	bl	8000d5c <HAL_RCC_GetPCLK2Freq>
 8002042:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	469a      	mov	sl, r3
 8002048:	f04f 0b00 	mov.w	fp, #0
 800204c:	46d0      	mov	r8, sl
 800204e:	46d9      	mov	r9, fp
 8002050:	eb18 0308 	adds.w	r3, r8, r8
 8002054:	eb49 0409 	adc.w	r4, r9, r9
 8002058:	4698      	mov	r8, r3
 800205a:	46a1      	mov	r9, r4
 800205c:	eb18 080a 	adds.w	r8, r8, sl
 8002060:	eb49 090b 	adc.w	r9, r9, fp
 8002064:	f04f 0100 	mov.w	r1, #0
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002070:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002074:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002078:	4688      	mov	r8, r1
 800207a:	4691      	mov	r9, r2
 800207c:	eb1a 0508 	adds.w	r5, sl, r8
 8002080:	eb4b 0609 	adc.w	r6, fp, r9
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4619      	mov	r1, r3
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	f04f 0400 	mov.w	r4, #0
 8002096:	0094      	lsls	r4, r2, #2
 8002098:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800209c:	008b      	lsls	r3, r1, #2
 800209e:	461a      	mov	r2, r3
 80020a0:	4623      	mov	r3, r4
 80020a2:	4628      	mov	r0, r5
 80020a4:	4631      	mov	r1, r6
 80020a6:	f7fe f8ad 	bl	8000204 <__aeabi_uldivmod>
 80020aa:	4603      	mov	r3, r0
 80020ac:	460c      	mov	r4, r1
 80020ae:	461a      	mov	r2, r3
 80020b0:	4bb8      	ldr	r3, [pc, #736]	; (8002394 <UART_SetConfig+0x6f4>)
 80020b2:	fba3 2302 	umull	r2, r3, r3, r2
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	469b      	mov	fp, r3
 80020c0:	f04f 0c00 	mov.w	ip, #0
 80020c4:	46d9      	mov	r9, fp
 80020c6:	46e2      	mov	sl, ip
 80020c8:	eb19 0309 	adds.w	r3, r9, r9
 80020cc:	eb4a 040a 	adc.w	r4, sl, sl
 80020d0:	4699      	mov	r9, r3
 80020d2:	46a2      	mov	sl, r4
 80020d4:	eb19 090b 	adds.w	r9, r9, fp
 80020d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80020dc:	f04f 0100 	mov.w	r1, #0
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020f0:	4689      	mov	r9, r1
 80020f2:	4692      	mov	sl, r2
 80020f4:	eb1b 0509 	adds.w	r5, fp, r9
 80020f8:	eb4c 060a 	adc.w	r6, ip, sl
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4619      	mov	r1, r3
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	f04f 0400 	mov.w	r4, #0
 800210e:	0094      	lsls	r4, r2, #2
 8002110:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002114:	008b      	lsls	r3, r1, #2
 8002116:	461a      	mov	r2, r3
 8002118:	4623      	mov	r3, r4
 800211a:	4628      	mov	r0, r5
 800211c:	4631      	mov	r1, r6
 800211e:	f7fe f871 	bl	8000204 <__aeabi_uldivmod>
 8002122:	4603      	mov	r3, r0
 8002124:	460c      	mov	r4, r1
 8002126:	461a      	mov	r2, r3
 8002128:	4b9a      	ldr	r3, [pc, #616]	; (8002394 <UART_SetConfig+0x6f4>)
 800212a:	fba3 1302 	umull	r1, r3, r3, r2
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2164      	movs	r1, #100	; 0x64
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	3332      	adds	r3, #50	; 0x32
 800213c:	4a95      	ldr	r2, [pc, #596]	; (8002394 <UART_SetConfig+0x6f4>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002148:	4498      	add	r8, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	469b      	mov	fp, r3
 800214e:	f04f 0c00 	mov.w	ip, #0
 8002152:	46d9      	mov	r9, fp
 8002154:	46e2      	mov	sl, ip
 8002156:	eb19 0309 	adds.w	r3, r9, r9
 800215a:	eb4a 040a 	adc.w	r4, sl, sl
 800215e:	4699      	mov	r9, r3
 8002160:	46a2      	mov	sl, r4
 8002162:	eb19 090b 	adds.w	r9, r9, fp
 8002166:	eb4a 0a0c 	adc.w	sl, sl, ip
 800216a:	f04f 0100 	mov.w	r1, #0
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002176:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800217a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800217e:	4689      	mov	r9, r1
 8002180:	4692      	mov	sl, r2
 8002182:	eb1b 0509 	adds.w	r5, fp, r9
 8002186:	eb4c 060a 	adc.w	r6, ip, sl
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4619      	mov	r1, r3
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	f04f 0400 	mov.w	r4, #0
 800219c:	0094      	lsls	r4, r2, #2
 800219e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021a2:	008b      	lsls	r3, r1, #2
 80021a4:	461a      	mov	r2, r3
 80021a6:	4623      	mov	r3, r4
 80021a8:	4628      	mov	r0, r5
 80021aa:	4631      	mov	r1, r6
 80021ac:	f7fe f82a 	bl	8000204 <__aeabi_uldivmod>
 80021b0:	4603      	mov	r3, r0
 80021b2:	460c      	mov	r4, r1
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b77      	ldr	r3, [pc, #476]	; (8002394 <UART_SetConfig+0x6f4>)
 80021b8:	fba3 1302 	umull	r1, r3, r3, r2
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	2164      	movs	r1, #100	; 0x64
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	3332      	adds	r3, #50	; 0x32
 80021ca:	4a72      	ldr	r2, [pc, #456]	; (8002394 <UART_SetConfig+0x6f4>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	095b      	lsrs	r3, r3, #5
 80021d2:	f003 020f 	and.w	r2, r3, #15
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4442      	add	r2, r8
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	e0d0      	b.n	8002382 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80021e0:	f7fe fda8 	bl	8000d34 <HAL_RCC_GetPCLK1Freq>
 80021e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	469a      	mov	sl, r3
 80021ea:	f04f 0b00 	mov.w	fp, #0
 80021ee:	46d0      	mov	r8, sl
 80021f0:	46d9      	mov	r9, fp
 80021f2:	eb18 0308 	adds.w	r3, r8, r8
 80021f6:	eb49 0409 	adc.w	r4, r9, r9
 80021fa:	4698      	mov	r8, r3
 80021fc:	46a1      	mov	r9, r4
 80021fe:	eb18 080a 	adds.w	r8, r8, sl
 8002202:	eb49 090b 	adc.w	r9, r9, fp
 8002206:	f04f 0100 	mov.w	r1, #0
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002212:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002216:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800221a:	4688      	mov	r8, r1
 800221c:	4691      	mov	r9, r2
 800221e:	eb1a 0508 	adds.w	r5, sl, r8
 8002222:	eb4b 0609 	adc.w	r6, fp, r9
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4619      	mov	r1, r3
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	f04f 0400 	mov.w	r4, #0
 8002238:	0094      	lsls	r4, r2, #2
 800223a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800223e:	008b      	lsls	r3, r1, #2
 8002240:	461a      	mov	r2, r3
 8002242:	4623      	mov	r3, r4
 8002244:	4628      	mov	r0, r5
 8002246:	4631      	mov	r1, r6
 8002248:	f7fd ffdc 	bl	8000204 <__aeabi_uldivmod>
 800224c:	4603      	mov	r3, r0
 800224e:	460c      	mov	r4, r1
 8002250:	461a      	mov	r2, r3
 8002252:	4b50      	ldr	r3, [pc, #320]	; (8002394 <UART_SetConfig+0x6f4>)
 8002254:	fba3 2302 	umull	r2, r3, r3, r2
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	469b      	mov	fp, r3
 8002262:	f04f 0c00 	mov.w	ip, #0
 8002266:	46d9      	mov	r9, fp
 8002268:	46e2      	mov	sl, ip
 800226a:	eb19 0309 	adds.w	r3, r9, r9
 800226e:	eb4a 040a 	adc.w	r4, sl, sl
 8002272:	4699      	mov	r9, r3
 8002274:	46a2      	mov	sl, r4
 8002276:	eb19 090b 	adds.w	r9, r9, fp
 800227a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800227e:	f04f 0100 	mov.w	r1, #0
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800228a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800228e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002292:	4689      	mov	r9, r1
 8002294:	4692      	mov	sl, r2
 8002296:	eb1b 0509 	adds.w	r5, fp, r9
 800229a:	eb4c 060a 	adc.w	r6, ip, sl
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4619      	mov	r1, r3
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	f04f 0400 	mov.w	r4, #0
 80022b0:	0094      	lsls	r4, r2, #2
 80022b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022b6:	008b      	lsls	r3, r1, #2
 80022b8:	461a      	mov	r2, r3
 80022ba:	4623      	mov	r3, r4
 80022bc:	4628      	mov	r0, r5
 80022be:	4631      	mov	r1, r6
 80022c0:	f7fd ffa0 	bl	8000204 <__aeabi_uldivmod>
 80022c4:	4603      	mov	r3, r0
 80022c6:	460c      	mov	r4, r1
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b32      	ldr	r3, [pc, #200]	; (8002394 <UART_SetConfig+0x6f4>)
 80022cc:	fba3 1302 	umull	r1, r3, r3, r2
 80022d0:	095b      	lsrs	r3, r3, #5
 80022d2:	2164      	movs	r1, #100	; 0x64
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	3332      	adds	r3, #50	; 0x32
 80022de:	4a2d      	ldr	r2, [pc, #180]	; (8002394 <UART_SetConfig+0x6f4>)
 80022e0:	fba2 2303 	umull	r2, r3, r2, r3
 80022e4:	095b      	lsrs	r3, r3, #5
 80022e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ea:	4498      	add	r8, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	469b      	mov	fp, r3
 80022f0:	f04f 0c00 	mov.w	ip, #0
 80022f4:	46d9      	mov	r9, fp
 80022f6:	46e2      	mov	sl, ip
 80022f8:	eb19 0309 	adds.w	r3, r9, r9
 80022fc:	eb4a 040a 	adc.w	r4, sl, sl
 8002300:	4699      	mov	r9, r3
 8002302:	46a2      	mov	sl, r4
 8002304:	eb19 090b 	adds.w	r9, r9, fp
 8002308:	eb4a 0a0c 	adc.w	sl, sl, ip
 800230c:	f04f 0100 	mov.w	r1, #0
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002318:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800231c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002320:	4689      	mov	r9, r1
 8002322:	4692      	mov	sl, r2
 8002324:	eb1b 0509 	adds.w	r5, fp, r9
 8002328:	eb4c 060a 	adc.w	r6, ip, sl
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4619      	mov	r1, r3
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	f04f 0400 	mov.w	r4, #0
 800233e:	0094      	lsls	r4, r2, #2
 8002340:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002344:	008b      	lsls	r3, r1, #2
 8002346:	461a      	mov	r2, r3
 8002348:	4623      	mov	r3, r4
 800234a:	4628      	mov	r0, r5
 800234c:	4631      	mov	r1, r6
 800234e:	f7fd ff59 	bl	8000204 <__aeabi_uldivmod>
 8002352:	4603      	mov	r3, r0
 8002354:	460c      	mov	r4, r1
 8002356:	461a      	mov	r2, r3
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <UART_SetConfig+0x6f4>)
 800235a:	fba3 1302 	umull	r1, r3, r3, r2
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	2164      	movs	r1, #100	; 0x64
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	3332      	adds	r3, #50	; 0x32
 800236c:	4a09      	ldr	r2, [pc, #36]	; (8002394 <UART_SetConfig+0x6f4>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	f003 020f 	and.w	r2, r3, #15
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4442      	add	r2, r8
 800237e:	609a      	str	r2, [r3, #8]
}
 8002380:	e7ff      	b.n	8002382 <UART_SetConfig+0x6e2>
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800238c:	40011000 	.word	0x40011000
 8002390:	40011400 	.word	0x40011400
 8002394:	51eb851f 	.word	0x51eb851f

08002398 <speed.7711>:
  char PC_txdata[256]={'なんでもいいからおくって\0'};
  short pos_data;
  int count=0;

  	  void speed(unsigned char id,short speed)
      {
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	460a      	mov	r2, r1
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	4613      	mov	r3, r2
 80023a6:	80bb      	strh	r3, [r7, #4]
 80023a8:	4664      	mov	r4, ip
 80023aa:	f8c7 c000 	str.w	ip, [r7]
          unsigned char speed_l = (unsigned char)(speed)&0x00FF;
 80023ae:	88bb      	ldrh	r3, [r7, #4]
 80023b0:	73fb      	strb	r3, [r7, #15]
          unsigned char speed_h = (unsigned char)(speed>>8)&0x00FF;
 80023b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80023b6:	121b      	asrs	r3, r3, #8
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	73bb      	strb	r3, [r7, #14]
          unsigned char sum = (0x09+0x04+0x00+id+speed_l+speed_h+0x30+0x01)&0x00FF;
 80023bc:	79fa      	ldrb	r2, [r7, #7]
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	4413      	add	r3, r2
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	7bbb      	ldrb	r3, [r7, #14]
 80023c6:	4413      	add	r3, r2
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	333e      	adds	r3, #62	; 0x3e
 80023cc:	737b      	strb	r3, [r7, #13]

          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80023ce:	2201      	movs	r2, #1
 80023d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d4:	4814      	ldr	r0, [pc, #80]	; (8002428 <speed.7711+0x90>)
 80023d6:	f7fe fba1 	bl	8000b1c <HAL_GPIO_WritePin>

          txdata[0]=0x09;//SIZE
 80023da:	2309      	movs	r3, #9
 80023dc:	7023      	strb	r3, [r4, #0]
          txdata[1]=0x04;//COMMAND
 80023de:	2304      	movs	r3, #4
 80023e0:	7063      	strb	r3, [r4, #1]
          txdata[2]=0x00;//OPTION
 80023e2:	2300      	movs	r3, #0
 80023e4:	70a3      	strb	r3, [r4, #2]
          txdata[3]=id;//ID
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	70e3      	strb	r3, [r4, #3]
          txdata[4]=speed_l;//SPEED_LOWBYTE
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	7123      	strb	r3, [r4, #4]
          txdata[5]=speed_h;//SPEED_HIGHBYTE
 80023ee:	7bbb      	ldrb	r3, [r7, #14]
 80023f0:	7163      	strb	r3, [r4, #5]
          txdata[6]=0x30;//ADRESS(SPEED 0x03)
 80023f2:	2330      	movs	r3, #48	; 0x30
 80023f4:	71a3      	strb	r3, [r4, #6]
          txdata[7]=0x01;//COUNT
 80023f6:	2301      	movs	r3, #1
 80023f8:	71e3      	strb	r3, [r4, #7]
          txdata[8]=sum;//SUM
 80023fa:	7b7b      	ldrb	r3, [r7, #13]
 80023fc:	7223      	strb	r3, [r4, #8]
          HAL_UART_Transmit(&huart6, txdata, 9, 0xFFFF);
 80023fe:	4621      	mov	r1, r4
 8002400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002404:	2209      	movs	r2, #9
 8002406:	4809      	ldr	r0, [pc, #36]	; (800242c <speed.7711+0x94>)
 8002408:	f7ff fb67 	bl	8001ada <HAL_UART_Transmit>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <speed.7711+0x90>)
 8002414:	f7fe fb82 	bl	8000b1c <HAL_GPIO_WritePin>
          HAL_Delay(1);
 8002418:	2001      	movs	r0, #1
 800241a:	f7fe f8e5 	bl	80005e8 <HAL_Delay>
      }
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bd90      	pop	{r4, r7, pc}
 8002426:	bf00      	nop
 8002428:	40020000 	.word	0x40020000
 800242c:	2000002c 	.word	0x2000002c

08002430 <main>:
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b0d8      	sub	sp, #352	; 0x160
 8002434:	af02      	add	r7, sp, #8
int main(void)
 8002436:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800243a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  HAL_Init();
 800243e:	f7fe f861 	bl	8000504 <HAL_Init>
  SystemClock_Config();
 8002442:	f000 f8ff 	bl	8002644 <SystemClock_Config>
  MX_GPIO_Init();
 8002446:	f000 f9e3 	bl	8002810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800244a:	f000 f98d 	bl	8002768 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800244e:	f000 f9b5 	bl	80027bc <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8002452:	f000 f957 	bl	8002704 <MX_SPI1_Init>
  char rxbuf[]="waiting\r\n";
 8002456:	4a55      	ldr	r2, [pc, #340]	; (80025ac <main+0x17c>)
 8002458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800245c:	ca07      	ldmia	r2, {r0, r1, r2}
 800245e:	c303      	stmia	r3!, {r0, r1}
 8002460:	801a      	strh	r2, [r3, #0]
  uint8_t txdata[20] = {0};
 8002462:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
 8002470:	611a      	str	r2, [r3, #16]
  unsigned char rxdata[9] = {0};
 8002472:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	721a      	strb	r2, [r3, #8]
  uint8_t aRxBuffer[10]={0};
 800247e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	811a      	strh	r2, [r3, #8]
  char PC_txdata[256]={'なんでもいいからおくって\0'};
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	4618      	mov	r0, r3
 800248e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002492:	461a      	mov	r2, r3
 8002494:	2100      	movs	r1, #0
 8002496:	f000 fb87 	bl	8002ba8 <memset>
  int count=0;
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
         HAL_Delay(1);

      }

	  write(0xFF,0x02,0x28);
 80024a0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80024a4:	469c      	mov	ip, r3
 80024a6:	2228      	movs	r2, #40	; 0x28
 80024a8:	2102      	movs	r1, #2
 80024aa:	20ff      	movs	r0, #255	; 0xff
 80024ac:	f000 f886 	bl	80025bc <write.7719>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count++;
 80024b0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80024b4:	3301      	adds	r3, #1
 80024b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	  rxdata[0]=0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
	  while(1){
		  HAL_UART_Transmit(&huart2, (uint8_t*)rxbuf,sizeof(rxbuf),0xFFFF);
 80024c0:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80024c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024c8:	220a      	movs	r2, #10
 80024ca:	4839      	ldr	r0, [pc, #228]	; (80025b0 <main+0x180>)
 80024cc:	f7ff fb05 	bl	8001ada <HAL_UART_Transmit>
		 // HAL_UART_Receive(&huart2,rxdata,10,0x100);
		  HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)PC_txdata,(uint8_t*)rxdata,1,0xF);
 80024d0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024d4:	1d39      	adds	r1, r7, #4
 80024d6:	230f      	movs	r3, #15
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2301      	movs	r3, #1
 80024dc:	4835      	ldr	r0, [pc, #212]	; (80025b4 <main+0x184>)
 80024de:	f7ff f861 	bl	80015a4 <HAL_SPI_TransmitReceive>

		  if(rxdata[0]!=0){
 80024e2:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d100      	bne.n	80024ec <main+0xbc>
		  HAL_UART_Transmit(&huart2, (uint8_t*)rxbuf,sizeof(rxbuf),0xFFFF);
 80024ea:	e7e9      	b.n	80024c0 <main+0x90>
			  break;
 80024ec:	bf00      	nop
		  }
	  }
	  rxdata[0]=0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110

	  write(0xFF,0x00,0x28);
 80024f4:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80024f8:	469c      	mov	ip, r3
 80024fa:	2228      	movs	r2, #40	; 0x28
 80024fc:	2100      	movs	r1, #0
 80024fe:	20ff      	movs	r0, #255	; 0xff
 8002500:	f000 f85c 	bl	80025bc <write.7719>
	  write(0xFF,0x01,0x29);
 8002504:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002508:	469c      	mov	ip, r3
 800250a:	2229      	movs	r2, #41	; 0x29
 800250c:	2101      	movs	r1, #1
 800250e:	20ff      	movs	r0, #255	; 0xff
 8002510:	f000 f854 	bl	80025bc <write.7719>
	  HAL_Delay(1000);
 8002514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002518:	f7fe f866 	bl	80005e8 <HAL_Delay>
	  rxdata[0]=0;
 800251c:	2300      	movs	r3, #0
 800251e:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
	  while(1){
		  HAL_UART_Transmit(&huart2, (uint8_t*)rxbuf,sizeof(rxbuf),0xFFFF);
 8002522:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8002526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800252a:	220a      	movs	r2, #10
 800252c:	4820      	ldr	r0, [pc, #128]	; (80025b0 <main+0x180>)
 800252e:	f7ff fad4 	bl	8001ada <HAL_UART_Transmit>
		 // HAL_UART_Receive(&huart2,rxdata,10,0x100);
		  HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)PC_txdata,(uint8_t*)rxdata,1,0xF);
 8002532:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002536:	1d39      	adds	r1, r7, #4
 8002538:	230f      	movs	r3, #15
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2301      	movs	r3, #1
 800253e:	481d      	ldr	r0, [pc, #116]	; (80025b4 <main+0x184>)
 8002540:	f7ff f830 	bl	80015a4 <HAL_SPI_TransmitReceive>
		  if(rxdata[0]!=0){
 8002544:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8002548:	2b00      	cmp	r3, #0
 800254a:	d100      	bne.n	800254e <main+0x11e>
		  HAL_UART_Transmit(&huart2, (uint8_t*)rxbuf,sizeof(rxbuf),0xFFFF);
 800254c:	e7e9      	b.n	8002522 <main+0xf2>
			  break;
 800254e:	bf00      	nop
		  }
	  }
	  rxdata[0]=0;
 8002550:	2300      	movs	r3, #0
 8002552:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110

//roll movement
	  write(0x02,0x04,0x28);
 8002556:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800255a:	469c      	mov	ip, r3
 800255c:	2228      	movs	r2, #40	; 0x28
 800255e:	2104      	movs	r1, #4
 8002560:	2002      	movs	r0, #2
 8002562:	f000 f82b 	bl	80025bc <write.7719>
	  write(0x08,0x04,0x28);
 8002566:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800256a:	469c      	mov	ip, r3
 800256c:	2228      	movs	r2, #40	; 0x28
 800256e:	2104      	movs	r1, #4
 8002570:	2008      	movs	r0, #8
 8002572:	f000 f823 	bl	80025bc <write.7719>
	  HAL_Delay(1000);
 8002576:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800257a:	f7fe f835 	bl	80005e8 <HAL_Delay>
	  speed(8,5000);
 800257e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002582:	469c      	mov	ip, r3
 8002584:	f241 3188 	movw	r1, #5000	; 0x1388
 8002588:	2008      	movs	r0, #8
 800258a:	f7ff ff05 	bl	8002398 <speed.7711>
	  HAL_Delay(1);
 800258e:	2001      	movs	r0, #1
 8002590:	f7fe f82a 	bl	80005e8 <HAL_Delay>
	  speed(2,-5000);
 8002594:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002598:	469c      	mov	ip, r3
 800259a:	4907      	ldr	r1, [pc, #28]	; (80025b8 <main+0x188>)
 800259c:	2002      	movs	r0, #2
 800259e:	f7ff fefb 	bl	8002398 <speed.7711>
	  HAL_Delay(1000);
 80025a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025a6:	f7fe f81f 	bl	80005e8 <HAL_Delay>
	  count++;
 80025aa:	e781      	b.n	80024b0 <main+0x80>
 80025ac:	08002bd0 	.word	0x08002bd0
 80025b0:	200000c4 	.word	0x200000c4
 80025b4:	2000006c 	.word	0x2000006c
 80025b8:	ffffec78 	.word	0xffffec78

080025bc <write.7719>:
      {
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
 80025c6:	460b      	mov	r3, r1
 80025c8:	71bb      	strb	r3, [r7, #6]
 80025ca:	4613      	mov	r3, r2
 80025cc:	717b      	strb	r3, [r7, #5]
 80025ce:	4664      	mov	r4, ip
 80025d0:	f8c7 c000 	str.w	ip, [r7]
          unsigned char sum = (0x08+0x04+0x00+id+data+adress+0x01)&0x00FF;
 80025d4:	79fa      	ldrb	r2, [r7, #7]
 80025d6:	79bb      	ldrb	r3, [r7, #6]
 80025d8:	4413      	add	r3, r2
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	797b      	ldrb	r3, [r7, #5]
 80025de:	4413      	add	r3, r2
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	330d      	adds	r3, #13
 80025e4:	73fb      	strb	r3, [r7, #15]
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80025e6:	2201      	movs	r2, #1
 80025e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025ec:	4813      	ldr	r0, [pc, #76]	; (800263c <write.7719+0x80>)
 80025ee:	f7fe fa95 	bl	8000b1c <HAL_GPIO_WritePin>
         txdata[0]=0x08;   //1 SIZE
 80025f2:	2308      	movs	r3, #8
 80025f4:	7023      	strb	r3, [r4, #0]
         txdata[1]=0x04;   //2 COMMAND
 80025f6:	2304      	movs	r3, #4
 80025f8:	7063      	strb	r3, [r4, #1]
         txdata[2]=0x00;   //3 OPTION
 80025fa:	2300      	movs	r3, #0
 80025fc:	70a3      	strb	r3, [r4, #2]
         txdata[3]=id;     //4 ID
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	70e3      	strb	r3, [r4, #3]
         txdata[4]=data;  //DATA
 8002602:	79bb      	ldrb	r3, [r7, #6]
 8002604:	7123      	strb	r3, [r4, #4]
         txdata[5]=adress;  //ADRESS
 8002606:	797b      	ldrb	r3, [r7, #5]
 8002608:	7163      	strb	r3, [r4, #5]
         txdata[6]=0x01; //COUNT
 800260a:	2301      	movs	r3, #1
 800260c:	71a3      	strb	r3, [r4, #6]
         txdata[7]=sum;    //9 SUM
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	71e3      	strb	r3, [r4, #7]
         HAL_UART_Transmit(&huart6, txdata, 8, 0xFFFF);
 8002612:	4621      	mov	r1, r4
 8002614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002618:	2208      	movs	r2, #8
 800261a:	4809      	ldr	r0, [pc, #36]	; (8002640 <write.7719+0x84>)
 800261c:	f7ff fa5d 	bl	8001ada <HAL_UART_Transmit>
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <write.7719+0x80>)
 8002628:	f7fe fa78 	bl	8000b1c <HAL_GPIO_WritePin>
         HAL_Delay(1);
 800262c:	2001      	movs	r0, #1
 800262e:	f7fd ffdb 	bl	80005e8 <HAL_Delay>
      }
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bd90      	pop	{r4, r7, pc}
 800263a:	bf00      	nop
 800263c:	40020000 	.word	0x40020000
 8002640:	2000002c 	.word	0x2000002c

08002644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b094      	sub	sp, #80	; 0x50
 8002648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	2234      	movs	r2, #52	; 0x34
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f000 faa8 	bl	8002ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002658:	f107 0308 	add.w	r3, r7, #8
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002668:	2300      	movs	r3, #0
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	4b23      	ldr	r3, [pc, #140]	; (80026fc <SystemClock_Config+0xb8>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	4a22      	ldr	r2, [pc, #136]	; (80026fc <SystemClock_Config+0xb8>)
 8002672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002676:	6413      	str	r3, [r2, #64]	; 0x40
 8002678:	4b20      	ldr	r3, [pc, #128]	; (80026fc <SystemClock_Config+0xb8>)
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002684:	2300      	movs	r3, #0
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <SystemClock_Config+0xbc>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002690:	4a1b      	ldr	r2, [pc, #108]	; (8002700 <SystemClock_Config+0xbc>)
 8002692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <SystemClock_Config+0xbc>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026a4:	2302      	movs	r3, #2
 80026a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026a8:	2301      	movs	r3, #1
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026ac:	2310      	movs	r3, #16
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026b4:	f107 031c 	add.w	r3, r7, #28
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fcb5 	bl	8001028 <HAL_RCC_OscConfig>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80026c4:	f000 f8e8 	bl	8002898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c8:	230f      	movs	r3, #15
 80026ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026d0:	2300      	movs	r3, #0
 80026d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026d8:	2300      	movs	r3, #0
 80026da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026dc:	f107 0308 	add.w	r3, r7, #8
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fa34 	bl	8000b50 <HAL_RCC_ClockConfig>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80026ee:	f000 f8d3 	bl	8002898 <Error_Handler>
  }
}
 80026f2:	bf00      	nop
 80026f4:	3750      	adds	r7, #80	; 0x50
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	40007000 	.word	0x40007000

08002704 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002708:	4b15      	ldr	r3, [pc, #84]	; (8002760 <MX_SPI1_Init+0x5c>)
 800270a:	4a16      	ldr	r2, [pc, #88]	; (8002764 <MX_SPI1_Init+0x60>)
 800270c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <MX_SPI1_Init+0x5c>)
 8002710:	2200      	movs	r2, #0
 8002712:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002714:	4b12      	ldr	r3, [pc, #72]	; (8002760 <MX_SPI1_Init+0x5c>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <MX_SPI1_Init+0x5c>)
 800271c:	2200      	movs	r2, #0
 800271e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <MX_SPI1_Init+0x5c>)
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002726:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <MX_SPI1_Init+0x5c>)
 8002728:	2200      	movs	r2, #0
 800272a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <MX_SPI1_Init+0x5c>)
 800272e:	2200      	movs	r2, #0
 8002730:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <MX_SPI1_Init+0x5c>)
 8002734:	2200      	movs	r2, #0
 8002736:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <MX_SPI1_Init+0x5c>)
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <MX_SPI1_Init+0x5c>)
 8002740:	2200      	movs	r2, #0
 8002742:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <MX_SPI1_Init+0x5c>)
 8002746:	220a      	movs	r2, #10
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800274a:	4805      	ldr	r0, [pc, #20]	; (8002760 <MX_SPI1_Init+0x5c>)
 800274c:	f7fe fec6 	bl	80014dc <HAL_SPI_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8002756:	f000 f89f 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	2000006c 	.word	0x2000006c
 8002764:	40013000 	.word	0x40013000

08002768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 800276e:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <MX_USART2_UART_Init+0x50>)
 8002770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 8002774:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800277a:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 800278e:	220c      	movs	r2, #12
 8002790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800279e:	4805      	ldr	r0, [pc, #20]	; (80027b4 <MX_USART2_UART_Init+0x4c>)
 80027a0:	f7ff f94e 	bl	8001a40 <HAL_UART_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027aa:	f000 f875 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200000c4 	.word	0x200000c4
 80027b8:	40004400 	.word	0x40004400

080027bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <MX_USART6_UART_Init+0x4c>)
 80027c2:	4a12      	ldr	r2, [pc, #72]	; (800280c <MX_USART6_UART_Init+0x50>)
 80027c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <MX_USART6_UART_Init+0x4c>)
 80027c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <MX_USART6_UART_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <MX_USART6_UART_Init+0x4c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <MX_USART6_UART_Init+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80027e0:	4b09      	ldr	r3, [pc, #36]	; (8002808 <MX_USART6_UART_Init+0x4c>)
 80027e2:	220c      	movs	r2, #12
 80027e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027e6:	4b08      	ldr	r3, [pc, #32]	; (8002808 <MX_USART6_UART_Init+0x4c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <MX_USART6_UART_Init+0x4c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027f2:	4805      	ldr	r0, [pc, #20]	; (8002808 <MX_USART6_UART_Init+0x4c>)
 80027f4:	f7ff f924 	bl	8001a40 <HAL_UART_Init>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80027fe:	f000 f84b 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000002c 	.word	0x2000002c
 800280c:	40011400 	.word	0x40011400

08002810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002816:	f107 030c 	add.w	r3, r7, #12
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	60da      	str	r2, [r3, #12]
 8002824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	4b19      	ldr	r3, [pc, #100]	; (8002890 <MX_GPIO_Init+0x80>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a18      	ldr	r2, [pc, #96]	; (8002890 <MX_GPIO_Init+0x80>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b16      	ldr	r3, [pc, #88]	; (8002890 <MX_GPIO_Init+0x80>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <MX_GPIO_Init+0x80>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a11      	ldr	r2, [pc, #68]	; (8002890 <MX_GPIO_Init+0x80>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <MX_GPIO_Init+0x80>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800285e:	2200      	movs	r2, #0
 8002860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002864:	480b      	ldr	r0, [pc, #44]	; (8002894 <MX_GPIO_Init+0x84>)
 8002866:	f7fe f959 	bl	8000b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800286a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800286e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002870:	2301      	movs	r3, #1
 8002872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	2300      	movs	r3, #0
 800287a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	4619      	mov	r1, r3
 8002882:	4804      	ldr	r0, [pc, #16]	; (8002894 <MX_GPIO_Init+0x84>)
 8002884:	f7fd ffb8 	bl	80007f8 <HAL_GPIO_Init>

}
 8002888:	bf00      	nop
 800288a:	3720      	adds	r7, #32
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	40020000 	.word	0x40020000

08002898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <HAL_MspInit+0x4c>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4a0f      	ldr	r2, [pc, #60]	; (80028f4 <HAL_MspInit+0x4c>)
 80028b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028bc:	6453      	str	r3, [r2, #68]	; 0x44
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <HAL_MspInit+0x4c>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <HAL_MspInit+0x4c>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	4a08      	ldr	r2, [pc, #32]	; (80028f4 <HAL_MspInit+0x4c>)
 80028d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d8:	6413      	str	r3, [r2, #64]	; 0x40
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_MspInit+0x4c>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800

080028f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a19      	ldr	r2, [pc, #100]	; (800297c <HAL_SPI_MspInit+0x84>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d12b      	bne.n	8002972 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <HAL_SPI_MspInit+0x88>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	4a17      	ldr	r2, [pc, #92]	; (8002980 <HAL_SPI_MspInit+0x88>)
 8002924:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002928:	6453      	str	r3, [r2, #68]	; 0x44
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <HAL_SPI_MspInit+0x88>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_SPI_MspInit+0x88>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a10      	ldr	r2, [pc, #64]	; (8002980 <HAL_SPI_MspInit+0x88>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
 8002946:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <HAL_SPI_MspInit+0x88>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002952:	23f0      	movs	r3, #240	; 0xf0
 8002954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295e:	2303      	movs	r3, #3
 8002960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002962:	2305      	movs	r3, #5
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	4619      	mov	r1, r3
 800296c:	4805      	ldr	r0, [pc, #20]	; (8002984 <HAL_SPI_MspInit+0x8c>)
 800296e:	f7fd ff43 	bl	80007f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002972:	bf00      	nop
 8002974:	3728      	adds	r7, #40	; 0x28
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40013000 	.word	0x40013000
 8002980:	40023800 	.word	0x40023800
 8002984:	40020000 	.word	0x40020000

08002988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08c      	sub	sp, #48	; 0x30
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 031c 	add.w	r3, r7, #28
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a32      	ldr	r2, [pc, #200]	; (8002a70 <HAL_UART_MspInit+0xe8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d12c      	bne.n	8002a04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	4b31      	ldr	r3, [pc, #196]	; (8002a74 <HAL_UART_MspInit+0xec>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a30      	ldr	r2, [pc, #192]	; (8002a74 <HAL_UART_MspInit+0xec>)
 80029b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ba:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <HAL_UART_MspInit+0xec>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <HAL_UART_MspInit+0xec>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a29      	ldr	r2, [pc, #164]	; (8002a74 <HAL_UART_MspInit+0xec>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <HAL_UART_MspInit+0xec>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029e2:	230c      	movs	r3, #12
 80029e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ea:	2301      	movs	r3, #1
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ee:	2303      	movs	r3, #3
 80029f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029f2:	2307      	movs	r3, #7
 80029f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f6:	f107 031c 	add.w	r3, r7, #28
 80029fa:	4619      	mov	r1, r3
 80029fc:	481e      	ldr	r0, [pc, #120]	; (8002a78 <HAL_UART_MspInit+0xf0>)
 80029fe:	f7fd fefb 	bl	80007f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002a02:	e030      	b.n	8002a66 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1c      	ldr	r2, [pc, #112]	; (8002a7c <HAL_UART_MspInit+0xf4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d12b      	bne.n	8002a66 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <HAL_UART_MspInit+0xec>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <HAL_UART_MspInit+0xec>)
 8002a18:	f043 0320 	orr.w	r3, r3, #32
 8002a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <HAL_UART_MspInit+0xec>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_UART_MspInit+0xec>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <HAL_UART_MspInit+0xec>)
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_UART_MspInit+0xec>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a46:	23c0      	movs	r3, #192	; 0xc0
 8002a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a52:	2303      	movs	r3, #3
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a56:	2308      	movs	r3, #8
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a5a:	f107 031c 	add.w	r3, r7, #28
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4807      	ldr	r0, [pc, #28]	; (8002a80 <HAL_UART_MspInit+0xf8>)
 8002a62:	f7fd fec9 	bl	80007f8 <HAL_GPIO_Init>
}
 8002a66:	bf00      	nop
 8002a68:	3730      	adds	r7, #48	; 0x30
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40004400 	.word	0x40004400
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	40011400 	.word	0x40011400
 8002a80:	40020800 	.word	0x40020800

08002a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a96:	e7fe      	b.n	8002a96 <HardFault_Handler+0x4>

08002a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a9c:	e7fe      	b.n	8002a9c <MemManage_Handler+0x4>

08002a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aa2:	e7fe      	b.n	8002aa2 <BusFault_Handler+0x4>

08002aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa8:	e7fe      	b.n	8002aa8 <UsageFault_Handler+0x4>

08002aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad8:	f7fd fd66 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002adc:	bf00      	nop
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <SystemInit+0x28>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <SystemInit+0x28>)
 8002aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002af4:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <SystemInit+0x28>)
 8002af6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002afa:	609a      	str	r2, [r3, #8]
#endif
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b12:	e003      	b.n	8002b1c <LoopCopyDataInit>

08002b14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b1a:	3104      	adds	r1, #4

08002b1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b1c:	480b      	ldr	r0, [pc, #44]	; (8002b4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b24:	d3f6      	bcc.n	8002b14 <CopyDataInit>
  ldr  r2, =_sbss
 8002b26:	4a0b      	ldr	r2, [pc, #44]	; (8002b54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b28:	e002      	b.n	8002b30 <LoopFillZerobss>

08002b2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b2c:	f842 3b04 	str.w	r3, [r2], #4

08002b30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b34:	d3f9      	bcc.n	8002b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b36:	f7ff ffd3 	bl	8002ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b3a:	f000 f811 	bl	8002b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b3e:	f7ff fc77 	bl	8002430 <main>
  bx  lr    
 8002b42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b48:	08002c04 	.word	0x08002c04
  ldr  r0, =_sdata
 8002b4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b50:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002b54:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002b58:	20000104 	.word	0x20000104

08002b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b5c:	e7fe      	b.n	8002b5c <ADC_IRQHandler>
	...

08002b60 <__libc_init_array>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	4e0d      	ldr	r6, [pc, #52]	; (8002b98 <__libc_init_array+0x38>)
 8002b64:	4c0d      	ldr	r4, [pc, #52]	; (8002b9c <__libc_init_array+0x3c>)
 8002b66:	1ba4      	subs	r4, r4, r6
 8002b68:	10a4      	asrs	r4, r4, #2
 8002b6a:	2500      	movs	r5, #0
 8002b6c:	42a5      	cmp	r5, r4
 8002b6e:	d109      	bne.n	8002b84 <__libc_init_array+0x24>
 8002b70:	4e0b      	ldr	r6, [pc, #44]	; (8002ba0 <__libc_init_array+0x40>)
 8002b72:	4c0c      	ldr	r4, [pc, #48]	; (8002ba4 <__libc_init_array+0x44>)
 8002b74:	f000 f820 	bl	8002bb8 <_init>
 8002b78:	1ba4      	subs	r4, r4, r6
 8002b7a:	10a4      	asrs	r4, r4, #2
 8002b7c:	2500      	movs	r5, #0
 8002b7e:	42a5      	cmp	r5, r4
 8002b80:	d105      	bne.n	8002b8e <__libc_init_array+0x2e>
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
 8002b84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b88:	4798      	blx	r3
 8002b8a:	3501      	adds	r5, #1
 8002b8c:	e7ee      	b.n	8002b6c <__libc_init_array+0xc>
 8002b8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b92:	4798      	blx	r3
 8002b94:	3501      	adds	r5, #1
 8002b96:	e7f2      	b.n	8002b7e <__libc_init_array+0x1e>
 8002b98:	08002bfc 	.word	0x08002bfc
 8002b9c:	08002bfc 	.word	0x08002bfc
 8002ba0:	08002bfc 	.word	0x08002bfc
 8002ba4:	08002c00 	.word	0x08002c00

08002ba8 <memset>:
 8002ba8:	4402      	add	r2, r0
 8002baa:	4603      	mov	r3, r0
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d100      	bne.n	8002bb2 <memset+0xa>
 8002bb0:	4770      	bx	lr
 8002bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bb6:	e7f9      	b.n	8002bac <memset+0x4>

08002bb8 <_init>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	bf00      	nop
 8002bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	469e      	mov	lr, r3
 8002bc2:	4770      	bx	lr

08002bc4 <_fini>:
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	bf00      	nop
 8002bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bca:	bc08      	pop	{r3}
 8002bcc:	469e      	mov	lr, r3
 8002bce:	4770      	bx	lr
