
servo_F303K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ffc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b4  080031b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031b4  080031b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031b4  080031b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031b8  080031b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  080031c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080031c8  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec7a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db9  00000000  00000000  0002ecb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  00030a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  00031388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c29  00000000  00000000  00031be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6ed  00000000  00000000  00049811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082978  00000000  00000000  00053efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6876  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002534  00000000  00000000  000d68cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800316c 	.word	0x0800316c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800316c 	.word	0x0800316c

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f931 	bl	8000440 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f002 fe42 	bl	8002e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f93b 	bl	800048e <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000230:	f000 f911 	bl	8000456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000028 	.word	0x20000028

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028

08000294 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800029c:	f7ff ffee 	bl	800027c <HAL_GetTick>
 80002a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002ac:	d005      	beq.n	80002ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ae:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <HAL_Delay+0x44>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4413      	add	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002ba:	bf00      	nop
 80002bc:	f7ff ffde 	bl	800027c <HAL_GetTick>
 80002c0:	4602      	mov	r2, r0
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	1ad3      	subs	r3, r2, r3
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d8f7      	bhi.n	80002bc <HAL_Delay+0x28>
  {
  }
}
 80002cc:	bf00      	nop
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000004 	.word	0x20000004

080002dc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f003 0307 	and.w	r3, r3, #7
 80002ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <NVIC_SetPriorityGrouping+0x44>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002f2:	68ba      	ldr	r2, [r7, #8]
 80002f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002f8:	4013      	ands	r3, r2
 80002fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800030c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800030e:	4a04      	ldr	r2, [pc, #16]	; (8000320 <NVIC_SetPriorityGrouping+0x44>)
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	60d3      	str	r3, [r2, #12]
}
 8000314:	bf00      	nop
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	e000ed00 	.word	0xe000ed00

08000324 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000328:	4b04      	ldr	r3, [pc, #16]	; (800033c <NVIC_GetPriorityGrouping+0x18>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	f003 0307 	and.w	r3, r3, #7
}
 8000332:	4618      	mov	r0, r3
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	6039      	str	r1, [r7, #0]
 800034a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800034c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000350:	2b00      	cmp	r3, #0
 8000352:	da0b      	bge.n	800036c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	b2da      	uxtb	r2, r3
 8000358:	490c      	ldr	r1, [pc, #48]	; (800038c <NVIC_SetPriority+0x4c>)
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	f003 030f 	and.w	r3, r3, #15
 8000360:	3b04      	subs	r3, #4
 8000362:	0112      	lsls	r2, r2, #4
 8000364:	b2d2      	uxtb	r2, r2
 8000366:	440b      	add	r3, r1
 8000368:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800036a:	e009      	b.n	8000380 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	b2da      	uxtb	r2, r3
 8000370:	4907      	ldr	r1, [pc, #28]	; (8000390 <NVIC_SetPriority+0x50>)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	0112      	lsls	r2, r2, #4
 8000378:	b2d2      	uxtb	r2, r2
 800037a:	440b      	add	r3, r1
 800037c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	e000ed00 	.word	0xe000ed00
 8000390:	e000e100 	.word	0xe000e100

08000394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000394:	b480      	push	{r7}
 8000396:	b089      	sub	sp, #36	; 0x24
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f003 0307 	and.w	r3, r3, #7
 80003a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003a8:	69fb      	ldr	r3, [r7, #28]
 80003aa:	f1c3 0307 	rsb	r3, r3, #7
 80003ae:	2b04      	cmp	r3, #4
 80003b0:	bf28      	it	cs
 80003b2:	2304      	movcs	r3, #4
 80003b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b6:	69fb      	ldr	r3, [r7, #28]
 80003b8:	3304      	adds	r3, #4
 80003ba:	2b06      	cmp	r3, #6
 80003bc:	d902      	bls.n	80003c4 <NVIC_EncodePriority+0x30>
 80003be:	69fb      	ldr	r3, [r7, #28]
 80003c0:	3b03      	subs	r3, #3
 80003c2:	e000      	b.n	80003c6 <NVIC_EncodePriority+0x32>
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003cc:	69bb      	ldr	r3, [r7, #24]
 80003ce:	fa02 f303 	lsl.w	r3, r2, r3
 80003d2:	43da      	mvns	r2, r3
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	401a      	ands	r2, r3
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	43d9      	mvns	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ec:	4313      	orrs	r3, r2
         );
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3724      	adds	r7, #36	; 0x24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
	...

080003fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3b01      	subs	r3, #1
 8000408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800040c:	d301      	bcc.n	8000412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040e:	2301      	movs	r3, #1
 8000410:	e00f      	b.n	8000432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000412:	4a0a      	ldr	r2, [pc, #40]	; (800043c <SysTick_Config+0x40>)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3b01      	subs	r3, #1
 8000418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800041a:	210f      	movs	r1, #15
 800041c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000420:	f7ff ff8e 	bl	8000340 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <SysTick_Config+0x40>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <SysTick_Config+0x40>)
 800042c:	2207      	movs	r2, #7
 800042e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000430:	2300      	movs	r3, #0
}
 8000432:	4618      	mov	r0, r3
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	e000e010 	.word	0xe000e010

08000440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f7ff ff47 	bl	80002dc <NVIC_SetPriorityGrouping>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b086      	sub	sp, #24
 800045a:	af00      	add	r7, sp, #0
 800045c:	4603      	mov	r3, r0
 800045e:	60b9      	str	r1, [r7, #8]
 8000460:	607a      	str	r2, [r7, #4]
 8000462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000468:	f7ff ff5c 	bl	8000324 <NVIC_GetPriorityGrouping>
 800046c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	68b9      	ldr	r1, [r7, #8]
 8000472:	6978      	ldr	r0, [r7, #20]
 8000474:	f7ff ff8e 	bl	8000394 <NVIC_EncodePriority>
 8000478:	4602      	mov	r2, r0
 800047a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047e:	4611      	mov	r1, r2
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ff5d 	bl	8000340 <NVIC_SetPriority>
}
 8000486:	bf00      	nop
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f7ff ffb0 	bl	80003fc <SysTick_Config>
 800049c:	4603      	mov	r3, r0
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004be:	e14e      	b.n	800075e <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	2101      	movs	r1, #1
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	f000 8140 	beq.w	8000758 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2b02      	cmp	r3, #2
 80004de:	d003      	beq.n	80004e8 <HAL_GPIO_Init+0x40>
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	2b12      	cmp	r3, #18
 80004e6:	d123      	bne.n	8000530 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	08da      	lsrs	r2, r3, #3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3208      	adds	r2, #8
 80004f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	f003 0307 	and.w	r3, r3, #7
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	220f      	movs	r2, #15
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	43db      	mvns	r3, r3
 8000506:	693a      	ldr	r2, [r7, #16]
 8000508:	4013      	ands	r3, r2
 800050a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	691a      	ldr	r2, [r3, #16]
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	f003 0307 	and.w	r3, r3, #7
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	693a      	ldr	r2, [r7, #16]
 800051e:	4313      	orrs	r3, r2
 8000520:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	08da      	lsrs	r2, r3, #3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3208      	adds	r2, #8
 800052a:	6939      	ldr	r1, [r7, #16]
 800052c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	2203      	movs	r2, #3
 800053c:	fa02 f303 	lsl.w	r3, r2, r3
 8000540:	43db      	mvns	r3, r3
 8000542:	693a      	ldr	r2, [r7, #16]
 8000544:	4013      	ands	r3, r2
 8000546:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	f003 0203 	and.w	r2, r3, #3
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	fa02 f303 	lsl.w	r3, r2, r3
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	4313      	orrs	r3, r2
 800055c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	693a      	ldr	r2, [r7, #16]
 8000562:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d00b      	beq.n	8000584 <HAL_GPIO_Init+0xdc>
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	2b02      	cmp	r3, #2
 8000572:	d007      	beq.n	8000584 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000578:	2b11      	cmp	r3, #17
 800057a:	d003      	beq.n	8000584 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	2b12      	cmp	r3, #18
 8000582:	d130      	bne.n	80005e6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2203      	movs	r2, #3
 8000590:	fa02 f303 	lsl.w	r3, r2, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	693a      	ldr	r2, [r7, #16]
 8000598:	4013      	ands	r3, r2
 800059a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	693a      	ldr	r2, [r7, #16]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	693a      	ldr	r2, [r7, #16]
 80005b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005ba:	2201      	movs	r2, #1
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	43db      	mvns	r3, r3
 80005c4:	693a      	ldr	r2, [r7, #16]
 80005c6:	4013      	ands	r3, r2
 80005c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	091b      	lsrs	r3, r3, #4
 80005d0:	f003 0201 	and.w	r2, r3, #1
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	4313      	orrs	r3, r2
 80005de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	2203      	movs	r2, #3
 80005f2:	fa02 f303 	lsl.w	r3, r2, r3
 80005f6:	43db      	mvns	r3, r3
 80005f8:	693a      	ldr	r2, [r7, #16]
 80005fa:	4013      	ands	r3, r2
 80005fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	689a      	ldr	r2, [r3, #8]
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	fa02 f303 	lsl.w	r3, r2, r3
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	4313      	orrs	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 809a 	beq.w	8000758 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000624:	4b55      	ldr	r3, [pc, #340]	; (800077c <HAL_GPIO_Init+0x2d4>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a54      	ldr	r2, [pc, #336]	; (800077c <HAL_GPIO_Init+0x2d4>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b52      	ldr	r3, [pc, #328]	; (800077c <HAL_GPIO_Init+0x2d4>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800063c:	4a50      	ldr	r2, [pc, #320]	; (8000780 <HAL_GPIO_Init+0x2d8>)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	089b      	lsrs	r3, r3, #2
 8000642:	3302      	adds	r3, #2
 8000644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000648:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	f003 0303 	and.w	r3, r3, #3
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	220f      	movs	r2, #15
 8000654:	fa02 f303 	lsl.w	r3, r2, r3
 8000658:	43db      	mvns	r3, r3
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	4013      	ands	r3, r2
 800065e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000666:	d013      	beq.n	8000690 <HAL_GPIO_Init+0x1e8>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a46      	ldr	r2, [pc, #280]	; (8000784 <HAL_GPIO_Init+0x2dc>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d00d      	beq.n	800068c <HAL_GPIO_Init+0x1e4>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a45      	ldr	r2, [pc, #276]	; (8000788 <HAL_GPIO_Init+0x2e0>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d007      	beq.n	8000688 <HAL_GPIO_Init+0x1e0>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a44      	ldr	r2, [pc, #272]	; (800078c <HAL_GPIO_Init+0x2e4>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d101      	bne.n	8000684 <HAL_GPIO_Init+0x1dc>
 8000680:	2303      	movs	r3, #3
 8000682:	e006      	b.n	8000692 <HAL_GPIO_Init+0x1ea>
 8000684:	2305      	movs	r3, #5
 8000686:	e004      	b.n	8000692 <HAL_GPIO_Init+0x1ea>
 8000688:	2302      	movs	r3, #2
 800068a:	e002      	b.n	8000692 <HAL_GPIO_Init+0x1ea>
 800068c:	2301      	movs	r3, #1
 800068e:	e000      	b.n	8000692 <HAL_GPIO_Init+0x1ea>
 8000690:	2300      	movs	r3, #0
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	f002 0203 	and.w	r2, r2, #3
 8000698:	0092      	lsls	r2, r2, #2
 800069a:	4093      	lsls	r3, r2
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	4313      	orrs	r3, r2
 80006a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80006a2:	4937      	ldr	r1, [pc, #220]	; (8000780 <HAL_GPIO_Init+0x2d8>)
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	089b      	lsrs	r3, r3, #2
 80006a8:	3302      	adds	r3, #2
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006b0:	4b37      	ldr	r3, [pc, #220]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	43db      	mvns	r3, r3
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	4013      	ands	r3, r2
 80006be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d003      	beq.n	80006d4 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80006cc:	693a      	ldr	r2, [r7, #16]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006d4:	4a2e      	ldr	r2, [pc, #184]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	43db      	mvns	r3, r3
 80006e4:	693a      	ldr	r2, [r7, #16]
 80006e6:	4013      	ands	r3, r2
 80006e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d003      	beq.n	80006fe <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006fe:	4a24      	ldr	r2, [pc, #144]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	43db      	mvns	r3, r3
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	4013      	ands	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800071c:	2b00      	cmp	r3, #0
 800071e:	d003      	beq.n	8000728 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000720:	693a      	ldr	r2, [r7, #16]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4313      	orrs	r3, r2
 8000726:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000728:	4a19      	ldr	r2, [pc, #100]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	43db      	mvns	r3, r3
 8000738:	693a      	ldr	r2, [r7, #16]
 800073a:	4013      	ands	r3, r2
 800073c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	4313      	orrs	r3, r2
 8000750:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000752:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <HAL_GPIO_Init+0x2e8>)
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	3301      	adds	r3, #1
 800075c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	fa22 f303 	lsr.w	r3, r2, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	f47f aea9 	bne.w	80004c0 <HAL_GPIO_Init+0x18>
  }
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	371c      	adds	r7, #28
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	40021000 	.word	0x40021000
 8000780:	40010000 	.word	0x40010000
 8000784:	48000400 	.word	0x48000400
 8000788:	48000800 	.word	0x48000800
 800078c:	48000c00 	.word	0x48000c00
 8000790:	40010400 	.word	0x40010400

08000794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800079a:	af00      	add	r7, sp, #0
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d102      	bne.n	80007ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
 80007aa:	f000 beda 	b.w	8001562 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	f000 816e 	beq.w	8000a9a <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007be:	4bb5      	ldr	r3, [pc, #724]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	f003 030c 	and.w	r3, r3, #12
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d00c      	beq.n	80007e4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007ca:	4bb2      	ldr	r3, [pc, #712]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	f003 030c 	and.w	r3, r3, #12
 80007d2:	2b08      	cmp	r3, #8
 80007d4:	d15a      	bne.n	800088c <HAL_RCC_OscConfig+0xf8>
 80007d6:	4baf      	ldr	r3, [pc, #700]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007e2:	d153      	bne.n	800088c <HAL_RCC_OscConfig+0xf8>
 80007e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007e8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80007f0:	fa93 f3a3 	rbit	r3, r3
 80007f4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80007f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007fc:	fab3 f383 	clz	r3, r3
 8000800:	b2db      	uxtb	r3, r3
 8000802:	095b      	lsrs	r3, r3, #5
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b01      	cmp	r3, #1
 800080e:	d102      	bne.n	8000816 <HAL_RCC_OscConfig+0x82>
 8000810:	4ba0      	ldr	r3, [pc, #640]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	e015      	b.n	8000842 <HAL_RCC_OscConfig+0xae>
 8000816:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800081a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800081e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000822:	fa93 f3a3 	rbit	r3, r3
 8000826:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800082a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800082e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000832:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000836:	fa93 f3a3 	rbit	r3, r3
 800083a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800083e:	4b95      	ldr	r3, [pc, #596]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 8000840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000842:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000846:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800084a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800084e:	fa92 f2a2 	rbit	r2, r2
 8000852:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000856:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800085a:	fab2 f282 	clz	r2, r2
 800085e:	b252      	sxtb	r2, r2
 8000860:	f042 0220 	orr.w	r2, r2, #32
 8000864:	b252      	sxtb	r2, r2
 8000866:	b2d2      	uxtb	r2, r2
 8000868:	f002 021f 	and.w	r2, r2, #31
 800086c:	2101      	movs	r1, #1
 800086e:	fa01 f202 	lsl.w	r2, r1, r2
 8000872:	4013      	ands	r3, r2
 8000874:	2b00      	cmp	r3, #0
 8000876:	f000 810f 	beq.w	8000a98 <HAL_RCC_OscConfig+0x304>
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	f040 8109 	bne.w	8000a98 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	f000 be6b 	b.w	8001562 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000896:	d106      	bne.n	80008a6 <HAL_RCC_OscConfig+0x112>
 8000898:	4b7e      	ldr	r3, [pc, #504]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a7d      	ldr	r2, [pc, #500]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 800089e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	e030      	b.n	8000908 <HAL_RCC_OscConfig+0x174>
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10c      	bne.n	80008ca <HAL_RCC_OscConfig+0x136>
 80008b0:	4b78      	ldr	r3, [pc, #480]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a77      	ldr	r2, [pc, #476]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 80008b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	4b75      	ldr	r3, [pc, #468]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a74      	ldr	r2, [pc, #464]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 80008c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	e01e      	b.n	8000908 <HAL_RCC_OscConfig+0x174>
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008d4:	d10c      	bne.n	80008f0 <HAL_RCC_OscConfig+0x15c>
 80008d6:	4b6f      	ldr	r3, [pc, #444]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a6e      	ldr	r2, [pc, #440]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 80008dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	4b6c      	ldr	r3, [pc, #432]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a6b      	ldr	r2, [pc, #428]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	e00b      	b.n	8000908 <HAL_RCC_OscConfig+0x174>
 80008f0:	4b68      	ldr	r3, [pc, #416]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a67      	ldr	r2, [pc, #412]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 80008f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b65      	ldr	r3, [pc, #404]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a64      	ldr	r2, [pc, #400]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 8000902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000906:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000908:	4b62      	ldr	r3, [pc, #392]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 800090a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090c:	f023 020f 	bic.w	r2, r3, #15
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	495f      	ldr	r1, [pc, #380]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 8000918:	4313      	orrs	r3, r2
 800091a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d05a      	beq.n	80009dc <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000926:	f7ff fca9 	bl	800027c <HAL_GetTick>
 800092a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800092e:	e00a      	b.n	8000946 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000930:	f7ff fca4 	bl	800027c <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	2b64      	cmp	r3, #100	; 0x64
 800093e:	d902      	bls.n	8000946 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000940:	2303      	movs	r3, #3
 8000942:	f000 be0e 	b.w	8001562 <HAL_RCC_OscConfig+0xdce>
 8000946:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800094a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800094e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000952:	fa93 f3a3 	rbit	r3, r3
 8000956:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 800095a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095e:	fab3 f383 	clz	r3, r3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	095b      	lsrs	r3, r3, #5
 8000966:	b2db      	uxtb	r3, r3
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b01      	cmp	r3, #1
 8000970:	d102      	bne.n	8000978 <HAL_RCC_OscConfig+0x1e4>
 8000972:	4b48      	ldr	r3, [pc, #288]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	e015      	b.n	80009a4 <HAL_RCC_OscConfig+0x210>
 8000978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800097c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000980:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000984:	fa93 f3a3 	rbit	r3, r3
 8000988:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800098c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000990:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000994:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000998:	fa93 f3a3 	rbit	r3, r3
 800099c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80009a0:	4b3c      	ldr	r3, [pc, #240]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 80009a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009a8:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80009ac:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80009b0:	fa92 f2a2 	rbit	r2, r2
 80009b4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 80009b8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80009bc:	fab2 f282 	clz	r2, r2
 80009c0:	b252      	sxtb	r2, r2
 80009c2:	f042 0220 	orr.w	r2, r2, #32
 80009c6:	b252      	sxtb	r2, r2
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	f002 021f 	and.w	r2, r2, #31
 80009ce:	2101      	movs	r1, #1
 80009d0:	fa01 f202 	lsl.w	r2, r1, r2
 80009d4:	4013      	ands	r3, r2
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0aa      	beq.n	8000930 <HAL_RCC_OscConfig+0x19c>
 80009da:	e05e      	b.n	8000a9a <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009dc:	f7ff fc4e 	bl	800027c <HAL_GetTick>
 80009e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009e4:	e00a      	b.n	80009fc <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009e6:	f7ff fc49 	bl	800027c <HAL_GetTick>
 80009ea:	4602      	mov	r2, r0
 80009ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	2b64      	cmp	r3, #100	; 0x64
 80009f4:	d902      	bls.n	80009fc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80009f6:	2303      	movs	r3, #3
 80009f8:	f000 bdb3 	b.w	8001562 <HAL_RCC_OscConfig+0xdce>
 80009fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a00:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000a08:	fa93 f3a3 	rbit	r3, r3
 8000a0c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000a10:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a14:	fab3 f383 	clz	r3, r3
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d102      	bne.n	8000a2e <HAL_RCC_OscConfig+0x29a>
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	e015      	b.n	8000a5a <HAL_RCC_OscConfig+0x2c6>
 8000a2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000a3a:	fa93 f3a3 	rbit	r3, r3
 8000a3e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000a42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a46:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000a4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000a4e:	fa93 f3a3 	rbit	r3, r3
 8000a52:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_RCC_OscConfig+0x300>)
 8000a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a5e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000a62:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000a66:	fa92 f2a2 	rbit	r2, r2
 8000a6a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000a6e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000a72:	fab2 f282 	clz	r2, r2
 8000a76:	b252      	sxtb	r2, r2
 8000a78:	f042 0220 	orr.w	r2, r2, #32
 8000a7c:	b252      	sxtb	r2, r2
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	f002 021f 	and.w	r2, r2, #31
 8000a84:	2101      	movs	r1, #1
 8000a86:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1aa      	bne.n	80009e6 <HAL_RCC_OscConfig+0x252>
 8000a90:	e003      	b.n	8000a9a <HAL_RCC_OscConfig+0x306>
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f000 8170 	beq.w	8000d8a <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000aaa:	4bd0      	ldr	r3, [pc, #832]	; (8000dec <HAL_RCC_OscConfig+0x658>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f003 030c 	and.w	r3, r3, #12
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d00b      	beq.n	8000ace <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ab6:	4bcd      	ldr	r3, [pc, #820]	; (8000dec <HAL_RCC_OscConfig+0x658>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 030c 	and.w	r3, r3, #12
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d16d      	bne.n	8000b9e <HAL_RCC_OscConfig+0x40a>
 8000ac2:	4bca      	ldr	r3, [pc, #808]	; (8000dec <HAL_RCC_OscConfig+0x658>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d167      	bne.n	8000b9e <HAL_RCC_OscConfig+0x40a>
 8000ace:	2302      	movs	r3, #2
 8000ad0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000ad8:	fa93 f3a3 	rbit	r3, r3
 8000adc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000ae0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ae4:	fab3 f383 	clz	r3, r3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d102      	bne.n	8000afe <HAL_RCC_OscConfig+0x36a>
 8000af8:	4bbc      	ldr	r3, [pc, #752]	; (8000dec <HAL_RCC_OscConfig+0x658>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	e013      	b.n	8000b26 <HAL_RCC_OscConfig+0x392>
 8000afe:	2302      	movs	r3, #2
 8000b00:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b04:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000b08:	fa93 f3a3 	rbit	r3, r3
 8000b0c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000b10:	2302      	movs	r3, #2
 8000b12:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000b16:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000b1a:	fa93 f3a3 	rbit	r3, r3
 8000b1e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000b22:	4bb2      	ldr	r3, [pc, #712]	; (8000dec <HAL_RCC_OscConfig+0x658>)
 8000b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b26:	2202      	movs	r2, #2
 8000b28:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000b2c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000b30:	fa92 f2a2 	rbit	r2, r2
 8000b34:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000b38:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000b3c:	fab2 f282 	clz	r2, r2
 8000b40:	b252      	sxtb	r2, r2
 8000b42:	f042 0220 	orr.w	r2, r2, #32
 8000b46:	b252      	sxtb	r2, r2
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	f002 021f 	and.w	r2, r2, #31
 8000b4e:	2101      	movs	r1, #1
 8000b50:	fa01 f202 	lsl.w	r2, r1, r2
 8000b54:	4013      	ands	r3, r2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d007      	beq.n	8000b6a <HAL_RCC_OscConfig+0x3d6>
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	691b      	ldr	r3, [r3, #16]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d002      	beq.n	8000b6a <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	f000 bcfc 	b.w	8001562 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b6a:	4ba0      	ldr	r3, [pc, #640]	; (8000dec <HAL_RCC_OscConfig+0x658>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	6959      	ldr	r1, [r3, #20]
 8000b78:	23f8      	movs	r3, #248	; 0xf8
 8000b7a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b7e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000b82:	fa93 f3a3 	rbit	r3, r3
 8000b86:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000b8a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000b8e:	fab3 f383 	clz	r3, r3
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	4995      	ldr	r1, [pc, #596]	; (8000dec <HAL_RCC_OscConfig+0x658>)
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b9c:	e0f5      	b.n	8000d8a <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f000 8085 	beq.w	8000cb4 <HAL_RCC_OscConfig+0x520>
 8000baa:	2301      	movs	r3, #1
 8000bac:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000bb4:	fa93 f3a3 	rbit	r3, r3
 8000bb8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000bbc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bc0:	fab3 f383 	clz	r3, r3
 8000bc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	461a      	mov	r2, r3
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd4:	f7ff fb52 	bl	800027c <HAL_GetTick>
 8000bd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bdc:	e00a      	b.n	8000bf4 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bde:	f7ff fb4d 	bl	800027c <HAL_GetTick>
 8000be2:	4602      	mov	r2, r0
 8000be4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d902      	bls.n	8000bf4 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	f000 bcb7 	b.w	8001562 <HAL_RCC_OscConfig+0xdce>
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000bfe:	fa93 f3a3 	rbit	r3, r3
 8000c02:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000c06:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0a:	fab3 f383 	clz	r3, r3
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	095b      	lsrs	r3, r3, #5
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d102      	bne.n	8000c24 <HAL_RCC_OscConfig+0x490>
 8000c1e:	4b73      	ldr	r3, [pc, #460]	; (8000dec <HAL_RCC_OscConfig+0x658>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	e013      	b.n	8000c4c <HAL_RCC_OscConfig+0x4b8>
 8000c24:	2302      	movs	r3, #2
 8000c26:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c2a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000c2e:	fa93 f3a3 	rbit	r3, r3
 8000c32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000c36:	2302      	movs	r3, #2
 8000c38:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000c3c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000c40:	fa93 f3a3 	rbit	r3, r3
 8000c44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000c48:	4b68      	ldr	r3, [pc, #416]	; (8000dec <HAL_RCC_OscConfig+0x658>)
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000c52:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000c56:	fa92 f2a2 	rbit	r2, r2
 8000c5a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000c5e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b252      	sxtb	r2, r2
 8000c68:	f042 0220 	orr.w	r2, r2, #32
 8000c6c:	b252      	sxtb	r2, r2
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	f002 021f 	and.w	r2, r2, #31
 8000c74:	2101      	movs	r1, #1
 8000c76:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0ae      	beq.n	8000bde <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c80:	4b5a      	ldr	r3, [pc, #360]	; (8000dec <HAL_RCC_OscConfig+0x658>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6959      	ldr	r1, [r3, #20]
 8000c8e:	23f8      	movs	r3, #248	; 0xf8
 8000c90:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c94:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000c98:	fa93 f3a3 	rbit	r3, r3
 8000c9c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000ca0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000ca4:	fab3 f383 	clz	r3, r3
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	494f      	ldr	r1, [pc, #316]	; (8000dec <HAL_RCC_OscConfig+0x658>)
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	600b      	str	r3, [r1, #0]
 8000cb2:	e06a      	b.n	8000d8a <HAL_RCC_OscConfig+0x5f6>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000cbe:	fa93 f3a3 	rbit	r3, r3
 8000cc2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000cc6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cca:	fab3 f383 	clz	r3, r3
 8000cce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	461a      	mov	r2, r3
 8000cda:	2300      	movs	r3, #0
 8000cdc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cde:	f7ff facd 	bl	800027c <HAL_GetTick>
 8000ce2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce6:	e00a      	b.n	8000cfe <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce8:	f7ff fac8 	bl	800027c <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d902      	bls.n	8000cfe <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	f000 bc32 	b.w	8001562 <HAL_RCC_OscConfig+0xdce>
 8000cfe:	2302      	movs	r3, #2
 8000d00:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d08:	fa93 f3a3 	rbit	r3, r3
 8000d0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000d10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d14:	fab3 f383 	clz	r3, r3
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d102      	bne.n	8000d2e <HAL_RCC_OscConfig+0x59a>
 8000d28:	4b30      	ldr	r3, [pc, #192]	; (8000dec <HAL_RCC_OscConfig+0x658>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	e013      	b.n	8000d56 <HAL_RCC_OscConfig+0x5c2>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d38:	fa93 f3a3 	rbit	r3, r3
 8000d3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000d40:	2302      	movs	r3, #2
 8000d42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000d46:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d4a:	fa93 f3a3 	rbit	r3, r3
 8000d4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000d52:	4b26      	ldr	r3, [pc, #152]	; (8000dec <HAL_RCC_OscConfig+0x658>)
 8000d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d56:	2202      	movs	r2, #2
 8000d58:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000d5c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000d60:	fa92 f2a2 	rbit	r2, r2
 8000d64:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000d68:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b252      	sxtb	r2, r2
 8000d72:	f042 0220 	orr.w	r2, r2, #32
 8000d76:	b252      	sxtb	r2, r2
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	f002 021f 	and.w	r2, r2, #31
 8000d7e:	2101      	movs	r1, #1
 8000d80:	fa01 f202 	lsl.w	r2, r1, r2
 8000d84:	4013      	ands	r3, r2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1ae      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 80d8 	beq.w	8000f4a <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d067      	beq.n	8000e74 <HAL_RCC_OscConfig+0x6e0>
 8000da4:	2301      	movs	r3, #1
 8000da6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000dae:	fa93 f3a3 	rbit	r3, r3
 8000db2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000db6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dba:	fab3 f383 	clz	r3, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_RCC_OscConfig+0x65c>)
 8000dc2:	4413      	add	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	2301      	movs	r3, #1
 8000dca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dcc:	f7ff fa56 	bl	800027c <HAL_GetTick>
 8000dd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd4:	e00e      	b.n	8000df4 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd6:	f7ff fa51 	bl	800027c <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d906      	bls.n	8000df4 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e3bb      	b.n	8001562 <HAL_RCC_OscConfig+0xdce>
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000
 8000df0:	10908120 	.word	0x10908120
 8000df4:	2302      	movs	r3, #2
 8000df6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000dfe:	fa93 f3a3 	rbit	r3, r3
 8000e02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e10:	fa93 f2a3 	rbit	r2, r3
 8000e14:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e1e:	2202      	movs	r2, #2
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	fa93 f2a3 	rbit	r2, r3
 8000e2c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000e30:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e32:	4ba5      	ldr	r3, [pc, #660]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8000e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e36:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e3a:	2102      	movs	r1, #2
 8000e3c:	6019      	str	r1, [r3, #0]
 8000e3e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	fa93 f1a3 	rbit	r1, r3
 8000e48:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e4c:	6019      	str	r1, [r3, #0]
  return(result);
 8000e4e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	fab3 f383 	clz	r3, r3
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f003 031f 	and.w	r3, r3, #31
 8000e66:	2101      	movs	r1, #1
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0b1      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x642>
 8000e72:	e06a      	b.n	8000f4a <HAL_RCC_OscConfig+0x7b6>
 8000e74:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	fa93 f2a3 	rbit	r2, r3
 8000e86:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e8a:	601a      	str	r2, [r3, #0]
  return(result);
 8000e8c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e90:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e92:	fab3 f383 	clz	r3, r3
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b8c      	ldr	r3, [pc, #560]	; (80010cc <HAL_RCC_OscConfig+0x938>)
 8000e9a:	4413      	add	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea4:	f7ff f9ea 	bl	800027c <HAL_GetTick>
 8000ea8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eac:	e009      	b.n	8000ec2 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eae:	f7ff f9e5 	bl	800027c <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e34f      	b.n	8001562 <HAL_RCC_OscConfig+0xdce>
 8000ec2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	fa93 f2a3 	rbit	r2, r3
 8000ed4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ede:	2202      	movs	r2, #2
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	fa93 f2a3 	rbit	r2, r3
 8000eec:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	fa93 f2a3 	rbit	r2, r3
 8000f04:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f08:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0a:	4b6f      	ldr	r3, [pc, #444]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8000f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f0e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f12:	2102      	movs	r1, #2
 8000f14:	6019      	str	r1, [r3, #0]
 8000f16:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	fa93 f1a3 	rbit	r1, r3
 8000f20:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f24:	6019      	str	r1, [r3, #0]
  return(result);
 8000f26:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	fab3 f383 	clz	r3, r3
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f003 031f 	and.w	r3, r3, #31
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1b1      	bne.n	8000eae <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 8159 	beq.w	800120c <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f60:	4b59      	ldr	r3, [pc, #356]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8000f62:	69db      	ldr	r3, [r3, #28]
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d112      	bne.n	8000f92 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	4b56      	ldr	r3, [pc, #344]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	4a55      	ldr	r2, [pc, #340]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8000f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f76:	61d3      	str	r3, [r2, #28]
 8000f78:	4b53      	ldr	r3, [pc, #332]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f92:	4b4f      	ldr	r3, [pc, #316]	; (80010d0 <HAL_RCC_OscConfig+0x93c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d11a      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9e:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <HAL_RCC_OscConfig+0x93c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a4b      	ldr	r2, [pc, #300]	; (80010d0 <HAL_RCC_OscConfig+0x93c>)
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000faa:	f7ff f967 	bl	800027c <HAL_GetTick>
 8000fae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb2:	e009      	b.n	8000fc8 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb4:	f7ff f962 	bl	800027c <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b64      	cmp	r3, #100	; 0x64
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e2cc      	b.n	8001562 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc8:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <HAL_RCC_OscConfig+0x93c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0ef      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d106      	bne.n	8000fec <HAL_RCC_OscConfig+0x858>
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4a39      	ldr	r2, [pc, #228]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6213      	str	r3, [r2, #32]
 8000fea:	e02f      	b.n	800104c <HAL_RCC_OscConfig+0x8b8>
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10c      	bne.n	8001010 <HAL_RCC_OscConfig+0x87c>
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	4a33      	ldr	r2, [pc, #204]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8000ffc:	f023 0301 	bic.w	r3, r3, #1
 8001000:	6213      	str	r3, [r2, #32]
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4a30      	ldr	r2, [pc, #192]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8001008:	f023 0304 	bic.w	r3, r3, #4
 800100c:	6213      	str	r3, [r2, #32]
 800100e:	e01d      	b.n	800104c <HAL_RCC_OscConfig+0x8b8>
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	2b05      	cmp	r3, #5
 8001018:	d10c      	bne.n	8001034 <HAL_RCC_OscConfig+0x8a0>
 800101a:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a2a      	ldr	r2, [pc, #168]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6213      	str	r3, [r2, #32]
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6213      	str	r3, [r2, #32]
 8001032:	e00b      	b.n	800104c <HAL_RCC_OscConfig+0x8b8>
 8001034:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 800103a:	f023 0301 	bic.w	r3, r3, #1
 800103e:	6213      	str	r3, [r2, #32]
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	4a20      	ldr	r2, [pc, #128]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 8001046:	f023 0304 	bic.w	r3, r3, #4
 800104a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d06b      	beq.n	800112e <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001056:	f7ff f911 	bl	800027c <HAL_GetTick>
 800105a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800105e:	e00b      	b.n	8001078 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001060:	f7ff f90c 	bl	800027c <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001070:	4293      	cmp	r3, r2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e274      	b.n	8001562 <HAL_RCC_OscConfig+0xdce>
 8001078:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800107c:	2202      	movs	r2, #2
 800107e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001080:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	fa93 f2a3 	rbit	r2, r3
 800108a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001094:	2202      	movs	r2, #2
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	fa93 f2a3 	rbit	r2, r3
 80010a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010a6:	601a      	str	r2, [r3, #0]
  return(result);
 80010a8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ae:	fab3 f383 	clz	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	095b      	lsrs	r3, r3, #5
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d108      	bne.n	80010d4 <HAL_RCC_OscConfig+0x940>
 80010c2:	4b01      	ldr	r3, [pc, #4]	; (80010c8 <HAL_RCC_OscConfig+0x934>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	e013      	b.n	80010f0 <HAL_RCC_OscConfig+0x95c>
 80010c8:	40021000 	.word	0x40021000
 80010cc:	10908120 	.word	0x10908120
 80010d0:	40007000 	.word	0x40007000
 80010d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010d8:	2202      	movs	r2, #2
 80010da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	fa93 f2a3 	rbit	r2, r3
 80010e6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	4bbb      	ldr	r3, [pc, #748]	; (80013dc <HAL_RCC_OscConfig+0xc48>)
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80010f4:	2102      	movs	r1, #2
 80010f6:	6011      	str	r1, [r2, #0]
 80010f8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	fa92 f1a2 	rbit	r1, r2
 8001102:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001106:	6011      	str	r1, [r2, #0]
  return(result);
 8001108:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800110c:	6812      	ldr	r2, [r2, #0]
 800110e:	fab2 f282 	clz	r2, r2
 8001112:	b252      	sxtb	r2, r2
 8001114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001118:	b252      	sxtb	r2, r2
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	f002 021f 	and.w	r2, r2, #31
 8001120:	2101      	movs	r1, #1
 8001122:	fa01 f202 	lsl.w	r2, r1, r2
 8001126:	4013      	ands	r3, r2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d099      	beq.n	8001060 <HAL_RCC_OscConfig+0x8cc>
 800112c:	e064      	b.n	80011f8 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112e:	f7ff f8a5 	bl	800027c <HAL_GetTick>
 8001132:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001136:	e00b      	b.n	8001150 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001138:	f7ff f8a0 	bl	800027c <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f241 3288 	movw	r2, #5000	; 0x1388
 8001148:	4293      	cmp	r3, r2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e208      	b.n	8001562 <HAL_RCC_OscConfig+0xdce>
 8001150:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001154:	2202      	movs	r2, #2
 8001156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001158:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	fa93 f2a3 	rbit	r2, r3
 8001162:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800116c:	2202      	movs	r2, #2
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	fa93 f2a3 	rbit	r2, r3
 800117a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800117e:	601a      	str	r2, [r3, #0]
  return(result);
 8001180:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001184:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001186:	fab3 f383 	clz	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	095b      	lsrs	r3, r3, #5
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d102      	bne.n	80011a0 <HAL_RCC_OscConfig+0xa0c>
 800119a:	4b90      	ldr	r3, [pc, #576]	; (80013dc <HAL_RCC_OscConfig+0xc48>)
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	e00d      	b.n	80011bc <HAL_RCC_OscConfig+0xa28>
 80011a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011a4:	2202      	movs	r2, #2
 80011a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	fa93 f2a3 	rbit	r2, r3
 80011b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	4b88      	ldr	r3, [pc, #544]	; (80013dc <HAL_RCC_OscConfig+0xc48>)
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011c0:	2102      	movs	r1, #2
 80011c2:	6011      	str	r1, [r2, #0]
 80011c4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	fa92 f1a2 	rbit	r1, r2
 80011ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80011d2:	6011      	str	r1, [r2, #0]
  return(result);
 80011d4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	fab2 f282 	clz	r2, r2
 80011de:	b252      	sxtb	r2, r2
 80011e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011e4:	b252      	sxtb	r2, r2
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	f002 021f 	and.w	r2, r2, #31
 80011ec:	2101      	movs	r1, #1
 80011ee:	fa01 f202 	lsl.w	r2, r1, r2
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d19f      	bne.n	8001138 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d105      	bne.n	800120c <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001200:	4b76      	ldr	r3, [pc, #472]	; (80013dc <HAL_RCC_OscConfig+0xc48>)
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	4a75      	ldr	r2, [pc, #468]	; (80013dc <HAL_RCC_OscConfig+0xc48>)
 8001206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800120a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 81a4 	beq.w	8001560 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001218:	4b70      	ldr	r3, [pc, #448]	; (80013dc <HAL_RCC_OscConfig+0xc48>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b08      	cmp	r3, #8
 8001222:	f000 819b 	beq.w	800155c <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	2b02      	cmp	r3, #2
 800122e:	f040 8113 	bne.w	8001458 <HAL_RCC_OscConfig+0xcc4>
 8001232:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001236:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800123a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	fa93 f2a3 	rbit	r2, r3
 8001246:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800124a:	601a      	str	r2, [r3, #0]
  return(result);
 800124c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001250:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001252:	fab3 f383 	clz	r3, r3
 8001256:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800125a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	461a      	mov	r2, r3
 8001262:	2300      	movs	r3, #0
 8001264:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff f809 	bl	800027c <HAL_GetTick>
 800126a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126e:	e009      	b.n	8001284 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff f804 	bl	800027c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e16e      	b.n	8001562 <HAL_RCC_OscConfig+0xdce>
 8001284:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001288:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800128c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	fa93 f2a3 	rbit	r2, r3
 8001298:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800129c:	601a      	str	r2, [r3, #0]
  return(result);
 800129e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d102      	bne.n	80012be <HAL_RCC_OscConfig+0xb2a>
 80012b8:	4b48      	ldr	r3, [pc, #288]	; (80013dc <HAL_RCC_OscConfig+0xc48>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	e01b      	b.n	80012f6 <HAL_RCC_OscConfig+0xb62>
 80012be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	fa93 f2a3 	rbit	r2, r3
 80012d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	fa93 f2a3 	rbit	r2, r3
 80012ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	4b3a      	ldr	r3, [pc, #232]	; (80013dc <HAL_RCC_OscConfig+0xc48>)
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80012fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80012fe:	6011      	str	r1, [r2, #0]
 8001300:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	fa92 f1a2 	rbit	r1, r2
 800130a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800130e:	6011      	str	r1, [r2, #0]
  return(result);
 8001310:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	fab2 f282 	clz	r2, r2
 800131a:	b252      	sxtb	r2, r2
 800131c:	f042 0220 	orr.w	r2, r2, #32
 8001320:	b252      	sxtb	r2, r2
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	f002 021f 	and.w	r2, r2, #31
 8001328:	2101      	movs	r1, #1
 800132a:	fa01 f202 	lsl.w	r2, r1, r2
 800132e:	4013      	ands	r3, r2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d19d      	bne.n	8001270 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001334:	4b29      	ldr	r3, [pc, #164]	; (80013dc <HAL_RCC_OscConfig+0xc48>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	430b      	orrs	r3, r1
 800134a:	4924      	ldr	r1, [pc, #144]	; (80013dc <HAL_RCC_OscConfig+0xc48>)
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
 8001350:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001358:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	fa93 f2a3 	rbit	r2, r3
 8001364:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001368:	601a      	str	r2, [r3, #0]
  return(result);
 800136a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800136e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001370:	fab3 f383 	clz	r3, r3
 8001374:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001378:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	461a      	mov	r2, r3
 8001380:	2301      	movs	r3, #1
 8001382:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7fe ff7a 	bl	800027c <HAL_GetTick>
 8001388:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800138c:	e009      	b.n	80013a2 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800138e:	f7fe ff75 	bl	800027c <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e0df      	b.n	8001562 <HAL_RCC_OscConfig+0xdce>
 80013a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	fa93 f2a3 	rbit	r2, r3
 80013b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013ba:	601a      	str	r2, [r3, #0]
  return(result);
 80013bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c2:	fab3 f383 	clz	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	095b      	lsrs	r3, r3, #5
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d104      	bne.n	80013e0 <HAL_RCC_OscConfig+0xc4c>
 80013d6:	4b01      	ldr	r3, [pc, #4]	; (80013dc <HAL_RCC_OscConfig+0xc48>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	e01d      	b.n	8001418 <HAL_RCC_OscConfig+0xc84>
 80013dc:	40021000 	.word	0x40021000
 80013e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	fa93 f2a3 	rbit	r2, r3
 80013f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	fa93 f2a3 	rbit	r2, r3
 800140e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	4b55      	ldr	r3, [pc, #340]	; (800156c <HAL_RCC_OscConfig+0xdd8>)
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800141c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001420:	6011      	str	r1, [r2, #0]
 8001422:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	fa92 f1a2 	rbit	r1, r2
 800142c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001430:	6011      	str	r1, [r2, #0]
  return(result);
 8001432:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	fab2 f282 	clz	r2, r2
 800143c:	b252      	sxtb	r2, r2
 800143e:	f042 0220 	orr.w	r2, r2, #32
 8001442:	b252      	sxtb	r2, r2
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	f002 021f 	and.w	r2, r2, #31
 800144a:	2101      	movs	r1, #1
 800144c:	fa01 f202 	lsl.w	r2, r1, r2
 8001450:	4013      	ands	r3, r2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d09b      	beq.n	800138e <HAL_RCC_OscConfig+0xbfa>
 8001456:	e083      	b.n	8001560 <HAL_RCC_OscConfig+0xdcc>
 8001458:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800145c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	fa93 f2a3 	rbit	r2, r3
 800146c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001470:	601a      	str	r2, [r3, #0]
  return(result);
 8001472:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001476:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001478:	fab3 f383 	clz	r3, r3
 800147c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001480:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	461a      	mov	r2, r3
 8001488:	2300      	movs	r3, #0
 800148a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7fe fef6 	bl	800027c <HAL_GetTick>
 8001490:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001494:	e009      	b.n	80014aa <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001496:	f7fe fef1 	bl	800027c <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e05b      	b.n	8001562 <HAL_RCC_OscConfig+0xdce>
 80014aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	fa93 f2a3 	rbit	r2, r3
 80014be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c2:	601a      	str	r2, [r3, #0]
  return(result);
 80014c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	095b      	lsrs	r3, r3, #5
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d102      	bne.n	80014e4 <HAL_RCC_OscConfig+0xd50>
 80014de:	4b23      	ldr	r3, [pc, #140]	; (800156c <HAL_RCC_OscConfig+0xdd8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	e01b      	b.n	800151c <HAL_RCC_OscConfig+0xd88>
 80014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	fa93 f2a3 	rbit	r2, r3
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	fa93 f2a3 	rbit	r2, r3
 8001512:	f107 0318 	add.w	r3, r7, #24
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <HAL_RCC_OscConfig+0xdd8>)
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	f107 0214 	add.w	r2, r7, #20
 8001520:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001524:	6011      	str	r1, [r2, #0]
 8001526:	f107 0214 	add.w	r2, r7, #20
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	fa92 f1a2 	rbit	r1, r2
 8001530:	f107 0210 	add.w	r2, r7, #16
 8001534:	6011      	str	r1, [r2, #0]
  return(result);
 8001536:	f107 0210 	add.w	r2, r7, #16
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	fab2 f282 	clz	r2, r2
 8001540:	b252      	sxtb	r2, r2
 8001542:	f042 0220 	orr.w	r2, r2, #32
 8001546:	b252      	sxtb	r2, r2
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	f002 021f 	and.w	r2, r2, #31
 800154e:	2101      	movs	r1, #1
 8001550:	fa01 f202 	lsl.w	r2, r1, r2
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d19d      	bne.n	8001496 <HAL_RCC_OscConfig+0xd02>
 800155a:	e001      	b.n	8001560 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b09e      	sub	sp, #120	; 0x78
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e164      	b.n	8001852 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001588:	4b92      	ldr	r3, [pc, #584]	; (80017d4 <HAL_RCC_ClockConfig+0x264>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d910      	bls.n	80015b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b8f      	ldr	r3, [pc, #572]	; (80017d4 <HAL_RCC_ClockConfig+0x264>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 0207 	bic.w	r2, r3, #7
 800159e:	498d      	ldr	r1, [pc, #564]	; (80017d4 <HAL_RCC_ClockConfig+0x264>)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a6:	4b8b      	ldr	r3, [pc, #556]	; (80017d4 <HAL_RCC_ClockConfig+0x264>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e14c      	b.n	8001852 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c4:	4b84      	ldr	r3, [pc, #528]	; (80017d8 <HAL_RCC_ClockConfig+0x268>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4981      	ldr	r1, [pc, #516]	; (80017d8 <HAL_RCC_ClockConfig+0x268>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80df 	beq.w	80017a2 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d13d      	bne.n	8001668 <HAL_RCC_ClockConfig+0xf8>
 80015ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015f4:	fa93 f3a3 	rbit	r3, r3
 80015f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80015fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d102      	bne.n	8001616 <HAL_RCC_ClockConfig+0xa6>
 8001610:	4b71      	ldr	r3, [pc, #452]	; (80017d8 <HAL_RCC_ClockConfig+0x268>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	e00f      	b.n	8001636 <HAL_RCC_ClockConfig+0xc6>
 8001616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800161a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800161e:	fa93 f3a3 	rbit	r3, r3
 8001622:	667b      	str	r3, [r7, #100]	; 0x64
 8001624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001628:	663b      	str	r3, [r7, #96]	; 0x60
 800162a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800162c:	fa93 f3a3 	rbit	r3, r3
 8001630:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001632:	4b69      	ldr	r3, [pc, #420]	; (80017d8 <HAL_RCC_ClockConfig+0x268>)
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800163a:	65ba      	str	r2, [r7, #88]	; 0x58
 800163c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800163e:	fa92 f2a2 	rbit	r2, r2
 8001642:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001646:	fab2 f282 	clz	r2, r2
 800164a:	b252      	sxtb	r2, r2
 800164c:	f042 0220 	orr.w	r2, r2, #32
 8001650:	b252      	sxtb	r2, r2
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	f002 021f 	and.w	r2, r2, #31
 8001658:	2101      	movs	r1, #1
 800165a:	fa01 f202 	lsl.w	r2, r1, r2
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d17d      	bne.n	8001760 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0f4      	b.n	8001852 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d13d      	bne.n	80016ec <HAL_RCC_ClockConfig+0x17c>
 8001670:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001674:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001678:	fa93 f3a3 	rbit	r3, r3
 800167c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800167e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001680:	fab3 f383 	clz	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d102      	bne.n	800169a <HAL_RCC_ClockConfig+0x12a>
 8001694:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <HAL_RCC_ClockConfig+0x268>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	e00f      	b.n	80016ba <HAL_RCC_ClockConfig+0x14a>
 800169a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800169e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016a2:	fa93 f3a3 	rbit	r3, r3
 80016a6:	647b      	str	r3, [r7, #68]	; 0x44
 80016a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ac:	643b      	str	r3, [r7, #64]	; 0x40
 80016ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016b6:	4b48      	ldr	r3, [pc, #288]	; (80017d8 <HAL_RCC_ClockConfig+0x268>)
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016be:	63ba      	str	r2, [r7, #56]	; 0x38
 80016c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016c2:	fa92 f2a2 	rbit	r2, r2
 80016c6:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80016c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016ca:	fab2 f282 	clz	r2, r2
 80016ce:	b252      	sxtb	r2, r2
 80016d0:	f042 0220 	orr.w	r2, r2, #32
 80016d4:	b252      	sxtb	r2, r2
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	f002 021f 	and.w	r2, r2, #31
 80016dc:	2101      	movs	r1, #1
 80016de:	fa01 f202 	lsl.w	r2, r1, r2
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d13b      	bne.n	8001760 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0b2      	b.n	8001852 <HAL_RCC_ClockConfig+0x2e2>
 80016ec:	2302      	movs	r3, #2
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f2:	fa93 f3a3 	rbit	r3, r3
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80016f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	095b      	lsrs	r3, r3, #5
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d102      	bne.n	8001714 <HAL_RCC_ClockConfig+0x1a4>
 800170e:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <HAL_RCC_ClockConfig+0x268>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	e00d      	b.n	8001730 <HAL_RCC_ClockConfig+0x1c0>
 8001714:	2302      	movs	r3, #2
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
 8001720:	2302      	movs	r3, #2
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <HAL_RCC_ClockConfig+0x268>)
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	2202      	movs	r2, #2
 8001732:	61ba      	str	r2, [r7, #24]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	fa92 f2a2 	rbit	r2, r2
 800173a:	617a      	str	r2, [r7, #20]
  return(result);
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	fab2 f282 	clz	r2, r2
 8001742:	b252      	sxtb	r2, r2
 8001744:	f042 0220 	orr.w	r2, r2, #32
 8001748:	b252      	sxtb	r2, r2
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f002 021f 	and.w	r2, r2, #31
 8001750:	2101      	movs	r1, #1
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e078      	b.n	8001852 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_RCC_ClockConfig+0x268>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f023 0203 	bic.w	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	491a      	ldr	r1, [pc, #104]	; (80017d8 <HAL_RCC_ClockConfig+0x268>)
 800176e:	4313      	orrs	r3, r2
 8001770:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001772:	f7fe fd83 	bl	800027c <HAL_GetTick>
 8001776:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001778:	e00a      	b.n	8001790 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177a:	f7fe fd7f 	bl	800027c <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	; 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e060      	b.n	8001852 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_RCC_ClockConfig+0x268>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 020c 	and.w	r2, r3, #12
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	429a      	cmp	r2, r3
 80017a0:	d1eb      	bne.n	800177a <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_RCC_ClockConfig+0x264>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d215      	bcs.n	80017dc <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_RCC_ClockConfig+0x264>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 0207 	bic.w	r2, r3, #7
 80017b8:	4906      	ldr	r1, [pc, #24]	; (80017d4 <HAL_RCC_ClockConfig+0x264>)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <HAL_RCC_ClockConfig+0x264>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d006      	beq.n	80017dc <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e03f      	b.n	8001852 <HAL_RCC_ClockConfig+0x2e2>
 80017d2:	bf00      	nop
 80017d4:	40022000 	.word	0x40022000
 80017d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d008      	beq.n	80017fa <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <HAL_RCC_ClockConfig+0x2ec>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	4919      	ldr	r1, [pc, #100]	; (800185c <HAL_RCC_ClockConfig+0x2ec>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d009      	beq.n	800181a <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_RCC_ClockConfig+0x2ec>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4911      	ldr	r1, [pc, #68]	; (800185c <HAL_RCC_ClockConfig+0x2ec>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800181a:	f000 f825 	bl	8001868 <HAL_RCC_GetSysClockFreq>
 800181e:	4601      	mov	r1, r0
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_RCC_ClockConfig+0x2ec>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001828:	23f0      	movs	r3, #240	; 0xf0
 800182a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	60fb      	str	r3, [r7, #12]
  return(result);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	fab3 f383 	clz	r3, r3
 800183a:	fa22 f303 	lsr.w	r3, r2, r3
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_RCC_ClockConfig+0x2f0>)
 8001840:	5cd3      	ldrb	r3, [r2, r3]
 8001842:	fa21 f303 	lsr.w	r3, r1, r3
 8001846:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_RCC_ClockConfig+0x2f4>)
 8001848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800184a:	2000      	movs	r0, #0
 800184c:	f7fe fcd2 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3778      	adds	r7, #120	; 0x78
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	080031a4 	.word	0x080031a4
 8001864:	20000008 	.word	0x20000008

08001868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b08b      	sub	sp, #44	; 0x2c
 800186c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b04      	cmp	r3, #4
 8001890:	d002      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x30>
 8001892:	2b08      	cmp	r3, #8
 8001894:	d003      	beq.n	800189e <HAL_RCC_GetSysClockFreq+0x36>
 8001896:	e03c      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001898:	4b24      	ldr	r3, [pc, #144]	; (800192c <HAL_RCC_GetSysClockFreq+0xc4>)
 800189a:	623b      	str	r3, [r7, #32]
      break;
 800189c:	e03c      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018a4:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80018a8:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	fa93 f3a3 	rbit	r3, r3
 80018b0:	607b      	str	r3, [r7, #4]
  return(result);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
 80018bc:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <HAL_RCC_GetSysClockFreq+0xc8>)
 80018be:	5cd3      	ldrb	r3, [r2, r3]
 80018c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	f003 020f 	and.w	r2, r3, #15
 80018ca:	230f      	movs	r3, #15
 80018cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	fa93 f3a3 	rbit	r3, r3
 80018d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
 80018e0:	4a14      	ldr	r2, [pc, #80]	; (8001934 <HAL_RCC_GetSysClockFreq+0xcc>)
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <HAL_RCC_GetSysClockFreq+0xc4>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fb02 f303 	mul.w	r3, r2, r3
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001900:	e004      	b.n	800190c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001906:	fb02 f303 	mul.w	r3, r2, r3
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	623b      	str	r3, [r7, #32]
      break;
 8001910:	e002      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001914:	623b      	str	r3, [r7, #32]
      break;
 8001916:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001918:	6a3b      	ldr	r3, [r7, #32]
}
 800191a:	4618      	mov	r0, r3
 800191c:	372c      	adds	r7, #44	; 0x2c
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	007a1200 	.word	0x007a1200
 8001930:	08003184 	.word	0x08003184
 8001934:	08003194 	.word	0x08003194
 8001938:	003d0900 	.word	0x003d0900

0800193c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b092      	sub	sp, #72	; 0x48
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80cf 	beq.w	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001960:	4b86      	ldr	r3, [pc, #536]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10e      	bne.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196c:	4b83      	ldr	r3, [pc, #524]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	4a82      	ldr	r2, [pc, #520]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001976:	61d3      	str	r3, [r2, #28]
 8001978:	4b80      	ldr	r3, [pc, #512]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001984:	2301      	movs	r3, #1
 8001986:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	4b7d      	ldr	r3, [pc, #500]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d118      	bne.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001996:	4b7a      	ldr	r3, [pc, #488]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a79      	ldr	r2, [pc, #484]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a2:	f7fe fc6b 	bl	800027c <HAL_GetTick>
 80019a6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	e008      	b.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019aa:	f7fe fc67 	bl	800027c <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b64      	cmp	r3, #100	; 0x64
 80019b6:	d901      	bls.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e0da      	b.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019bc:	4b70      	ldr	r3, [pc, #448]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019c8:	4b6c      	ldr	r3, [pc, #432]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d07c      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d075      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019e6:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80019fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a00:	fab3 f383 	clz	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	2301      	movs	r3, #1
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b56      	ldr	r3, [pc, #344]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2300      	movs	r3, #0
 8001a32:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a34:	4a51      	ldr	r2, [pc, #324]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a38:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d046      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7fe fc1a 	bl	800027c <HAL_GetTick>
 8001a48:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4c:	f7fe fc16 	bl	800027c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e087      	b.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8001a62:	2302      	movs	r3, #2
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6e:	2302      	movs	r3, #2
 8001a70:	623b      	str	r3, [r7, #32]
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	61fb      	str	r3, [r7, #28]
  return(result);
 8001a7a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d102      	bne.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8001a90:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	e007      	b.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001a96:	2302      	movs	r3, #2
 8001a98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	613a      	str	r2, [r7, #16]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	fa92 f2a2 	rbit	r2, r2
 8001ab0:	60fa      	str	r2, [r7, #12]
  return(result);
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	fab2 f282 	clz	r2, r2
 8001ab8:	b252      	sxtb	r2, r2
 8001aba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001abe:	b252      	sxtb	r2, r2
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	f002 021f 	and.w	r2, r2, #31
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0bc      	beq.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4927      	ldr	r1, [pc, #156]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ae4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	4a22      	ldr	r2, [pc, #136]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	f023 0203 	bic.w	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	491a      	ldr	r1, [pc, #104]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d008      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b22:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f023 0210 	bic.w	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	4913      	ldr	r1, [pc, #76]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	490b      	ldr	r1, [pc, #44]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d008      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	4904      	ldr	r1, [pc, #16]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3748      	adds	r7, #72	; 0x48
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40007000 	.word	0x40007000
 8001b84:	10908100 	.word	0x10908100

08001b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e01d      	b.n	8001bd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f001 f980 	bl	8002eb4 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f000 f972 	bl	8001eb0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e01d      	b.n	8001c2c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d106      	bne.n	8001c0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f815 	bl	8001c34 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	f000 f947 	bl	8001eb0 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2201      	movs	r2, #1
 8001c58:	6839      	ldr	r1, [r7, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fc4b 	bl	80024f6 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <HAL_TIM_PWM_Start+0x74>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00e      	beq.n	8001c88 <HAL_TIM_PWM_Start+0x40>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <HAL_TIM_PWM_Start+0x78>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d009      	beq.n	8001c88 <HAL_TIM_PWM_Start+0x40>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <HAL_TIM_PWM_Start+0x7c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d004      	beq.n	8001c88 <HAL_TIM_PWM_Start+0x40>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <HAL_TIM_PWM_Start+0x80>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d101      	bne.n	8001c8c <HAL_TIM_PWM_Start+0x44>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <HAL_TIM_PWM_Start+0x46>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
} 
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40012c00 	.word	0x40012c00
 8001cc0:	40014000 	.word	0x40014000
 8001cc4:	40014400 	.word	0x40014400
 8001cc8:	40014800 	.word	0x40014800

08001ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_TIM_ConfigClockSource+0x1c>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e0df      	b.n	8001ea8 <HAL_TIM_ConfigClockSource+0x1dc>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d24:	d057      	beq.n	8001dd6 <HAL_TIM_ConfigClockSource+0x10a>
 8001d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d2a:	f200 80b3 	bhi.w	8001e94 <HAL_TIM_ConfigClockSource+0x1c8>
 8001d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d32:	d028      	beq.n	8001d86 <HAL_TIM_ConfigClockSource+0xba>
 8001d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d38:	f200 80ac 	bhi.w	8001e94 <HAL_TIM_ConfigClockSource+0x1c8>
 8001d3c:	2b70      	cmp	r3, #112	; 0x70
 8001d3e:	d02d      	beq.n	8001d9c <HAL_TIM_ConfigClockSource+0xd0>
 8001d40:	2b70      	cmp	r3, #112	; 0x70
 8001d42:	f200 80a7 	bhi.w	8001e94 <HAL_TIM_ConfigClockSource+0x1c8>
 8001d46:	2b60      	cmp	r3, #96	; 0x60
 8001d48:	d068      	beq.n	8001e1c <HAL_TIM_ConfigClockSource+0x150>
 8001d4a:	2b60      	cmp	r3, #96	; 0x60
 8001d4c:	f200 80a2 	bhi.w	8001e94 <HAL_TIM_ConfigClockSource+0x1c8>
 8001d50:	2b50      	cmp	r3, #80	; 0x50
 8001d52:	d053      	beq.n	8001dfc <HAL_TIM_ConfigClockSource+0x130>
 8001d54:	2b50      	cmp	r3, #80	; 0x50
 8001d56:	f200 809d 	bhi.w	8001e94 <HAL_TIM_ConfigClockSource+0x1c8>
 8001d5a:	2b40      	cmp	r3, #64	; 0x40
 8001d5c:	d06e      	beq.n	8001e3c <HAL_TIM_ConfigClockSource+0x170>
 8001d5e:	2b40      	cmp	r3, #64	; 0x40
 8001d60:	f200 8098 	bhi.w	8001e94 <HAL_TIM_ConfigClockSource+0x1c8>
 8001d64:	2b30      	cmp	r3, #48	; 0x30
 8001d66:	f000 808e 	beq.w	8001e86 <HAL_TIM_ConfigClockSource+0x1ba>
 8001d6a:	2b30      	cmp	r3, #48	; 0x30
 8001d6c:	f200 8092 	bhi.w	8001e94 <HAL_TIM_ConfigClockSource+0x1c8>
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	f000 8081 	beq.w	8001e78 <HAL_TIM_ConfigClockSource+0x1ac>
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	f200 808c 	bhi.w	8001e94 <HAL_TIM_ConfigClockSource+0x1c8>
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d06d      	beq.n	8001e5c <HAL_TIM_ConfigClockSource+0x190>
 8001d80:	2b10      	cmp	r3, #16
 8001d82:	d072      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0x19e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8001d84:	e086      	b.n	8001e94 <HAL_TIM_ConfigClockSource+0x1c8>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d94:	f023 0307 	bic.w	r3, r3, #7
 8001d98:	6093      	str	r3, [r2, #8]
    break;
 8001d9a:	e07c      	b.n	8001e96 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ETR_SetConfig(htim->Instance, 
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6899      	ldr	r1, [r3, #8]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f000 fb81 	bl	80024b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001dc2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001dca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	609a      	str	r2, [r3, #8]
    break;
 8001dd4:	e05f      	b.n	8001e96 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ETR_SetConfig(htim->Instance, 
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6899      	ldr	r1, [r3, #8]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	f000 fb64 	bl	80024b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001df8:	609a      	str	r2, [r3, #8]
    break;
 8001dfa:	e04c      	b.n	8001e96 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f000 facb 	bl	80023a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2150      	movs	r1, #80	; 0x50
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fb2c 	bl	8002472 <TIM_ITRx_SetConfig>
    break;
 8001e1a:	e03c      	b.n	8001e96 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6859      	ldr	r1, [r3, #4]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f000 faee 	bl	800240a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2160      	movs	r1, #96	; 0x60
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fb1c 	bl	8002472 <TIM_ITRx_SetConfig>
    break;
 8001e3a:	e02c      	b.n	8001e96 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f000 faab 	bl	80023a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2140      	movs	r1, #64	; 0x40
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fb0c 	bl	8002472 <TIM_ITRx_SetConfig>
    break;
 8001e5a:	e01c      	b.n	8001e96 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fb05 	bl	8002472 <TIM_ITRx_SetConfig>
    break;
 8001e68:	e015      	b.n	8001e96 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2110      	movs	r1, #16
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 fafe 	bl	8002472 <TIM_ITRx_SetConfig>
    break;
 8001e76:	e00e      	b.n	8001e96 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2120      	movs	r1, #32
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 faf7 	bl	8002472 <TIM_ITRx_SetConfig>
    break;
 8001e84:	e007      	b.n	8001e96 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2130      	movs	r1, #48	; 0x30
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 faf0 	bl	8002472 <TIM_ITRx_SetConfig>
    break;
 8001e92:	e000      	b.n	8001e96 <HAL_TIM_ConfigClockSource+0x1ca>
    break;    
 8001e94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a32      	ldr	r2, [pc, #200]	; (8001f90 <TIM_Base_SetConfig+0xe0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d007      	beq.n	8001edc <TIM_Base_SetConfig+0x2c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed2:	d003      	beq.n	8001edc <TIM_Base_SetConfig+0x2c>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a2f      	ldr	r2, [pc, #188]	; (8001f94 <TIM_Base_SetConfig+0xe4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d108      	bne.n	8001eee <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a27      	ldr	r2, [pc, #156]	; (8001f90 <TIM_Base_SetConfig+0xe0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <TIM_Base_SetConfig+0x6e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efc:	d00f      	beq.n	8001f1e <TIM_Base_SetConfig+0x6e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a24      	ldr	r2, [pc, #144]	; (8001f94 <TIM_Base_SetConfig+0xe4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00b      	beq.n	8001f1e <TIM_Base_SetConfig+0x6e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a23      	ldr	r2, [pc, #140]	; (8001f98 <TIM_Base_SetConfig+0xe8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d007      	beq.n	8001f1e <TIM_Base_SetConfig+0x6e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a22      	ldr	r2, [pc, #136]	; (8001f9c <TIM_Base_SetConfig+0xec>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d003      	beq.n	8001f1e <TIM_Base_SetConfig+0x6e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <TIM_Base_SetConfig+0xf0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d108      	bne.n	8001f30 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <TIM_Base_SetConfig+0xe0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00b      	beq.n	8001f74 <TIM_Base_SetConfig+0xc4>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <TIM_Base_SetConfig+0xe8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d007      	beq.n	8001f74 <TIM_Base_SetConfig+0xc4>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <TIM_Base_SetConfig+0xec>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d003      	beq.n	8001f74 <TIM_Base_SetConfig+0xc4>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a0c      	ldr	r2, [pc, #48]	; (8001fa0 <TIM_Base_SetConfig+0xf0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d103      	bne.n	8001f7c <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	615a      	str	r2, [r3, #20]
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40012c00 	.word	0x40012c00
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40014000 	.word	0x40014000
 8001f9c:	40014400 	.word	0x40014400
 8001fa0:	40014800 	.word	0x40014800

08001fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	f023 0201 	bic.w	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f023 0303 	bic.w	r3, r3, #3
 8001fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f023 0302 	bic.w	r3, r3, #2
 8001ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a28      	ldr	r2, [pc, #160]	; (80020ac <TIM_OC1_SetConfig+0x108>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d00b      	beq.n	8002028 <TIM_OC1_SetConfig+0x84>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <TIM_OC1_SetConfig+0x10c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d007      	beq.n	8002028 <TIM_OC1_SetConfig+0x84>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a26      	ldr	r2, [pc, #152]	; (80020b4 <TIM_OC1_SetConfig+0x110>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d003      	beq.n	8002028 <TIM_OC1_SetConfig+0x84>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a25      	ldr	r2, [pc, #148]	; (80020b8 <TIM_OC1_SetConfig+0x114>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d10c      	bne.n	8002042 <TIM_OC1_SetConfig+0x9e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f023 0308 	bic.w	r3, r3, #8
 800202e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	4313      	orrs	r3, r2
 8002038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f023 0304 	bic.w	r3, r3, #4
 8002040:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a19      	ldr	r2, [pc, #100]	; (80020ac <TIM_OC1_SetConfig+0x108>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00b      	beq.n	8002062 <TIM_OC1_SetConfig+0xbe>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a18      	ldr	r2, [pc, #96]	; (80020b0 <TIM_OC1_SetConfig+0x10c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <TIM_OC1_SetConfig+0xbe>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <TIM_OC1_SetConfig+0x110>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d003      	beq.n	8002062 <TIM_OC1_SetConfig+0xbe>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a16      	ldr	r2, [pc, #88]	; (80020b8 <TIM_OC1_SetConfig+0x114>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d111      	bne.n	8002086 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	621a      	str	r2, [r3, #32]
} 
 80020a0:	bf00      	nop
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40012c00 	.word	0x40012c00
 80020b0:	40014000 	.word	0x40014000
 80020b4:	40014400 	.word	0x40014400
 80020b8:	40014800 	.word	0x40014800

080020bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	f023 0210 	bic.w	r2, r3, #16
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002102:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f023 0320 	bic.w	r3, r3, #32
 8002116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a24      	ldr	r2, [pc, #144]	; (80021b8 <TIM_OC2_SetConfig+0xfc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d10d      	bne.n	8002148 <TIM_OC2_SetConfig+0x8c>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002146:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a1b      	ldr	r2, [pc, #108]	; (80021b8 <TIM_OC2_SetConfig+0xfc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00b      	beq.n	8002168 <TIM_OC2_SetConfig+0xac>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <TIM_OC2_SetConfig+0x100>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d007      	beq.n	8002168 <TIM_OC2_SetConfig+0xac>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <TIM_OC2_SetConfig+0x104>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d003      	beq.n	8002168 <TIM_OC2_SetConfig+0xac>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a18      	ldr	r2, [pc, #96]	; (80021c4 <TIM_OC2_SetConfig+0x108>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d113      	bne.n	8002190 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800216e:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002176:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	621a      	str	r2, [r3, #32]
}
 80021aa:	bf00      	nop
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40012c00 	.word	0x40012c00
 80021bc:	40014000 	.word	0x40014000
 80021c0:	40014400 	.word	0x40014400
 80021c4:	40014800 	.word	0x40014800

080021c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 0303 	bic.w	r3, r3, #3
 800220e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	4313      	orrs	r3, r2
 800222c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a23      	ldr	r2, [pc, #140]	; (80022c0 <TIM_OC3_SetConfig+0xf8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d10d      	bne.n	8002252 <TIM_OC3_SetConfig+0x8a>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800223c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002250:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <TIM_OC3_SetConfig+0xf8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00b      	beq.n	8002272 <TIM_OC3_SetConfig+0xaa>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <TIM_OC3_SetConfig+0xfc>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <TIM_OC3_SetConfig+0xaa>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a18      	ldr	r2, [pc, #96]	; (80022c8 <TIM_OC3_SetConfig+0x100>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d003      	beq.n	8002272 <TIM_OC3_SetConfig+0xaa>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a17      	ldr	r2, [pc, #92]	; (80022cc <TIM_OC3_SetConfig+0x104>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d113      	bne.n	800229a <TIM_OC3_SetConfig+0xd2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002280:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	621a      	str	r2, [r3, #32]
}
 80022b4:	bf00      	nop
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	40012c00 	.word	0x40012c00
 80022c4:	40014000 	.word	0x40014000
 80022c8:	40014400 	.word	0x40014400
 80022cc:	40014800 	.word	0x40014800

080022d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800230a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800230e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002316:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800232a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	031b      	lsls	r3, r3, #12
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a16      	ldr	r2, [pc, #88]	; (8002394 <TIM_OC4_SetConfig+0xc4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00b      	beq.n	8002358 <TIM_OC4_SetConfig+0x88>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a15      	ldr	r2, [pc, #84]	; (8002398 <TIM_OC4_SetConfig+0xc8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d007      	beq.n	8002358 <TIM_OC4_SetConfig+0x88>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a14      	ldr	r2, [pc, #80]	; (800239c <TIM_OC4_SetConfig+0xcc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d003      	beq.n	8002358 <TIM_OC4_SetConfig+0x88>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a13      	ldr	r2, [pc, #76]	; (80023a0 <TIM_OC4_SetConfig+0xd0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d109      	bne.n	800236c <TIM_OC4_SetConfig+0x9c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800235e:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	019b      	lsls	r3, r3, #6
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	621a      	str	r2, [r3, #32]
}
 8002386:	bf00      	nop
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40014000 	.word	0x40014000
 800239c:	40014400 	.word	0x40014400
 80023a0:	40014800 	.word	0x40014800

080023a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	f023 0201 	bic.w	r2, r3, #1
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	4313      	orrs	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	f023 030a 	bic.w	r3, r3, #10
 80023e8:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	621a      	str	r2, [r3, #32]
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800240a:	b480      	push	{r7}
 800240c:	b087      	sub	sp, #28
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f023 0210 	bic.w	r2, r3, #16
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800243c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	031b      	lsls	r3, r3, #12
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800244e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	621a      	str	r2, [r3, #32]
}
 8002466:	bf00      	nop
 8002468:	371c      	adds	r7, #28
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8002472:	b480      	push	{r7}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248e:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002490:	887b      	ldrh	r3, [r7, #2]
 8002492:	f043 0307 	orr.w	r3, r3, #7
 8002496:	b29b      	uxth	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	609a      	str	r2, [r3, #8]
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b087      	sub	sp, #28
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	021a      	lsls	r2, r3, #8
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	431a      	orrs	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	4313      	orrs	r3, r2
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	609a      	str	r2, [r3, #8]
} 
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b087      	sub	sp, #28
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002506:	2201      	movs	r2, #1
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a1a      	ldr	r2, [r3, #32]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	43db      	mvns	r3, r3
 8002518:	401a      	ands	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a1a      	ldr	r2, [r3, #32]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	431a      	orrs	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	621a      	str	r2, [r3, #32]
}
 8002530:	bf00      	nop
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002552:	2302      	movs	r3, #2
 8002554:	e105      	b.n	8002762 <HAL_TIM_PWM_ConfigChannel+0x226>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2202      	movs	r2, #2
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b14      	cmp	r3, #20
 800256a:	f200 80f0 	bhi.w	800274e <HAL_TIM_PWM_ConfigChannel+0x212>
 800256e:	a201      	add	r2, pc, #4	; (adr r2, 8002574 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002574:	080025c9 	.word	0x080025c9
 8002578:	0800274f 	.word	0x0800274f
 800257c:	0800274f 	.word	0x0800274f
 8002580:	0800274f 	.word	0x0800274f
 8002584:	08002609 	.word	0x08002609
 8002588:	0800274f 	.word	0x0800274f
 800258c:	0800274f 	.word	0x0800274f
 8002590:	0800274f 	.word	0x0800274f
 8002594:	0800264b 	.word	0x0800264b
 8002598:	0800274f 	.word	0x0800274f
 800259c:	0800274f 	.word	0x0800274f
 80025a0:	0800274f 	.word	0x0800274f
 80025a4:	0800268b 	.word	0x0800268b
 80025a8:	0800274f 	.word	0x0800274f
 80025ac:	0800274f 	.word	0x0800274f
 80025b0:	0800274f 	.word	0x0800274f
 80025b4:	080026cd 	.word	0x080026cd
 80025b8:	0800274f 	.word	0x0800274f
 80025bc:	0800274f 	.word	0x0800274f
 80025c0:	0800274f 	.word	0x0800274f
 80025c4:	0800270d 	.word	0x0800270d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fce8 	bl	8001fa4 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0208 	orr.w	r2, r2, #8
 80025e2:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0204 	bic.w	r2, r2, #4
 80025f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6999      	ldr	r1, [r3, #24]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	619a      	str	r2, [r3, #24]
    }
    break;
 8002606:	e0a3      	b.n	8002750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fd54 	bl	80020bc <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699a      	ldr	r2, [r3, #24]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002622:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6999      	ldr	r1, [r3, #24]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	021a      	lsls	r2, r3, #8
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	619a      	str	r2, [r3, #24]
    }
    break;
 8002648:	e082      	b.n	8002750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fdb9 	bl	80021c8 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0208 	orr.w	r2, r2, #8
 8002664:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0204 	bic.w	r2, r2, #4
 8002674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69d9      	ldr	r1, [r3, #28]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	61da      	str	r2, [r3, #28]
    }
    break;
 8002688:	e062      	b.n	8002750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fe1d 	bl	80022d0 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026a4:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69da      	ldr	r2, [r3, #28]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69d9      	ldr	r1, [r3, #28]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	021a      	lsls	r2, r3, #8
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	61da      	str	r2, [r3, #28]
    }
    break;
 80026ca:	e041      	b.n	8002750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f916 	bl	8002904 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0208 	orr.w	r2, r2, #8
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0204 	bic.w	r2, r2, #4
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 800270a:	e021      	b.n	8002750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f95a 	bl	80029cc <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002726:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002736:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	021a      	lsls	r2, r3, #8
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 800274c:	e000      	b.n	8002750 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 800274e:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop

0800276c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002780:	2302      	movs	r3, #2
 8002782:	e038      	b.n	80027f6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a18      	ldr	r2, [pc, #96]	; (8002804 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d108      	bne.n	80027b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80027ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027d0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
} 
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40012c00 	.word	0x40012c00

08002808 <HAL_TIMEx_ConfigBreakDeadTime>:
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002820:	2302      	movs	r3, #2
 8002822:	e067      	b.n	80028f4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4313      	orrs	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a13      	ldr	r2, [pc, #76]	; (8002900 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d115      	bne.n	80028e2 <HAL_TIMEx_ConfigBreakDeadTime+0xda>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	051b      	lsls	r3, r3, #20
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40012c00 	.word	0x40012c00

08002904 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002936:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002942:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002954:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	041b      	lsls	r3, r3, #16
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a15      	ldr	r2, [pc, #84]	; (80029bc <TIM_OC5_SetConfig+0xb8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00b      	beq.n	8002982 <TIM_OC5_SetConfig+0x7e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <TIM_OC5_SetConfig+0xbc>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <TIM_OC5_SetConfig+0x7e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <TIM_OC5_SetConfig+0xc0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d003      	beq.n	8002982 <TIM_OC5_SetConfig+0x7e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <TIM_OC5_SetConfig+0xc4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d109      	bne.n	8002996 <TIM_OC5_SetConfig+0x92>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002988:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	621a      	str	r2, [r3, #32]
}
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40014000 	.word	0x40014000
 80029c4:	40014400 	.word	0x40014400
 80029c8:	40014800 	.word	0x40014800

080029cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a0a:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a1e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	051b      	lsls	r3, r3, #20
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <TIM_OC6_SetConfig+0xbc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00b      	beq.n	8002a4c <TIM_OC6_SetConfig+0x80>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <TIM_OC6_SetConfig+0xc0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d007      	beq.n	8002a4c <TIM_OC6_SetConfig+0x80>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <TIM_OC6_SetConfig+0xc4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d003      	beq.n	8002a4c <TIM_OC6_SetConfig+0x80>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a13      	ldr	r2, [pc, #76]	; (8002a94 <TIM_OC6_SetConfig+0xc8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d109      	bne.n	8002a60 <TIM_OC6_SetConfig+0x94>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	029b      	lsls	r3, r3, #10
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	621a      	str	r2, [r3, #32]
} 
 8002a7a:	bf00      	nop
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40014000 	.word	0x40014000
 8002a90:	40014400 	.word	0x40014400
 8002a94:	40014800 	.word	0x40014800

08002a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a9e:	f7fd fb93 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aa2:	f000 f83d 	bl	8002b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002aa6:	f000 f9b5 	bl	8002e14 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002aaa:	f000 f891 	bl	8002bd0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002aae:	f000 f93b 	bl	8002d28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  char txbuf[30]={0};
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	f107 0308 	add.w	r3, r7, #8
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	60da      	str	r2, [r3, #12]
 8002ac4:	611a      	str	r2, [r3, #16]
 8002ac6:	615a      	str	r2, [r3, #20]
 8002ac8:	831a      	strh	r2, [r3, #24]
   uint16_t value=0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	84bb      	strh	r3, [r7, #36]	; 0x24
   short duty=1;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	84fb      	strh	r3, [r7, #38]	; 0x26

   HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4810      	ldr	r0, [pc, #64]	; (8002b18 <main+0x80>)
 8002ad6:	f7ff f8b7 	bl	8001c48 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8002ada:	2104      	movs	r1, #4
 8002adc:	480f      	ldr	r0, [pc, #60]	; (8002b1c <main+0x84>)
 8002ade:	f7ff f8b3 	bl	8001c48 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  duty++;
 8002ae2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	84fb      	strh	r3, [r7, #38]	; 0x26
	  if(duty >255){
 8002aee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002af2:	2bff      	cmp	r3, #255	; 0xff
 8002af4:	dd01      	ble.n	8002afa <main+0x62>
		  duty=0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	84fb      	strh	r3, [r7, #38]	; 0x26
	  }
	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8002afa:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <main+0x80>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002b02:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,duty);
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <main+0x84>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002b0c:	639a      	str	r2, [r3, #56]	; 0x38
	 HAL_Delay(1000);
 8002b0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b12:	f7fd fbbf 	bl	8000294 <HAL_Delay>
	  duty++;
 8002b16:	e7e4      	b.n	8002ae2 <main+0x4a>
 8002b18:	2000002c 	.word	0x2000002c
 8002b1c:	2000006c 	.word	0x2000006c

08002b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b096      	sub	sp, #88	; 0x58
 8002b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b2a:	2228      	movs	r2, #40	; 0x28
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fb14 	bl	800315c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b34:	f107 031c 	add.w	r3, r7, #28
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b44:	1d3b      	adds	r3, r7, #4
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	60da      	str	r2, [r3, #12]
 8002b50:	611a      	str	r2, [r3, #16]
 8002b52:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b54:	2302      	movs	r3, #2
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b5c:	2310      	movs	r3, #16
 8002b5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b60:	2302      	movs	r3, #2
 8002b62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b64:	2300      	movs	r3, #0
 8002b66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002b68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fe0e 	bl	8000794 <HAL_RCC_OscConfig>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002b7e:	f000 f96d 	bl	8002e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b82:	230f      	movs	r3, #15
 8002b84:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b86:	2302      	movs	r3, #2
 8002b88:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b92:	2300      	movs	r3, #0
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b96:	f107 031c 	add.w	r3, r7, #28
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fce7 	bl	8001570 <HAL_RCC_ClockConfig>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002ba8:	f000 f958 	bl	8002e5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bb6:	1d3b      	adds	r3, r7, #4
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe febf 	bl	800193c <HAL_RCCEx_PeriphCLKConfig>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002bc4:	f000 f94a 	bl	8002e5c <Error_Handler>
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3758      	adds	r7, #88	; 0x58
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b09a      	sub	sp, #104	; 0x68
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
 8002c00:	615a      	str	r2, [r3, #20]
 8002c02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	222c      	movs	r2, #44	; 0x2c
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 faa6 	bl	800315c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c10:	4b43      	ldr	r3, [pc, #268]	; (8002d20 <MX_TIM1_Init+0x150>)
 8002c12:	4a44      	ldr	r2, [pc, #272]	; (8002d24 <MX_TIM1_Init+0x154>)
 8002c14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 624;
 8002c16:	4b42      	ldr	r3, [pc, #264]	; (8002d20 <MX_TIM1_Init+0x150>)
 8002c18:	f44f 721c 	mov.w	r2, #624	; 0x270
 8002c1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1e:	4b40      	ldr	r3, [pc, #256]	; (8002d20 <MX_TIM1_Init+0x150>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8002c24:	4b3e      	ldr	r3, [pc, #248]	; (8002d20 <MX_TIM1_Init+0x150>)
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	; (8002d20 <MX_TIM1_Init+0x150>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c30:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <MX_TIM1_Init+0x150>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c36:	4b3a      	ldr	r3, [pc, #232]	; (8002d20 <MX_TIM1_Init+0x150>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c3c:	4838      	ldr	r0, [pc, #224]	; (8002d20 <MX_TIM1_Init+0x150>)
 8002c3e:	f7fe ffa3 	bl	8001b88 <HAL_TIM_Base_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002c48:	f000 f908 	bl	8002e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c50:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c56:	4619      	mov	r1, r3
 8002c58:	4831      	ldr	r0, [pc, #196]	; (8002d20 <MX_TIM1_Init+0x150>)
 8002c5a:	f7ff f837 	bl	8001ccc <HAL_TIM_ConfigClockSource>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002c64:	f000 f8fa 	bl	8002e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c68:	482d      	ldr	r0, [pc, #180]	; (8002d20 <MX_TIM1_Init+0x150>)
 8002c6a:	f7fe ffb8 	bl	8001bde <HAL_TIM_PWM_Init>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002c74:	f000 f8f2 	bl	8002e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4825      	ldr	r0, [pc, #148]	; (8002d20 <MX_TIM1_Init+0x150>)
 8002c8c:	f7ff fd6e 	bl	800276c <HAL_TIMEx_MasterConfigSynchronization>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002c96:	f000 f8e1 	bl	8002e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c9a:	2360      	movs	r3, #96	; 0x60
 8002c9c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cba:	2200      	movs	r2, #0
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4818      	ldr	r0, [pc, #96]	; (8002d20 <MX_TIM1_Init+0x150>)
 8002cc0:	f7ff fc3c 	bl	800253c <HAL_TIM_PWM_ConfigChannel>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002cca:	f000 f8c7 	bl	8002e5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ce6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002cf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	4619      	mov	r1, r3
 8002d02:	4807      	ldr	r0, [pc, #28]	; (8002d20 <MX_TIM1_Init+0x150>)
 8002d04:	f7ff fd80 	bl	8002808 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002d0e:	f000 f8a5 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d12:	4803      	ldr	r0, [pc, #12]	; (8002d20 <MX_TIM1_Init+0x150>)
 8002d14:	f000 f900 	bl	8002f18 <HAL_TIM_MspPostInit>

}
 8002d18:	bf00      	nop
 8002d1a:	3768      	adds	r7, #104	; 0x68
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	2000002c 	.word	0x2000002c
 8002d24:	40012c00 	.word	0x40012c00

08002d28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08e      	sub	sp, #56	; 0x38
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	609a      	str	r2, [r3, #8]
 8002d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d48:	463b      	mov	r3, r7
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	60da      	str	r2, [r3, #12]
 8002d54:	611a      	str	r2, [r3, #16]
 8002d56:	615a      	str	r2, [r3, #20]
 8002d58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d5a:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <MX_TIM2_Init+0xe8>)
 8002d5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 625;
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <MX_TIM2_Init+0xe8>)
 8002d64:	f240 2271 	movw	r2, #625	; 0x271
 8002d68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6a:	4b29      	ldr	r3, [pc, #164]	; (8002e10 <MX_TIM2_Init+0xe8>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8002d70:	4b27      	ldr	r3, [pc, #156]	; (8002e10 <MX_TIM2_Init+0xe8>)
 8002d72:	22ff      	movs	r2, #255	; 0xff
 8002d74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d76:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <MX_TIM2_Init+0xe8>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d7c:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <MX_TIM2_Init+0xe8>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d82:	4823      	ldr	r0, [pc, #140]	; (8002e10 <MX_TIM2_Init+0xe8>)
 8002d84:	f7fe ff00 	bl	8001b88 <HAL_TIM_Base_Init>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002d8e:	f000 f865 	bl	8002e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	481c      	ldr	r0, [pc, #112]	; (8002e10 <MX_TIM2_Init+0xe8>)
 8002da0:	f7fe ff94 	bl	8001ccc <HAL_TIM_ConfigClockSource>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002daa:	f000 f857 	bl	8002e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002dae:	4818      	ldr	r0, [pc, #96]	; (8002e10 <MX_TIM2_Init+0xe8>)
 8002db0:	f7fe ff15 	bl	8001bde <HAL_TIM_PWM_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002dba:	f000 f84f 	bl	8002e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dc6:	f107 031c 	add.w	r3, r7, #28
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4810      	ldr	r0, [pc, #64]	; (8002e10 <MX_TIM2_Init+0xe8>)
 8002dce:	f7ff fccd 	bl	800276c <HAL_TIMEx_MasterConfigSynchronization>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002dd8:	f000 f840 	bl	8002e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ddc:	2360      	movs	r3, #96	; 0x60
 8002dde:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dec:	463b      	mov	r3, r7
 8002dee:	2204      	movs	r2, #4
 8002df0:	4619      	mov	r1, r3
 8002df2:	4807      	ldr	r0, [pc, #28]	; (8002e10 <MX_TIM2_Init+0xe8>)
 8002df4:	f7ff fba2 	bl	800253c <HAL_TIM_PWM_ConfigChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002dfe:	f000 f82d 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e02:	4803      	ldr	r0, [pc, #12]	; (8002e10 <MX_TIM2_Init+0xe8>)
 8002e04:	f000 f888 	bl	8002f18 <HAL_TIM_MspPostInit>

}
 8002e08:	bf00      	nop
 8002e0a:	3738      	adds	r7, #56	; 0x38
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	2000006c 	.word	0x2000006c

08002e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <MX_GPIO_Init+0x44>)
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	4a0e      	ldr	r2, [pc, #56]	; (8002e58 <MX_GPIO_Init+0x44>)
 8002e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e24:	6153      	str	r3, [r2, #20]
 8002e26:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <MX_GPIO_Init+0x44>)
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	607b      	str	r3, [r7, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <MX_GPIO_Init+0x44>)
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	4a08      	ldr	r2, [pc, #32]	; (8002e58 <MX_GPIO_Init+0x44>)
 8002e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e3c:	6153      	str	r3, [r2, #20]
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <MX_GPIO_Init+0x44>)
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]

}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000

08002e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e72:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6193      	str	r3, [r2, #24]
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4a08      	ldr	r2, [pc, #32]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e94:	61d3      	str	r3, [r2, #28]
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000

08002eb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <HAL_TIM_Base_MspInit+0x5c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <HAL_TIM_Base_MspInit+0x60>)
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <HAL_TIM_Base_MspInit+0x60>)
 8002ecc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ed0:	6193      	str	r3, [r2, #24]
 8002ed2:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_TIM_Base_MspInit+0x60>)
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ede:	e010      	b.n	8002f02 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d10b      	bne.n	8002f02 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <HAL_TIM_Base_MspInit+0x60>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <HAL_TIM_Base_MspInit+0x60>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	61d3      	str	r3, [r2, #28]
 8002ef6:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_TIM_Base_MspInit+0x60>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
}
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40021000 	.word	0x40021000

08002f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f107 0314 	add.w	r3, r7, #20
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a23      	ldr	r2, [pc, #140]	; (8002fc4 <HAL_TIM_MspPostInit+0xac>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d11e      	bne.n	8002f78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3a:	4b23      	ldr	r3, [pc, #140]	; (8002fc8 <HAL_TIM_MspPostInit+0xb0>)
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	4a22      	ldr	r2, [pc, #136]	; (8002fc8 <HAL_TIM_MspPostInit+0xb0>)
 8002f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f44:	6153      	str	r3, [r2, #20]
 8002f46:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_TIM_MspPostInit+0xb0>)
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f60:	2300      	movs	r3, #0
 8002f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002f64:	2306      	movs	r3, #6
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f68:	f107 0314 	add.w	r3, r7, #20
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f72:	f7fd fa99 	bl	80004a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002f76:	e020      	b.n	8002fba <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f80:	d11b      	bne.n	8002fba <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <HAL_TIM_MspPostInit+0xb0>)
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	4a10      	ldr	r2, [pc, #64]	; (8002fc8 <HAL_TIM_MspPostInit+0xb0>)
 8002f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f8c:	6153      	str	r3, [r2, #20]
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <HAL_TIM_MspPostInit+0xb0>)
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002faa:	2301      	movs	r3, #1
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fae:	f107 0314 	add.w	r3, r7, #20
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4805      	ldr	r0, [pc, #20]	; (8002fcc <HAL_TIM_MspPostInit+0xb4>)
 8002fb6:	f7fd fa77 	bl	80004a8 <HAL_GPIO_Init>
}
 8002fba:	bf00      	nop
 8002fbc:	3728      	adds	r7, #40	; 0x28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	48000400 	.word	0x48000400

08002fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fe2:	e7fe      	b.n	8002fe2 <HardFault_Handler+0x4>

08002fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fe8:	e7fe      	b.n	8002fe8 <MemManage_Handler+0x4>

08002fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fee:	e7fe      	b.n	8002fee <BusFault_Handler+0x4>

08002ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ff4:	e7fe      	b.n	8002ff4 <UsageFault_Handler+0x4>

08002ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003012:	b480      	push	{r7}
 8003014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003024:	f7fd f916 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003028:	bf00      	nop
 800302a:	bd80      	pop	{r7, pc}

0800302c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003030:	4b1f      	ldr	r3, [pc, #124]	; (80030b0 <SystemInit+0x84>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <SystemInit+0x84>)
 8003038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800303c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003040:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <SystemInit+0x88>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1b      	ldr	r2, [pc, #108]	; (80030b4 <SystemInit+0x88>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800304c:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <SystemInit+0x88>)
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	4918      	ldr	r1, [pc, #96]	; (80030b4 <SystemInit+0x88>)
 8003052:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <SystemInit+0x8c>)
 8003054:	4013      	ands	r3, r2
 8003056:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003058:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <SystemInit+0x88>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <SystemInit+0x88>)
 800305e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003066:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003068:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <SystemInit+0x88>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a11      	ldr	r2, [pc, #68]	; (80030b4 <SystemInit+0x88>)
 800306e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003072:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <SystemInit+0x88>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <SystemInit+0x88>)
 800307a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800307e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <SystemInit+0x88>)
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	4a0b      	ldr	r2, [pc, #44]	; (80030b4 <SystemInit+0x88>)
 8003086:	f023 030f 	bic.w	r3, r3, #15
 800308a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <SystemInit+0x88>)
 800308e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003090:	4908      	ldr	r1, [pc, #32]	; (80030b4 <SystemInit+0x88>)
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <SystemInit+0x90>)
 8003094:	4013      	ands	r3, r2
 8003096:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <SystemInit+0x88>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <SystemInit+0x84>)
 80030a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030a4:	609a      	str	r2, [r3, #8]
#endif
}
 80030a6:	bf00      	nop
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000ed00 	.word	0xe000ed00
 80030b4:	40021000 	.word	0x40021000
 80030b8:	f87fc00c 	.word	0xf87fc00c
 80030bc:	ff00fccc 	.word	0xff00fccc

080030c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80030c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80030c6:	e003      	b.n	80030d0 <LoopCopyDataInit>

080030c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80030ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80030cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80030ce:	3104      	adds	r1, #4

080030d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80030d0:	480b      	ldr	r0, [pc, #44]	; (8003100 <LoopForever+0xa>)
	ldr	r3, =_edata
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <LoopForever+0xe>)
	adds	r2, r0, r1
 80030d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80030d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80030d8:	d3f6      	bcc.n	80030c8 <CopyDataInit>
	ldr	r2, =_sbss
 80030da:	4a0b      	ldr	r2, [pc, #44]	; (8003108 <LoopForever+0x12>)
	b	LoopFillZerobss
 80030dc:	e002      	b.n	80030e4 <LoopFillZerobss>

080030de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80030de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80030e0:	f842 3b04 	str.w	r3, [r2], #4

080030e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80030e4:	4b09      	ldr	r3, [pc, #36]	; (800310c <LoopForever+0x16>)
	cmp	r2, r3
 80030e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80030e8:	d3f9      	bcc.n	80030de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030ea:	f7ff ff9f 	bl	800302c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ee:	f000 f811 	bl	8003114 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030f2:	f7ff fcd1 	bl	8002a98 <main>

080030f6 <LoopForever>:

LoopForever:
    b LoopForever
 80030f6:	e7fe      	b.n	80030f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030f8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80030fc:	080031bc 	.word	0x080031bc
	ldr	r0, =_sdata
 8003100:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003104:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003108:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800310c:	200000ac 	.word	0x200000ac

08003110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003110:	e7fe      	b.n	8003110 <ADC1_2_IRQHandler>
	...

08003114 <__libc_init_array>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	4d0d      	ldr	r5, [pc, #52]	; (800314c <__libc_init_array+0x38>)
 8003118:	4c0d      	ldr	r4, [pc, #52]	; (8003150 <__libc_init_array+0x3c>)
 800311a:	1b64      	subs	r4, r4, r5
 800311c:	10a4      	asrs	r4, r4, #2
 800311e:	2600      	movs	r6, #0
 8003120:	42a6      	cmp	r6, r4
 8003122:	d109      	bne.n	8003138 <__libc_init_array+0x24>
 8003124:	4d0b      	ldr	r5, [pc, #44]	; (8003154 <__libc_init_array+0x40>)
 8003126:	4c0c      	ldr	r4, [pc, #48]	; (8003158 <__libc_init_array+0x44>)
 8003128:	f000 f820 	bl	800316c <_init>
 800312c:	1b64      	subs	r4, r4, r5
 800312e:	10a4      	asrs	r4, r4, #2
 8003130:	2600      	movs	r6, #0
 8003132:	42a6      	cmp	r6, r4
 8003134:	d105      	bne.n	8003142 <__libc_init_array+0x2e>
 8003136:	bd70      	pop	{r4, r5, r6, pc}
 8003138:	f855 3b04 	ldr.w	r3, [r5], #4
 800313c:	4798      	blx	r3
 800313e:	3601      	adds	r6, #1
 8003140:	e7ee      	b.n	8003120 <__libc_init_array+0xc>
 8003142:	f855 3b04 	ldr.w	r3, [r5], #4
 8003146:	4798      	blx	r3
 8003148:	3601      	adds	r6, #1
 800314a:	e7f2      	b.n	8003132 <__libc_init_array+0x1e>
 800314c:	080031b4 	.word	0x080031b4
 8003150:	080031b4 	.word	0x080031b4
 8003154:	080031b4 	.word	0x080031b4
 8003158:	080031b8 	.word	0x080031b8

0800315c <memset>:
 800315c:	4402      	add	r2, r0
 800315e:	4603      	mov	r3, r0
 8003160:	4293      	cmp	r3, r2
 8003162:	d100      	bne.n	8003166 <memset+0xa>
 8003164:	4770      	bx	lr
 8003166:	f803 1b01 	strb.w	r1, [r3], #1
 800316a:	e7f9      	b.n	8003160 <memset+0x4>

0800316c <_init>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr

08003178 <_fini>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	bf00      	nop
 800317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317e:	bc08      	pop	{r3}
 8003180:	469e      	mov	lr, r3
 8003182:	4770      	bx	lr
