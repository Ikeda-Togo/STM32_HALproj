
servo_F303K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003164  08003164  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003164  08003164  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003164  08003164  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003168  08003168  00013168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800316c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08003178  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08003178  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e25d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b3f  00000000  00000000  0002e299  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000918  00000000  00000000  0002fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000860  00000000  00000000  000306f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b3a  00000000  00000000  00030f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008465  00000000  00000000  00048a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000828ab  00000000  00000000  00050eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d379a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002530  00000000  00000000  000d3818  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800311c 	.word	0x0800311c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800311c 	.word	0x0800311c

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f92f 	bl	800043c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f002 fe1a 	bl	8002e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f939 	bl	800048a <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f000 f90f 	bl	8000452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000028 	.word	0x20000028

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028

08000294 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800029c:	f7ff ffee 	bl	800027c <HAL_GetTick>
 80002a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002ac:	d005      	beq.n	80002ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <HAL_Delay+0x40>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4413      	add	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002ba:	bf00      	nop
 80002bc:	f7ff ffde 	bl	800027c <HAL_GetTick>
 80002c0:	4602      	mov	r2, r0
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	1ad3      	subs	r3, r2, r3
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d8f7      	bhi.n	80002bc <HAL_Delay+0x28>
  {
  }
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000004 	.word	0x20000004

080002d8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f003 0307 	and.w	r3, r3, #7
 80002e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <NVIC_SetPriorityGrouping+0x44>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ee:	68ba      	ldr	r2, [r7, #8]
 80002f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002f4:	4013      	ands	r3, r2
 80002f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800030a:	4a04      	ldr	r2, [pc, #16]	; (800031c <NVIC_SetPriorityGrouping+0x44>)
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	60d3      	str	r3, [r2, #12]
}
 8000310:	bf00      	nop
 8000312:	3714      	adds	r7, #20
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <NVIC_GetPriorityGrouping+0x18>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	0a1b      	lsrs	r3, r3, #8
 800032a:	f003 0307 	and.w	r3, r3, #7
}
 800032e:	4618      	mov	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	6039      	str	r1, [r7, #0]
 8000346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034c:	2b00      	cmp	r3, #0
 800034e:	da0b      	bge.n	8000368 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	b2da      	uxtb	r2, r3
 8000354:	490c      	ldr	r1, [pc, #48]	; (8000388 <NVIC_SetPriority+0x4c>)
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	f003 030f 	and.w	r3, r3, #15
 800035c:	3b04      	subs	r3, #4
 800035e:	0112      	lsls	r2, r2, #4
 8000360:	b2d2      	uxtb	r2, r2
 8000362:	440b      	add	r3, r1
 8000364:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000366:	e009      	b.n	800037c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	b2da      	uxtb	r2, r3
 800036c:	4907      	ldr	r1, [pc, #28]	; (800038c <NVIC_SetPriority+0x50>)
 800036e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000372:	0112      	lsls	r2, r2, #4
 8000374:	b2d2      	uxtb	r2, r2
 8000376:	440b      	add	r3, r1
 8000378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	e000ed00 	.word	0xe000ed00
 800038c:	e000e100 	.word	0xe000e100

08000390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000390:	b480      	push	{r7}
 8000392:	b089      	sub	sp, #36	; 0x24
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f003 0307 	and.w	r3, r3, #7
 80003a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003a4:	69fb      	ldr	r3, [r7, #28]
 80003a6:	f1c3 0307 	rsb	r3, r3, #7
 80003aa:	2b04      	cmp	r3, #4
 80003ac:	bf28      	it	cs
 80003ae:	2304      	movcs	r3, #4
 80003b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	3304      	adds	r3, #4
 80003b6:	2b06      	cmp	r3, #6
 80003b8:	d902      	bls.n	80003c0 <NVIC_EncodePriority+0x30>
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	3b03      	subs	r3, #3
 80003be:	e000      	b.n	80003c2 <NVIC_EncodePriority+0x32>
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c4:	f04f 32ff 	mov.w	r2, #4294967295
 80003c8:	69bb      	ldr	r3, [r7, #24]
 80003ca:	fa02 f303 	lsl.w	r3, r2, r3
 80003ce:	43da      	mvns	r2, r3
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	401a      	ands	r2, r3
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003d8:	f04f 31ff 	mov.w	r1, #4294967295
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	fa01 f303 	lsl.w	r3, r1, r3
 80003e2:	43d9      	mvns	r1, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003e8:	4313      	orrs	r3, r2
         );
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3724      	adds	r7, #36	; 0x24
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
	...

080003f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3b01      	subs	r3, #1
 8000404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000408:	d301      	bcc.n	800040e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040a:	2301      	movs	r3, #1
 800040c:	e00f      	b.n	800042e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800040e:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <SysTick_Config+0x40>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000416:	210f      	movs	r1, #15
 8000418:	f04f 30ff 	mov.w	r0, #4294967295
 800041c:	f7ff ff8e 	bl	800033c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <SysTick_Config+0x40>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <SysTick_Config+0x40>)
 8000428:	2207      	movs	r2, #7
 800042a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800042c:	2300      	movs	r3, #0
}
 800042e:	4618      	mov	r0, r3
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	e000e010 	.word	0xe000e010

0800043c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f7ff ff47 	bl	80002d8 <NVIC_SetPriorityGrouping>
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	b086      	sub	sp, #24
 8000456:	af00      	add	r7, sp, #0
 8000458:	4603      	mov	r3, r0
 800045a:	60b9      	str	r1, [r7, #8]
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000464:	f7ff ff5c 	bl	8000320 <NVIC_GetPriorityGrouping>
 8000468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	68b9      	ldr	r1, [r7, #8]
 800046e:	6978      	ldr	r0, [r7, #20]
 8000470:	f7ff ff8e 	bl	8000390 <NVIC_EncodePriority>
 8000474:	4602      	mov	r2, r0
 8000476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047a:	4611      	mov	r1, r2
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff5d 	bl	800033c <NVIC_SetPriority>
}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f7ff ffb0 	bl	80003f8 <SysTick_Config>
 8000498:	4603      	mov	r3, r0
}
 800049a:	4618      	mov	r0, r3
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b087      	sub	sp, #28
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004ba:	e14e      	b.n	800075a <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	2101      	movs	r1, #1
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	fa01 f303 	lsl.w	r3, r1, r3
 80004c8:	4013      	ands	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	f000 8140 	beq.w	8000754 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d003      	beq.n	80004e4 <HAL_GPIO_Init+0x40>
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b12      	cmp	r3, #18
 80004e2:	d123      	bne.n	800052c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	08da      	lsrs	r2, r3, #3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3208      	adds	r2, #8
 80004ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	f003 0307 	and.w	r3, r3, #7
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	220f      	movs	r2, #15
 80004fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	693a      	ldr	r2, [r7, #16]
 8000504:	4013      	ands	r3, r2
 8000506:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	691a      	ldr	r2, [r3, #16]
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	f003 0307 	and.w	r3, r3, #7
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	693a      	ldr	r2, [r7, #16]
 800051a:	4313      	orrs	r3, r2
 800051c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	08da      	lsrs	r2, r3, #3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3208      	adds	r2, #8
 8000526:	6939      	ldr	r1, [r7, #16]
 8000528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	2203      	movs	r2, #3
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	43db      	mvns	r3, r3
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	4013      	ands	r3, r2
 8000542:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	f003 0203 	and.w	r2, r3, #3
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	4313      	orrs	r3, r2
 8000558:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	693a      	ldr	r2, [r7, #16]
 800055e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d00b      	beq.n	8000580 <HAL_GPIO_Init+0xdc>
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	2b02      	cmp	r3, #2
 800056e:	d007      	beq.n	8000580 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000574:	2b11      	cmp	r3, #17
 8000576:	d003      	beq.n	8000580 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	2b12      	cmp	r3, #18
 800057e:	d130      	bne.n	80005e2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	2203      	movs	r2, #3
 800058c:	fa02 f303 	lsl.w	r3, r2, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	4013      	ands	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	68da      	ldr	r2, [r3, #12]
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	693a      	ldr	r2, [r7, #16]
 80005ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005b6:	2201      	movs	r2, #1
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	4013      	ands	r3, r2
 80005c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	091b      	lsrs	r3, r3, #4
 80005cc:	f003 0201 	and.w	r2, r3, #1
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	4313      	orrs	r3, r2
 80005da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	2203      	movs	r2, #3
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	693a      	ldr	r2, [r7, #16]
 80005f6:	4013      	ands	r3, r2
 80005f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	4313      	orrs	r3, r2
 800060a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061a:	2b00      	cmp	r3, #0
 800061c:	f000 809a 	beq.w	8000754 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000620:	4b55      	ldr	r3, [pc, #340]	; (8000778 <HAL_GPIO_Init+0x2d4>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a54      	ldr	r2, [pc, #336]	; (8000778 <HAL_GPIO_Init+0x2d4>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b52      	ldr	r3, [pc, #328]	; (8000778 <HAL_GPIO_Init+0x2d4>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000638:	4a50      	ldr	r2, [pc, #320]	; (800077c <HAL_GPIO_Init+0x2d8>)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	089b      	lsrs	r3, r3, #2
 800063e:	3302      	adds	r3, #2
 8000640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000644:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	f003 0303 	and.w	r3, r3, #3
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	220f      	movs	r2, #15
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	43db      	mvns	r3, r3
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	4013      	ands	r3, r2
 800065a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000662:	d013      	beq.n	800068c <HAL_GPIO_Init+0x1e8>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a46      	ldr	r2, [pc, #280]	; (8000780 <HAL_GPIO_Init+0x2dc>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d00d      	beq.n	8000688 <HAL_GPIO_Init+0x1e4>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a45      	ldr	r2, [pc, #276]	; (8000784 <HAL_GPIO_Init+0x2e0>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d007      	beq.n	8000684 <HAL_GPIO_Init+0x1e0>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a44      	ldr	r2, [pc, #272]	; (8000788 <HAL_GPIO_Init+0x2e4>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d101      	bne.n	8000680 <HAL_GPIO_Init+0x1dc>
 800067c:	2303      	movs	r3, #3
 800067e:	e006      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 8000680:	2305      	movs	r3, #5
 8000682:	e004      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 8000684:	2302      	movs	r3, #2
 8000686:	e002      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 8000688:	2301      	movs	r3, #1
 800068a:	e000      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 800068c:	2300      	movs	r3, #0
 800068e:	697a      	ldr	r2, [r7, #20]
 8000690:	f002 0203 	and.w	r2, r2, #3
 8000694:	0092      	lsls	r2, r2, #2
 8000696:	4093      	lsls	r3, r2
 8000698:	693a      	ldr	r2, [r7, #16]
 800069a:	4313      	orrs	r3, r2
 800069c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800069e:	4937      	ldr	r1, [pc, #220]	; (800077c <HAL_GPIO_Init+0x2d8>)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	3302      	adds	r3, #2
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	43db      	mvns	r3, r3
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d003      	beq.n	80006d0 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80006c8:	693a      	ldr	r2, [r7, #16]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006d0:	4a2e      	ldr	r2, [pc, #184]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	43db      	mvns	r3, r3
 80006e0:	693a      	ldr	r2, [r7, #16]
 80006e2:	4013      	ands	r3, r2
 80006e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d003      	beq.n	80006fa <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <HAL_GPIO_Init+0x2e8>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	43db      	mvns	r3, r3
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	4013      	ands	r3, r2
 800070e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 800071c:	693a      	ldr	r2, [r7, #16]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	4313      	orrs	r3, r2
 8000722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <HAL_GPIO_Init+0x2e8>)
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_GPIO_Init+0x2e8>)
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	43db      	mvns	r3, r3
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	4013      	ands	r3, r2
 8000738:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000742:	2b00      	cmp	r3, #0
 8000744:	d003      	beq.n	800074e <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4313      	orrs	r3, r2
 800074c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <HAL_GPIO_Init+0x2e8>)
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	3301      	adds	r3, #1
 8000758:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	fa22 f303 	lsr.w	r3, r2, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	f47f aea9 	bne.w	80004bc <HAL_GPIO_Init+0x18>
  }
}
 800076a:	bf00      	nop
 800076c:	371c      	adds	r7, #28
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000
 800077c:	40010000 	.word	0x40010000
 8000780:	48000400 	.word	0x48000400
 8000784:	48000800 	.word	0x48000800
 8000788:	48000c00 	.word	0x48000c00
 800078c:	40010400 	.word	0x40010400

08000790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000796:	af00      	add	r7, sp, #0
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d102      	bne.n	80007aa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	f000 beda 	b.w	800155e <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	f000 816e 	beq.w	8000a96 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007ba:	4bb5      	ldr	r3, [pc, #724]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	f003 030c 	and.w	r3, r3, #12
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	d00c      	beq.n	80007e0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007c6:	4bb2      	ldr	r3, [pc, #712]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	f003 030c 	and.w	r3, r3, #12
 80007ce:	2b08      	cmp	r3, #8
 80007d0:	d15a      	bne.n	8000888 <HAL_RCC_OscConfig+0xf8>
 80007d2:	4baf      	ldr	r3, [pc, #700]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007de:	d153      	bne.n	8000888 <HAL_RCC_OscConfig+0xf8>
 80007e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007e4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007e8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80007ec:	fa93 f3a3 	rbit	r3, r3
 80007f0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80007f4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007f8:	fab3 f383 	clz	r3, r3
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	095b      	lsrs	r3, r3, #5
 8000800:	b2db      	uxtb	r3, r3
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b01      	cmp	r3, #1
 800080a:	d102      	bne.n	8000812 <HAL_RCC_OscConfig+0x82>
 800080c:	4ba0      	ldr	r3, [pc, #640]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	e015      	b.n	800083e <HAL_RCC_OscConfig+0xae>
 8000812:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000816:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800081a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800081e:	fa93 f3a3 	rbit	r3, r3
 8000822:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000826:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800082a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800082e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000832:	fa93 f3a3 	rbit	r3, r3
 8000836:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800083a:	4b95      	ldr	r3, [pc, #596]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 800083c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800083e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000842:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000846:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800084a:	fa92 f2a2 	rbit	r2, r2
 800084e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000852:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000856:	fab2 f282 	clz	r2, r2
 800085a:	b252      	sxtb	r2, r2
 800085c:	f042 0220 	orr.w	r2, r2, #32
 8000860:	b252      	sxtb	r2, r2
 8000862:	b2d2      	uxtb	r2, r2
 8000864:	f002 021f 	and.w	r2, r2, #31
 8000868:	2101      	movs	r1, #1
 800086a:	fa01 f202 	lsl.w	r2, r1, r2
 800086e:	4013      	ands	r3, r2
 8000870:	2b00      	cmp	r3, #0
 8000872:	f000 810f 	beq.w	8000a94 <HAL_RCC_OscConfig+0x304>
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	2b00      	cmp	r3, #0
 800087e:	f040 8109 	bne.w	8000a94 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	f000 be6b 	b.w	800155e <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000892:	d106      	bne.n	80008a2 <HAL_RCC_OscConfig+0x112>
 8000894:	4b7e      	ldr	r3, [pc, #504]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a7d      	ldr	r2, [pc, #500]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 800089a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	e030      	b.n	8000904 <HAL_RCC_OscConfig+0x174>
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d10c      	bne.n	80008c6 <HAL_RCC_OscConfig+0x136>
 80008ac:	4b78      	ldr	r3, [pc, #480]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a77      	ldr	r2, [pc, #476]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 80008b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b75      	ldr	r3, [pc, #468]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a74      	ldr	r2, [pc, #464]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 80008be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	e01e      	b.n	8000904 <HAL_RCC_OscConfig+0x174>
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008d0:	d10c      	bne.n	80008ec <HAL_RCC_OscConfig+0x15c>
 80008d2:	4b6f      	ldr	r3, [pc, #444]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a6e      	ldr	r2, [pc, #440]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 80008d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008dc:	6013      	str	r3, [r2, #0]
 80008de:	4b6c      	ldr	r3, [pc, #432]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a6b      	ldr	r2, [pc, #428]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 80008e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e8:	6013      	str	r3, [r2, #0]
 80008ea:	e00b      	b.n	8000904 <HAL_RCC_OscConfig+0x174>
 80008ec:	4b68      	ldr	r3, [pc, #416]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a67      	ldr	r2, [pc, #412]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 80008f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b65      	ldr	r3, [pc, #404]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a64      	ldr	r2, [pc, #400]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 80008fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000902:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000904:	4b62      	ldr	r3, [pc, #392]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 8000906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000908:	f023 020f 	bic.w	r2, r3, #15
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	495f      	ldr	r1, [pc, #380]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 8000914:	4313      	orrs	r3, r2
 8000916:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d05a      	beq.n	80009d8 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000922:	f7ff fcab 	bl	800027c <HAL_GetTick>
 8000926:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800092a:	e00a      	b.n	8000942 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800092c:	f7ff fca6 	bl	800027c <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	2b64      	cmp	r3, #100	; 0x64
 800093a:	d902      	bls.n	8000942 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 800093c:	2303      	movs	r3, #3
 800093e:	f000 be0e 	b.w	800155e <HAL_RCC_OscConfig+0xdce>
 8000942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000946:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800094a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800094e:	fa93 f3a3 	rbit	r3, r3
 8000952:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000956:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095a:	fab3 f383 	clz	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	095b      	lsrs	r3, r3, #5
 8000962:	b2db      	uxtb	r3, r3
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b01      	cmp	r3, #1
 800096c:	d102      	bne.n	8000974 <HAL_RCC_OscConfig+0x1e4>
 800096e:	4b48      	ldr	r3, [pc, #288]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	e015      	b.n	80009a0 <HAL_RCC_OscConfig+0x210>
 8000974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000978:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800097c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000980:	fa93 f3a3 	rbit	r3, r3
 8000984:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800098c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000990:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000994:	fa93 f3a3 	rbit	r3, r3
 8000998:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800099c:	4b3c      	ldr	r3, [pc, #240]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 800099e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009a4:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80009a8:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80009ac:	fa92 f2a2 	rbit	r2, r2
 80009b0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 80009b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	b252      	sxtb	r2, r2
 80009be:	f042 0220 	orr.w	r2, r2, #32
 80009c2:	b252      	sxtb	r2, r2
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	f002 021f 	and.w	r2, r2, #31
 80009ca:	2101      	movs	r1, #1
 80009cc:	fa01 f202 	lsl.w	r2, r1, r2
 80009d0:	4013      	ands	r3, r2
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0aa      	beq.n	800092c <HAL_RCC_OscConfig+0x19c>
 80009d6:	e05e      	b.n	8000a96 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009d8:	f7ff fc50 	bl	800027c <HAL_GetTick>
 80009dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009e0:	e00a      	b.n	80009f8 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009e2:	f7ff fc4b 	bl	800027c <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	2b64      	cmp	r3, #100	; 0x64
 80009f0:	d902      	bls.n	80009f8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80009f2:	2303      	movs	r3, #3
 80009f4:	f000 bdb3 	b.w	800155e <HAL_RCC_OscConfig+0xdce>
 80009f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009fc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000a04:	fa93 f3a3 	rbit	r3, r3
 8000a08:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000a0c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a10:	fab3 f383 	clz	r3, r3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d102      	bne.n	8000a2a <HAL_RCC_OscConfig+0x29a>
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	e015      	b.n	8000a56 <HAL_RCC_OscConfig+0x2c6>
 8000a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000a36:	fa93 f3a3 	rbit	r3, r3
 8000a3a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000a46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000a4a:	fa93 f3a3 	rbit	r3, r3
 8000a4e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_RCC_OscConfig+0x300>)
 8000a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a5a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000a5e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000a62:	fa92 f2a2 	rbit	r2, r2
 8000a66:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000a6a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000a6e:	fab2 f282 	clz	r2, r2
 8000a72:	b252      	sxtb	r2, r2
 8000a74:	f042 0220 	orr.w	r2, r2, #32
 8000a78:	b252      	sxtb	r2, r2
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	f002 021f 	and.w	r2, r2, #31
 8000a80:	2101      	movs	r1, #1
 8000a82:	fa01 f202 	lsl.w	r2, r1, r2
 8000a86:	4013      	ands	r3, r2
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1aa      	bne.n	80009e2 <HAL_RCC_OscConfig+0x252>
 8000a8c:	e003      	b.n	8000a96 <HAL_RCC_OscConfig+0x306>
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f000 8170 	beq.w	8000d86 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000aa6:	4bd0      	ldr	r3, [pc, #832]	; (8000de8 <HAL_RCC_OscConfig+0x658>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f003 030c 	and.w	r3, r3, #12
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d00b      	beq.n	8000aca <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ab2:	4bcd      	ldr	r3, [pc, #820]	; (8000de8 <HAL_RCC_OscConfig+0x658>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 030c 	and.w	r3, r3, #12
 8000aba:	2b08      	cmp	r3, #8
 8000abc:	d16d      	bne.n	8000b9a <HAL_RCC_OscConfig+0x40a>
 8000abe:	4bca      	ldr	r3, [pc, #808]	; (8000de8 <HAL_RCC_OscConfig+0x658>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d167      	bne.n	8000b9a <HAL_RCC_OscConfig+0x40a>
 8000aca:	2302      	movs	r3, #2
 8000acc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000ad4:	fa93 f3a3 	rbit	r3, r3
 8000ad8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000adc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ae0:	fab3 f383 	clz	r3, r3
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d102      	bne.n	8000afa <HAL_RCC_OscConfig+0x36a>
 8000af4:	4bbc      	ldr	r3, [pc, #752]	; (8000de8 <HAL_RCC_OscConfig+0x658>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	e013      	b.n	8000b22 <HAL_RCC_OscConfig+0x392>
 8000afa:	2302      	movs	r3, #2
 8000afc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b00:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000b04:	fa93 f3a3 	rbit	r3, r3
 8000b08:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000b12:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000b16:	fa93 f3a3 	rbit	r3, r3
 8000b1a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000b1e:	4bb2      	ldr	r3, [pc, #712]	; (8000de8 <HAL_RCC_OscConfig+0x658>)
 8000b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b22:	2202      	movs	r2, #2
 8000b24:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000b28:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000b2c:	fa92 f2a2 	rbit	r2, r2
 8000b30:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000b34:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000b38:	fab2 f282 	clz	r2, r2
 8000b3c:	b252      	sxtb	r2, r2
 8000b3e:	f042 0220 	orr.w	r2, r2, #32
 8000b42:	b252      	sxtb	r2, r2
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	f002 021f 	and.w	r2, r2, #31
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d007      	beq.n	8000b66 <HAL_RCC_OscConfig+0x3d6>
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	691b      	ldr	r3, [r3, #16]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d002      	beq.n	8000b66 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	f000 bcfc 	b.w	800155e <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b66:	4ba0      	ldr	r3, [pc, #640]	; (8000de8 <HAL_RCC_OscConfig+0x658>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6959      	ldr	r1, [r3, #20]
 8000b74:	23f8      	movs	r3, #248	; 0xf8
 8000b76:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b7a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000b7e:	fa93 f3a3 	rbit	r3, r3
 8000b82:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000b86:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000b8a:	fab3 f383 	clz	r3, r3
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	4995      	ldr	r1, [pc, #596]	; (8000de8 <HAL_RCC_OscConfig+0x658>)
 8000b94:	4313      	orrs	r3, r2
 8000b96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b98:	e0f5      	b.n	8000d86 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f000 8085 	beq.w	8000cb0 <HAL_RCC_OscConfig+0x520>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000bb0:	fa93 f3a3 	rbit	r3, r3
 8000bb4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000bb8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bbc:	fab3 f383 	clz	r3, r3
 8000bc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	461a      	mov	r2, r3
 8000bcc:	2301      	movs	r3, #1
 8000bce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd0:	f7ff fb54 	bl	800027c <HAL_GetTick>
 8000bd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bd8:	e00a      	b.n	8000bf0 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bda:	f7ff fb4f 	bl	800027c <HAL_GetTick>
 8000bde:	4602      	mov	r2, r0
 8000be0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d902      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000bea:	2303      	movs	r3, #3
 8000bec:	f000 bcb7 	b.w	800155e <HAL_RCC_OscConfig+0xdce>
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000bfa:	fa93 f3a3 	rbit	r3, r3
 8000bfe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000c02:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c06:	fab3 f383 	clz	r3, r3
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	095b      	lsrs	r3, r3, #5
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d102      	bne.n	8000c20 <HAL_RCC_OscConfig+0x490>
 8000c1a:	4b73      	ldr	r3, [pc, #460]	; (8000de8 <HAL_RCC_OscConfig+0x658>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	e013      	b.n	8000c48 <HAL_RCC_OscConfig+0x4b8>
 8000c20:	2302      	movs	r3, #2
 8000c22:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c26:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000c2a:	fa93 f3a3 	rbit	r3, r3
 8000c2e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000c32:	2302      	movs	r3, #2
 8000c34:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000c38:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000c3c:	fa93 f3a3 	rbit	r3, r3
 8000c40:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000c44:	4b68      	ldr	r3, [pc, #416]	; (8000de8 <HAL_RCC_OscConfig+0x658>)
 8000c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c48:	2202      	movs	r2, #2
 8000c4a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000c4e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000c52:	fa92 f2a2 	rbit	r2, r2
 8000c56:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000c5a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000c5e:	fab2 f282 	clz	r2, r2
 8000c62:	b252      	sxtb	r2, r2
 8000c64:	f042 0220 	orr.w	r2, r2, #32
 8000c68:	b252      	sxtb	r2, r2
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	f002 021f 	and.w	r2, r2, #31
 8000c70:	2101      	movs	r1, #1
 8000c72:	fa01 f202 	lsl.w	r2, r1, r2
 8000c76:	4013      	ands	r3, r2
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d0ae      	beq.n	8000bda <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c7c:	4b5a      	ldr	r3, [pc, #360]	; (8000de8 <HAL_RCC_OscConfig+0x658>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6959      	ldr	r1, [r3, #20]
 8000c8a:	23f8      	movs	r3, #248	; 0xf8
 8000c8c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c90:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000c94:	fa93 f3a3 	rbit	r3, r3
 8000c98:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000c9c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000ca0:	fab3 f383 	clz	r3, r3
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	494f      	ldr	r1, [pc, #316]	; (8000de8 <HAL_RCC_OscConfig+0x658>)
 8000caa:	4313      	orrs	r3, r2
 8000cac:	600b      	str	r3, [r1, #0]
 8000cae:	e06a      	b.n	8000d86 <HAL_RCC_OscConfig+0x5f6>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000cba:	fa93 f3a3 	rbit	r3, r3
 8000cbe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000cc2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cc6:	fab3 f383 	clz	r3, r3
 8000cca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cda:	f7ff facf 	bl	800027c <HAL_GetTick>
 8000cde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce2:	e00a      	b.n	8000cfa <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce4:	f7ff faca 	bl	800027c <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d902      	bls.n	8000cfa <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	f000 bc32 	b.w	800155e <HAL_RCC_OscConfig+0xdce>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d00:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d04:	fa93 f3a3 	rbit	r3, r3
 8000d08:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000d0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d10:	fab3 f383 	clz	r3, r3
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d102      	bne.n	8000d2a <HAL_RCC_OscConfig+0x59a>
 8000d24:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <HAL_RCC_OscConfig+0x658>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	e013      	b.n	8000d52 <HAL_RCC_OscConfig+0x5c2>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d34:	fa93 f3a3 	rbit	r3, r3
 8000d38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000d42:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d46:	fa93 f3a3 	rbit	r3, r3
 8000d4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <HAL_RCC_OscConfig+0x658>)
 8000d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d52:	2202      	movs	r2, #2
 8000d54:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000d58:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000d5c:	fa92 f2a2 	rbit	r2, r2
 8000d60:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000d64:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b252      	sxtb	r2, r2
 8000d6e:	f042 0220 	orr.w	r2, r2, #32
 8000d72:	b252      	sxtb	r2, r2
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	f002 021f 	and.w	r2, r2, #31
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1ae      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f000 80d8 	beq.w	8000f46 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d067      	beq.n	8000e70 <HAL_RCC_OscConfig+0x6e0>
 8000da0:	2301      	movs	r3, #1
 8000da2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000daa:	fa93 f3a3 	rbit	r3, r3
 8000dae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000db2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000db6:	fab3 f383 	clz	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_RCC_OscConfig+0x65c>)
 8000dbe:	4413      	add	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc8:	f7ff fa58 	bl	800027c <HAL_GetTick>
 8000dcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd0:	e00e      	b.n	8000df0 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd2:	f7ff fa53 	bl	800027c <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d906      	bls.n	8000df0 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e3bb      	b.n	800155e <HAL_RCC_OscConfig+0xdce>
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	10908120 	.word	0x10908120
 8000df0:	2302      	movs	r3, #2
 8000df2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000dfa:	fa93 f3a3 	rbit	r3, r3
 8000dfe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e0c:	fa93 f2a3 	rbit	r2, r3
 8000e10:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	fa93 f2a3 	rbit	r2, r3
 8000e28:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000e2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2e:	4ba5      	ldr	r3, [pc, #660]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8000e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e32:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e36:	2102      	movs	r1, #2
 8000e38:	6019      	str	r1, [r3, #0]
 8000e3a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	fa93 f1a3 	rbit	r1, r3
 8000e44:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e48:	6019      	str	r1, [r3, #0]
  return(result);
 8000e4a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	fab3 f383 	clz	r3, r3
 8000e54:	b25b      	sxtb	r3, r3
 8000e56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f003 031f 	and.w	r3, r3, #31
 8000e62:	2101      	movs	r1, #1
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0b1      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x642>
 8000e6e:	e06a      	b.n	8000f46 <HAL_RCC_OscConfig+0x7b6>
 8000e70:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e74:	2201      	movs	r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e78:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	fa93 f2a3 	rbit	r2, r3
 8000e82:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e86:	601a      	str	r2, [r3, #0]
  return(result);
 8000e88:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e8c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e8e:	fab3 f383 	clz	r3, r3
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b8c      	ldr	r3, [pc, #560]	; (80010c8 <HAL_RCC_OscConfig+0x938>)
 8000e96:	4413      	add	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea0:	f7ff f9ec 	bl	800027c <HAL_GetTick>
 8000ea4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea8:	e009      	b.n	8000ebe <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eaa:	f7ff f9e7 	bl	800027c <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e34f      	b.n	800155e <HAL_RCC_OscConfig+0xdce>
 8000ebe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	fa93 f2a3 	rbit	r2, r3
 8000ed0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eda:	2202      	movs	r2, #2
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	fa93 f2a3 	rbit	r2, r3
 8000ee8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	fa93 f2a3 	rbit	r2, r3
 8000f00:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f06:	4b6f      	ldr	r3, [pc, #444]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8000f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f0e:	2102      	movs	r1, #2
 8000f10:	6019      	str	r1, [r3, #0]
 8000f12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	fa93 f1a3 	rbit	r1, r3
 8000f1c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f20:	6019      	str	r1, [r3, #0]
  return(result);
 8000f22:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	fab3 f383 	clz	r3, r3
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f003 031f 	and.w	r3, r3, #31
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	4013      	ands	r3, r2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1b1      	bne.n	8000eaa <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 8159 	beq.w	8001208 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f5c:	4b59      	ldr	r3, [pc, #356]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d112      	bne.n	8000f8e <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	4b56      	ldr	r3, [pc, #344]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	4a55      	ldr	r2, [pc, #340]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f72:	61d3      	str	r3, [r2, #28]
 8000f74:	4b53      	ldr	r3, [pc, #332]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8e:	4b4f      	ldr	r3, [pc, #316]	; (80010cc <HAL_RCC_OscConfig+0x93c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d11a      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9a:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <HAL_RCC_OscConfig+0x93c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a4b      	ldr	r2, [pc, #300]	; (80010cc <HAL_RCC_OscConfig+0x93c>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fa6:	f7ff f969 	bl	800027c <HAL_GetTick>
 8000faa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fae:	e009      	b.n	8000fc4 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb0:	f7ff f964 	bl	800027c <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b64      	cmp	r3, #100	; 0x64
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e2cc      	b.n	800155e <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	4b41      	ldr	r3, [pc, #260]	; (80010cc <HAL_RCC_OscConfig+0x93c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0ef      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d106      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x858>
 8000fda:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4a39      	ldr	r2, [pc, #228]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6213      	str	r3, [r2, #32]
 8000fe6:	e02f      	b.n	8001048 <HAL_RCC_OscConfig+0x8b8>
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_OscConfig+0x87c>
 8000ff2:	4b34      	ldr	r3, [pc, #208]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8000ff4:	6a1b      	ldr	r3, [r3, #32]
 8000ff6:	4a33      	ldr	r2, [pc, #204]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	6213      	str	r3, [r2, #32]
 8000ffe:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	4a30      	ldr	r2, [pc, #192]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8001004:	f023 0304 	bic.w	r3, r3, #4
 8001008:	6213      	str	r3, [r2, #32]
 800100a:	e01d      	b.n	8001048 <HAL_RCC_OscConfig+0x8b8>
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	2b05      	cmp	r3, #5
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x8a0>
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a2a      	ldr	r2, [pc, #168]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6213      	str	r3, [r2, #32]
 8001022:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6213      	str	r3, [r2, #32]
 800102e:	e00b      	b.n	8001048 <HAL_RCC_OscConfig+0x8b8>
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8001036:	f023 0301 	bic.w	r3, r3, #1
 800103a:	6213      	str	r3, [r2, #32]
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	4a20      	ldr	r2, [pc, #128]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 8001042:	f023 0304 	bic.w	r3, r3, #4
 8001046:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d06b      	beq.n	800112a <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001052:	f7ff f913 	bl	800027c <HAL_GetTick>
 8001056:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800105a:	e00b      	b.n	8001074 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800105c:	f7ff f90e 	bl	800027c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	f241 3288 	movw	r2, #5000	; 0x1388
 800106c:	4293      	cmp	r3, r2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e274      	b.n	800155e <HAL_RCC_OscConfig+0xdce>
 8001074:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001078:	2202      	movs	r2, #2
 800107a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	fa93 f2a3 	rbit	r2, r3
 8001086:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001090:	2202      	movs	r2, #2
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	fa93 f2a3 	rbit	r2, r3
 800109e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010a2:	601a      	str	r2, [r3, #0]
  return(result);
 80010a4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010aa:	fab3 f383 	clz	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	095b      	lsrs	r3, r3, #5
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d108      	bne.n	80010d0 <HAL_RCC_OscConfig+0x940>
 80010be:	4b01      	ldr	r3, [pc, #4]	; (80010c4 <HAL_RCC_OscConfig+0x934>)
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	e013      	b.n	80010ec <HAL_RCC_OscConfig+0x95c>
 80010c4:	40021000 	.word	0x40021000
 80010c8:	10908120 	.word	0x10908120
 80010cc:	40007000 	.word	0x40007000
 80010d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010d4:	2202      	movs	r2, #2
 80010d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	fa93 f2a3 	rbit	r2, r3
 80010e2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	4bbb      	ldr	r3, [pc, #748]	; (80013d8 <HAL_RCC_OscConfig+0xc48>)
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80010f0:	2102      	movs	r1, #2
 80010f2:	6011      	str	r1, [r2, #0]
 80010f4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80010f8:	6812      	ldr	r2, [r2, #0]
 80010fa:	fa92 f1a2 	rbit	r1, r2
 80010fe:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001102:	6011      	str	r1, [r2, #0]
  return(result);
 8001104:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001108:	6812      	ldr	r2, [r2, #0]
 800110a:	fab2 f282 	clz	r2, r2
 800110e:	b252      	sxtb	r2, r2
 8001110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001114:	b252      	sxtb	r2, r2
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	f002 021f 	and.w	r2, r2, #31
 800111c:	2101      	movs	r1, #1
 800111e:	fa01 f202 	lsl.w	r2, r1, r2
 8001122:	4013      	ands	r3, r2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d099      	beq.n	800105c <HAL_RCC_OscConfig+0x8cc>
 8001128:	e064      	b.n	80011f4 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112a:	f7ff f8a7 	bl	800027c <HAL_GetTick>
 800112e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001132:	e00b      	b.n	800114c <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001134:	f7ff f8a2 	bl	800027c <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	f241 3288 	movw	r2, #5000	; 0x1388
 8001144:	4293      	cmp	r3, r2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e208      	b.n	800155e <HAL_RCC_OscConfig+0xdce>
 800114c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001150:	2202      	movs	r2, #2
 8001152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001154:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	fa93 f2a3 	rbit	r2, r3
 800115e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001168:	2202      	movs	r2, #2
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	fa93 f2a3 	rbit	r2, r3
 8001176:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800117a:	601a      	str	r2, [r3, #0]
  return(result);
 800117c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001180:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	095b      	lsrs	r3, r3, #5
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d102      	bne.n	800119c <HAL_RCC_OscConfig+0xa0c>
 8001196:	4b90      	ldr	r3, [pc, #576]	; (80013d8 <HAL_RCC_OscConfig+0xc48>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	e00d      	b.n	80011b8 <HAL_RCC_OscConfig+0xa28>
 800119c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011a0:	2202      	movs	r2, #2
 80011a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	fa93 f2a3 	rbit	r2, r3
 80011ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	4b88      	ldr	r3, [pc, #544]	; (80013d8 <HAL_RCC_OscConfig+0xc48>)
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011bc:	2102      	movs	r1, #2
 80011be:	6011      	str	r1, [r2, #0]
 80011c0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	fa92 f1a2 	rbit	r1, r2
 80011ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80011ce:	6011      	str	r1, [r2, #0]
  return(result);
 80011d0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	fab2 f282 	clz	r2, r2
 80011da:	b252      	sxtb	r2, r2
 80011dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011e0:	b252      	sxtb	r2, r2
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	f002 021f 	and.w	r2, r2, #31
 80011e8:	2101      	movs	r1, #1
 80011ea:	fa01 f202 	lsl.w	r2, r1, r2
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d19f      	bne.n	8001134 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d105      	bne.n	8001208 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fc:	4b76      	ldr	r3, [pc, #472]	; (80013d8 <HAL_RCC_OscConfig+0xc48>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	4a75      	ldr	r2, [pc, #468]	; (80013d8 <HAL_RCC_OscConfig+0xc48>)
 8001202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001206:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 81a4 	beq.w	800155c <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001214:	4b70      	ldr	r3, [pc, #448]	; (80013d8 <HAL_RCC_OscConfig+0xc48>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	2b08      	cmp	r3, #8
 800121e:	f000 819b 	beq.w	8001558 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	2b02      	cmp	r3, #2
 800122a:	f040 8113 	bne.w	8001454 <HAL_RCC_OscConfig+0xcc4>
 800122e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001232:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001238:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	fa93 f2a3 	rbit	r2, r3
 8001242:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001246:	601a      	str	r2, [r3, #0]
  return(result);
 8001248:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800124c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800124e:	fab3 f383 	clz	r3, r3
 8001252:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001256:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	461a      	mov	r2, r3
 800125e:	2300      	movs	r3, #0
 8001260:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001262:	f7ff f80b 	bl	800027c <HAL_GetTick>
 8001266:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126a:	e009      	b.n	8001280 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800126c:	f7ff f806 	bl	800027c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e16e      	b.n	800155e <HAL_RCC_OscConfig+0xdce>
 8001280:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001284:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	fa93 f2a3 	rbit	r2, r3
 8001294:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001298:	601a      	str	r2, [r3, #0]
  return(result);
 800129a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800129e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a0:	fab3 f383 	clz	r3, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d102      	bne.n	80012ba <HAL_RCC_OscConfig+0xb2a>
 80012b4:	4b48      	ldr	r3, [pc, #288]	; (80013d8 <HAL_RCC_OscConfig+0xc48>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	e01b      	b.n	80012f2 <HAL_RCC_OscConfig+0xb62>
 80012ba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	fa93 f2a3 	rbit	r2, r3
 80012ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	fa93 f2a3 	rbit	r2, r3
 80012e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <HAL_RCC_OscConfig+0xc48>)
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80012f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80012fa:	6011      	str	r1, [r2, #0]
 80012fc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	fa92 f1a2 	rbit	r1, r2
 8001306:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800130a:	6011      	str	r1, [r2, #0]
  return(result);
 800130c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	fab2 f282 	clz	r2, r2
 8001316:	b252      	sxtb	r2, r2
 8001318:	f042 0220 	orr.w	r2, r2, #32
 800131c:	b252      	sxtb	r2, r2
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	f002 021f 	and.w	r2, r2, #31
 8001324:	2101      	movs	r1, #1
 8001326:	fa01 f202 	lsl.w	r2, r1, r2
 800132a:	4013      	ands	r3, r2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d19d      	bne.n	800126c <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <HAL_RCC_OscConfig+0xc48>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	430b      	orrs	r3, r1
 8001346:	4924      	ldr	r1, [pc, #144]	; (80013d8 <HAL_RCC_OscConfig+0xc48>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
 800134c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001350:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	fa93 f2a3 	rbit	r2, r3
 8001360:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001364:	601a      	str	r2, [r3, #0]
  return(result);
 8001366:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800136a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800136c:	fab3 f383 	clz	r3, r3
 8001370:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001374:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	461a      	mov	r2, r3
 800137c:	2301      	movs	r3, #1
 800137e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7fe ff7c 	bl	800027c <HAL_GetTick>
 8001384:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001388:	e009      	b.n	800139e <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800138a:	f7fe ff77 	bl	800027c <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e0df      	b.n	800155e <HAL_RCC_OscConfig+0xdce>
 800139e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	fa93 f2a3 	rbit	r2, r3
 80013b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013b6:	601a      	str	r2, [r3, #0]
  return(result);
 80013b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013be:	fab3 f383 	clz	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	095b      	lsrs	r3, r3, #5
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d104      	bne.n	80013dc <HAL_RCC_OscConfig+0xc4c>
 80013d2:	4b01      	ldr	r3, [pc, #4]	; (80013d8 <HAL_RCC_OscConfig+0xc48>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	e01d      	b.n	8001414 <HAL_RCC_OscConfig+0xc84>
 80013d8:	40021000 	.word	0x40021000
 80013dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	fa93 f2a3 	rbit	r2, r3
 80013f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	fa93 f2a3 	rbit	r2, r3
 800140a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	4b55      	ldr	r3, [pc, #340]	; (8001568 <HAL_RCC_OscConfig+0xdd8>)
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001418:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800141c:	6011      	str	r1, [r2, #0]
 800141e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	fa92 f1a2 	rbit	r1, r2
 8001428:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800142c:	6011      	str	r1, [r2, #0]
  return(result);
 800142e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	fab2 f282 	clz	r2, r2
 8001438:	b252      	sxtb	r2, r2
 800143a:	f042 0220 	orr.w	r2, r2, #32
 800143e:	b252      	sxtb	r2, r2
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	f002 021f 	and.w	r2, r2, #31
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f202 	lsl.w	r2, r1, r2
 800144c:	4013      	ands	r3, r2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d09b      	beq.n	800138a <HAL_RCC_OscConfig+0xbfa>
 8001452:	e083      	b.n	800155c <HAL_RCC_OscConfig+0xdcc>
 8001454:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001458:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800145c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	fa93 f2a3 	rbit	r2, r3
 8001468:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800146c:	601a      	str	r2, [r3, #0]
  return(result);
 800146e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001472:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001474:	fab3 f383 	clz	r3, r3
 8001478:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800147c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	461a      	mov	r2, r3
 8001484:	2300      	movs	r3, #0
 8001486:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7fe fef8 	bl	800027c <HAL_GetTick>
 800148c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001490:	e009      	b.n	80014a6 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001492:	f7fe fef3 	bl	800027c <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e05b      	b.n	800155e <HAL_RCC_OscConfig+0xdce>
 80014a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	fa93 f2a3 	rbit	r2, r3
 80014ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014be:	601a      	str	r2, [r3, #0]
  return(result);
 80014c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c6:	fab3 f383 	clz	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	095b      	lsrs	r3, r3, #5
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d102      	bne.n	80014e0 <HAL_RCC_OscConfig+0xd50>
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_RCC_OscConfig+0xdd8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	e01b      	b.n	8001518 <HAL_RCC_OscConfig+0xd88>
 80014e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	fa93 f2a3 	rbit	r2, r3
 80014f4:	f107 0320 	add.w	r3, r7, #32
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	fa93 f2a3 	rbit	r2, r3
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_RCC_OscConfig+0xdd8>)
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	f107 0214 	add.w	r2, r7, #20
 800151c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001520:	6011      	str	r1, [r2, #0]
 8001522:	f107 0214 	add.w	r2, r7, #20
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	fa92 f1a2 	rbit	r1, r2
 800152c:	f107 0210 	add.w	r2, r7, #16
 8001530:	6011      	str	r1, [r2, #0]
  return(result);
 8001532:	f107 0210 	add.w	r2, r7, #16
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	fab2 f282 	clz	r2, r2
 800153c:	b252      	sxtb	r2, r2
 800153e:	f042 0220 	orr.w	r2, r2, #32
 8001542:	b252      	sxtb	r2, r2
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	f002 021f 	and.w	r2, r2, #31
 800154a:	2101      	movs	r1, #1
 800154c:	fa01 f202 	lsl.w	r2, r1, r2
 8001550:	4013      	ands	r3, r2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d19d      	bne.n	8001492 <HAL_RCC_OscConfig+0xd02>
 8001556:	e001      	b.n	800155c <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000

0800156c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b09e      	sub	sp, #120	; 0x78
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e164      	b.n	800184e <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001584:	4b92      	ldr	r3, [pc, #584]	; (80017d0 <HAL_RCC_ClockConfig+0x264>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d910      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001592:	4b8f      	ldr	r3, [pc, #572]	; (80017d0 <HAL_RCC_ClockConfig+0x264>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 0207 	bic.w	r2, r3, #7
 800159a:	498d      	ldr	r1, [pc, #564]	; (80017d0 <HAL_RCC_ClockConfig+0x264>)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b8b      	ldr	r3, [pc, #556]	; (80017d0 <HAL_RCC_ClockConfig+0x264>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e14c      	b.n	800184e <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c0:	4b84      	ldr	r3, [pc, #528]	; (80017d4 <HAL_RCC_ClockConfig+0x268>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4981      	ldr	r1, [pc, #516]	; (80017d4 <HAL_RCC_ClockConfig+0x268>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 80df 	beq.w	800179e <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d13d      	bne.n	8001664 <HAL_RCC_ClockConfig+0xf8>
 80015e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015f0:	fa93 f3a3 	rbit	r3, r3
 80015f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80015f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f8:	fab3 f383 	clz	r3, r3
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	b2db      	uxtb	r3, r3
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b01      	cmp	r3, #1
 800160a:	d102      	bne.n	8001612 <HAL_RCC_ClockConfig+0xa6>
 800160c:	4b71      	ldr	r3, [pc, #452]	; (80017d4 <HAL_RCC_ClockConfig+0x268>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	e00f      	b.n	8001632 <HAL_RCC_ClockConfig+0xc6>
 8001612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001616:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	667b      	str	r3, [r7, #100]	; 0x64
 8001620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001624:	663b      	str	r3, [r7, #96]	; 0x60
 8001626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001628:	fa93 f3a3 	rbit	r3, r3
 800162c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800162e:	4b69      	ldr	r3, [pc, #420]	; (80017d4 <HAL_RCC_ClockConfig+0x268>)
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001636:	65ba      	str	r2, [r7, #88]	; 0x58
 8001638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800163a:	fa92 f2a2 	rbit	r2, r2
 800163e:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001640:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001642:	fab2 f282 	clz	r2, r2
 8001646:	b252      	sxtb	r2, r2
 8001648:	f042 0220 	orr.w	r2, r2, #32
 800164c:	b252      	sxtb	r2, r2
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	f002 021f 	and.w	r2, r2, #31
 8001654:	2101      	movs	r1, #1
 8001656:	fa01 f202 	lsl.w	r2, r1, r2
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d17d      	bne.n	800175c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0f4      	b.n	800184e <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d13d      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x17c>
 800166c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001670:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001674:	fa93 f3a3 	rbit	r3, r3
 8001678:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800167a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b01      	cmp	r3, #1
 800168e:	d102      	bne.n	8001696 <HAL_RCC_ClockConfig+0x12a>
 8001690:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <HAL_RCC_ClockConfig+0x268>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	e00f      	b.n	80016b6 <HAL_RCC_ClockConfig+0x14a>
 8001696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800169a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800169e:	fa93 f3a3 	rbit	r3, r3
 80016a2:	647b      	str	r3, [r7, #68]	; 0x44
 80016a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016a8:	643b      	str	r3, [r7, #64]	; 0x40
 80016aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016ac:	fa93 f3a3 	rbit	r3, r3
 80016b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016b2:	4b48      	ldr	r3, [pc, #288]	; (80017d4 <HAL_RCC_ClockConfig+0x268>)
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ba:	63ba      	str	r2, [r7, #56]	; 0x38
 80016bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016be:	fa92 f2a2 	rbit	r2, r2
 80016c2:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80016c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016c6:	fab2 f282 	clz	r2, r2
 80016ca:	b252      	sxtb	r2, r2
 80016cc:	f042 0220 	orr.w	r2, r2, #32
 80016d0:	b252      	sxtb	r2, r2
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	f002 021f 	and.w	r2, r2, #31
 80016d8:	2101      	movs	r1, #1
 80016da:	fa01 f202 	lsl.w	r2, r1, r2
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d13b      	bne.n	800175c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0b2      	b.n	800184e <HAL_RCC_ClockConfig+0x2e2>
 80016e8:	2302      	movs	r3, #2
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ee:	fa93 f3a3 	rbit	r3, r3
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80016f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	095b      	lsrs	r3, r3, #5
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d102      	bne.n	8001710 <HAL_RCC_ClockConfig+0x1a4>
 800170a:	4b32      	ldr	r3, [pc, #200]	; (80017d4 <HAL_RCC_ClockConfig+0x268>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	e00d      	b.n	800172c <HAL_RCC_ClockConfig+0x1c0>
 8001710:	2302      	movs	r3, #2
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
 800171c:	2302      	movs	r3, #2
 800171e:	623b      	str	r3, [r7, #32]
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	61fb      	str	r3, [r7, #28]
 8001728:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <HAL_RCC_ClockConfig+0x268>)
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	2202      	movs	r2, #2
 800172e:	61ba      	str	r2, [r7, #24]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	fa92 f2a2 	rbit	r2, r2
 8001736:	617a      	str	r2, [r7, #20]
  return(result);
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	fab2 f282 	clz	r2, r2
 800173e:	b252      	sxtb	r2, r2
 8001740:	f042 0220 	orr.w	r2, r2, #32
 8001744:	b252      	sxtb	r2, r2
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	f002 021f 	and.w	r2, r2, #31
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e078      	b.n	800184e <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_RCC_ClockConfig+0x268>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 0203 	bic.w	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	491a      	ldr	r1, [pc, #104]	; (80017d4 <HAL_RCC_ClockConfig+0x268>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800176e:	f7fe fd85 	bl	800027c <HAL_GetTick>
 8001772:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001774:	e00a      	b.n	800178c <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001776:	f7fe fd81 	bl	800027c <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f241 3288 	movw	r2, #5000	; 0x1388
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e060      	b.n	800184e <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_RCC_ClockConfig+0x268>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 020c 	and.w	r2, r3, #12
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	429a      	cmp	r2, r3
 800179c:	d1eb      	bne.n	8001776 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_RCC_ClockConfig+0x264>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d215      	bcs.n	80017d8 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_RCC_ClockConfig+0x264>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f023 0207 	bic.w	r2, r3, #7
 80017b4:	4906      	ldr	r1, [pc, #24]	; (80017d0 <HAL_RCC_ClockConfig+0x264>)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <HAL_RCC_ClockConfig+0x264>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d006      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e03f      	b.n	800184e <HAL_RCC_ClockConfig+0x2e2>
 80017ce:	bf00      	nop
 80017d0:	40022000 	.word	0x40022000
 80017d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_RCC_ClockConfig+0x2ec>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4919      	ldr	r1, [pc, #100]	; (8001858 <HAL_RCC_ClockConfig+0x2ec>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_RCC_ClockConfig+0x2ec>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4911      	ldr	r1, [pc, #68]	; (8001858 <HAL_RCC_ClockConfig+0x2ec>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001816:	f000 f825 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 800181a:	4601      	mov	r1, r0
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_RCC_ClockConfig+0x2ec>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001824:	23f0      	movs	r3, #240	; 0xf0
 8001826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <HAL_RCC_ClockConfig+0x2f0>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	fa21 f303 	lsr.w	r3, r1, r3
 8001842:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_RCC_ClockConfig+0x2f4>)
 8001844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001846:	2000      	movs	r0, #0
 8001848:	f7fe fcd4 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3778      	adds	r7, #120	; 0x78
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000
 800185c:	08003154 	.word	0x08003154
 8001860:	20000008 	.word	0x20000008

08001864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001864:	b480      	push	{r7}
 8001866:	b08b      	sub	sp, #44	; 0x2c
 8001868:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800187e:	4b29      	ldr	r3, [pc, #164]	; (8001924 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 030c 	and.w	r3, r3, #12
 800188a:	2b04      	cmp	r3, #4
 800188c:	d002      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0x30>
 800188e:	2b08      	cmp	r3, #8
 8001890:	d003      	beq.n	800189a <HAL_RCC_GetSysClockFreq+0x36>
 8001892:	e03c      	b.n	800190e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001894:	4b24      	ldr	r3, [pc, #144]	; (8001928 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001896:	623b      	str	r3, [r7, #32]
      break;
 8001898:	e03c      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018a0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80018a4:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	fa93 f3a3 	rbit	r3, r3
 80018ac:	607b      	str	r3, [r7, #4]
  return(result);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	fab3 f383 	clz	r3, r3
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
 80018b8:	4a1c      	ldr	r2, [pc, #112]	; (800192c <HAL_RCC_GetSysClockFreq+0xc8>)
 80018ba:	5cd3      	ldrb	r3, [r2, r3]
 80018bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	f003 020f 	and.w	r2, r3, #15
 80018c6:	230f      	movs	r3, #15
 80018c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <HAL_RCC_GetSysClockFreq+0xcc>)
 80018de:	5cd3      	ldrb	r3, [r2, r3]
 80018e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80018ec:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
 80018fc:	e004      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	623b      	str	r3, [r7, #32]
      break;
 800190c:	e002      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001910:	623b      	str	r3, [r7, #32]
      break;
 8001912:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001914:	6a3b      	ldr	r3, [r7, #32]
}
 8001916:	4618      	mov	r0, r3
 8001918:	372c      	adds	r7, #44	; 0x2c
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	007a1200 	.word	0x007a1200
 800192c:	08003134 	.word	0x08003134
 8001930:	08003144 	.word	0x08003144
 8001934:	003d0900 	.word	0x003d0900

08001938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b092      	sub	sp, #72	; 0x48
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80cf 	beq.w	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800195c:	4b86      	ldr	r3, [pc, #536]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10e      	bne.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001968:	4b83      	ldr	r3, [pc, #524]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	4a82      	ldr	r2, [pc, #520]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800196e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001972:	61d3      	str	r3, [r2, #28]
 8001974:	4b80      	ldr	r3, [pc, #512]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001980:	2301      	movs	r3, #1
 8001982:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001986:	4b7d      	ldr	r3, [pc, #500]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198e:	2b00      	cmp	r3, #0
 8001990:	d118      	bne.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001992:	4b7a      	ldr	r3, [pc, #488]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a79      	ldr	r2, [pc, #484]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199e:	f7fe fc6d 	bl	800027c <HAL_GetTick>
 80019a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a4:	e008      	b.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a6:	f7fe fc69 	bl	800027c <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b64      	cmp	r3, #100	; 0x64
 80019b2:	d901      	bls.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e0da      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b8:	4b70      	ldr	r3, [pc, #448]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019c4:	4b6c      	ldr	r3, [pc, #432]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d07c      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x196>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019de:	429a      	cmp	r2, r3
 80019e0:	d075      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019e2:	4b65      	ldr	r3, [pc, #404]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80019fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b5f      	ldr	r3, [pc, #380]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b56      	ldr	r3, [pc, #344]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a26:	4413      	add	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a30:	4a51      	ldr	r2, [pc, #324]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a34:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d046      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7fe fc1c 	bl	800027c <HAL_GetTick>
 8001a44:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a46:	e00a      	b.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a48:	f7fe fc18 	bl	800027c <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e087      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x236>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	623b      	str	r3, [r7, #32]
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	fa93 f3a3 	rbit	r3, r3
 8001a74:	61fb      	str	r3, [r7, #28]
  return(result);
 8001a76:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f043 0302 	orr.w	r3, r3, #2
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d102      	bne.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8001a8c:	4b3a      	ldr	r3, [pc, #232]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	e007      	b.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001a92:	2302      	movs	r3, #2
 8001a94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	613a      	str	r2, [r7, #16]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	fa92 f2a2 	rbit	r2, r2
 8001aac:	60fa      	str	r2, [r7, #12]
  return(result);
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	fab2 f282 	clz	r2, r2
 8001ab4:	b252      	sxtb	r2, r2
 8001ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aba:	b252      	sxtb	r2, r2
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	f002 021f 	and.w	r2, r2, #31
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0bc      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001ace:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4927      	ldr	r1, [pc, #156]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ae0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d105      	bne.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	f023 0203 	bic.w	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	491a      	ldr	r1, [pc, #104]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d008      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f023 0210 	bic.w	r2, r3, #16
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	4913      	ldr	r1, [pc, #76]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	490b      	ldr	r1, [pc, #44]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	4904      	ldr	r1, [pc, #16]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3748      	adds	r7, #72	; 0x48
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	10908100 	.word	0x10908100

08001b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e01d      	b.n	8001bd2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f001 f95a 	bl	8002e64 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	f000 f962 	bl	8001e8c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e01d      	b.n	8001c28 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d106      	bne.n	8001c06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f815 	bl	8001c30 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3304      	adds	r3, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4610      	mov	r0, r2
 8001c1a:	f000 f937 	bl	8001e8c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2201      	movs	r2, #1
 8001c54:	6839      	ldr	r1, [r7, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fc3b 	bl	80024d2 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <HAL_TIM_PWM_Start+0x74>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00e      	beq.n	8001c84 <HAL_TIM_PWM_Start+0x40>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <HAL_TIM_PWM_Start+0x78>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d009      	beq.n	8001c84 <HAL_TIM_PWM_Start+0x40>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <HAL_TIM_PWM_Start+0x7c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d004      	beq.n	8001c84 <HAL_TIM_PWM_Start+0x40>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a11      	ldr	r2, [pc, #68]	; (8001cc4 <HAL_TIM_PWM_Start+0x80>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d101      	bne.n	8001c88 <HAL_TIM_PWM_Start+0x44>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <HAL_TIM_PWM_Start+0x46>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
} 
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40012c00 	.word	0x40012c00
 8001cbc:	40014000 	.word	0x40014000
 8001cc0:	40014400 	.word	0x40014400
 8001cc4:	40014800 	.word	0x40014800

08001cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_TIM_ConfigClockSource+0x1c>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e0cf      	b.n	8001e84 <HAL_TIM_ConfigClockSource+0x1bc>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b40      	cmp	r3, #64	; 0x40
 8001d1e:	d07c      	beq.n	8001e1a <HAL_TIM_ConfigClockSource+0x152>
 8001d20:	2b40      	cmp	r3, #64	; 0x40
 8001d22:	d80f      	bhi.n	8001d44 <HAL_TIM_ConfigClockSource+0x7c>
 8001d24:	2b10      	cmp	r3, #16
 8001d26:	f000 808f 	beq.w	8001e48 <HAL_TIM_ConfigClockSource+0x180>
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d803      	bhi.n	8001d36 <HAL_TIM_ConfigClockSource+0x6e>
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 8083 	beq.w	8001e3a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8001d34:	e09d      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	f000 808d 	beq.w	8001e56 <HAL_TIM_ConfigClockSource+0x18e>
 8001d3c:	2b30      	cmp	r3, #48	; 0x30
 8001d3e:	f000 8091 	beq.w	8001e64 <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 8001d42:	e096      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001d44:	2b70      	cmp	r3, #112	; 0x70
 8001d46:	d018      	beq.n	8001d7a <HAL_TIM_ConfigClockSource+0xb2>
 8001d48:	2b70      	cmp	r3, #112	; 0x70
 8001d4a:	d804      	bhi.n	8001d56 <HAL_TIM_ConfigClockSource+0x8e>
 8001d4c:	2b50      	cmp	r3, #80	; 0x50
 8001d4e:	d044      	beq.n	8001dda <HAL_TIM_ConfigClockSource+0x112>
 8001d50:	2b60      	cmp	r3, #96	; 0x60
 8001d52:	d052      	beq.n	8001dfa <HAL_TIM_ConfigClockSource+0x132>
    break;    
 8001d54:	e08d      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5a:	d003      	beq.n	8001d64 <HAL_TIM_ConfigClockSource+0x9c>
 8001d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d60:	d028      	beq.n	8001db4 <HAL_TIM_ConfigClockSource+0xec>
    break;    
 8001d62:	e086      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d72:	f023 0307 	bic.w	r3, r3, #7
 8001d76:	6093      	str	r3, [r2, #8]
    break;
 8001d78:	e07b      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6899      	ldr	r1, [r3, #8]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f000 fb80 	bl	800248e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001da0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001da8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	609a      	str	r2, [r3, #8]
    break;
 8001db2:	e05e      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6899      	ldr	r1, [r3, #8]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f000 fb63 	bl	800248e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dd6:	609a      	str	r2, [r3, #8]
    break;
 8001dd8:	e04b      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	6859      	ldr	r1, [r3, #4]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	461a      	mov	r2, r3
 8001de8:	f000 faca 	bl	8002380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2150      	movs	r1, #80	; 0x50
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fb2b 	bl	800244e <TIM_ITRx_SetConfig>
    break;
 8001df8:	e03b      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6859      	ldr	r1, [r3, #4]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	461a      	mov	r2, r3
 8001e08:	f000 faed 	bl	80023e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2160      	movs	r1, #96	; 0x60
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 fb1b 	bl	800244e <TIM_ITRx_SetConfig>
    break;
 8001e18:	e02b      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	461a      	mov	r2, r3
 8001e28:	f000 faaa 	bl	8002380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2140      	movs	r1, #64	; 0x40
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 fb0b 	bl	800244e <TIM_ITRx_SetConfig>
    break;
 8001e38:	e01b      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fb04 	bl	800244e <TIM_ITRx_SetConfig>
    break;
 8001e46:	e014      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fafd 	bl	800244e <TIM_ITRx_SetConfig>
    break;
 8001e54:	e00d      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2120      	movs	r1, #32
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 faf6 	bl	800244e <TIM_ITRx_SetConfig>
    break;
 8001e62:	e006      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2130      	movs	r1, #48	; 0x30
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 faef 	bl	800244e <TIM_ITRx_SetConfig>
    break;
 8001e70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a32      	ldr	r2, [pc, #200]	; (8001f6c <TIM_Base_SetConfig+0xe0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d007      	beq.n	8001eb8 <TIM_Base_SetConfig+0x2c>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eae:	d003      	beq.n	8001eb8 <TIM_Base_SetConfig+0x2c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a2f      	ldr	r2, [pc, #188]	; (8001f70 <TIM_Base_SetConfig+0xe4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d108      	bne.n	8001eca <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a27      	ldr	r2, [pc, #156]	; (8001f6c <TIM_Base_SetConfig+0xe0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <TIM_Base_SetConfig+0x6e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed8:	d00f      	beq.n	8001efa <TIM_Base_SetConfig+0x6e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a24      	ldr	r2, [pc, #144]	; (8001f70 <TIM_Base_SetConfig+0xe4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00b      	beq.n	8001efa <TIM_Base_SetConfig+0x6e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a23      	ldr	r2, [pc, #140]	; (8001f74 <TIM_Base_SetConfig+0xe8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d007      	beq.n	8001efa <TIM_Base_SetConfig+0x6e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <TIM_Base_SetConfig+0xec>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d003      	beq.n	8001efa <TIM_Base_SetConfig+0x6e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a21      	ldr	r2, [pc, #132]	; (8001f7c <TIM_Base_SetConfig+0xf0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d108      	bne.n	8001f0c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <TIM_Base_SetConfig+0xe0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d00b      	beq.n	8001f50 <TIM_Base_SetConfig+0xc4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <TIM_Base_SetConfig+0xe8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <TIM_Base_SetConfig+0xc4>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <TIM_Base_SetConfig+0xec>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <TIM_Base_SetConfig+0xc4>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a0c      	ldr	r2, [pc, #48]	; (8001f7c <TIM_Base_SetConfig+0xf0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d103      	bne.n	8001f58 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	615a      	str	r2, [r3, #20]
}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40012c00 	.word	0x40012c00
 8001f70:	40000400 	.word	0x40000400
 8001f74:	40014000 	.word	0x40014000
 8001f78:	40014400 	.word	0x40014400
 8001f7c:	40014800 	.word	0x40014800

08001f80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	f023 0201 	bic.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f023 0303 	bic.w	r3, r3, #3
 8001fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f023 0302 	bic.w	r3, r3, #2
 8001fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a28      	ldr	r2, [pc, #160]	; (8002088 <TIM_OC1_SetConfig+0x108>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00b      	beq.n	8002004 <TIM_OC1_SetConfig+0x84>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a27      	ldr	r2, [pc, #156]	; (800208c <TIM_OC1_SetConfig+0x10c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d007      	beq.n	8002004 <TIM_OC1_SetConfig+0x84>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a26      	ldr	r2, [pc, #152]	; (8002090 <TIM_OC1_SetConfig+0x110>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d003      	beq.n	8002004 <TIM_OC1_SetConfig+0x84>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a25      	ldr	r2, [pc, #148]	; (8002094 <TIM_OC1_SetConfig+0x114>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d10c      	bne.n	800201e <TIM_OC1_SetConfig+0x9e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f023 0308 	bic.w	r3, r3, #8
 800200a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <TIM_OC1_SetConfig+0x108>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00b      	beq.n	800203e <TIM_OC1_SetConfig+0xbe>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a18      	ldr	r2, [pc, #96]	; (800208c <TIM_OC1_SetConfig+0x10c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <TIM_OC1_SetConfig+0xbe>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a17      	ldr	r2, [pc, #92]	; (8002090 <TIM_OC1_SetConfig+0x110>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d003      	beq.n	800203e <TIM_OC1_SetConfig+0xbe>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a16      	ldr	r2, [pc, #88]	; (8002094 <TIM_OC1_SetConfig+0x114>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d111      	bne.n	8002062 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800204c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	621a      	str	r2, [r3, #32]
} 
 800207c:	bf00      	nop
 800207e:	371c      	adds	r7, #28
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40012c00 	.word	0x40012c00
 800208c:	40014000 	.word	0x40014000
 8002090:	40014400 	.word	0x40014400
 8002094:	40014800 	.word	0x40014800

08002098 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002098:	b480      	push	{r7}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f023 0210 	bic.w	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020de:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f023 0320 	bic.w	r3, r3, #32
 80020f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a24      	ldr	r2, [pc, #144]	; (8002194 <TIM_OC2_SetConfig+0xfc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d10d      	bne.n	8002124 <TIM_OC2_SetConfig+0x8c>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800210e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002122:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <TIM_OC2_SetConfig+0xfc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d00b      	beq.n	8002144 <TIM_OC2_SetConfig+0xac>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a1a      	ldr	r2, [pc, #104]	; (8002198 <TIM_OC2_SetConfig+0x100>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d007      	beq.n	8002144 <TIM_OC2_SetConfig+0xac>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a19      	ldr	r2, [pc, #100]	; (800219c <TIM_OC2_SetConfig+0x104>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d003      	beq.n	8002144 <TIM_OC2_SetConfig+0xac>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a18      	ldr	r2, [pc, #96]	; (80021a0 <TIM_OC2_SetConfig+0x108>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d113      	bne.n	800216c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800214a:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002152:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	621a      	str	r2, [r3, #32]
}
 8002186:	bf00      	nop
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40012c00 	.word	0x40012c00
 8002198:	40014000 	.word	0x40014000
 800219c:	40014400 	.word	0x40014400
 80021a0:	40014800 	.word	0x40014800

080021a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0303 	bic.w	r3, r3, #3
 80021ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a23      	ldr	r2, [pc, #140]	; (800229c <TIM_OC3_SetConfig+0xf8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d10d      	bne.n	800222e <TIM_OC3_SetConfig+0x8a>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002218:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800222c:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a1a      	ldr	r2, [pc, #104]	; (800229c <TIM_OC3_SetConfig+0xf8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00b      	beq.n	800224e <TIM_OC3_SetConfig+0xaa>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <TIM_OC3_SetConfig+0xfc>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <TIM_OC3_SetConfig+0xaa>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a18      	ldr	r2, [pc, #96]	; (80022a4 <TIM_OC3_SetConfig+0x100>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d003      	beq.n	800224e <TIM_OC3_SetConfig+0xaa>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <TIM_OC3_SetConfig+0x104>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d113      	bne.n	8002276 <TIM_OC3_SetConfig+0xd2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800225c:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	621a      	str	r2, [r3, #32]
}
 8002290:	bf00      	nop
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40012c00 	.word	0x40012c00
 80022a0:	40014000 	.word	0x40014000
 80022a4:	40014400 	.word	0x40014400
 80022a8:	40014800 	.word	0x40014800

080022ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ea:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f2:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002306:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	031b      	lsls	r3, r3, #12
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a16      	ldr	r2, [pc, #88]	; (8002370 <TIM_OC4_SetConfig+0xc4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d00b      	beq.n	8002334 <TIM_OC4_SetConfig+0x88>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a15      	ldr	r2, [pc, #84]	; (8002374 <TIM_OC4_SetConfig+0xc8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d007      	beq.n	8002334 <TIM_OC4_SetConfig+0x88>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a14      	ldr	r2, [pc, #80]	; (8002378 <TIM_OC4_SetConfig+0xcc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d003      	beq.n	8002334 <TIM_OC4_SetConfig+0x88>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a13      	ldr	r2, [pc, #76]	; (800237c <TIM_OC4_SetConfig+0xd0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d109      	bne.n	8002348 <TIM_OC4_SetConfig+0x9c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800233a:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	019b      	lsls	r3, r3, #6
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4313      	orrs	r3, r2
 8002346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	621a      	str	r2, [r3, #32]
}
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40012c00 	.word	0x40012c00
 8002374:	40014000 	.word	0x40014000
 8002378:	40014400 	.word	0x40014400
 800237c:	40014800 	.word	0x40014800

08002380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	f023 0201 	bic.w	r2, r3, #1
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f023 030a 	bic.w	r3, r3, #10
 80023c4:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	621a      	str	r2, [r3, #32]
}
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b087      	sub	sp, #28
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	f023 0210 	bic.w	r2, r3, #16
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002418:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	031b      	lsls	r3, r3, #12
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800242a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	621a      	str	r2, [r3, #32]
}
 8002442:	bf00      	nop
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800244e:	b480      	push	{r7}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800246c:	887b      	ldrh	r3, [r7, #2]
 800246e:	f043 0307 	orr.w	r3, r3, #7
 8002472:	b29b      	uxth	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	609a      	str	r2, [r3, #8]
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800248e:	b480      	push	{r7}
 8002490:	b087      	sub	sp, #28
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	021a      	lsls	r2, r3, #8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	609a      	str	r2, [r3, #8]
} 
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b087      	sub	sp, #28
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80024e2:	2201      	movs	r2, #1
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a1a      	ldr	r2, [r3, #32]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	401a      	ands	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a1a      	ldr	r2, [r3, #32]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	431a      	orrs	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	621a      	str	r2, [r3, #32]
}
 800250c:	bf00      	nop
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800252e:	2302      	movs	r3, #2
 8002530:	e105      	b.n	800273e <HAL_TIM_PWM_ConfigChannel+0x226>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2202      	movs	r2, #2
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  switch (Channel)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b14      	cmp	r3, #20
 8002546:	f200 80f0 	bhi.w	800272a <HAL_TIM_PWM_ConfigChannel+0x212>
 800254a:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800254c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002550:	080025a5 	.word	0x080025a5
 8002554:	0800272b 	.word	0x0800272b
 8002558:	0800272b 	.word	0x0800272b
 800255c:	0800272b 	.word	0x0800272b
 8002560:	080025e5 	.word	0x080025e5
 8002564:	0800272b 	.word	0x0800272b
 8002568:	0800272b 	.word	0x0800272b
 800256c:	0800272b 	.word	0x0800272b
 8002570:	08002627 	.word	0x08002627
 8002574:	0800272b 	.word	0x0800272b
 8002578:	0800272b 	.word	0x0800272b
 800257c:	0800272b 	.word	0x0800272b
 8002580:	08002667 	.word	0x08002667
 8002584:	0800272b 	.word	0x0800272b
 8002588:	0800272b 	.word	0x0800272b
 800258c:	0800272b 	.word	0x0800272b
 8002590:	080026a9 	.word	0x080026a9
 8002594:	0800272b 	.word	0x0800272b
 8002598:	0800272b 	.word	0x0800272b
 800259c:	0800272b 	.word	0x0800272b
 80025a0:	080026e9 	.word	0x080026e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fce8 	bl	8001f80 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0208 	orr.w	r2, r2, #8
 80025be:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699a      	ldr	r2, [r3, #24]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0204 	bic.w	r2, r2, #4
 80025ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6999      	ldr	r1, [r3, #24]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	619a      	str	r2, [r3, #24]
    }
    break;
 80025e2:	e0a3      	b.n	800272c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fd54 	bl	8002098 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025fe:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800260e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6999      	ldr	r1, [r3, #24]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	021a      	lsls	r2, r3, #8
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	619a      	str	r2, [r3, #24]
    }
    break;
 8002624:	e082      	b.n	800272c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68b9      	ldr	r1, [r7, #8]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fdb9 	bl	80021a4 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69da      	ldr	r2, [r3, #28]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0208 	orr.w	r2, r2, #8
 8002640:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0204 	bic.w	r2, r2, #4
 8002650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	69d9      	ldr	r1, [r3, #28]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	61da      	str	r2, [r3, #28]
    }
    break;
 8002664:	e062      	b.n	800272c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68b9      	ldr	r1, [r7, #8]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fe1d 	bl	80022ac <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002680:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	69d9      	ldr	r1, [r3, #28]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	021a      	lsls	r2, r3, #8
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	61da      	str	r2, [r3, #28]
    }
    break;
 80026a6:	e041      	b.n	800272c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f916 	bl	80028e0 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0208 	orr.w	r2, r2, #8
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0204 	bic.w	r2, r2, #4
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 80026e6:	e021      	b.n	800272c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f95a 	bl	80029a8 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002702:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	021a      	lsls	r2, r3, #8
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8002728:	e000      	b.n	800272c <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 800272a:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop

08002748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800275c:	2302      	movs	r3, #2
 800275e:	e038      	b.n	80027d2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a18      	ldr	r2, [pc, #96]	; (80027e0 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d108      	bne.n	8002794 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002788:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ac:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
} 
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40012c00 	.word	0x40012c00

080027e4 <HAL_TIMEx_ConfigBreakDeadTime>:
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e067      	b.n	80028d0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	4313      	orrs	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	041b      	lsls	r3, r3, #16
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a13      	ldr	r2, [pc, #76]	; (80028dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d115      	bne.n	80028be <HAL_TIMEx_ConfigBreakDeadTime+0xda>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	051b      	lsls	r3, r3, #20
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	40012c00 	.word	0x40012c00

080028e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291e:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002930:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	041b      	lsls	r3, r3, #16
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a15      	ldr	r2, [pc, #84]	; (8002998 <TIM_OC5_SetConfig+0xb8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00b      	beq.n	800295e <TIM_OC5_SetConfig+0x7e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a14      	ldr	r2, [pc, #80]	; (800299c <TIM_OC5_SetConfig+0xbc>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <TIM_OC5_SetConfig+0x7e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <TIM_OC5_SetConfig+0xc0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <TIM_OC5_SetConfig+0x7e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <TIM_OC5_SetConfig+0xc4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d109      	bne.n	8002972 <TIM_OC5_SetConfig+0x92>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002964:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	621a      	str	r2, [r3, #32]
}
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40012c00 	.word	0x40012c00
 800299c:	40014000 	.word	0x40014000
 80029a0:	40014400 	.word	0x40014400
 80029a4:	40014800 	.word	0x40014800

080029a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e6:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029fa:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	051b      	lsls	r3, r3, #20
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a16      	ldr	r2, [pc, #88]	; (8002a64 <TIM_OC6_SetConfig+0xbc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00b      	beq.n	8002a28 <TIM_OC6_SetConfig+0x80>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <TIM_OC6_SetConfig+0xc0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d007      	beq.n	8002a28 <TIM_OC6_SetConfig+0x80>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <TIM_OC6_SetConfig+0xc4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d003      	beq.n	8002a28 <TIM_OC6_SetConfig+0x80>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a13      	ldr	r2, [pc, #76]	; (8002a70 <TIM_OC6_SetConfig+0xc8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d109      	bne.n	8002a3c <TIM_OC6_SetConfig+0x94>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	029b      	lsls	r3, r3, #10
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	621a      	str	r2, [r3, #32]
} 
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40014000 	.word	0x40014000
 8002a6c:	40014400 	.word	0x40014400
 8002a70:	40014800 	.word	0x40014800

08002a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a7a:	f7fd fba5 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a7e:	f000 f82b 	bl	8002ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a82:	f000 f99f 	bl	8002dc4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002a86:	f000 f87b 	bl	8002b80 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002a8a:	f000 f925 	bl	8002cd8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  char txbuf[30]={0};
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	221e      	movs	r2, #30
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fb39 	bl	800310c <memset>
   uint16_t value=0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	84fb      	strh	r3, [r7, #38]	; 0x26
   short duty;

   HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <main+0x60>)
 8002aa2:	f7ff f8cf 	bl	8001c44 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  duty=27;
 8002aa6:	231b      	movs	r3, #27
 8002aa8:	84bb      	strh	r3, [r7, #36]	; 0x24
	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <main+0x60>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8002ab2:	635a      	str	r2, [r3, #52]	; 0x34
	 HAL_Delay(500);
 8002ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ab8:	f7fd fbec 	bl	8000294 <HAL_Delay>
     duty=15;
 8002abc:	230f      	movs	r3, #15
 8002abe:	84bb      	strh	r3, [r7, #36]	; 0x24
      __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <main+0x60>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8002ac8:	635a      	str	r2, [r3, #52]	; 0x34
       HAL_Delay(500);
 8002aca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ace:	f7fd fbe1 	bl	8000294 <HAL_Delay>
	  duty=27;
 8002ad2:	e7e8      	b.n	8002aa6 <main+0x32>
 8002ad4:	2000002c 	.word	0x2000002c

08002ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b096      	sub	sp, #88	; 0x58
 8002adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ade:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ae2:	2228      	movs	r2, #40	; 0x28
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fb10 	bl	800310c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aec:	f107 031c 	add.w	r3, r7, #28
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002afc:	1d3b      	adds	r3, r7, #4
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	611a      	str	r2, [r3, #16]
 8002b0a:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b10:	2301      	movs	r3, #1
 8002b12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b14:	2310      	movs	r3, #16
 8002b16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fe35 	bl	8000790 <HAL_RCC_OscConfig>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002b2c:	f000 f96e 	bl	8002e0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b30:	230f      	movs	r3, #15
 8002b32:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b34:	2300      	movs	r3, #0
 8002b36:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fd0e 	bl	800156c <HAL_RCC_ClockConfig>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002b56:	f000 f959 	bl	8002e0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b5e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fee6 	bl	8001938 <HAL_RCCEx_PeriphCLKConfig>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002b72:	f000 f94b 	bl	8002e0c <Error_Handler>
  }
}
 8002b76:	bf00      	nop
 8002b78:	3758      	adds	r7, #88	; 0x58
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b09a      	sub	sp, #104	; 0x68
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ba0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
 8002bb0:	615a      	str	r2, [r3, #20]
 8002bb2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	222c      	movs	r2, #44	; 0x2c
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 faa6 	bl	800310c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002bc0:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <MX_TIM1_Init+0x150>)
 8002bc2:	4a44      	ldr	r2, [pc, #272]	; (8002cd4 <MX_TIM1_Init+0x154>)
 8002bc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 625;
 8002bc6:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <MX_TIM1_Init+0x150>)
 8002bc8:	f240 2271 	movw	r2, #625	; 0x271
 8002bcc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bce:	4b40      	ldr	r3, [pc, #256]	; (8002cd0 <MX_TIM1_Init+0x150>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8002bd4:	4b3e      	ldr	r3, [pc, #248]	; (8002cd0 <MX_TIM1_Init+0x150>)
 8002bd6:	22ff      	movs	r2, #255	; 0xff
 8002bd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bda:	4b3d      	ldr	r3, [pc, #244]	; (8002cd0 <MX_TIM1_Init+0x150>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002be0:	4b3b      	ldr	r3, [pc, #236]	; (8002cd0 <MX_TIM1_Init+0x150>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be6:	4b3a      	ldr	r3, [pc, #232]	; (8002cd0 <MX_TIM1_Init+0x150>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002bec:	4838      	ldr	r0, [pc, #224]	; (8002cd0 <MX_TIM1_Init+0x150>)
 8002bee:	f7fe ffc9 	bl	8001b84 <HAL_TIM_Base_Init>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002bf8:	f000 f908 	bl	8002e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c00:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c06:	4619      	mov	r1, r3
 8002c08:	4831      	ldr	r0, [pc, #196]	; (8002cd0 <MX_TIM1_Init+0x150>)
 8002c0a:	f7ff f85d 	bl	8001cc8 <HAL_TIM_ConfigClockSource>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002c14:	f000 f8fa 	bl	8002e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c18:	482d      	ldr	r0, [pc, #180]	; (8002cd0 <MX_TIM1_Init+0x150>)
 8002c1a:	f7fe ffde 	bl	8001bda <HAL_TIM_PWM_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002c24:	f000 f8f2 	bl	8002e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4825      	ldr	r0, [pc, #148]	; (8002cd0 <MX_TIM1_Init+0x150>)
 8002c3c:	f7ff fd84 	bl	8002748 <HAL_TIMEx_MasterConfigSynchronization>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002c46:	f000 f8e1 	bl	8002e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c4a:	2360      	movs	r3, #96	; 0x60
 8002c4c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c52:	2300      	movs	r3, #0
 8002c54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c56:	2300      	movs	r3, #0
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4818      	ldr	r0, [pc, #96]	; (8002cd0 <MX_TIM1_Init+0x150>)
 8002c70:	f7ff fc52 	bl	8002518 <HAL_TIM_PWM_ConfigChannel>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002c7a:	f000 f8c7 	bl	8002e0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ca0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4807      	ldr	r0, [pc, #28]	; (8002cd0 <MX_TIM1_Init+0x150>)
 8002cb4:	f7ff fd96 	bl	80027e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002cbe:	f000 f8a5 	bl	8002e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002cc2:	4803      	ldr	r0, [pc, #12]	; (8002cd0 <MX_TIM1_Init+0x150>)
 8002cc4:	f000 f900 	bl	8002ec8 <HAL_TIM_MspPostInit>

}
 8002cc8:	bf00      	nop
 8002cca:	3768      	adds	r7, #104	; 0x68
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	2000002c 	.word	0x2000002c
 8002cd4:	40012c00 	.word	0x40012c00

08002cd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08e      	sub	sp, #56	; 0x38
 8002cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cec:	f107 031c 	add.w	r3, r7, #28
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cf8:	463b      	mov	r3, r7
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	611a      	str	r2, [r3, #16]
 8002d06:	615a      	str	r2, [r3, #20]
 8002d08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d0a:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <MX_TIM2_Init+0xe8>)
 8002d0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 625;
 8002d12:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <MX_TIM2_Init+0xe8>)
 8002d14:	f240 2271 	movw	r2, #625	; 0x271
 8002d18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1a:	4b29      	ldr	r3, [pc, #164]	; (8002dc0 <MX_TIM2_Init+0xe8>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8002d20:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <MX_TIM2_Init+0xe8>)
 8002d22:	22ff      	movs	r2, #255	; 0xff
 8002d24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <MX_TIM2_Init+0xe8>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <MX_TIM2_Init+0xe8>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d32:	4823      	ldr	r0, [pc, #140]	; (8002dc0 <MX_TIM2_Init+0xe8>)
 8002d34:	f7fe ff26 	bl	8001b84 <HAL_TIM_Base_Init>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002d3e:	f000 f865 	bl	8002e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	481c      	ldr	r0, [pc, #112]	; (8002dc0 <MX_TIM2_Init+0xe8>)
 8002d50:	f7fe ffba 	bl	8001cc8 <HAL_TIM_ConfigClockSource>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002d5a:	f000 f857 	bl	8002e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d5e:	4818      	ldr	r0, [pc, #96]	; (8002dc0 <MX_TIM2_Init+0xe8>)
 8002d60:	f7fe ff3b 	bl	8001bda <HAL_TIM_PWM_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002d6a:	f000 f84f 	bl	8002e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d76:	f107 031c 	add.w	r3, r7, #28
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4810      	ldr	r0, [pc, #64]	; (8002dc0 <MX_TIM2_Init+0xe8>)
 8002d7e:	f7ff fce3 	bl	8002748 <HAL_TIMEx_MasterConfigSynchronization>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002d88:	f000 f840 	bl	8002e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d8c:	2360      	movs	r3, #96	; 0x60
 8002d8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	2204      	movs	r2, #4
 8002da0:	4619      	mov	r1, r3
 8002da2:	4807      	ldr	r0, [pc, #28]	; (8002dc0 <MX_TIM2_Init+0xe8>)
 8002da4:	f7ff fbb8 	bl	8002518 <HAL_TIM_PWM_ConfigChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002dae:	f000 f82d 	bl	8002e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002db2:	4803      	ldr	r0, [pc, #12]	; (8002dc0 <MX_TIM2_Init+0xe8>)
 8002db4:	f000 f888 	bl	8002ec8 <HAL_TIM_MspPostInit>

}
 8002db8:	bf00      	nop
 8002dba:	3738      	adds	r7, #56	; 0x38
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	2000006c 	.word	0x2000006c

08002dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dca:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <MX_GPIO_Init+0x44>)
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	4a0e      	ldr	r2, [pc, #56]	; (8002e08 <MX_GPIO_Init+0x44>)
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd4:	6153      	str	r3, [r2, #20]
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <MX_GPIO_Init+0x44>)
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	607b      	str	r3, [r7, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <MX_GPIO_Init+0x44>)
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <MX_GPIO_Init+0x44>)
 8002de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dec:	6153      	str	r3, [r2, #20]
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <MX_GPIO_Init+0x44>)
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]

}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000

08002e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <HAL_MspInit+0x44>)
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <HAL_MspInit+0x44>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6193      	str	r3, [r2, #24]
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_MspInit+0x44>)
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	607b      	str	r3, [r7, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_MspInit+0x44>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <HAL_MspInit+0x44>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e44:	61d3      	str	r3, [r2, #28]
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_MspInit+0x44>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000

08002e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <HAL_TIM_Base_MspInit+0x5c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10c      	bne.n	8002e90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_TIM_Base_MspInit+0x60>)
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <HAL_TIM_Base_MspInit+0x60>)
 8002e7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e80:	6193      	str	r3, [r2, #24]
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_TIM_Base_MspInit+0x60>)
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e8e:	e010      	b.n	8002eb2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e98:	d10b      	bne.n	8002eb2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_TIM_Base_MspInit+0x60>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <HAL_TIM_Base_MspInit+0x60>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	61d3      	str	r3, [r2, #28]
 8002ea6:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <HAL_TIM_Base_MspInit+0x60>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40021000 	.word	0x40021000

08002ec8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a23      	ldr	r2, [pc, #140]	; (8002f74 <HAL_TIM_MspPostInit+0xac>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d11e      	bne.n	8002f28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <HAL_TIM_MspPostInit+0xb0>)
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <HAL_TIM_MspPostInit+0xb0>)
 8002ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef4:	6153      	str	r3, [r2, #20]
 8002ef6:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_TIM_MspPostInit+0xb0>)
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	2300      	movs	r3, #0
 8002f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002f14:	2306      	movs	r3, #6
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f22:	f7fd fabf 	bl	80004a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002f26:	e020      	b.n	8002f6a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f30:	d11b      	bne.n	8002f6a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f32:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_TIM_MspPostInit+0xb0>)
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	4a10      	ldr	r2, [pc, #64]	; (8002f78 <HAL_TIM_MspPostInit+0xb0>)
 8002f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f3c:	6153      	str	r3, [r2, #20]
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_TIM_MspPostInit+0xb0>)
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f56:	2300      	movs	r3, #0
 8002f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	4619      	mov	r1, r3
 8002f64:	4805      	ldr	r0, [pc, #20]	; (8002f7c <HAL_TIM_MspPostInit+0xb4>)
 8002f66:	f7fd fa9d 	bl	80004a4 <HAL_GPIO_Init>
}
 8002f6a:	bf00      	nop
 8002f6c:	3728      	adds	r7, #40	; 0x28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40012c00 	.word	0x40012c00
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	48000400 	.word	0x48000400

08002f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f92:	e7fe      	b.n	8002f92 <HardFault_Handler+0x4>

08002f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <MemManage_Handler+0x4>

08002f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f9e:	e7fe      	b.n	8002f9e <BusFault_Handler+0x4>

08002fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fa4:	e7fe      	b.n	8002fa4 <UsageFault_Handler+0x4>

08002fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fd4:	f7fd f93e 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <SystemInit+0x84>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	4a1e      	ldr	r2, [pc, #120]	; (8003060 <SystemInit+0x84>)
 8002fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002ff0:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <SystemInit+0x88>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1b      	ldr	r2, [pc, #108]	; (8003064 <SystemInit+0x88>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <SystemInit+0x88>)
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	4918      	ldr	r1, [pc, #96]	; (8003064 <SystemInit+0x88>)
 8003002:	4b19      	ldr	r3, [pc, #100]	; (8003068 <SystemInit+0x8c>)
 8003004:	4013      	ands	r3, r2
 8003006:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003008:	4b16      	ldr	r3, [pc, #88]	; (8003064 <SystemInit+0x88>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a15      	ldr	r2, [pc, #84]	; (8003064 <SystemInit+0x88>)
 800300e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003016:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003018:	4b12      	ldr	r3, [pc, #72]	; (8003064 <SystemInit+0x88>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a11      	ldr	r2, [pc, #68]	; (8003064 <SystemInit+0x88>)
 800301e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003022:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <SystemInit+0x88>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <SystemInit+0x88>)
 800302a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800302e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <SystemInit+0x88>)
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <SystemInit+0x88>)
 8003036:	f023 030f 	bic.w	r3, r3, #15
 800303a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <SystemInit+0x88>)
 800303e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003040:	4908      	ldr	r1, [pc, #32]	; (8003064 <SystemInit+0x88>)
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <SystemInit+0x90>)
 8003044:	4013      	ands	r3, r2
 8003046:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <SystemInit+0x88>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <SystemInit+0x84>)
 8003050:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003054:	609a      	str	r2, [r3, #8]
#endif
}
 8003056:	bf00      	nop
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000ed00 	.word	0xe000ed00
 8003064:	40021000 	.word	0x40021000
 8003068:	f87fc00c 	.word	0xf87fc00c
 800306c:	ff00fccc 	.word	0xff00fccc

08003070 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003074:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003076:	e003      	b.n	8003080 <LoopCopyDataInit>

08003078 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800307a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800307c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800307e:	3104      	adds	r1, #4

08003080 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003080:	480b      	ldr	r0, [pc, #44]	; (80030b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003084:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003086:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003088:	d3f6      	bcc.n	8003078 <CopyDataInit>
	ldr	r2, =_sbss
 800308a:	4a0b      	ldr	r2, [pc, #44]	; (80030b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800308c:	e002      	b.n	8003094 <LoopFillZerobss>

0800308e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800308e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003090:	f842 3b04 	str.w	r3, [r2], #4

08003094 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003094:	4b09      	ldr	r3, [pc, #36]	; (80030bc <LoopForever+0x16>)
	cmp	r2, r3
 8003096:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003098:	d3f9      	bcc.n	800308e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800309a:	f7ff ff9f 	bl	8002fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800309e:	f000 f811 	bl	80030c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030a2:	f7ff fce7 	bl	8002a74 <main>

080030a6 <LoopForever>:

LoopForever:
    b LoopForever
 80030a6:	e7fe      	b.n	80030a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030a8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80030ac:	0800316c 	.word	0x0800316c
	ldr	r0, =_sdata
 80030b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80030b4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80030b8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80030bc:	200000ac 	.word	0x200000ac

080030c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030c0:	e7fe      	b.n	80030c0 <ADC1_2_IRQHandler>
	...

080030c4 <__libc_init_array>:
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	4e0d      	ldr	r6, [pc, #52]	; (80030fc <__libc_init_array+0x38>)
 80030c8:	4c0d      	ldr	r4, [pc, #52]	; (8003100 <__libc_init_array+0x3c>)
 80030ca:	1ba4      	subs	r4, r4, r6
 80030cc:	10a4      	asrs	r4, r4, #2
 80030ce:	2500      	movs	r5, #0
 80030d0:	42a5      	cmp	r5, r4
 80030d2:	d109      	bne.n	80030e8 <__libc_init_array+0x24>
 80030d4:	4e0b      	ldr	r6, [pc, #44]	; (8003104 <__libc_init_array+0x40>)
 80030d6:	4c0c      	ldr	r4, [pc, #48]	; (8003108 <__libc_init_array+0x44>)
 80030d8:	f000 f820 	bl	800311c <_init>
 80030dc:	1ba4      	subs	r4, r4, r6
 80030de:	10a4      	asrs	r4, r4, #2
 80030e0:	2500      	movs	r5, #0
 80030e2:	42a5      	cmp	r5, r4
 80030e4:	d105      	bne.n	80030f2 <__libc_init_array+0x2e>
 80030e6:	bd70      	pop	{r4, r5, r6, pc}
 80030e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030ec:	4798      	blx	r3
 80030ee:	3501      	adds	r5, #1
 80030f0:	e7ee      	b.n	80030d0 <__libc_init_array+0xc>
 80030f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030f6:	4798      	blx	r3
 80030f8:	3501      	adds	r5, #1
 80030fa:	e7f2      	b.n	80030e2 <__libc_init_array+0x1e>
 80030fc:	08003164 	.word	0x08003164
 8003100:	08003164 	.word	0x08003164
 8003104:	08003164 	.word	0x08003164
 8003108:	08003168 	.word	0x08003168

0800310c <memset>:
 800310c:	4402      	add	r2, r0
 800310e:	4603      	mov	r3, r0
 8003110:	4293      	cmp	r3, r2
 8003112:	d100      	bne.n	8003116 <memset+0xa>
 8003114:	4770      	bx	lr
 8003116:	f803 1b01 	strb.w	r1, [r3], #1
 800311a:	e7f9      	b.n	8003110 <memset+0x4>

0800311c <_init>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	bf00      	nop
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr

08003128 <_fini>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	bf00      	nop
 800312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312e:	bc08      	pop	{r3}
 8003130:	469e      	mov	lr, r3
 8003132:	4770      	bx	lr
