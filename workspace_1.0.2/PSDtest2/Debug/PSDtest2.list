
PSDtest2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004fa0  08004fa0  00014fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005018  08005018  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005018  08005018  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005018  08005018  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005018  08005018  00015018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800501c  0800501c  0001501c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  08005090  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08005090  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012476  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f52  00000000  00000000  00032516  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c80  00000000  00000000  00034468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba8  00000000  00000000  000350e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001935c  00000000  00000000  00035c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aca5  00000000  00000000  0004efec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e8bd  00000000  00000000  00059c91  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e854e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b4  00000000  00000000  000e85cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f88 	.word	0x08004f88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004f88 	.word	0x08004f88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <HAL_Init+0x28>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a07      	ldr	r2, [pc, #28]	; (8000298 <HAL_Init+0x28>)
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000280:	2003      	movs	r0, #3
 8000282:	f001 f971 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000286:	2000      	movs	r0, #0
 8000288:	f000 f808 	bl	800029c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800028c:	f004 f87e 	bl	800438c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40022000 	.word	0x40022000

0800029c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <HAL_InitTick+0x54>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <HAL_InitTick+0x58>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4619      	mov	r1, r3
 80002ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 f97b 	bl	80015b6 <HAL_SYSTICK_Config>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e00e      	b.n	80002e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b0f      	cmp	r3, #15
 80002ce:	d80a      	bhi.n	80002e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002d0:	2200      	movs	r2, #0
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	f04f 30ff 	mov.w	r0, #4294967295
 80002d8:	f001 f951 	bl	800157e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <HAL_InitTick+0x5c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002e2:	2300      	movs	r3, #0
 80002e4:	e000      	b.n	80002e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002e6:	2301      	movs	r3, #1
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000008 	.word	0x20000008
 80002f4:	20000004 	.word	0x20000004
 80002f8:	20000000 	.word	0x20000000

080002fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_IncTick+0x20>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	461a      	mov	r2, r3
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_IncTick+0x24>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4413      	add	r3, r2
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <HAL_IncTick+0x24>)
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000004 	.word	0x20000004
 8000320:	20000098 	.word	0x20000098

08000324 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  return uwTick;  
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <HAL_GetTick+0x14>)
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000098 	.word	0x20000098

0800033c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000344:	f7ff ffee 	bl	8000324 <HAL_GetTick>
 8000348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000354:	d005      	beq.n	8000362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <HAL_Delay+0x40>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	461a      	mov	r2, r3
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	4413      	add	r3, r2
 8000360:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000362:	bf00      	nop
 8000364:	f7ff ffde 	bl	8000324 <HAL_GetTick>
 8000368:	4602      	mov	r2, r0
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	429a      	cmp	r2, r3
 8000372:	d8f7      	bhi.n	8000364 <HAL_Delay+0x28>
  {
  }
}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000004 	.word	0x20000004

08000380 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b09c      	sub	sp, #112	; 0x70
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000388:	2300      	movs	r3, #0
 800038a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800038e:	2300      	movs	r3, #0
 8000390:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d101      	bne.n	80003a0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800039c:	2301      	movs	r3, #1
 800039e:	e170      	b.n	8000682 <HAL_ADC_Init+0x302>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	691b      	ldr	r3, [r3, #16]
 80003a4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003aa:	f003 0310 	and.w	r3, r3, #16
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d176      	bne.n	80004a0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d152      	bne.n	8000460 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2200      	movs	r2, #0
 80003c4:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2200      	movs	r2, #0
 80003ca:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2200      	movs	r2, #0
 80003d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f003 fffd 	bl	80043d4 <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	689b      	ldr	r3, [r3, #8]
 80003e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d13b      	bne.n	8000460 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f000 fefd 	bl	80011e8 <ADC_Disable>
 80003ee:	4603      	mov	r3, r0
 80003f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d12f      	bne.n	8000460 <HAL_ADC_Init+0xe0>
 8000400:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000404:	2b00      	cmp	r3, #0
 8000406:	d12b      	bne.n	8000460 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800040c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000410:	f023 0302 	bic.w	r3, r3, #2
 8000414:	f043 0202 	orr.w	r2, r3, #2
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	689a      	ldr	r2, [r3, #8]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800042a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800043a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800043c:	4b93      	ldr	r3, [pc, #588]	; (800068c <HAL_ADC_Init+0x30c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a93      	ldr	r2, [pc, #588]	; (8000690 <HAL_ADC_Init+0x310>)
 8000442:	fba2 2303 	umull	r2, r3, r2, r3
 8000446:	0c9a      	lsrs	r2, r3, #18
 8000448:	4613      	mov	r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4413      	add	r3, r2
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000452:	e002      	b.n	800045a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	3b01      	subs	r3, #1
 8000458:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1f9      	bne.n	8000454 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	689b      	ldr	r3, [r3, #8]
 8000466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046a:	2b00      	cmp	r3, #0
 800046c:	d007      	beq.n	800047e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800047c:	d110      	bne.n	80004a0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000482:	f023 0312 	bic.w	r3, r3, #18
 8000486:	f043 0210 	orr.w	r2, r3, #16
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000492:	f043 0201 	orr.w	r2, r3, #1
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 800049a:	2301      	movs	r3, #1
 800049c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004a4:	f003 0310 	and.w	r3, r3, #16
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	f040 80dd 	bne.w	8000668 <HAL_ADC_Init+0x2e8>
 80004ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	f040 80d8 	bne.w	8000668 <HAL_ADC_Init+0x2e8>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	f040 80d0 	bne.w	8000668 <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80004d0:	f043 0202 	orr.w	r2, r3, #2
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80004d8:	4b6e      	ldr	r3, [pc, #440]	; (8000694 <HAL_ADC_Init+0x314>)
 80004da:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80004e4:	d102      	bne.n	80004ec <HAL_ADC_Init+0x16c>
 80004e6:	4b6c      	ldr	r3, [pc, #432]	; (8000698 <HAL_ADC_Init+0x318>)
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	e002      	b.n	80004f2 <HAL_ADC_Init+0x172>
 80004ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80004f0:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	f003 0303 	and.w	r3, r3, #3
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d108      	bne.n	8000512 <HAL_ADC_Init+0x192>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	2b01      	cmp	r3, #1
 800050c:	d101      	bne.n	8000512 <HAL_ADC_Init+0x192>
 800050e:	2301      	movs	r3, #1
 8000510:	e000      	b.n	8000514 <HAL_ADC_Init+0x194>
 8000512:	2300      	movs	r3, #0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d11c      	bne.n	8000552 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000518:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800051a:	2b00      	cmp	r3, #0
 800051c:	d010      	beq.n	8000540 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800051e:	693b      	ldr	r3, [r7, #16]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	f003 0303 	and.w	r3, r3, #3
 8000526:	2b01      	cmp	r3, #1
 8000528:	d107      	bne.n	800053a <HAL_ADC_Init+0x1ba>
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	2b01      	cmp	r3, #1
 8000534:	d101      	bne.n	800053a <HAL_ADC_Init+0x1ba>
 8000536:	2301      	movs	r3, #1
 8000538:	e000      	b.n	800053c <HAL_ADC_Init+0x1bc>
 800053a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800053c:	2b00      	cmp	r3, #0
 800053e:	d108      	bne.n	8000552 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	431a      	orrs	r2, r3
 800054e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000550:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	035b      	lsls	r3, r3, #13
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800055c:	2a01      	cmp	r2, #1
 800055e:	d002      	beq.n	8000566 <HAL_ADC_Init+0x1e6>
 8000560:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000564:	e000      	b.n	8000568 <HAL_ADC_Init+0x1e8>
 8000566:	2200      	movs	r2, #0
 8000568:	431a      	orrs	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	431a      	orrs	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	4313      	orrs	r3, r2
 8000576:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000578:	4313      	orrs	r3, r2
 800057a:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000580:	2b01      	cmp	r3, #1
 8000582:	d11b      	bne.n	80005bc <HAL_ADC_Init+0x23c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d109      	bne.n	80005a0 <HAL_ADC_Init+0x220>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000590:	3b01      	subs	r3, #1
 8000592:	045a      	lsls	r2, r3, #17
 8000594:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000596:	4313      	orrs	r3, r2
 8000598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800059c:	66bb      	str	r3, [r7, #104]	; 0x68
 800059e:	e00d      	b.n	80005bc <HAL_ADC_Init+0x23c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80005a8:	f043 0220 	orr.w	r2, r3, #32
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005b4:	f043 0201 	orr.w	r2, r3, #1
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d007      	beq.n	80005d4 <HAL_ADC_Init+0x254>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005cc:	4313      	orrs	r3, r2
 80005ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80005d0:	4313      	orrs	r3, r2
 80005d2:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	f003 030c 	and.w	r3, r3, #12
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d113      	bne.n	800060a <HAL_ADC_Init+0x28a>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	6812      	ldr	r2, [r2, #0]
 80005ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005f0:	f023 0302 	bic.w	r3, r3, #2
 80005f4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	039a      	lsls	r2, r3, #14
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	4313      	orrs	r3, r2
 8000604:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000606:	4313      	orrs	r3, r2
 8000608:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	68da      	ldr	r2, [r3, #12]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <HAL_ADC_Init+0x31c>)
 8000612:	4013      	ands	r3, r2
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	6812      	ldr	r2, [r2, #0]
 8000618:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800061a:	430b      	orrs	r3, r1
 800061c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	691b      	ldr	r3, [r3, #16]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d10c      	bne.n	8000640 <HAL_ADC_Init+0x2c0>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	f023 010f 	bic.w	r1, r3, #15
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6a1b      	ldr	r3, [r3, #32]
 8000634:	1e5a      	subs	r2, r3, #1
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	430a      	orrs	r2, r1
 800063c:	631a      	str	r2, [r3, #48]	; 0x30
 800063e:	e007      	b.n	8000650 <HAL_ADC_Init+0x2d0>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f022 020f 	bic.w	r2, r2, #15
 800064e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065a:	f023 0303 	bic.w	r3, r3, #3
 800065e:	f043 0201 	orr.w	r2, r3, #1
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	645a      	str	r2, [r3, #68]	; 0x44
 8000666:	e00a      	b.n	800067e <HAL_ADC_Init+0x2fe>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066c:	f023 0312 	bic.w	r3, r3, #18
 8000670:	f043 0210 	orr.w	r2, r3, #16
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000678:	2301      	movs	r3, #1
 800067a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800067e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000682:	4618      	mov	r0, r3
 8000684:	3770      	adds	r7, #112	; 0x70
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000008 	.word	0x20000008
 8000690:	431bde83 	.word	0x431bde83
 8000694:	50000300 	.word	0x50000300
 8000698:	50000100 	.word	0x50000100
 800069c:	fff0c007 	.word	0xfff0c007

080006a0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	f040 809c 	bne.w	80007f4 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d101      	bne.n	80006ca <HAL_ADC_Start+0x2a>
 80006c6:	2302      	movs	r3, #2
 80006c8:	e097      	b.n	80007fa <HAL_ADC_Start+0x15a>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2201      	movs	r2, #1
 80006ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 fd2a 	bl	800112c <ADC_Enable>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f040 8083 	bne.w	80007ea <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80006ec:	f023 0301 	bic.w	r3, r3, #1
 80006f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80006f8:	4b42      	ldr	r3, [pc, #264]	; (8000804 <HAL_ADC_Start+0x164>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	f003 031f 	and.w	r3, r3, #31
 8000700:	2b00      	cmp	r3, #0
 8000702:	d004      	beq.n	800070e <HAL_ADC_Start+0x6e>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800070c:	d115      	bne.n	800073a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000712:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000724:	2b00      	cmp	r3, #0
 8000726:	d027      	beq.n	8000778 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000730:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	645a      	str	r2, [r3, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000738:	e01e      	b.n	8000778 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800074e:	d004      	beq.n	800075a <HAL_ADC_Start+0xba>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a2c      	ldr	r2, [pc, #176]	; (8000808 <HAL_ADC_Start+0x168>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d10e      	bne.n	8000778 <HAL_ADC_Start+0xd8>
 800075a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d007      	beq.n	8000778 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000770:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000784:	d106      	bne.n	8000794 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800078a:	f023 0206 	bic.w	r2, r3, #6
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	649a      	str	r2, [r3, #72]	; 0x48
 8000792:	e002      	b.n	800079a <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	649a      	str	r2, [r3, #72]	; 0x48
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	221c      	movs	r2, #28
 80007a8:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <HAL_ADC_Start+0x164>)
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	f003 031f 	and.w	r3, r3, #31
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d010      	beq.n	80007d8 <HAL_ADC_Start+0x138>
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <HAL_ADC_Start+0x164>)
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	f003 031f 	and.w	r3, r3, #31
 80007be:	2b05      	cmp	r3, #5
 80007c0:	d00a      	beq.n	80007d8 <HAL_ADC_Start+0x138>
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_ADC_Start+0x164>)
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	f003 031f 	and.w	r3, r3, #31
 80007ca:	2b09      	cmp	r3, #9
 80007cc:	d004      	beq.n	80007d8 <HAL_ADC_Start+0x138>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007d6:	d10f      	bne.n	80007f8 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	689a      	ldr	r2, [r3, #8]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f042 0204 	orr.w	r2, r2, #4
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	e006      	b.n	80007f8 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80007f2:	e001      	b.n	80007f8 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80007f4:	2302      	movs	r3, #2
 80007f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	50000300 	.word	0x50000300
 8000808:	50000100 	.word	0x50000100

0800080c <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000814:	2300      	movs	r3, #0
 8000816:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800081e:	2b01      	cmp	r3, #1
 8000820:	d101      	bne.n	8000826 <HAL_ADC_Stop+0x1a>
 8000822:	2302      	movs	r3, #2
 8000824:	e023      	b.n	800086e <HAL_ADC_Stop+0x62>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2201      	movs	r2, #1
 800082a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800082e:	216c      	movs	r1, #108	; 0x6c
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f000 fd39 	bl	80012a8 <ADC_ConversionStop>
 8000836:	4603      	mov	r3, r0
 8000838:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d111      	bne.n	8000864 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 fcd1 	bl	80011e8 <ADC_Disable>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d109      	bne.n	8000864 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000854:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000858:	f023 0301 	bic.w	r3, r3, #1
 800085c:	f043 0201 	orr.w	r2, r3, #1
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	2b08      	cmp	r3, #8
 800088c:	d102      	bne.n	8000894 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800088e:	2308      	movs	r3, #8
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	e02e      	b.n	80008f2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000894:	4b5a      	ldr	r3, [pc, #360]	; (8000a00 <HAL_ADC_PollForConversion+0x188>)
 8000896:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f003 031f 	and.w	r3, r3, #31
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d112      	bne.n	80008ca <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	68db      	ldr	r3, [r3, #12]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d11d      	bne.n	80008ee <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f043 0220 	orr.w	r2, r3, #32
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e096      	b.n	80009f8 <HAL_ADC_PollForConversion+0x180>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00b      	beq.n	80008ee <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f043 0220 	orr.w	r2, r3, #32
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e084      	b.n	80009f8 <HAL_ADC_PollForConversion+0x180>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80008ee:	230c      	movs	r3, #12
 80008f0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008f2:	4b43      	ldr	r3, [pc, #268]	; (8000a00 <HAL_ADC_PollForConversion+0x188>)
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	f003 031f 	and.w	r3, r3, #31
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d004      	beq.n	8000908 <HAL_ADC_PollForConversion+0x90>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000906:	d104      	bne.n	8000912 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	e003      	b.n	800091a <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000912:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800091a:	f7ff fd03 	bl	8000324 <HAL_GetTick>
 800091e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000920:	e01a      	b.n	8000958 <HAL_ADC_PollForConversion+0xe0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000928:	d016      	beq.n	8000958 <HAL_ADC_PollForConversion+0xe0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d007      	beq.n	8000940 <HAL_ADC_PollForConversion+0xc8>
 8000930:	f7ff fcf8 	bl	8000324 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	683a      	ldr	r2, [r7, #0]
 800093c:	429a      	cmp	r2, r3
 800093e:	d20b      	bcs.n	8000958 <HAL_ADC_PollForConversion+0xe0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000944:	f043 0204 	orr.w	r2, r3, #4
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_TIMEOUT;
 8000954:	2303      	movs	r3, #3
 8000956:	e04f      	b.n	80009f8 <HAL_ADC_PollForConversion+0x180>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	4013      	ands	r3, r2
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0dd      	beq.n	8000922 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800097c:	2b00      	cmp	r3, #0
 800097e:	d131      	bne.n	80009e4 <HAL_ADC_PollForConversion+0x16c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000986:	2b00      	cmp	r3, #0
 8000988:	d12c      	bne.n	80009e4 <HAL_ADC_PollForConversion+0x16c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f003 0308 	and.w	r3, r3, #8
 8000994:	2b08      	cmp	r3, #8
 8000996:	d125      	bne.n	80009e4 <HAL_ADC_PollForConversion+0x16c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d112      	bne.n	80009cc <HAL_ADC_PollForConversion+0x154>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	645a      	str	r2, [r3, #68]	; 0x44
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d112      	bne.n	80009e4 <HAL_ADC_PollForConversion+0x16c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f043 0201 	orr.w	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	645a      	str	r2, [r3, #68]	; 0x44
 80009ca:	e00b      	b.n	80009e4 <HAL_ADC_PollForConversion+0x16c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d0:	f043 0220 	orr.w	r2, r3, #32
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009dc:	f043 0201 	orr.w	r2, r3, #1
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d103      	bne.n	80009f6 <HAL_ADC_PollForConversion+0x17e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	50000300 	.word	0x50000300

08000a04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b09d      	sub	sp, #116	; 0x74
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d101      	bne.n	8000a42 <HAL_ADC_ConfigChannel+0x22>
 8000a3e:	2302      	movs	r3, #2
 8000a40:	e2a5      	b.n	8000f8e <HAL_ADC_ConfigChannel+0x56e>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2201      	movs	r2, #1
 8000a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	f040 8289 	bne.w	8000f6c <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d81c      	bhi.n	8000a9c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685a      	ldr	r2, [r3, #4]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	461a      	mov	r2, r3
 8000a76:	231f      	movs	r3, #31
 8000a78:	4093      	lsls	r3, r2
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	4019      	ands	r1, r3
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	6818      	ldr	r0, [r3, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	4613      	mov	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	430a      	orrs	r2, r1
 8000a98:	631a      	str	r2, [r3, #48]	; 0x30
 8000a9a:	e063      	b.n	8000b64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2b09      	cmp	r3, #9
 8000aa2:	d81e      	bhi.n	8000ae2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	3b1e      	subs	r3, #30
 8000ab8:	221f      	movs	r2, #31
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	4019      	ands	r1, r3
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	4613      	mov	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4413      	add	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	3b1e      	subs	r3, #30
 8000ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	635a      	str	r2, [r3, #52]	; 0x34
 8000ae0:	e040      	b.n	8000b64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b0e      	cmp	r3, #14
 8000ae8:	d81e      	bhi.n	8000b28 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	4613      	mov	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4413      	add	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	3b3c      	subs	r3, #60	; 0x3c
 8000afe:	221f      	movs	r2, #31
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	4019      	ands	r1, r3
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685a      	ldr	r2, [r3, #4]
 8000b10:	4613      	mov	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	3b3c      	subs	r3, #60	; 0x3c
 8000b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	430a      	orrs	r2, r1
 8000b24:	639a      	str	r2, [r3, #56]	; 0x38
 8000b26:	e01d      	b.n	8000b64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	4613      	mov	r3, r2
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4413      	add	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	3b5a      	subs	r3, #90	; 0x5a
 8000b3c:	221f      	movs	r2, #31
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	4019      	ands	r1, r3
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	6818      	ldr	r0, [r3, #0]
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	3b5a      	subs	r3, #90	; 0x5a
 8000b58:	fa00 f203 	lsl.w	r2, r0, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	430a      	orrs	r2, r1
 8000b62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	f003 030c 	and.w	r3, r3, #12
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 80e5 	bne.w	8000d3e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b09      	cmp	r3, #9
 8000b7a:	d91c      	bls.n	8000bb6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	6999      	ldr	r1, [r3, #24]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	4613      	mov	r3, r2
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	4413      	add	r3, r2
 8000b8c:	3b1e      	subs	r3, #30
 8000b8e:	2207      	movs	r2, #7
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	4019      	ands	r1, r3
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	6898      	ldr	r0, [r3, #8]
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	3b1e      	subs	r3, #30
 8000ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	619a      	str	r2, [r3, #24]
 8000bb4:	e019      	b.n	8000bea <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6959      	ldr	r1, [r3, #20]
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	2207      	movs	r2, #7
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	4019      	ands	r1, r3
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	6898      	ldr	r0, [r3, #8]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	4413      	add	r3, r2
 8000bde:	fa00 f203 	lsl.w	r2, r0, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	430a      	orrs	r2, r1
 8000be8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	695a      	ldr	r2, [r3, #20]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	08db      	lsrs	r3, r3, #3
 8000bf6:	f003 0303 	and.w	r3, r3, #3
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d84f      	bhi.n	8000cac <HAL_ADC_ConfigChannel+0x28c>
 8000c0c:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <HAL_ADC_ConfigChannel+0x1f4>)
 8000c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c12:	bf00      	nop
 8000c14:	08000c25 	.word	0x08000c25
 8000c18:	08000c47 	.word	0x08000c47
 8000c1c:	08000c69 	.word	0x08000c69
 8000c20:	08000c8b 	.word	0x08000c8b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c2a:	4b9e      	ldr	r3, [pc, #632]	; (8000ea4 <HAL_ADC_ConfigChannel+0x484>)
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	6812      	ldr	r2, [r2, #0]
 8000c32:	0691      	lsls	r1, r2, #26
 8000c34:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000c36:	430a      	orrs	r2, r1
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000c42:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000c44:	e07e      	b.n	8000d44 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000c4c:	4b95      	ldr	r3, [pc, #596]	; (8000ea4 <HAL_ADC_ConfigChannel+0x484>)
 8000c4e:	4013      	ands	r3, r2
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	0691      	lsls	r1, r2, #26
 8000c56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000c64:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000c66:	e06d      	b.n	8000d44 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000c6e:	4b8d      	ldr	r3, [pc, #564]	; (8000ea4 <HAL_ADC_ConfigChannel+0x484>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	6812      	ldr	r2, [r2, #0]
 8000c76:	0691      	lsls	r1, r2, #26
 8000c78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000c86:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000c88:	e05c      	b.n	8000d44 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000c90:	4b84      	ldr	r3, [pc, #528]	; (8000ea4 <HAL_ADC_ConfigChannel+0x484>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	6812      	ldr	r2, [r2, #0]
 8000c98:	0691      	lsls	r1, r2, #26
 8000c9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ca8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000caa:	e04b      	b.n	8000d44 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	069b      	lsls	r3, r3, #26
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d107      	bne.n	8000cd0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000cce:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	069b      	lsls	r3, r3, #26
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d107      	bne.n	8000cf4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000cf2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	069b      	lsls	r3, r3, #26
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d107      	bne.n	8000d18 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000d16:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	069b      	lsls	r3, r3, #26
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d10a      	bne.n	8000d42 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000d3a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000d3c:	e001      	b.n	8000d42 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8000d3e:	bf00      	nop
 8000d40:	e000      	b.n	8000d44 <HAL_ADC_ConfigChannel+0x324>
      break;
 8000d42:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d108      	bne.n	8000d64 <HAL_ADC_ConfigChannel+0x344>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d101      	bne.n	8000d64 <HAL_ADC_ConfigChannel+0x344>
 8000d60:	2301      	movs	r3, #1
 8000d62:	e000      	b.n	8000d66 <HAL_ADC_ConfigChannel+0x346>
 8000d64:	2300      	movs	r3, #0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f040 810b 	bne.w	8000f82 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d00f      	beq.n	8000d94 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2201      	movs	r2, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000d92:	e049      	b.n	8000e28 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2201      	movs	r2, #1
 8000da2:	409a      	lsls	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b09      	cmp	r3, #9
 8000db4:	d91c      	bls.n	8000df0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6999      	ldr	r1, [r3, #24]
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	3b1b      	subs	r3, #27
 8000dc8:	2207      	movs	r2, #7
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	4019      	ands	r1, r3
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	6898      	ldr	r0, [r3, #8]
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	3b1b      	subs	r3, #27
 8000de2:	fa00 f203 	lsl.w	r2, r0, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	430a      	orrs	r2, r1
 8000dec:	619a      	str	r2, [r3, #24]
 8000dee:	e01b      	b.n	8000e28 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6959      	ldr	r1, [r3, #20]
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	2207      	movs	r2, #7
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	4019      	ands	r1, r3
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	6898      	ldr	r0, [r3, #8]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	4613      	mov	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <HAL_ADC_ConfigChannel+0x488>)
 8000e2a:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b10      	cmp	r3, #16
 8000e32:	d105      	bne.n	8000e40 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d015      	beq.n	8000e6c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000e44:	2b11      	cmp	r3, #17
 8000e46:	d105      	bne.n	8000e54 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00b      	beq.n	8000e6c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000e58:	2b12      	cmp	r3, #18
 8000e5a:	f040 8092 	bne.w	8000f82 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000e5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f040 808b 	bne.w	8000f82 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e74:	d102      	bne.n	8000e7c <HAL_ADC_ConfigChannel+0x45c>
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_ADC_ConfigChannel+0x48c>)
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	e002      	b.n	8000e82 <HAL_ADC_ConfigChannel+0x462>
 8000e7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e80:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d10f      	bne.n	8000eb0 <HAL_ADC_ConfigChannel+0x490>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d108      	bne.n	8000eb0 <HAL_ADC_ConfigChannel+0x490>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e007      	b.n	8000eb2 <HAL_ADC_ConfigChannel+0x492>
 8000ea2:	bf00      	nop
 8000ea4:	83fff000 	.word	0x83fff000
 8000ea8:	50000300 	.word	0x50000300
 8000eac:	50000100 	.word	0x50000100
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d150      	bne.n	8000f58 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000eb6:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d010      	beq.n	8000ede <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d107      	bne.n	8000ed8 <HAL_ADC_ConfigChannel+0x4b8>
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d101      	bne.n	8000ed8 <HAL_ADC_ConfigChannel+0x4b8>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e000      	b.n	8000eda <HAL_ADC_ConfigChannel+0x4ba>
 8000ed8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d13c      	bne.n	8000f58 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b10      	cmp	r3, #16
 8000ee4:	d11d      	bne.n	8000f22 <HAL_ADC_ConfigChannel+0x502>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eee:	d118      	bne.n	8000f22 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000efa:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000efc:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <HAL_ADC_ConfigChannel+0x57c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <HAL_ADC_ConfigChannel+0x580>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	0c9a      	lsrs	r2, r3, #18
 8000f08:	4613      	mov	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4413      	add	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000f12:	e002      	b.n	8000f1a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1f9      	bne.n	8000f14 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000f20:	e02e      	b.n	8000f80 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b11      	cmp	r3, #17
 8000f28:	d10b      	bne.n	8000f42 <HAL_ADC_ConfigChannel+0x522>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f32:	d106      	bne.n	8000f42 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f3e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000f40:	e01e      	b.n	8000f80 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d11a      	bne.n	8000f80 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000f4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f54:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000f56:	e013      	b.n	8000f80 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5c:	f043 0220 	orr.w	r2, r3, #32
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000f6a:	e00a      	b.n	8000f82 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f70:	f043 0220 	orr.w	r2, r3, #32
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000f7e:	e000      	b.n	8000f82 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000f80:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8000f8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3774      	adds	r7, #116	; 0x74
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	431bde83 	.word	0x431bde83

08000fa4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b09b      	sub	sp, #108	; 0x6c
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fbc:	d102      	bne.n	8000fc4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8000fbe:	4b59      	ldr	r3, [pc, #356]	; (8001124 <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	e002      	b.n	8000fca <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8000fc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000fc8:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e0a1      	b.n	8001118 <HAL_ADCEx_MultiModeConfigChannel+0x174>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d101      	bne.n	8000fe2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e09a      	b.n	8001118 <HAL_ADCEx_MultiModeConfigChannel+0x174>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d17e      	bne.n	80010f6 <HAL_ADCEx_MultiModeConfigChannel+0x152>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	2b00      	cmp	r3, #0
 8001002:	d178      	bne.n	80010f6 <HAL_ADCEx_MultiModeConfigChannel+0x152>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001004:	4b48      	ldr	r3, [pc, #288]	; (8001128 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001006:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d03f      	beq.n	8001090 <HAL_ADCEx_MultiModeConfigChannel+0xec>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001010:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	6859      	ldr	r1, [r3, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001020:	035b      	lsls	r3, r3, #13
 8001022:	430b      	orrs	r3, r1
 8001024:	431a      	orrs	r2, r3
 8001026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001028:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b01      	cmp	r3, #1
 8001036:	d108      	bne.n	800104a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b01      	cmp	r3, #1
 8001044:	d101      	bne.n	800104a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800104a:	2300      	movs	r3, #0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d15c      	bne.n	800110a <HAL_ADCEx_MultiModeConfigChannel+0x166>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d107      	bne.n	800106c <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b01      	cmp	r3, #1
 8001066:	d101      	bne.n	800106c <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800106c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800106e:	2b00      	cmp	r3, #0
 8001070:	d14b      	bne.n	800110a <HAL_ADCEx_MultiModeConfigChannel+0x166>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800107a:	f023 030f 	bic.w	r3, r3, #15
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	6811      	ldr	r1, [r2, #0]
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	6892      	ldr	r2, [r2, #8]
 8001086:	430a      	orrs	r2, r1
 8001088:	431a      	orrs	r2, r3
 800108a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800108c:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800108e:	e03c      	b.n	800110a <HAL_ADCEx_MultiModeConfigChannel+0x166>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800109a:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d108      	bne.n	80010bc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d101      	bne.n	80010bc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80010bc:	2300      	movs	r3, #0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d123      	bne.n	800110a <HAL_ADCEx_MultiModeConfigChannel+0x166>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d107      	bne.n	80010de <HAL_ADCEx_MultiModeConfigChannel+0x13a>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d101      	bne.n	80010de <HAL_ADCEx_MultiModeConfigChannel+0x13a>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80010de:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d112      	bne.n	800110a <HAL_ADCEx_MultiModeConfigChannel+0x166>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80010e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80010ec:	f023 030f 	bic.w	r3, r3, #15
 80010f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010f2:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80010f4:	e009      	b.n	800110a <HAL_ADCEx_MultiModeConfigChannel+0x166>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f043 0220 	orr.w	r2, r3, #32
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001108:	e000      	b.n	800110c <HAL_ADCEx_MultiModeConfigChannel+0x168>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800110a:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001114:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
} 
 8001118:	4618      	mov	r0, r3
 800111a:	376c      	adds	r7, #108	; 0x6c
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	50000100 	.word	0x50000100
 8001128:	50000300 	.word	0x50000300

0800112c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b01      	cmp	r3, #1
 8001144:	d108      	bne.n	8001158 <ADC_Enable+0x2c>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b01      	cmp	r3, #1
 8001152:	d101      	bne.n	8001158 <ADC_Enable+0x2c>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <ADC_Enable+0x2e>
 8001158:	2300      	movs	r3, #0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d13c      	bne.n	80011d8 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <ADC_Enable+0xb8>)
 8001166:	4013      	ands	r3, r2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00d      	beq.n	8001188 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	f043 0210 	orr.w	r2, r3, #16
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800117c:	f043 0201 	orr.w	r2, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e028      	b.n	80011da <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0201 	orr.w	r2, r2, #1
 8001196:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001198:	f7ff f8c4 	bl	8000324 <HAL_GetTick>
 800119c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800119e:	e014      	b.n	80011ca <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011a0:	f7ff f8c0 	bl	8000324 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d90d      	bls.n	80011ca <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f043 0210 	orr.w	r2, r3, #16
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011be:	f043 0201 	orr.w	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e007      	b.n	80011da <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d1e3      	bne.n	80011a0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	8000003f 	.word	0x8000003f

080011e8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d108      	bne.n	8001214 <ADC_Disable+0x2c>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <ADC_Disable+0x2c>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <ADC_Disable+0x2e>
 8001214:	2300      	movs	r3, #0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d040      	beq.n	800129c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 030d 	and.w	r3, r3, #13
 8001224:	2b01      	cmp	r3, #1
 8001226:	d10f      	bne.n	8001248 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0202 	orr.w	r2, r2, #2
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2203      	movs	r2, #3
 800123e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001240:	f7ff f870 	bl	8000324 <HAL_GetTick>
 8001244:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001246:	e022      	b.n	800128e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	f043 0210 	orr.w	r2, r3, #16
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001258:	f043 0201 	orr.w	r2, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e01c      	b.n	800129e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001264:	f7ff f85e 	bl	8000324 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d90d      	bls.n	800128e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f043 0210 	orr.w	r2, r3, #16
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001282:	f043 0201 	orr.w	r2, r3, #1
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e007      	b.n	800129e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b01      	cmp	r3, #1
 800129a:	d0e3      	beq.n	8001264 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 8093 	beq.w	80013f4 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80012dc:	d12a      	bne.n	8001334 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69db      	ldr	r3, [r3, #28]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d126      	bne.n	8001334 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d122      	bne.n	8001334 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80012ee:	230c      	movs	r3, #12
 80012f0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80012f2:	e014      	b.n	800131e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4a42      	ldr	r2, [pc, #264]	; (8001400 <ADC_ConversionStop+0x158>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d90d      	bls.n	8001318 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001300:	f043 0210 	orr.w	r2, r3, #16
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130c:	f043 0201 	orr.w	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	649a      	str	r2, [r3, #72]	; 0x48
          
          return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e06e      	b.n	80013f6 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	3301      	adds	r3, #1
 800131c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001328:	2b40      	cmp	r3, #64	; 0x40
 800132a:	d1e3      	bne.n	80012f4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2240      	movs	r2, #64	; 0x40
 8001332:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	2b60      	cmp	r3, #96	; 0x60
 8001338:	d015      	beq.n	8001366 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b04      	cmp	r3, #4
 8001346:	d10e      	bne.n	8001366 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001352:	2b00      	cmp	r3, #0
 8001354:	d107      	bne.n	8001366 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 0210 	orr.w	r2, r2, #16
 8001364:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2b0c      	cmp	r3, #12
 800136a:	d015      	beq.n	8001398 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b08      	cmp	r3, #8
 8001378:	d10e      	bne.n	8001398 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001384:	2b00      	cmp	r3, #0
 8001386:	d107      	bne.n	8001398 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0220 	orr.w	r2, r2, #32
 8001396:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	2b60      	cmp	r3, #96	; 0x60
 800139c:	d004      	beq.n	80013a8 <ADC_ConversionStop+0x100>
 800139e:	2b6c      	cmp	r3, #108	; 0x6c
 80013a0:	d105      	bne.n	80013ae <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80013a2:	230c      	movs	r3, #12
 80013a4:	617b      	str	r3, [r7, #20]
        break;
 80013a6:	e005      	b.n	80013b4 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80013a8:	2308      	movs	r3, #8
 80013aa:	617b      	str	r3, [r7, #20]
        break;
 80013ac:	e002      	b.n	80013b4 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80013ae:	2304      	movs	r3, #4
 80013b0:	617b      	str	r3, [r7, #20]
        break;
 80013b2:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80013b4:	f7fe ffb6 	bl	8000324 <HAL_GetTick>
 80013b8:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80013ba:	e014      	b.n	80013e6 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80013bc:	f7fe ffb2 	bl	8000324 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b0b      	cmp	r3, #11
 80013c8:	d90d      	bls.n	80013e6 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f043 0210 	orr.w	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013da:	f043 0201 	orr.w	r2, r3, #1
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e007      	b.n	80013f6 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e3      	bne.n	80013bc <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	000993ff 	.word	0x000993ff

08001404 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	da0b      	bge.n	8001494 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	; (80014b4 <NVIC_SetPriority+0x4c>)
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	3b04      	subs	r3, #4
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001492:	e009      	b.n	80014a8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4907      	ldr	r1, [pc, #28]	; (80014b8 <NVIC_SetPriority+0x50>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00
 80014b8:	e000e100 	.word	0xe000e100

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f7ff ff8e 	bl	8001468 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff47 	bl	8001404 <NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff5c 	bl	800144c <NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff8e 	bl	80014bc <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5d 	bl	8001468 <NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffb0 	bl	8001524 <SysTick_Config>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80015e6:	e14e      	b.n	8001886 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	4013      	ands	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8140 	beq.w	8001880 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x40>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b12      	cmp	r3, #18
 800160e:	d123      	bne.n	8001658 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	6939      	ldr	r1, [r7, #16]
 8001654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0203 	and.w	r2, r3, #3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d00b      	beq.n	80016ac <HAL_GPIO_Init+0xdc>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d007      	beq.n	80016ac <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a0:	2b11      	cmp	r3, #17
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b12      	cmp	r3, #18
 80016aa:	d130      	bne.n	800170e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e2:	2201      	movs	r2, #1
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	f003 0201 	and.w	r2, r3, #1
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 809a 	beq.w	8001880 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174c:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <HAL_GPIO_Init+0x2d4>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a54      	ldr	r2, [pc, #336]	; (80018a4 <HAL_GPIO_Init+0x2d4>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b52      	ldr	r3, [pc, #328]	; (80018a4 <HAL_GPIO_Init+0x2d4>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001764:	4a50      	ldr	r2, [pc, #320]	; (80018a8 <HAL_GPIO_Init+0x2d8>)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	220f      	movs	r2, #15
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800178e:	d013      	beq.n	80017b8 <HAL_GPIO_Init+0x1e8>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a46      	ldr	r2, [pc, #280]	; (80018ac <HAL_GPIO_Init+0x2dc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d00d      	beq.n	80017b4 <HAL_GPIO_Init+0x1e4>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a45      	ldr	r2, [pc, #276]	; (80018b0 <HAL_GPIO_Init+0x2e0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d007      	beq.n	80017b0 <HAL_GPIO_Init+0x1e0>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a44      	ldr	r2, [pc, #272]	; (80018b4 <HAL_GPIO_Init+0x2e4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d101      	bne.n	80017ac <HAL_GPIO_Init+0x1dc>
 80017a8:	2303      	movs	r3, #3
 80017aa:	e006      	b.n	80017ba <HAL_GPIO_Init+0x1ea>
 80017ac:	2305      	movs	r3, #5
 80017ae:	e004      	b.n	80017ba <HAL_GPIO_Init+0x1ea>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e002      	b.n	80017ba <HAL_GPIO_Init+0x1ea>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_GPIO_Init+0x1ea>
 80017b8:	2300      	movs	r3, #0
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	f002 0203 	and.w	r2, r2, #3
 80017c0:	0092      	lsls	r2, r2, #2
 80017c2:	4093      	lsls	r3, r2
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017ca:	4937      	ldr	r1, [pc, #220]	; (80018a8 <HAL_GPIO_Init+0x2d8>)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d8:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HAL_GPIO_Init+0x2e8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017fc:	4a2e      	ldr	r2, [pc, #184]	; (80018b8 <HAL_GPIO_Init+0x2e8>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001802:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <HAL_GPIO_Init+0x2e8>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001826:	4a24      	ldr	r2, [pc, #144]	; (80018b8 <HAL_GPIO_Init+0x2e8>)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <HAL_GPIO_Init+0x2e8>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001850:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <HAL_GPIO_Init+0x2e8>)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_GPIO_Init+0x2e8>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800187a:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <HAL_GPIO_Init+0x2e8>)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	f47f aea9 	bne.w	80015e8 <HAL_GPIO_Init+0x18>
  }
}
 8001896:	bf00      	nop
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40010000 	.word	0x40010000
 80018ac:	48000400 	.word	0x48000400
 80018b0:	48000800 	.word	0x48000800
 80018b4:	48000c00 	.word	0x48000c00
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f000 beda 	b.w	800268a <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 816e 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018e6:	4bb5      	ldr	r3, [pc, #724]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d00c      	beq.n	800190c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018f2:	4bb2      	ldr	r3, [pc, #712]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d15a      	bne.n	80019b4 <HAL_RCC_OscConfig+0xf8>
 80018fe:	4baf      	ldr	r3, [pc, #700]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190a:	d153      	bne.n	80019b4 <HAL_RCC_OscConfig+0xf8>
 800190c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001910:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001920:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	fab3 f383 	clz	r3, r3
 8001928:	b2db      	uxtb	r3, r3
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b01      	cmp	r3, #1
 8001936:	d102      	bne.n	800193e <HAL_RCC_OscConfig+0x82>
 8001938:	4ba0      	ldr	r3, [pc, #640]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	e015      	b.n	800196a <HAL_RCC_OscConfig+0xae>
 800193e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001942:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800194a:	fa93 f3a3 	rbit	r3, r3
 800194e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001956:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800195a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800195e:	fa93 f3a3 	rbit	r3, r3
 8001962:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001966:	4b95      	ldr	r3, [pc, #596]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800196e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001972:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001976:	fa92 f2a2 	rbit	r2, r2
 800197a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800197e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001982:	fab2 f282 	clz	r2, r2
 8001986:	b252      	sxtb	r2, r2
 8001988:	f042 0220 	orr.w	r2, r2, #32
 800198c:	b252      	sxtb	r2, r2
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	f002 021f 	and.w	r2, r2, #31
 8001994:	2101      	movs	r1, #1
 8001996:	fa01 f202 	lsl.w	r2, r1, r2
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 810f 	beq.w	8001bc0 <HAL_RCC_OscConfig+0x304>
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f040 8109 	bne.w	8001bc0 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	f000 be6b 	b.w	800268a <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019be:	d106      	bne.n	80019ce <HAL_RCC_OscConfig+0x112>
 80019c0:	4b7e      	ldr	r3, [pc, #504]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a7d      	ldr	r2, [pc, #500]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 80019c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	e030      	b.n	8001a30 <HAL_RCC_OscConfig+0x174>
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10c      	bne.n	80019f2 <HAL_RCC_OscConfig+0x136>
 80019d8:	4b78      	ldr	r3, [pc, #480]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a77      	ldr	r2, [pc, #476]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 80019de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b75      	ldr	r3, [pc, #468]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a74      	ldr	r2, [pc, #464]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 80019ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e01e      	b.n	8001a30 <HAL_RCC_OscConfig+0x174>
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x15c>
 80019fe:	4b6f      	ldr	r3, [pc, #444]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6e      	ldr	r2, [pc, #440]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b6c      	ldr	r3, [pc, #432]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6b      	ldr	r2, [pc, #428]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0x174>
 8001a18:	4b68      	ldr	r3, [pc, #416]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a67      	ldr	r2, [pc, #412]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b65      	ldr	r3, [pc, #404]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a64      	ldr	r2, [pc, #400]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a30:	4b62      	ldr	r3, [pc, #392]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	f023 020f 	bic.w	r2, r3, #15
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	495f      	ldr	r1, [pc, #380]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d05a      	beq.n	8001b04 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7fe fc69 	bl	8000324 <HAL_GetTick>
 8001a52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a58:	f7fe fc64 	bl	8000324 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b64      	cmp	r3, #100	; 0x64
 8001a66:	d902      	bls.n	8001a6e <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	f000 be0e 	b.w	800268a <HAL_RCC_OscConfig+0xdce>
 8001a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a72:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8001a82:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	095b      	lsrs	r3, r3, #5
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d102      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x1e4>
 8001a9a:	4b48      	ldr	r3, [pc, #288]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e015      	b.n	8001acc <HAL_RCC_OscConfig+0x210>
 8001aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001abc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ac8:	4b3c      	ldr	r3, [pc, #240]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ad0:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001ad4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001ad8:	fa92 f2a2 	rbit	r2, r2
 8001adc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001ae0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ae4:	fab2 f282 	clz	r2, r2
 8001ae8:	b252      	sxtb	r2, r2
 8001aea:	f042 0220 	orr.w	r2, r2, #32
 8001aee:	b252      	sxtb	r2, r2
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	f002 021f 	and.w	r2, r2, #31
 8001af6:	2101      	movs	r1, #1
 8001af8:	fa01 f202 	lsl.w	r2, r1, r2
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0aa      	beq.n	8001a58 <HAL_RCC_OscConfig+0x19c>
 8001b02:	e05e      	b.n	8001bc2 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7fe fc0e 	bl	8000324 <HAL_GetTick>
 8001b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b0e:	f7fe fc09 	bl	8000324 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d902      	bls.n	8001b24 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	f000 bdb3 	b.w	800268a <HAL_RCC_OscConfig+0xdce>
 8001b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b28:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001b38:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3c:	fab3 f383 	clz	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d102      	bne.n	8001b56 <HAL_RCC_OscConfig+0x29a>
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	e015      	b.n	8001b82 <HAL_RCC_OscConfig+0x2c6>
 8001b56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001b6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b6e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b72:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_RCC_OscConfig+0x300>)
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b86:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001b8a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001b8e:	fa92 f2a2 	rbit	r2, r2
 8001b92:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001b96:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b9a:	fab2 f282 	clz	r2, r2
 8001b9e:	b252      	sxtb	r2, r2
 8001ba0:	f042 0220 	orr.w	r2, r2, #32
 8001ba4:	b252      	sxtb	r2, r2
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	f002 021f 	and.w	r2, r2, #31
 8001bac:	2101      	movs	r1, #1
 8001bae:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1aa      	bne.n	8001b0e <HAL_RCC_OscConfig+0x252>
 8001bb8:	e003      	b.n	8001bc2 <HAL_RCC_OscConfig+0x306>
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 8170 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bd2:	4bd0      	ldr	r3, [pc, #832]	; (8001f14 <HAL_RCC_OscConfig+0x658>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bde:	4bcd      	ldr	r3, [pc, #820]	; (8001f14 <HAL_RCC_OscConfig+0x658>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d16d      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x40a>
 8001bea:	4bca      	ldr	r3, [pc, #808]	; (8001f14 <HAL_RCC_OscConfig+0x658>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d167      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x40a>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001c08:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d102      	bne.n	8001c26 <HAL_RCC_OscConfig+0x36a>
 8001c20:	4bbc      	ldr	r3, [pc, #752]	; (8001f14 <HAL_RCC_OscConfig+0x658>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	e013      	b.n	8001c4e <HAL_RCC_OscConfig+0x392>
 8001c26:	2302      	movs	r3, #2
 8001c28:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001c38:	2302      	movs	r3, #2
 8001c3a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c3e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c4a:	4bb2      	ldr	r3, [pc, #712]	; (8001f14 <HAL_RCC_OscConfig+0x658>)
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001c54:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001c58:	fa92 f2a2 	rbit	r2, r2
 8001c5c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001c60:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c64:	fab2 f282 	clz	r2, r2
 8001c68:	b252      	sxtb	r2, r2
 8001c6a:	f042 0220 	orr.w	r2, r2, #32
 8001c6e:	b252      	sxtb	r2, r2
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	f002 021f 	and.w	r2, r2, #31
 8001c76:	2101      	movs	r1, #1
 8001c78:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d007      	beq.n	8001c92 <HAL_RCC_OscConfig+0x3d6>
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d002      	beq.n	8001c92 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f000 bcfc 	b.w	800268a <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c92:	4ba0      	ldr	r3, [pc, #640]	; (8001f14 <HAL_RCC_OscConfig+0x658>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6959      	ldr	r1, [r3, #20]
 8001ca0:	23f8      	movs	r3, #248	; 0xf8
 8001ca2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001cb2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	4995      	ldr	r1, [pc, #596]	; (8001f14 <HAL_RCC_OscConfig+0x658>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc4:	e0f5      	b.n	8001eb2 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 8085 	beq.w	8001ddc <HAL_RCC_OscConfig+0x520>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001ce4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cf0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7fe fb12 	bl	8000324 <HAL_GetTick>
 8001d00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d06:	f7fe fb0d 	bl	8000324 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d902      	bls.n	8001d1c <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	f000 bcb7 	b.w	800268a <HAL_RCC_OscConfig+0xdce>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8001d2e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	095b      	lsrs	r3, r3, #5
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d102      	bne.n	8001d4c <HAL_RCC_OscConfig+0x490>
 8001d46:	4b73      	ldr	r3, [pc, #460]	; (8001f14 <HAL_RCC_OscConfig+0x658>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	e013      	b.n	8001d74 <HAL_RCC_OscConfig+0x4b8>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001d5e:	2302      	movs	r3, #2
 8001d60:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d64:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d70:	4b68      	ldr	r3, [pc, #416]	; (8001f14 <HAL_RCC_OscConfig+0x658>)
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	2202      	movs	r2, #2
 8001d76:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001d7a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001d7e:	fa92 f2a2 	rbit	r2, r2
 8001d82:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001d86:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d8a:	fab2 f282 	clz	r2, r2
 8001d8e:	b252      	sxtb	r2, r2
 8001d90:	f042 0220 	orr.w	r2, r2, #32
 8001d94:	b252      	sxtb	r2, r2
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f002 021f 	and.w	r2, r2, #31
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0ae      	beq.n	8001d06 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da8:	4b5a      	ldr	r3, [pc, #360]	; (8001f14 <HAL_RCC_OscConfig+0x658>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6959      	ldr	r1, [r3, #20]
 8001db6:	23f8      	movs	r3, #248	; 0xf8
 8001db8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001dc8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	494f      	ldr	r1, [pc, #316]	; (8001f14 <HAL_RCC_OscConfig+0x658>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
 8001dda:	e06a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x5f6>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001dee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dfa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	461a      	mov	r2, r3
 8001e02:	2300      	movs	r3, #0
 8001e04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7fe fa8d 	bl	8000324 <HAL_GetTick>
 8001e0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	e00a      	b.n	8001e26 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e10:	f7fe fa88 	bl	8000324 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d902      	bls.n	8001e26 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	f000 bc32 	b.w	800268a <HAL_RCC_OscConfig+0xdce>
 8001e26:	2302      	movs	r3, #2
 8001e28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001e38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_OscConfig+0x59a>
 8001e50:	4b30      	ldr	r3, [pc, #192]	; (8001f14 <HAL_RCC_OscConfig+0x658>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	e013      	b.n	8001e7e <HAL_RCC_OscConfig+0x5c2>
 8001e56:	2302      	movs	r3, #2
 8001e58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001e68:	2302      	movs	r3, #2
 8001e6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e6e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e7a:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HAL_RCC_OscConfig+0x658>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001e84:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001e88:	fa92 f2a2 	rbit	r2, r2
 8001e8c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001e90:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e94:	fab2 f282 	clz	r2, r2
 8001e98:	b252      	sxtb	r2, r2
 8001e9a:	f042 0220 	orr.w	r2, r2, #32
 8001e9e:	b252      	sxtb	r2, r2
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	f002 021f 	and.w	r2, r2, #31
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1ae      	bne.n	8001e10 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80d8 	beq.w	8002072 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d067      	beq.n	8001f9c <HAL_RCC_OscConfig+0x6e0>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001ede:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_RCC_OscConfig+0x65c>)
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	461a      	mov	r2, r3
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef4:	f7fe fa16 	bl	8000324 <HAL_GetTick>
 8001ef8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efc:	e00e      	b.n	8001f1c <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efe:	f7fe fa11 	bl	8000324 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d906      	bls.n	8001f1c <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e3bb      	b.n	800268a <HAL_RCC_OscConfig+0xdce>
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	10908120 	.word	0x10908120
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001f2e:	2302      	movs	r3, #2
 8001f30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001f38:	fa93 f2a3 	rbit	r2, r3
 8001f3c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f46:	2202      	movs	r2, #2
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	fa93 f2a3 	rbit	r2, r3
 8001f54:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5a:	4ba5      	ldr	r3, [pc, #660]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 8001f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f5e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f62:	2102      	movs	r1, #2
 8001f64:	6019      	str	r1, [r3, #0]
 8001f66:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	fa93 f1a3 	rbit	r1, r3
 8001f70:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f74:	6019      	str	r1, [r3, #0]
  return(result);
 8001f76:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b25b      	sxtb	r3, r3
 8001f82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f86:	b25b      	sxtb	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0b1      	beq.n	8001efe <HAL_RCC_OscConfig+0x642>
 8001f9a:	e06a      	b.n	8002072 <HAL_RCC_OscConfig+0x7b6>
 8001f9c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	fa93 f2a3 	rbit	r2, r3
 8001fae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fb2:	601a      	str	r2, [r3, #0]
  return(result);
 8001fb4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fb8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b8c      	ldr	r3, [pc, #560]	; (80021f4 <HAL_RCC_OscConfig+0x938>)
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2300      	movs	r3, #0
 8001fca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fcc:	f7fe f9aa 	bl	8000324 <HAL_GetTick>
 8001fd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd4:	e009      	b.n	8001fea <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd6:	f7fe f9a5 	bl	8000324 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e34f      	b.n	800268a <HAL_RCC_OscConfig+0xdce>
 8001fea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fee:	2202      	movs	r2, #2
 8001ff0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	fa93 f2a3 	rbit	r2, r3
 8001ffc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002006:	2202      	movs	r2, #2
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	fa93 f2a3 	rbit	r2, r3
 8002014:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800201e:	2202      	movs	r2, #2
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	fa93 f2a3 	rbit	r2, r3
 800202c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002030:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002032:	4b6f      	ldr	r3, [pc, #444]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 8002034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002036:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800203a:	2102      	movs	r1, #2
 800203c:	6019      	str	r1, [r3, #0]
 800203e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	fa93 f1a3 	rbit	r1, r3
 8002048:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800204c:	6019      	str	r1, [r3, #0]
  return(result);
 800204e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b25b      	sxtb	r3, r3
 800205a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800205e:	b25b      	sxtb	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1b1      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8159 	beq.w	8002334 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002088:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d112      	bne.n	80020ba <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002094:	4b56      	ldr	r3, [pc, #344]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	4a55      	ldr	r2, [pc, #340]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 800209a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209e:	61d3      	str	r3, [r2, #28]
 80020a0:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	f107 030c 	add.w	r3, r7, #12
 80020b2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020b4:	2301      	movs	r3, #1
 80020b6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ba:	4b4f      	ldr	r3, [pc, #316]	; (80021f8 <HAL_RCC_OscConfig+0x93c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d11a      	bne.n	80020fc <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c6:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <HAL_RCC_OscConfig+0x93c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <HAL_RCC_OscConfig+0x93c>)
 80020cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d2:	f7fe f927 	bl	8000324 <HAL_GetTick>
 80020d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020da:	e009      	b.n	80020f0 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020dc:	f7fe f922 	bl	8000324 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b64      	cmp	r3, #100	; 0x64
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e2cc      	b.n	800268a <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <HAL_RCC_OscConfig+0x93c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ef      	beq.n	80020dc <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d106      	bne.n	8002114 <HAL_RCC_OscConfig+0x858>
 8002106:	4b3a      	ldr	r3, [pc, #232]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a39      	ldr	r2, [pc, #228]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6213      	str	r3, [r2, #32]
 8002112:	e02f      	b.n	8002174 <HAL_RCC_OscConfig+0x8b8>
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x87c>
 800211e:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a33      	ldr	r2, [pc, #204]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	6213      	str	r3, [r2, #32]
 800212a:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4a30      	ldr	r2, [pc, #192]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 8002130:	f023 0304 	bic.w	r3, r3, #4
 8002134:	6213      	str	r3, [r2, #32]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0x8b8>
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	2b05      	cmp	r3, #5
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x8a0>
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4a2a      	ldr	r2, [pc, #168]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	6213      	str	r3, [r2, #32]
 800214e:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a27      	ldr	r2, [pc, #156]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6213      	str	r3, [r2, #32]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0x8b8>
 800215c:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a23      	ldr	r2, [pc, #140]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a20      	ldr	r2, [pc, #128]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 800216e:	f023 0304 	bic.w	r3, r3, #4
 8002172:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d06b      	beq.n	8002256 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7fe f8d1 	bl	8000324 <HAL_GetTick>
 8002182:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002186:	e00b      	b.n	80021a0 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7fe f8cc 	bl	8000324 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e274      	b.n	800268a <HAL_RCC_OscConfig+0xdce>
 80021a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021a4:	2202      	movs	r2, #2
 80021a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	fa93 f2a3 	rbit	r2, r3
 80021b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021ce:	601a      	str	r2, [r3, #0]
  return(result);
 80021d0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	095b      	lsrs	r3, r3, #5
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d108      	bne.n	80021fc <HAL_RCC_OscConfig+0x940>
 80021ea:	4b01      	ldr	r3, [pc, #4]	; (80021f0 <HAL_RCC_OscConfig+0x934>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	e013      	b.n	8002218 <HAL_RCC_OscConfig+0x95c>
 80021f0:	40021000 	.word	0x40021000
 80021f4:	10908120 	.word	0x10908120
 80021f8:	40007000 	.word	0x40007000
 80021fc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002200:	2202      	movs	r2, #2
 8002202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	fa93 f2a3 	rbit	r2, r3
 800220e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	4bbb      	ldr	r3, [pc, #748]	; (8002504 <HAL_RCC_OscConfig+0xc48>)
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800221c:	2102      	movs	r1, #2
 800221e:	6011      	str	r1, [r2, #0]
 8002220:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	fa92 f1a2 	rbit	r1, r2
 800222a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800222e:	6011      	str	r1, [r2, #0]
  return(result);
 8002230:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	fab2 f282 	clz	r2, r2
 800223a:	b252      	sxtb	r2, r2
 800223c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002240:	b252      	sxtb	r2, r2
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	f002 021f 	and.w	r2, r2, #31
 8002248:	2101      	movs	r1, #1
 800224a:	fa01 f202 	lsl.w	r2, r1, r2
 800224e:	4013      	ands	r3, r2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d099      	beq.n	8002188 <HAL_RCC_OscConfig+0x8cc>
 8002254:	e064      	b.n	8002320 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7fe f865 	bl	8000324 <HAL_GetTick>
 800225a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7fe f860 	bl	8000324 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e208      	b.n	800268a <HAL_RCC_OscConfig+0xdce>
 8002278:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800227c:	2202      	movs	r2, #2
 800227e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	fa93 f2a3 	rbit	r2, r3
 800228a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002294:	2202      	movs	r2, #2
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	fa93 f2a3 	rbit	r2, r3
 80022a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022a6:	601a      	str	r2, [r3, #0]
  return(result);
 80022a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d102      	bne.n	80022c8 <HAL_RCC_OscConfig+0xa0c>
 80022c2:	4b90      	ldr	r3, [pc, #576]	; (8002504 <HAL_RCC_OscConfig+0xc48>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	e00d      	b.n	80022e4 <HAL_RCC_OscConfig+0xa28>
 80022c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022cc:	2202      	movs	r2, #2
 80022ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	fa93 f2a3 	rbit	r2, r3
 80022da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	4b88      	ldr	r3, [pc, #544]	; (8002504 <HAL_RCC_OscConfig+0xc48>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80022e8:	2102      	movs	r1, #2
 80022ea:	6011      	str	r1, [r2, #0]
 80022ec:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	fa92 f1a2 	rbit	r1, r2
 80022f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022fa:	6011      	str	r1, [r2, #0]
  return(result);
 80022fc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	fab2 f282 	clz	r2, r2
 8002306:	b252      	sxtb	r2, r2
 8002308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800230c:	b252      	sxtb	r2, r2
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	f002 021f 	and.w	r2, r2, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f202 	lsl.w	r2, r1, r2
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d19f      	bne.n	8002260 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002320:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002324:	2b01      	cmp	r3, #1
 8002326:	d105      	bne.n	8002334 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002328:	4b76      	ldr	r3, [pc, #472]	; (8002504 <HAL_RCC_OscConfig+0xc48>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	4a75      	ldr	r2, [pc, #468]	; (8002504 <HAL_RCC_OscConfig+0xc48>)
 800232e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002332:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 81a4 	beq.w	8002688 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002340:	4b70      	ldr	r3, [pc, #448]	; (8002504 <HAL_RCC_OscConfig+0xc48>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b08      	cmp	r3, #8
 800234a:	f000 819b 	beq.w	8002684 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	2b02      	cmp	r3, #2
 8002356:	f040 8113 	bne.w	8002580 <HAL_RCC_OscConfig+0xcc4>
 800235a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800235e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002362:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	fa93 f2a3 	rbit	r2, r3
 800236e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002372:	601a      	str	r2, [r3, #0]
  return(result);
 8002374:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002378:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002382:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	461a      	mov	r2, r3
 800238a:	2300      	movs	r3, #0
 800238c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7fd ffc9 	bl	8000324 <HAL_GetTick>
 8002392:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002396:	e009      	b.n	80023ac <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002398:	f7fd ffc4 	bl	8000324 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e16e      	b.n	800268a <HAL_RCC_OscConfig+0xdce>
 80023ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	fa93 f2a3 	rbit	r2, r3
 80023c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023c4:	601a      	str	r2, [r3, #0]
  return(result);
 80023c6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023cc:	fab3 f383 	clz	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d102      	bne.n	80023e6 <HAL_RCC_OscConfig+0xb2a>
 80023e0:	4b48      	ldr	r3, [pc, #288]	; (8002504 <HAL_RCC_OscConfig+0xc48>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	e01b      	b.n	800241e <HAL_RCC_OscConfig+0xb62>
 80023e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	fa93 f2a3 	rbit	r2, r3
 80023fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <HAL_RCC_OscConfig+0xc48>)
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002422:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002426:	6011      	str	r1, [r2, #0]
 8002428:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	fa92 f1a2 	rbit	r1, r2
 8002432:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002436:	6011      	str	r1, [r2, #0]
  return(result);
 8002438:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	fab2 f282 	clz	r2, r2
 8002442:	b252      	sxtb	r2, r2
 8002444:	f042 0220 	orr.w	r2, r2, #32
 8002448:	b252      	sxtb	r2, r2
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f002 021f 	and.w	r2, r2, #31
 8002450:	2101      	movs	r1, #1
 8002452:	fa01 f202 	lsl.w	r2, r1, r2
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d19d      	bne.n	8002398 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_RCC_OscConfig+0xc48>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	430b      	orrs	r3, r1
 8002472:	4924      	ldr	r1, [pc, #144]	; (8002504 <HAL_RCC_OscConfig+0xc48>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]
 8002478:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800247c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	fa93 f2a3 	rbit	r2, r3
 800248c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002490:	601a      	str	r2, [r3, #0]
  return(result);
 8002492:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002496:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	461a      	mov	r2, r3
 80024a8:	2301      	movs	r3, #1
 80024aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7fd ff3a 	bl	8000324 <HAL_GetTick>
 80024b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b4:	e009      	b.n	80024ca <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fd ff35 	bl	8000324 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e0df      	b.n	800268a <HAL_RCC_OscConfig+0xdce>
 80024ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	fa93 f2a3 	rbit	r2, r3
 80024de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024e2:	601a      	str	r2, [r3, #0]
  return(result);
 80024e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d104      	bne.n	8002508 <HAL_RCC_OscConfig+0xc4c>
 80024fe:	4b01      	ldr	r3, [pc, #4]	; (8002504 <HAL_RCC_OscConfig+0xc48>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	e01d      	b.n	8002540 <HAL_RCC_OscConfig+0xc84>
 8002504:	40021000 	.word	0x40021000
 8002508:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800250c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fa93 f2a3 	rbit	r2, r3
 800251c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002526:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	fa93 f2a3 	rbit	r2, r3
 8002536:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	4b55      	ldr	r3, [pc, #340]	; (8002694 <HAL_RCC_OscConfig+0xdd8>)
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002544:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002548:	6011      	str	r1, [r2, #0]
 800254a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	fa92 f1a2 	rbit	r1, r2
 8002554:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002558:	6011      	str	r1, [r2, #0]
  return(result);
 800255a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	fab2 f282 	clz	r2, r2
 8002564:	b252      	sxtb	r2, r2
 8002566:	f042 0220 	orr.w	r2, r2, #32
 800256a:	b252      	sxtb	r2, r2
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f002 021f 	and.w	r2, r2, #31
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f202 	lsl.w	r2, r1, r2
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d09b      	beq.n	80024b6 <HAL_RCC_OscConfig+0xbfa>
 800257e:	e083      	b.n	8002688 <HAL_RCC_OscConfig+0xdcc>
 8002580:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002584:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	fa93 f2a3 	rbit	r2, r3
 8002594:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002598:	601a      	str	r2, [r3, #0]
  return(result);
 800259a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800259e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	461a      	mov	r2, r3
 80025b0:	2300      	movs	r3, #0
 80025b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7fd feb6 	bl	8000324 <HAL_GetTick>
 80025b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025bc:	e009      	b.n	80025d2 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025be:	f7fd feb1 	bl	8000324 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e05b      	b.n	800268a <HAL_RCC_OscConfig+0xdce>
 80025d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	fa93 f2a3 	rbit	r2, r3
 80025e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025ea:	601a      	str	r2, [r3, #0]
  return(result);
 80025ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d102      	bne.n	800260c <HAL_RCC_OscConfig+0xd50>
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <HAL_RCC_OscConfig+0xdd8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	e01b      	b.n	8002644 <HAL_RCC_OscConfig+0xd88>
 800260c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	fa93 f2a3 	rbit	r2, r3
 8002620:	f107 0320 	add.w	r3, r7, #32
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f107 031c 	add.w	r3, r7, #28
 800262a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	f107 031c 	add.w	r3, r7, #28
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fa93 f2a3 	rbit	r2, r3
 800263a:	f107 0318 	add.w	r3, r7, #24
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <HAL_RCC_OscConfig+0xdd8>)
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	f107 0214 	add.w	r2, r7, #20
 8002648:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800264c:	6011      	str	r1, [r2, #0]
 800264e:	f107 0214 	add.w	r2, r7, #20
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	fa92 f1a2 	rbit	r1, r2
 8002658:	f107 0210 	add.w	r2, r7, #16
 800265c:	6011      	str	r1, [r2, #0]
  return(result);
 800265e:	f107 0210 	add.w	r2, r7, #16
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	fab2 f282 	clz	r2, r2
 8002668:	b252      	sxtb	r2, r2
 800266a:	f042 0220 	orr.w	r2, r2, #32
 800266e:	b252      	sxtb	r2, r2
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f002 021f 	and.w	r2, r2, #31
 8002676:	2101      	movs	r1, #1
 8002678:	fa01 f202 	lsl.w	r2, r1, r2
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d19d      	bne.n	80025be <HAL_RCC_OscConfig+0xd02>
 8002682:	e001      	b.n	8002688 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000

08002698 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b09e      	sub	sp, #120	; 0x78
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e164      	b.n	800297a <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b0:	4b92      	ldr	r3, [pc, #584]	; (80028fc <HAL_RCC_ClockConfig+0x264>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d910      	bls.n	80026e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b8f      	ldr	r3, [pc, #572]	; (80028fc <HAL_RCC_ClockConfig+0x264>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 0207 	bic.w	r2, r3, #7
 80026c6:	498d      	ldr	r1, [pc, #564]	; (80028fc <HAL_RCC_ClockConfig+0x264>)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ce:	4b8b      	ldr	r3, [pc, #556]	; (80028fc <HAL_RCC_ClockConfig+0x264>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e14c      	b.n	800297a <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ec:	4b84      	ldr	r3, [pc, #528]	; (8002900 <HAL_RCC_ClockConfig+0x268>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4981      	ldr	r1, [pc, #516]	; (8002900 <HAL_RCC_ClockConfig+0x268>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80df 	beq.w	80028ca <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d13d      	bne.n	8002790 <HAL_RCC_ClockConfig+0xf8>
 8002714:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002718:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8002722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d102      	bne.n	800273e <HAL_RCC_ClockConfig+0xa6>
 8002738:	4b71      	ldr	r3, [pc, #452]	; (8002900 <HAL_RCC_ClockConfig+0x268>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	e00f      	b.n	800275e <HAL_RCC_ClockConfig+0xc6>
 800273e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002742:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	667b      	str	r3, [r7, #100]	; 0x64
 800274c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002750:	663b      	str	r3, [r7, #96]	; 0x60
 8002752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	65fb      	str	r3, [r7, #92]	; 0x5c
 800275a:	4b69      	ldr	r3, [pc, #420]	; (8002900 <HAL_RCC_ClockConfig+0x268>)
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002762:	65ba      	str	r2, [r7, #88]	; 0x58
 8002764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002766:	fa92 f2a2 	rbit	r2, r2
 800276a:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 800276c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800276e:	fab2 f282 	clz	r2, r2
 8002772:	b252      	sxtb	r2, r2
 8002774:	f042 0220 	orr.w	r2, r2, #32
 8002778:	b252      	sxtb	r2, r2
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	f002 021f 	and.w	r2, r2, #31
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f202 	lsl.w	r2, r1, r2
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d17d      	bne.n	8002888 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0f4      	b.n	800297a <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d13d      	bne.n	8002814 <HAL_RCC_ClockConfig+0x17c>
 8002798:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80027a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a8:	fab3 f383 	clz	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d102      	bne.n	80027c2 <HAL_RCC_ClockConfig+0x12a>
 80027bc:	4b50      	ldr	r3, [pc, #320]	; (8002900 <HAL_RCC_ClockConfig+0x268>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	e00f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x14a>
 80027c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	647b      	str	r3, [r7, #68]	; 0x44
 80027d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027d4:	643b      	str	r3, [r7, #64]	; 0x40
 80027d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027de:	4b48      	ldr	r3, [pc, #288]	; (8002900 <HAL_RCC_ClockConfig+0x268>)
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80027e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027ea:	fa92 f2a2 	rbit	r2, r2
 80027ee:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80027f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027f2:	fab2 f282 	clz	r2, r2
 80027f6:	b252      	sxtb	r2, r2
 80027f8:	f042 0220 	orr.w	r2, r2, #32
 80027fc:	b252      	sxtb	r2, r2
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	f002 021f 	and.w	r2, r2, #31
 8002804:	2101      	movs	r1, #1
 8002806:	fa01 f202 	lsl.w	r2, r1, r2
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d13b      	bne.n	8002888 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0b2      	b.n	800297a <HAL_RCC_ClockConfig+0x2e2>
 8002814:	2302      	movs	r3, #2
 8002816:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d102      	bne.n	800283c <HAL_RCC_ClockConfig+0x1a4>
 8002836:	4b32      	ldr	r3, [pc, #200]	; (8002900 <HAL_RCC_ClockConfig+0x268>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	e00d      	b.n	8002858 <HAL_RCC_ClockConfig+0x1c0>
 800283c:	2302      	movs	r3, #2
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
 8002848:	2302      	movs	r3, #2
 800284a:	623b      	str	r3, [r7, #32]
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <HAL_RCC_ClockConfig+0x268>)
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	2202      	movs	r2, #2
 800285a:	61ba      	str	r2, [r7, #24]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	fa92 f2a2 	rbit	r2, r2
 8002862:	617a      	str	r2, [r7, #20]
  return(result);
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	fab2 f282 	clz	r2, r2
 800286a:	b252      	sxtb	r2, r2
 800286c:	f042 0220 	orr.w	r2, r2, #32
 8002870:	b252      	sxtb	r2, r2
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	f002 021f 	and.w	r2, r2, #31
 8002878:	2101      	movs	r1, #1
 800287a:	fa01 f202 	lsl.w	r2, r1, r2
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e078      	b.n	800297a <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCC_ClockConfig+0x268>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f023 0203 	bic.w	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	491a      	ldr	r1, [pc, #104]	; (8002900 <HAL_RCC_ClockConfig+0x268>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800289a:	f7fd fd43 	bl	8000324 <HAL_GetTick>
 800289e:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a0:	e00a      	b.n	80028b8 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a2:	f7fd fd3f 	bl	8000324 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e060      	b.n	800297a <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_RCC_ClockConfig+0x268>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 020c 	and.w	r2, r3, #12
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d1eb      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <HAL_RCC_ClockConfig+0x264>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d215      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_RCC_ClockConfig+0x264>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f023 0207 	bic.w	r2, r3, #7
 80028e0:	4906      	ldr	r1, [pc, #24]	; (80028fc <HAL_RCC_ClockConfig+0x264>)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <HAL_RCC_ClockConfig+0x264>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d006      	beq.n	8002904 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e03f      	b.n	800297a <HAL_RCC_ClockConfig+0x2e2>
 80028fa:	bf00      	nop
 80028fc:	40022000 	.word	0x40022000
 8002900:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <HAL_RCC_ClockConfig+0x2ec>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4919      	ldr	r1, [pc, #100]	; (8002984 <HAL_RCC_ClockConfig+0x2ec>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <HAL_RCC_ClockConfig+0x2ec>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4911      	ldr	r1, [pc, #68]	; (8002984 <HAL_RCC_ClockConfig+0x2ec>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002942:	f000 f825 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <HAL_RCC_ClockConfig+0x2ec>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002950:	23f0      	movs	r3, #240	; 0xf0
 8002952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	60fb      	str	r3, [r7, #12]
  return(result);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	4a08      	ldr	r2, [pc, #32]	; (8002988 <HAL_RCC_ClockConfig+0x2f0>)
 8002968:	5cd3      	ldrb	r3, [r2, r3]
 800296a:	fa21 f303 	lsr.w	r3, r1, r3
 800296e:	4a07      	ldr	r2, [pc, #28]	; (800298c <HAL_RCC_ClockConfig+0x2f4>)
 8002970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002972:	2000      	movs	r0, #0
 8002974:	f7fd fc92 	bl	800029c <HAL_InitTick>
  
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3778      	adds	r7, #120	; 0x78
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	08004fcc 	.word	0x08004fcc
 800298c:	20000008 	.word	0x20000008

08002990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002990:	b480      	push	{r7}
 8002992:	b08b      	sub	sp, #44	; 0x2c
 8002994:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	2300      	movs	r3, #0
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029aa:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d002      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0x30>
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d003      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x36>
 80029be:	e03c      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029c0:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029c2:	623b      	str	r3, [r7, #32]
      break;
 80029c4:	e03c      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029cc:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80029d0:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	607b      	str	r3, [r7, #4]
  return(result);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
 80029e4:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029e6:	5cd3      	ldrb	r3, [r2, r3]
 80029e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80029ea:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	f003 020f 	and.w	r2, r3, #15
 80029f2:	230f      	movs	r3, #15
 80029f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	fa93 f3a3 	rbit	r3, r3
 80029fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
 8002a08:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a0a:	5cd3      	ldrb	r3, [r2, r3]
 8002a0c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002a18:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
 8002a28:	e004      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a2e:	fb02 f303 	mul.w	r3, r2, r3
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	623b      	str	r3, [r7, #32]
      break;
 8002a38:	e002      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a3c:	623b      	str	r3, [r7, #32]
      break;
 8002a3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a40:	6a3b      	ldr	r3, [r7, #32]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	372c      	adds	r7, #44	; 0x2c
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000
 8002a54:	007a1200 	.word	0x007a1200
 8002a58:	08004fac 	.word	0x08004fac
 8002a5c:	08004fbc 	.word	0x08004fbc
 8002a60:	003d0900 	.word	0x003d0900

08002a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a68:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000008 	.word	0x20000008

08002a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a82:	f7ff ffef 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002a86:	4601      	mov	r1, r0
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a90:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002a94:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	603b      	str	r3, [r7, #0]
  return(result);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa8:	4a04      	ldr	r2, [pc, #16]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002aaa:	5cd3      	ldrb	r3, [r2, r3]
 8002aac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08004fdc 	.word	0x08004fdc

08002ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ac6:	f7ff ffcd 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002aca:	4601      	mov	r1, r0
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002ad4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002ad8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	603b      	str	r3, [r7, #0]
  return(result);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	08004fdc 	.word	0x08004fdc

08002b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e01d      	b.n	8002b52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f001 fc8e 	bl	800444c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	4610      	mov	r0, r2
 8002b44:	f000 f962 	bl	8002e0c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e01d      	b.n	8002ba8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d106      	bne.n	8002b86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f815 	bl	8002bb0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3304      	adds	r3, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	4610      	mov	r0, r2
 8002b9a:	f000 f937 	bl	8002e0c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	6839      	ldr	r1, [r7, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fc3b 	bl	8003452 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <HAL_TIM_PWM_Start+0x74>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00e      	beq.n	8002c04 <HAL_TIM_PWM_Start+0x40>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a14      	ldr	r2, [pc, #80]	; (8002c3c <HAL_TIM_PWM_Start+0x78>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d009      	beq.n	8002c04 <HAL_TIM_PWM_Start+0x40>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <HAL_TIM_PWM_Start+0x7c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d004      	beq.n	8002c04 <HAL_TIM_PWM_Start+0x40>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a11      	ldr	r2, [pc, #68]	; (8002c44 <HAL_TIM_PWM_Start+0x80>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d101      	bne.n	8002c08 <HAL_TIM_PWM_Start+0x44>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <HAL_TIM_PWM_Start+0x46>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1c:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
} 
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40014000 	.word	0x40014000
 8002c40:	40014400 	.word	0x40014400
 8002c44:	40014800 	.word	0x40014800

08002c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_TIM_ConfigClockSource+0x1c>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e0cf      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x1bc>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b40      	cmp	r3, #64	; 0x40
 8002c9e:	d07c      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0x152>
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d80f      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x7c>
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	f000 808f 	beq.w	8002dc8 <HAL_TIM_ConfigClockSource+0x180>
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	d803      	bhi.n	8002cb6 <HAL_TIM_ConfigClockSource+0x6e>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 8083 	beq.w	8002dba <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8002cb4:	e09d      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	f000 808d 	beq.w	8002dd6 <HAL_TIM_ConfigClockSource+0x18e>
 8002cbc:	2b30      	cmp	r3, #48	; 0x30
 8002cbe:	f000 8091 	beq.w	8002de4 <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 8002cc2:	e096      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002cc4:	2b70      	cmp	r3, #112	; 0x70
 8002cc6:	d018      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0xb2>
 8002cc8:	2b70      	cmp	r3, #112	; 0x70
 8002cca:	d804      	bhi.n	8002cd6 <HAL_TIM_ConfigClockSource+0x8e>
 8002ccc:	2b50      	cmp	r3, #80	; 0x50
 8002cce:	d044      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0x112>
 8002cd0:	2b60      	cmp	r3, #96	; 0x60
 8002cd2:	d052      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0x132>
    break;    
 8002cd4:	e08d      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cda:	d003      	beq.n	8002ce4 <HAL_TIM_ConfigClockSource+0x9c>
 8002cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce0:	d028      	beq.n	8002d34 <HAL_TIM_ConfigClockSource+0xec>
    break;    
 8002ce2:	e086      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf2:	f023 0307 	bic.w	r3, r3, #7
 8002cf6:	6093      	str	r3, [r2, #8]
    break;
 8002cf8:	e07b      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6899      	ldr	r1, [r3, #8]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f000 fb80 	bl	800340e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d20:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d28:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	609a      	str	r2, [r3, #8]
    break;
 8002d32:	e05e      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6899      	ldr	r1, [r3, #8]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f000 fb63 	bl	800340e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d56:	609a      	str	r2, [r3, #8]
    break;
 8002d58:	e04b      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6859      	ldr	r1, [r3, #4]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	461a      	mov	r2, r3
 8002d68:	f000 faca 	bl	8003300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2150      	movs	r1, #80	; 0x50
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fb2b 	bl	80033ce <TIM_ITRx_SetConfig>
    break;
 8002d78:	e03b      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	461a      	mov	r2, r3
 8002d88:	f000 faed 	bl	8003366 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2160      	movs	r1, #96	; 0x60
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fb1b 	bl	80033ce <TIM_ITRx_SetConfig>
    break;
 8002d98:	e02b      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6859      	ldr	r1, [r3, #4]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	461a      	mov	r2, r3
 8002da8:	f000 faaa 	bl	8003300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2140      	movs	r1, #64	; 0x40
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fb0b 	bl	80033ce <TIM_ITRx_SetConfig>
    break;
 8002db8:	e01b      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fb04 	bl	80033ce <TIM_ITRx_SetConfig>
    break;
 8002dc6:	e014      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2110      	movs	r1, #16
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fafd 	bl	80033ce <TIM_ITRx_SetConfig>
    break;
 8002dd4:	e00d      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2120      	movs	r1, #32
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 faf6 	bl	80033ce <TIM_ITRx_SetConfig>
    break;
 8002de2:	e006      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2130      	movs	r1, #48	; 0x30
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 faef 	bl	80033ce <TIM_ITRx_SetConfig>
    break;
 8002df0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a32      	ldr	r2, [pc, #200]	; (8002eec <TIM_Base_SetConfig+0xe0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d007      	beq.n	8002e38 <TIM_Base_SetConfig+0x2c>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2e:	d003      	beq.n	8002e38 <TIM_Base_SetConfig+0x2c>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a2f      	ldr	r2, [pc, #188]	; (8002ef0 <TIM_Base_SetConfig+0xe4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d108      	bne.n	8002e4a <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a27      	ldr	r2, [pc, #156]	; (8002eec <TIM_Base_SetConfig+0xe0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <TIM_Base_SetConfig+0x6e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e58:	d00f      	beq.n	8002e7a <TIM_Base_SetConfig+0x6e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a24      	ldr	r2, [pc, #144]	; (8002ef0 <TIM_Base_SetConfig+0xe4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00b      	beq.n	8002e7a <TIM_Base_SetConfig+0x6e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <TIM_Base_SetConfig+0xe8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <TIM_Base_SetConfig+0x6e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <TIM_Base_SetConfig+0xec>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_Base_SetConfig+0x6e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a21      	ldr	r2, [pc, #132]	; (8002efc <TIM_Base_SetConfig+0xf0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d108      	bne.n	8002e8c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a0e      	ldr	r2, [pc, #56]	; (8002eec <TIM_Base_SetConfig+0xe0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00b      	beq.n	8002ed0 <TIM_Base_SetConfig+0xc4>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <TIM_Base_SetConfig+0xe8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d007      	beq.n	8002ed0 <TIM_Base_SetConfig+0xc4>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a0d      	ldr	r2, [pc, #52]	; (8002ef8 <TIM_Base_SetConfig+0xec>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d003      	beq.n	8002ed0 <TIM_Base_SetConfig+0xc4>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a0c      	ldr	r2, [pc, #48]	; (8002efc <TIM_Base_SetConfig+0xf0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d103      	bne.n	8002ed8 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	615a      	str	r2, [r3, #20]
}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40014000 	.word	0x40014000
 8002ef8:	40014400 	.word	0x40014400
 8002efc:	40014800 	.word	0x40014800

08002f00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	f023 0201 	bic.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0303 	bic.w	r3, r3, #3
 8002f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f023 0302 	bic.w	r3, r3, #2
 8002f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a28      	ldr	r2, [pc, #160]	; (8003008 <TIM_OC1_SetConfig+0x108>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00b      	beq.n	8002f84 <TIM_OC1_SetConfig+0x84>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a27      	ldr	r2, [pc, #156]	; (800300c <TIM_OC1_SetConfig+0x10c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d007      	beq.n	8002f84 <TIM_OC1_SetConfig+0x84>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a26      	ldr	r2, [pc, #152]	; (8003010 <TIM_OC1_SetConfig+0x110>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d003      	beq.n	8002f84 <TIM_OC1_SetConfig+0x84>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a25      	ldr	r2, [pc, #148]	; (8003014 <TIM_OC1_SetConfig+0x114>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d10c      	bne.n	8002f9e <TIM_OC1_SetConfig+0x9e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f023 0308 	bic.w	r3, r3, #8
 8002f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f023 0304 	bic.w	r3, r3, #4
 8002f9c:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a19      	ldr	r2, [pc, #100]	; (8003008 <TIM_OC1_SetConfig+0x108>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00b      	beq.n	8002fbe <TIM_OC1_SetConfig+0xbe>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a18      	ldr	r2, [pc, #96]	; (800300c <TIM_OC1_SetConfig+0x10c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d007      	beq.n	8002fbe <TIM_OC1_SetConfig+0xbe>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a17      	ldr	r2, [pc, #92]	; (8003010 <TIM_OC1_SetConfig+0x110>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d003      	beq.n	8002fbe <TIM_OC1_SetConfig+0xbe>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a16      	ldr	r2, [pc, #88]	; (8003014 <TIM_OC1_SetConfig+0x114>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d111      	bne.n	8002fe2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	621a      	str	r2, [r3, #32]
} 
 8002ffc:	bf00      	nop
 8002ffe:	371c      	adds	r7, #28
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40014000 	.word	0x40014000
 8003010:	40014400 	.word	0x40014400
 8003014:	40014800 	.word	0x40014800

08003018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	f023 0210 	bic.w	r2, r3, #16
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305e:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f023 0320 	bic.w	r3, r3, #32
 8003072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a24      	ldr	r2, [pc, #144]	; (8003114 <TIM_OC2_SetConfig+0xfc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d10d      	bne.n	80030a4 <TIM_OC2_SetConfig+0x8c>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800308e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030a2:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a1b      	ldr	r2, [pc, #108]	; (8003114 <TIM_OC2_SetConfig+0xfc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00b      	beq.n	80030c4 <TIM_OC2_SetConfig+0xac>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a1a      	ldr	r2, [pc, #104]	; (8003118 <TIM_OC2_SetConfig+0x100>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d007      	beq.n	80030c4 <TIM_OC2_SetConfig+0xac>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a19      	ldr	r2, [pc, #100]	; (800311c <TIM_OC2_SetConfig+0x104>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d003      	beq.n	80030c4 <TIM_OC2_SetConfig+0xac>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a18      	ldr	r2, [pc, #96]	; (8003120 <TIM_OC2_SetConfig+0x108>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d113      	bne.n	80030ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ca:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030d2:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	621a      	str	r2, [r3, #32]
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40012c00 	.word	0x40012c00
 8003118:	40014000 	.word	0x40014000
 800311c:	40014400 	.word	0x40014400
 8003120:	40014800 	.word	0x40014800

08003124 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800317c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	021b      	lsls	r3, r3, #8
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a23      	ldr	r2, [pc, #140]	; (800321c <TIM_OC3_SetConfig+0xf8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d10d      	bne.n	80031ae <TIM_OC3_SetConfig+0x8a>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031ac:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a1a      	ldr	r2, [pc, #104]	; (800321c <TIM_OC3_SetConfig+0xf8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00b      	beq.n	80031ce <TIM_OC3_SetConfig+0xaa>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a19      	ldr	r2, [pc, #100]	; (8003220 <TIM_OC3_SetConfig+0xfc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d007      	beq.n	80031ce <TIM_OC3_SetConfig+0xaa>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a18      	ldr	r2, [pc, #96]	; (8003224 <TIM_OC3_SetConfig+0x100>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d003      	beq.n	80031ce <TIM_OC3_SetConfig+0xaa>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a17      	ldr	r2, [pc, #92]	; (8003228 <TIM_OC3_SetConfig+0x104>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d113      	bne.n	80031f6 <TIM_OC3_SetConfig+0xd2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031dc:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	621a      	str	r2, [r3, #32]
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40014000 	.word	0x40014000
 8003224:	40014400 	.word	0x40014400
 8003228:	40014800 	.word	0x40014800

0800322c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003272:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003286:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	031b      	lsls	r3, r3, #12
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <TIM_OC4_SetConfig+0xc4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00b      	beq.n	80032b4 <TIM_OC4_SetConfig+0x88>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <TIM_OC4_SetConfig+0xc8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d007      	beq.n	80032b4 <TIM_OC4_SetConfig+0x88>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <TIM_OC4_SetConfig+0xcc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <TIM_OC4_SetConfig+0x88>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a13      	ldr	r2, [pc, #76]	; (80032fc <TIM_OC4_SetConfig+0xd0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d109      	bne.n	80032c8 <TIM_OC4_SetConfig+0x9c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ba:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	019b      	lsls	r3, r3, #6
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40014000 	.word	0x40014000
 80032f8:	40014400 	.word	0x40014400
 80032fc:	40014800 	.word	0x40014800

08003300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	f023 0201 	bic.w	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003332:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f023 030a 	bic.w	r3, r3, #10
 8003344:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	621a      	str	r2, [r3, #32]
}
 800335a:	bf00      	nop
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003366:	b480      	push	{r7}
 8003368:	b087      	sub	sp, #28
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f023 0210 	bic.w	r2, r3, #16
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	031b      	lsls	r3, r3, #12
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b085      	sub	sp, #20
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ea:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80033ec:	887b      	ldrh	r3, [r7, #2]
 80033ee:	f043 0307 	orr.w	r3, r3, #7
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	609a      	str	r2, [r3, #8]
}
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800340e:	b480      	push	{r7}
 8003410:	b087      	sub	sp, #28
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800342c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	021a      	lsls	r2, r3, #8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	431a      	orrs	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4313      	orrs	r3, r2
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	609a      	str	r2, [r3, #8]
} 
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003452:	b480      	push	{r7}
 8003454:	b087      	sub	sp, #28
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003462:	2201      	movs	r2, #1
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a1a      	ldr	r2, [r3, #32]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	43db      	mvns	r3, r3
 8003474:	401a      	ands	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a1a      	ldr	r2, [r3, #32]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	431a      	orrs	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	621a      	str	r2, [r3, #32]
}
 800348c:	bf00      	nop
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e105      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x226>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  switch (Channel)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b14      	cmp	r3, #20
 80034c6:	f200 80f0 	bhi.w	80036aa <HAL_TIM_PWM_ConfigChannel+0x212>
 80034ca:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80034cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d0:	08003525 	.word	0x08003525
 80034d4:	080036ab 	.word	0x080036ab
 80034d8:	080036ab 	.word	0x080036ab
 80034dc:	080036ab 	.word	0x080036ab
 80034e0:	08003565 	.word	0x08003565
 80034e4:	080036ab 	.word	0x080036ab
 80034e8:	080036ab 	.word	0x080036ab
 80034ec:	080036ab 	.word	0x080036ab
 80034f0:	080035a7 	.word	0x080035a7
 80034f4:	080036ab 	.word	0x080036ab
 80034f8:	080036ab 	.word	0x080036ab
 80034fc:	080036ab 	.word	0x080036ab
 8003500:	080035e7 	.word	0x080035e7
 8003504:	080036ab 	.word	0x080036ab
 8003508:	080036ab 	.word	0x080036ab
 800350c:	080036ab 	.word	0x080036ab
 8003510:	08003629 	.word	0x08003629
 8003514:	080036ab 	.word	0x080036ab
 8003518:	080036ab 	.word	0x080036ab
 800351c:	080036ab 	.word	0x080036ab
 8003520:	08003669 	.word	0x08003669
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fce8 	bl	8002f00 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0208 	orr.w	r2, r2, #8
 800353e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0204 	bic.w	r2, r2, #4
 800354e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6999      	ldr	r1, [r3, #24]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	619a      	str	r2, [r3, #24]
    }
    break;
 8003562:	e0a3      	b.n	80036ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fd54 	bl	8003018 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800357e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6999      	ldr	r1, [r3, #24]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	021a      	lsls	r2, r3, #8
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	619a      	str	r2, [r3, #24]
    }
    break;
 80035a4:	e082      	b.n	80036ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fdb9 	bl	8003124 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0208 	orr.w	r2, r2, #8
 80035c0:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0204 	bic.w	r2, r2, #4
 80035d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69d9      	ldr	r1, [r3, #28]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	61da      	str	r2, [r3, #28]
    }
    break;
 80035e4:	e062      	b.n	80036ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fe1d 	bl	800322c <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69da      	ldr	r2, [r3, #28]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003600:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69da      	ldr	r2, [r3, #28]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69d9      	ldr	r1, [r3, #28]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	021a      	lsls	r2, r3, #8
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	61da      	str	r2, [r3, #28]
    }
    break;
 8003626:	e041      	b.n	80036ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f898 	bl	8003764 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0208 	orr.w	r2, r2, #8
 8003642:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0204 	bic.w	r2, r2, #4
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8003666:	e021      	b.n	80036ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f8dc 	bl	800382c <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003682:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	021a      	lsls	r2, r3, #8
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 80036a8:	e000      	b.n	80036ac <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 80036aa:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop

080036c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036dc:	2302      	movs	r3, #2
 80036de:	e038      	b.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a18      	ldr	r2, [pc, #96]	; (8003760 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d108      	bne.n	8003714 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003708:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800372c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	4313      	orrs	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
} 
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40012c00 	.word	0x40012c00

08003764 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003796:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a2:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80037b4:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	041b      	lsls	r3, r3, #16
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a15      	ldr	r2, [pc, #84]	; (800381c <TIM_OC5_SetConfig+0xb8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00b      	beq.n	80037e2 <TIM_OC5_SetConfig+0x7e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a14      	ldr	r2, [pc, #80]	; (8003820 <TIM_OC5_SetConfig+0xbc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d007      	beq.n	80037e2 <TIM_OC5_SetConfig+0x7e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a13      	ldr	r2, [pc, #76]	; (8003824 <TIM_OC5_SetConfig+0xc0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d003      	beq.n	80037e2 <TIM_OC5_SetConfig+0x7e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a12      	ldr	r2, [pc, #72]	; (8003828 <TIM_OC5_SetConfig+0xc4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d109      	bne.n	80037f6 <TIM_OC5_SetConfig+0x92>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	621a      	str	r2, [r3, #32]
}
 8003810:	bf00      	nop
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40014000 	.word	0x40014000
 8003824:	40014400 	.word	0x40014400
 8003828:	40014800 	.word	0x40014800

0800382c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385e:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800386a:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	021b      	lsls	r3, r3, #8
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800387e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	051b      	lsls	r3, r3, #20
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a16      	ldr	r2, [pc, #88]	; (80038e8 <TIM_OC6_SetConfig+0xbc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00b      	beq.n	80038ac <TIM_OC6_SetConfig+0x80>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a15      	ldr	r2, [pc, #84]	; (80038ec <TIM_OC6_SetConfig+0xc0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d007      	beq.n	80038ac <TIM_OC6_SetConfig+0x80>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <TIM_OC6_SetConfig+0xc4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_OC6_SetConfig+0x80>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <TIM_OC6_SetConfig+0xc8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d109      	bne.n	80038c0 <TIM_OC6_SetConfig+0x94>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	029b      	lsls	r3, r3, #10
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	621a      	str	r2, [r3, #32]
} 
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40012c00 	.word	0x40012c00
 80038ec:	40014000 	.word	0x40014000
 80038f0:	40014400 	.word	0x40014400
 80038f4:	40014800 	.word	0x40014800

080038f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e043      	b.n	8003992 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fde8 	bl	80044f4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	; 0x24
 8003928:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f8b9 	bl	8003ab4 <UART_SetConfig>
 8003942:	4603      	mov	r3, r0
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e022      	b.n	8003992 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fa13 	bl	8003d80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003968:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003978:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0201 	orr.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fa9a 	bl	8003ec4 <UART_CheckIdleState>
 8003990:	4603      	mov	r3, r0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b088      	sub	sp, #32
 800399e:	af02      	add	r7, sp, #8
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	4613      	mov	r3, r2
 80039a8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d177      	bne.n	8003aaa <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_UART_Transmit+0x2c>
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e070      	b.n	8003aac <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_UART_Transmit+0x3e>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e069      	b.n	8003aac <HAL_UART_Transmit+0x112>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2221      	movs	r2, #33	; 0x21
 80039ea:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80039ee:	f7fc fc99 	bl	8000324 <HAL_GetTick>
 80039f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003a04:	e034      	b.n	8003a70 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2180      	movs	r1, #128	; 0x80
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fa97 	bl	8003f56 <UART_WaitOnFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e03c      	b.n	8003aac <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3a:	d111      	bne.n	8003a60 <HAL_UART_Transmit+0xc6>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10d      	bne.n	8003a60 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	881a      	ldrh	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a54:	b292      	uxth	r2, r2
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	e007      	b.n	8003a70 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	60ba      	str	r2, [r7, #8]
 8003a66:	781a      	ldrb	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	b292      	uxth	r2, r2
 8003a6e:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1c4      	bne.n	8003a06 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2200      	movs	r2, #0
 8003a84:	2140      	movs	r1, #64	; 0x40
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fa65 	bl	8003f56 <UART_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e00a      	b.n	8003aac <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e000      	b.n	8003aac <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8003aaa:	2302      	movs	r3, #2
  }
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4b9f      	ldr	r3, [pc, #636]	; (8003d6c <UART_SetConfig+0x2b8>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	68f9      	ldr	r1, [r7, #12]
 8003af8:	430b      	orrs	r3, r1
 8003afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a8e      	ldr	r2, [pc, #568]	; (8003d70 <UART_SetConfig+0x2bc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d121      	bne.n	8003b80 <UART_SetConfig+0xcc>
 8003b3c:	4b8d      	ldr	r3, [pc, #564]	; (8003d74 <UART_SetConfig+0x2c0>)
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d817      	bhi.n	8003b78 <UART_SetConfig+0xc4>
 8003b48:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <UART_SetConfig+0x9c>)
 8003b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4e:	bf00      	nop
 8003b50:	08003b61 	.word	0x08003b61
 8003b54:	08003b6d 	.word	0x08003b6d
 8003b58:	08003b73 	.word	0x08003b73
 8003b5c:	08003b67 	.word	0x08003b67
 8003b60:	2300      	movs	r3, #0
 8003b62:	75fb      	strb	r3, [r7, #23]
 8003b64:	e01e      	b.n	8003ba4 <UART_SetConfig+0xf0>
 8003b66:	2302      	movs	r3, #2
 8003b68:	75fb      	strb	r3, [r7, #23]
 8003b6a:	e01b      	b.n	8003ba4 <UART_SetConfig+0xf0>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	75fb      	strb	r3, [r7, #23]
 8003b70:	e018      	b.n	8003ba4 <UART_SetConfig+0xf0>
 8003b72:	2308      	movs	r3, #8
 8003b74:	75fb      	strb	r3, [r7, #23]
 8003b76:	e015      	b.n	8003ba4 <UART_SetConfig+0xf0>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	75fb      	strb	r3, [r7, #23]
 8003b7c:	bf00      	nop
 8003b7e:	e011      	b.n	8003ba4 <UART_SetConfig+0xf0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a7c      	ldr	r2, [pc, #496]	; (8003d78 <UART_SetConfig+0x2c4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d102      	bne.n	8003b90 <UART_SetConfig+0xdc>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	75fb      	strb	r3, [r7, #23]
 8003b8e:	e009      	b.n	8003ba4 <UART_SetConfig+0xf0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a79      	ldr	r2, [pc, #484]	; (8003d7c <UART_SetConfig+0x2c8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d102      	bne.n	8003ba0 <UART_SetConfig+0xec>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	75fb      	strb	r3, [r7, #23]
 8003b9e:	e001      	b.n	8003ba4 <UART_SetConfig+0xf0>
 8003ba0:	2310      	movs	r3, #16
 8003ba2:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bac:	d16f      	bne.n	8003c8e <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d857      	bhi.n	8003c64 <UART_SetConfig+0x1b0>
 8003bb4:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <UART_SetConfig+0x108>)
 8003bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bba:	bf00      	nop
 8003bbc:	08003be1 	.word	0x08003be1
 8003bc0:	08003bfd 	.word	0x08003bfd
 8003bc4:	08003c19 	.word	0x08003c19
 8003bc8:	08003c65 	.word	0x08003c65
 8003bcc:	08003c33 	.word	0x08003c33
 8003bd0:	08003c65 	.word	0x08003c65
 8003bd4:	08003c65 	.word	0x08003c65
 8003bd8:	08003c65 	.word	0x08003c65
 8003bdc:	08003c4f 	.word	0x08003c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003be0:	f7fe ff4c 	bl	8002a7c <HAL_RCC_GetPCLK1Freq>
 8003be4:	4603      	mov	r3, r0
 8003be6:	005a      	lsls	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	441a      	add	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	82bb      	strh	r3, [r7, #20]
        break;
 8003bfa:	e036      	b.n	8003c6a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003bfc:	f7fe ff60 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 8003c00:	4603      	mov	r3, r0
 8003c02:	005a      	lsls	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	441a      	add	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	82bb      	strh	r3, [r7, #20]
        break;
 8003c16:	e028      	b.n	8003c6a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	085b      	lsrs	r3, r3, #1
 8003c1e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003c22:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6852      	ldr	r2, [r2, #4]
 8003c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c2e:	82bb      	strh	r3, [r7, #20]
        break;
 8003c30:	e01b      	b.n	8003c6a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003c32:	f7fe fead 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 8003c36:	4603      	mov	r3, r0
 8003c38:	005a      	lsls	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	441a      	add	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4a:	82bb      	strh	r3, [r7, #20]
        break;
 8003c4c:	e00d      	b.n	8003c6a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c60:	82bb      	strh	r3, [r7, #20]
        break;
 8003c62:	e002      	b.n	8003c6a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	74fb      	strb	r3, [r7, #19]
        break;
 8003c68:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003c6a:	8abb      	ldrh	r3, [r7, #20]
 8003c6c:	f023 030f 	bic.w	r3, r3, #15
 8003c70:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c72:	8abb      	ldrh	r3, [r7, #20]
 8003c74:	105b      	asrs	r3, r3, #1
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	897b      	ldrh	r3, [r7, #10]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	897a      	ldrh	r2, [r7, #10]
 8003c8a:	60da      	str	r2, [r3, #12]
 8003c8c:	e069      	b.n	8003d62 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d863      	bhi.n	8003d5c <UART_SetConfig+0x2a8>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <UART_SetConfig+0x1e8>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cc1 	.word	0x08003cc1
 8003ca0:	08003ce1 	.word	0x08003ce1
 8003ca4:	08003d01 	.word	0x08003d01
 8003ca8:	08003d5d 	.word	0x08003d5d
 8003cac:	08003d21 	.word	0x08003d21
 8003cb0:	08003d5d 	.word	0x08003d5d
 8003cb4:	08003d5d 	.word	0x08003d5d
 8003cb8:	08003d5d 	.word	0x08003d5d
 8003cbc:	08003d41 	.word	0x08003d41
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003cc0:	f7fe fedc 	bl	8002a7c <HAL_RCC_GetPCLK1Freq>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	085b      	lsrs	r3, r3, #1
 8003ccc:	441a      	add	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60da      	str	r2, [r3, #12]
        break;
 8003cde:	e040      	b.n	8003d62 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003ce0:	f7fe feee 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	441a      	add	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60da      	str	r2, [r3, #12]
        break;
 8003cfe:	e030      	b.n	8003d62 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003d0a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6852      	ldr	r2, [r2, #4]
 8003d12:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60da      	str	r2, [r3, #12]
        break;
 8003d1e:	e020      	b.n	8003d62 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003d20:	f7fe fe36 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	441a      	add	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60da      	str	r2, [r3, #12]
        break;
 8003d3e:	e010      	b.n	8003d62 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60da      	str	r2, [r3, #12]
        break;
 8003d5a:	e002      	b.n	8003d62 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	74fb      	strb	r3, [r7, #19]
        break;
 8003d60:	bf00      	nop
    }
  }

  return ret;
 8003d62:	7cfb      	ldrb	r3, [r7, #19]

}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	efff69f3 	.word	0xefff69f3
 8003d70:	40013800 	.word	0x40013800
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40004400 	.word	0x40004400
 8003d7c:	40004800 	.word	0x40004800

08003d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01a      	beq.n	8003e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e7e:	d10a      	bne.n	8003e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]
  }
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ed6:	f7fc fa25 	bl	8000324 <HAL_GetTick>
 8003eda:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d10e      	bne.n	8003f08 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f82c 	bl	8003f56 <UART_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e022      	b.n	8003f4e <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d10e      	bne.n	8003f34 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f816 	bl	8003f56 <UART_WaitOnFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e00c      	b.n	8003f4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	603b      	str	r3, [r7, #0]
 8003f62:	4613      	mov	r3, r2
 8003f64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f66:	e02c      	b.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d028      	beq.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f76:	f7fc f9d5 	bl	8000324 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d21d      	bcs.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e00f      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	bf0c      	ite	eq
 8003fd2:	2301      	moveq	r3, #1
 8003fd4:	2300      	movne	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d0c3      	beq.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ff2:	f7fc f93d 	bl	8000270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ff6:	f000 f841 	bl	800407c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ffa:	f000 f98f 	bl	800431c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003ffe:	f000 f95d 	bl	80042bc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8004002:	f000 f8e5 	bl	80041d0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8004006:	f000 f875 	bl	80040f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 800400a:	2104      	movs	r1, #4
 800400c:	4817      	ldr	r0, [pc, #92]	; (800406c <main+0x80>)
 800400e:	f7fe fdd9 	bl	8002bc4 <HAL_TIM_PWM_Start>
  char txbuf[30]={0};
 8004012:	463b      	mov	r3, r7
 8004014:	221e      	movs	r2, #30
 8004016:	2100      	movs	r1, #0
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fba7 	bl	800476c <memset>
  uint16_t value=0;
 800401e:	2300      	movs	r3, #0
 8004020:	83fb      	strh	r3, [r7, #30]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8004022:	4813      	ldr	r0, [pc, #76]	; (8004070 <main+0x84>)
 8004024:	f7fc fb3c 	bl	80006a0 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1,1000)==HAL_OK){
 8004028:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800402c:	4810      	ldr	r0, [pc, #64]	; (8004070 <main+0x84>)
 800402e:	f7fc fc23 	bl	8000878 <HAL_ADC_PollForConversion>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d104      	bne.n	8004042 <main+0x56>
		  value=HAL_ADC_GetValue(&hadc1);
 8004038:	480d      	ldr	r0, [pc, #52]	; (8004070 <main+0x84>)
 800403a:	f7fc fce3 	bl	8000a04 <HAL_ADC_GetValue>
 800403e:	4603      	mov	r3, r0
 8004040:	83fb      	strh	r3, [r7, #30]
	  }
	  HAL_ADC_Stop(&hadc1);
 8004042:	480b      	ldr	r0, [pc, #44]	; (8004070 <main+0x84>)
 8004044:	f7fc fbe2 	bl	800080c <HAL_ADC_Stop>
	  sprintf(txbuf,"value:%d\r\n",value);
 8004048:	8bfa      	ldrh	r2, [r7, #30]
 800404a:	463b      	mov	r3, r7
 800404c:	4909      	ldr	r1, [pc, #36]	; (8004074 <main+0x88>)
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fb94 	bl	800477c <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*)txbuf,sizeof(txbuf),0xFFFF);
 8004054:	4639      	mov	r1, r7
 8004056:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800405a:	221e      	movs	r2, #30
 800405c:	4806      	ldr	r0, [pc, #24]	; (8004078 <main+0x8c>)
 800405e:	f7ff fc9c 	bl	800399a <HAL_UART_Transmit>
	  HAL_Delay(10);
 8004062:	200a      	movs	r0, #10
 8004064:	f7fc f96a 	bl	800033c <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8004068:	e7db      	b.n	8004022 <main+0x36>
 800406a:	bf00      	nop
 800406c:	200000f0 	.word	0x200000f0
 8004070:	2000009c 	.word	0x2000009c
 8004074:	08004fa0 	.word	0x08004fa0
 8004078:	20000130 	.word	0x20000130

0800407c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b090      	sub	sp, #64	; 0x40
 8004080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004082:	f107 0318 	add.w	r3, r7, #24
 8004086:	2228      	movs	r2, #40	; 0x28
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fb6e 	bl	800476c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004090:	1d3b      	adds	r3, r7, #4
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	605a      	str	r2, [r3, #4]
 8004098:	609a      	str	r2, [r3, #8]
 800409a:	60da      	str	r2, [r3, #12]
 800409c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800409e:	2302      	movs	r3, #2
 80040a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040a2:	2301      	movs	r3, #1
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040a6:	2310      	movs	r3, #16
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040ae:	f107 0318 	add.w	r3, r7, #24
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fd fc02 	bl	80018bc <HAL_RCC_OscConfig>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80040be:	f000 f95d 	bl	800437c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040c2:	230f      	movs	r3, #15
 80040c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80040ce:	2300      	movs	r3, #0
 80040d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80040d6:	1d3b      	adds	r3, r7, #4
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe fadc 	bl	8002698 <HAL_RCC_ClockConfig>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80040e6:	f000 f949 	bl	800437c <Error_Handler>
  }
}
 80040ea:	bf00      	nop
 80040ec:	3740      	adds	r7, #64	; 0x40
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08a      	sub	sp, #40	; 0x28
 80040f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80040fa:	f107 031c 	add.w	r3, r7, #28
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	605a      	str	r2, [r3, #4]
 8004104:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004106:	1d3b      	adds	r3, r7, #4
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	609a      	str	r2, [r3, #8]
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	611a      	str	r2, [r3, #16]
 8004114:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8004116:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <MX_ADC1_Init+0xd8>)
 8004118:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800411c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800411e:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <MX_ADC1_Init+0xd8>)
 8004120:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004124:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004126:	4b29      	ldr	r3, [pc, #164]	; (80041cc <MX_ADC1_Init+0xd8>)
 8004128:	2200      	movs	r2, #0
 800412a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800412c:	4b27      	ldr	r3, [pc, #156]	; (80041cc <MX_ADC1_Init+0xd8>)
 800412e:	2200      	movs	r2, #0
 8004130:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004132:	4b26      	ldr	r3, [pc, #152]	; (80041cc <MX_ADC1_Init+0xd8>)
 8004134:	2200      	movs	r2, #0
 8004136:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004138:	4b24      	ldr	r3, [pc, #144]	; (80041cc <MX_ADC1_Init+0xd8>)
 800413a:	2200      	movs	r2, #0
 800413c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800413e:	4b23      	ldr	r3, [pc, #140]	; (80041cc <MX_ADC1_Init+0xd8>)
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004144:	4b21      	ldr	r3, [pc, #132]	; (80041cc <MX_ADC1_Init+0xd8>)
 8004146:	2201      	movs	r2, #1
 8004148:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <MX_ADC1_Init+0xd8>)
 800414c:	2200      	movs	r2, #0
 800414e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004150:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <MX_ADC1_Init+0xd8>)
 8004152:	2201      	movs	r2, #1
 8004154:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004156:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <MX_ADC1_Init+0xd8>)
 8004158:	2200      	movs	r2, #0
 800415a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800415c:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <MX_ADC1_Init+0xd8>)
 800415e:	2204      	movs	r2, #4
 8004160:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004162:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <MX_ADC1_Init+0xd8>)
 8004164:	2200      	movs	r2, #0
 8004166:	619a      	str	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004168:	4b18      	ldr	r3, [pc, #96]	; (80041cc <MX_ADC1_Init+0xd8>)
 800416a:	2200      	movs	r2, #0
 800416c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800416e:	4817      	ldr	r0, [pc, #92]	; (80041cc <MX_ADC1_Init+0xd8>)
 8004170:	f7fc f906 	bl	8000380 <HAL_ADC_Init>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800417a:	f000 f8ff 	bl	800437c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004182:	f107 031c 	add.w	r3, r7, #28
 8004186:	4619      	mov	r1, r3
 8004188:	4810      	ldr	r0, [pc, #64]	; (80041cc <MX_ADC1_Init+0xd8>)
 800418a:	f7fc ff0b 	bl	8000fa4 <HAL_ADCEx_MultiModeConfigChannel>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8004194:	f000 f8f2 	bl	800437c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004198:	2301      	movs	r3, #1
 800419a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800419c:	2301      	movs	r3, #1
 800419e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80041a0:	2300      	movs	r3, #0
 80041a2:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041b0:	1d3b      	adds	r3, r7, #4
 80041b2:	4619      	mov	r1, r3
 80041b4:	4805      	ldr	r0, [pc, #20]	; (80041cc <MX_ADC1_Init+0xd8>)
 80041b6:	f7fc fc33 	bl	8000a20 <HAL_ADC_ConfigChannel>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80041c0:	f000 f8dc 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80041c4:	bf00      	nop
 80041c6:	3728      	adds	r7, #40	; 0x28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	2000009c 	.word	0x2000009c

080041d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08e      	sub	sp, #56	; 0x38
 80041d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	605a      	str	r2, [r3, #4]
 80041e0:	609a      	str	r2, [r3, #8]
 80041e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041e4:	f107 031c 	add.w	r3, r7, #28
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041f0:	463b      	mov	r3, r7
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	609a      	str	r2, [r3, #8]
 80041fa:	60da      	str	r2, [r3, #12]
 80041fc:	611a      	str	r2, [r3, #16]
 80041fe:	615a      	str	r2, [r3, #20]
 8004200:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004202:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <MX_TIM2_Init+0xe8>)
 8004204:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004208:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 624;
 800420a:	4b2b      	ldr	r3, [pc, #172]	; (80042b8 <MX_TIM2_Init+0xe8>)
 800420c:	f44f 721c 	mov.w	r2, #624	; 0x270
 8004210:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004212:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <MX_TIM2_Init+0xe8>)
 8004214:	2200      	movs	r2, #0
 8004216:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8004218:	4b27      	ldr	r3, [pc, #156]	; (80042b8 <MX_TIM2_Init+0xe8>)
 800421a:	22ff      	movs	r2, #255	; 0xff
 800421c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800421e:	4b26      	ldr	r3, [pc, #152]	; (80042b8 <MX_TIM2_Init+0xe8>)
 8004220:	2200      	movs	r2, #0
 8004222:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004224:	4b24      	ldr	r3, [pc, #144]	; (80042b8 <MX_TIM2_Init+0xe8>)
 8004226:	2200      	movs	r2, #0
 8004228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800422a:	4823      	ldr	r0, [pc, #140]	; (80042b8 <MX_TIM2_Init+0xe8>)
 800422c:	f7fe fc6a 	bl	8002b04 <HAL_TIM_Base_Init>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004236:	f000 f8a1 	bl	800437c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800423a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800423e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004244:	4619      	mov	r1, r3
 8004246:	481c      	ldr	r0, [pc, #112]	; (80042b8 <MX_TIM2_Init+0xe8>)
 8004248:	f7fe fcfe 	bl	8002c48 <HAL_TIM_ConfigClockSource>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004252:	f000 f893 	bl	800437c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004256:	4818      	ldr	r0, [pc, #96]	; (80042b8 <MX_TIM2_Init+0xe8>)
 8004258:	f7fe fc7f 	bl	8002b5a <HAL_TIM_PWM_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004262:	f000 f88b 	bl	800437c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800426a:	2300      	movs	r3, #0
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800426e:	f107 031c 	add.w	r3, r7, #28
 8004272:	4619      	mov	r1, r3
 8004274:	4810      	ldr	r0, [pc, #64]	; (80042b8 <MX_TIM2_Init+0xe8>)
 8004276:	f7ff fa27 	bl	80036c8 <HAL_TIMEx_MasterConfigSynchronization>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004280:	f000 f87c 	bl	800437c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004284:	2360      	movs	r3, #96	; 0x60
 8004286:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800428c:	2300      	movs	r3, #0
 800428e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004294:	463b      	mov	r3, r7
 8004296:	2204      	movs	r2, #4
 8004298:	4619      	mov	r1, r3
 800429a:	4807      	ldr	r0, [pc, #28]	; (80042b8 <MX_TIM2_Init+0xe8>)
 800429c:	f7ff f8fc 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80042a6:	f000 f869 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80042aa:	4803      	ldr	r0, [pc, #12]	; (80042b8 <MX_TIM2_Init+0xe8>)
 80042ac:	f000 f8ec 	bl	8004488 <HAL_TIM_MspPostInit>

}
 80042b0:	bf00      	nop
 80042b2:	3738      	adds	r7, #56	; 0x38
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	200000f0 	.word	0x200000f0

080042bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042c0:	4b14      	ldr	r3, [pc, #80]	; (8004314 <MX_USART2_UART_Init+0x58>)
 80042c2:	4a15      	ldr	r2, [pc, #84]	; (8004318 <MX_USART2_UART_Init+0x5c>)
 80042c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80042c6:	4b13      	ldr	r3, [pc, #76]	; (8004314 <MX_USART2_UART_Init+0x58>)
 80042c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80042cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042ce:	4b11      	ldr	r3, [pc, #68]	; (8004314 <MX_USART2_UART_Init+0x58>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042d4:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <MX_USART2_UART_Init+0x58>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042da:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <MX_USART2_UART_Init+0x58>)
 80042dc:	2200      	movs	r2, #0
 80042de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042e0:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <MX_USART2_UART_Init+0x58>)
 80042e2:	220c      	movs	r2, #12
 80042e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042e6:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <MX_USART2_UART_Init+0x58>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042ec:	4b09      	ldr	r3, [pc, #36]	; (8004314 <MX_USART2_UART_Init+0x58>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <MX_USART2_UART_Init+0x58>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <MX_USART2_UART_Init+0x58>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042fe:	4805      	ldr	r0, [pc, #20]	; (8004314 <MX_USART2_UART_Init+0x58>)
 8004300:	f7ff fafa 	bl	80038f8 <HAL_UART_Init>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800430a:	f000 f837 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000130 	.word	0x20000130
 8004318:	40004400 	.word	0x40004400

0800431c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004322:	4b15      	ldr	r3, [pc, #84]	; (8004378 <MX_GPIO_Init+0x5c>)
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	4a14      	ldr	r2, [pc, #80]	; (8004378 <MX_GPIO_Init+0x5c>)
 8004328:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800432c:	6153      	str	r3, [r2, #20]
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <MX_GPIO_Init+0x5c>)
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800433a:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <MX_GPIO_Init+0x5c>)
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	4a0e      	ldr	r2, [pc, #56]	; (8004378 <MX_GPIO_Init+0x5c>)
 8004340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004344:	6153      	str	r3, [r2, #20]
 8004346:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <MX_GPIO_Init+0x5c>)
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <MX_GPIO_Init+0x5c>)
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	4a08      	ldr	r2, [pc, #32]	; (8004378 <MX_GPIO_Init+0x5c>)
 8004358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800435c:	6153      	str	r3, [r2, #20]
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <MX_GPIO_Init+0x5c>)
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	687b      	ldr	r3, [r7, #4]

}
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000

0800437c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004380:	bf00      	nop
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004392:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <HAL_MspInit+0x44>)
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	4a0e      	ldr	r2, [pc, #56]	; (80043d0 <HAL_MspInit+0x44>)
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	6193      	str	r3, [r2, #24]
 800439e:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <HAL_MspInit+0x44>)
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043aa:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <HAL_MspInit+0x44>)
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	4a08      	ldr	r2, [pc, #32]	; (80043d0 <HAL_MspInit+0x44>)
 80043b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b4:	61d3      	str	r3, [r2, #28]
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_MspInit+0x44>)
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000

080043d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08a      	sub	sp, #40	; 0x28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043dc:	f107 0314 	add.w	r3, r7, #20
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	60da      	str	r2, [r3, #12]
 80043ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043f4:	d124      	bne.n	8004440 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80043f6:	4b14      	ldr	r3, [pc, #80]	; (8004448 <HAL_ADC_MspInit+0x74>)
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	4a13      	ldr	r2, [pc, #76]	; (8004448 <HAL_ADC_MspInit+0x74>)
 80043fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004400:	6153      	str	r3, [r2, #20]
 8004402:	4b11      	ldr	r3, [pc, #68]	; (8004448 <HAL_ADC_MspInit+0x74>)
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800440e:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <HAL_ADC_MspInit+0x74>)
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	4a0d      	ldr	r2, [pc, #52]	; (8004448 <HAL_ADC_MspInit+0x74>)
 8004414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004418:	6153      	str	r3, [r2, #20]
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_ADC_MspInit+0x74>)
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004426:	2301      	movs	r3, #1
 8004428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800442a:	2303      	movs	r3, #3
 800442c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004432:	f107 0314 	add.w	r3, r7, #20
 8004436:	4619      	mov	r1, r3
 8004438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800443c:	f7fd f8c8 	bl	80015d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004440:	bf00      	nop
 8004442:	3728      	adds	r7, #40	; 0x28
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40021000 	.word	0x40021000

0800444c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445c:	d10b      	bne.n	8004476 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800445e:	4b09      	ldr	r3, [pc, #36]	; (8004484 <HAL_TIM_Base_MspInit+0x38>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	4a08      	ldr	r2, [pc, #32]	; (8004484 <HAL_TIM_Base_MspInit+0x38>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	61d3      	str	r3, [r2, #28]
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_TIM_Base_MspInit+0x38>)
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40021000 	.word	0x40021000

08004488 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004490:	f107 030c 	add.w	r3, r7, #12
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	60da      	str	r2, [r3, #12]
 800449e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a8:	d11b      	bne.n	80044e2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044aa:	4b10      	ldr	r3, [pc, #64]	; (80044ec <HAL_TIM_MspPostInit+0x64>)
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	4a0f      	ldr	r2, [pc, #60]	; (80044ec <HAL_TIM_MspPostInit+0x64>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b4:	6153      	str	r3, [r2, #20]
 80044b6:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <HAL_TIM_MspPostInit+0x64>)
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044c2:	2308      	movs	r3, #8
 80044c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c6:	2302      	movs	r3, #2
 80044c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044d2:	2301      	movs	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044d6:	f107 030c 	add.w	r3, r7, #12
 80044da:	4619      	mov	r1, r3
 80044dc:	4804      	ldr	r0, [pc, #16]	; (80044f0 <HAL_TIM_MspPostInit+0x68>)
 80044de:	f7fd f877 	bl	80015d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80044e2:	bf00      	nop
 80044e4:	3720      	adds	r7, #32
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	48000400 	.word	0x48000400

080044f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	; 0x28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044fc:	f107 0314 	add.w	r3, r7, #20
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	605a      	str	r2, [r3, #4]
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	60da      	str	r2, [r3, #12]
 800450a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a18      	ldr	r2, [pc, #96]	; (8004574 <HAL_UART_MspInit+0x80>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d129      	bne.n	800456a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004516:	4b18      	ldr	r3, [pc, #96]	; (8004578 <HAL_UART_MspInit+0x84>)
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	4a17      	ldr	r2, [pc, #92]	; (8004578 <HAL_UART_MspInit+0x84>)
 800451c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004520:	61d3      	str	r3, [r2, #28]
 8004522:	4b15      	ldr	r3, [pc, #84]	; (8004578 <HAL_UART_MspInit+0x84>)
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452a:	613b      	str	r3, [r7, #16]
 800452c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800452e:	4b12      	ldr	r3, [pc, #72]	; (8004578 <HAL_UART_MspInit+0x84>)
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	4a11      	ldr	r2, [pc, #68]	; (8004578 <HAL_UART_MspInit+0x84>)
 8004534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004538:	6153      	str	r3, [r2, #20]
 800453a:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <HAL_UART_MspInit+0x84>)
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8004546:	f248 0304 	movw	r3, #32772	; 0x8004
 800454a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454c:	2302      	movs	r3, #2
 800454e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004554:	2303      	movs	r3, #3
 8004556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004558:	2307      	movs	r3, #7
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455c:	f107 0314 	add.w	r3, r7, #20
 8004560:	4619      	mov	r1, r3
 8004562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004566:	f7fd f833 	bl	80015d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800456a:	bf00      	nop
 800456c:	3728      	adds	r7, #40	; 0x28
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40004400 	.word	0x40004400
 8004578:	40021000 	.word	0x40021000

0800457c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800458a:	b480      	push	{r7}
 800458c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800458e:	e7fe      	b.n	800458e <HardFault_Handler+0x4>

08004590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004594:	e7fe      	b.n	8004594 <MemManage_Handler+0x4>

08004596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004596:	b480      	push	{r7}
 8004598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800459a:	e7fe      	b.n	800459a <BusFault_Handler+0x4>

0800459c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045a0:	e7fe      	b.n	80045a0 <UsageFault_Handler+0x4>

080045a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045a2:	b480      	push	{r7}
 80045a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045a6:	bf00      	nop
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045be:	b480      	push	{r7}
 80045c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045c2:	bf00      	nop
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045d0:	f7fb fe94 	bl	80002fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045d4:	bf00      	nop
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80045e0:	4b11      	ldr	r3, [pc, #68]	; (8004628 <_sbrk+0x50>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d102      	bne.n	80045ee <_sbrk+0x16>
		heap_end = &end;
 80045e8:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <_sbrk+0x50>)
 80045ea:	4a10      	ldr	r2, [pc, #64]	; (800462c <_sbrk+0x54>)
 80045ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80045ee:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <_sbrk+0x50>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80045f4:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <_sbrk+0x50>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4413      	add	r3, r2
 80045fc:	466a      	mov	r2, sp
 80045fe:	4293      	cmp	r3, r2
 8004600:	d907      	bls.n	8004612 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004602:	f000 f889 	bl	8004718 <__errno>
 8004606:	4602      	mov	r2, r0
 8004608:	230c      	movs	r3, #12
 800460a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800460c:	f04f 33ff 	mov.w	r3, #4294967295
 8004610:	e006      	b.n	8004620 <_sbrk+0x48>
	}

	heap_end += incr;
 8004612:	4b05      	ldr	r3, [pc, #20]	; (8004628 <_sbrk+0x50>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	4a03      	ldr	r2, [pc, #12]	; (8004628 <_sbrk+0x50>)
 800461c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800461e:	68fb      	ldr	r3, [r7, #12]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	2000008c 	.word	0x2000008c
 800462c:	200001a8 	.word	0x200001a8

08004630 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004634:	4b1f      	ldr	r3, [pc, #124]	; (80046b4 <SystemInit+0x84>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463a:	4a1e      	ldr	r2, [pc, #120]	; (80046b4 <SystemInit+0x84>)
 800463c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004644:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <SystemInit+0x88>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1b      	ldr	r2, [pc, #108]	; (80046b8 <SystemInit+0x88>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004650:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <SystemInit+0x88>)
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	4918      	ldr	r1, [pc, #96]	; (80046b8 <SystemInit+0x88>)
 8004656:	4b19      	ldr	r3, [pc, #100]	; (80046bc <SystemInit+0x8c>)
 8004658:	4013      	ands	r3, r2
 800465a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800465c:	4b16      	ldr	r3, [pc, #88]	; (80046b8 <SystemInit+0x88>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a15      	ldr	r2, [pc, #84]	; (80046b8 <SystemInit+0x88>)
 8004662:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800466a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800466c:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <SystemInit+0x88>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a11      	ldr	r2, [pc, #68]	; (80046b8 <SystemInit+0x88>)
 8004672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004676:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004678:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <SystemInit+0x88>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	4a0e      	ldr	r2, [pc, #56]	; (80046b8 <SystemInit+0x88>)
 800467e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004682:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004684:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <SystemInit+0x88>)
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	4a0b      	ldr	r2, [pc, #44]	; (80046b8 <SystemInit+0x88>)
 800468a:	f023 030f 	bic.w	r3, r3, #15
 800468e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004690:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <SystemInit+0x88>)
 8004692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004694:	4908      	ldr	r1, [pc, #32]	; (80046b8 <SystemInit+0x88>)
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <SystemInit+0x90>)
 8004698:	4013      	ands	r3, r2
 800469a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <SystemInit+0x88>)
 800469e:	2200      	movs	r2, #0
 80046a0:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046a2:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <SystemInit+0x84>)
 80046a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046a8:	609a      	str	r2, [r3, #8]
#endif
}
 80046aa:	bf00      	nop
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	e000ed00 	.word	0xe000ed00
 80046b8:	40021000 	.word	0x40021000
 80046bc:	f87fc00c 	.word	0xf87fc00c
 80046c0:	ff00fccc 	.word	0xff00fccc

080046c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80046c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80046c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80046ca:	e003      	b.n	80046d4 <LoopCopyDataInit>

080046cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80046ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80046d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80046d2:	3104      	adds	r1, #4

080046d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80046d4:	480b      	ldr	r0, [pc, #44]	; (8004704 <LoopForever+0xa>)
	ldr	r3, =_edata
 80046d6:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <LoopForever+0xe>)
	adds	r2, r0, r1
 80046d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80046da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80046dc:	d3f6      	bcc.n	80046cc <CopyDataInit>
	ldr	r2, =_sbss
 80046de:	4a0b      	ldr	r2, [pc, #44]	; (800470c <LoopForever+0x12>)
	b	LoopFillZerobss
 80046e0:	e002      	b.n	80046e8 <LoopFillZerobss>

080046e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80046e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80046e4:	f842 3b04 	str.w	r3, [r2], #4

080046e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <LoopForever+0x16>)
	cmp	r2, r3
 80046ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80046ec:	d3f9      	bcc.n	80046e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80046ee:	f7ff ff9f 	bl	8004630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046f2:	f000 f817 	bl	8004724 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80046f6:	f7ff fc79 	bl	8003fec <main>

080046fa <LoopForever>:

LoopForever:
    b LoopForever
 80046fa:	e7fe      	b.n	80046fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80046fc:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004700:	08005020 	.word	0x08005020
	ldr	r0, =_sdata
 8004704:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004708:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800470c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8004710:	200001a4 	.word	0x200001a4

08004714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004714:	e7fe      	b.n	8004714 <ADC1_2_IRQHandler>
	...

08004718 <__errno>:
 8004718:	4b01      	ldr	r3, [pc, #4]	; (8004720 <__errno+0x8>)
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	2000000c 	.word	0x2000000c

08004724 <__libc_init_array>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	4e0d      	ldr	r6, [pc, #52]	; (800475c <__libc_init_array+0x38>)
 8004728:	4c0d      	ldr	r4, [pc, #52]	; (8004760 <__libc_init_array+0x3c>)
 800472a:	1ba4      	subs	r4, r4, r6
 800472c:	10a4      	asrs	r4, r4, #2
 800472e:	2500      	movs	r5, #0
 8004730:	42a5      	cmp	r5, r4
 8004732:	d109      	bne.n	8004748 <__libc_init_array+0x24>
 8004734:	4e0b      	ldr	r6, [pc, #44]	; (8004764 <__libc_init_array+0x40>)
 8004736:	4c0c      	ldr	r4, [pc, #48]	; (8004768 <__libc_init_array+0x44>)
 8004738:	f000 fc26 	bl	8004f88 <_init>
 800473c:	1ba4      	subs	r4, r4, r6
 800473e:	10a4      	asrs	r4, r4, #2
 8004740:	2500      	movs	r5, #0
 8004742:	42a5      	cmp	r5, r4
 8004744:	d105      	bne.n	8004752 <__libc_init_array+0x2e>
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800474c:	4798      	blx	r3
 800474e:	3501      	adds	r5, #1
 8004750:	e7ee      	b.n	8004730 <__libc_init_array+0xc>
 8004752:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004756:	4798      	blx	r3
 8004758:	3501      	adds	r5, #1
 800475a:	e7f2      	b.n	8004742 <__libc_init_array+0x1e>
 800475c:	08005018 	.word	0x08005018
 8004760:	08005018 	.word	0x08005018
 8004764:	08005018 	.word	0x08005018
 8004768:	0800501c 	.word	0x0800501c

0800476c <memset>:
 800476c:	4402      	add	r2, r0
 800476e:	4603      	mov	r3, r0
 8004770:	4293      	cmp	r3, r2
 8004772:	d100      	bne.n	8004776 <memset+0xa>
 8004774:	4770      	bx	lr
 8004776:	f803 1b01 	strb.w	r1, [r3], #1
 800477a:	e7f9      	b.n	8004770 <memset+0x4>

0800477c <siprintf>:
 800477c:	b40e      	push	{r1, r2, r3}
 800477e:	b500      	push	{lr}
 8004780:	b09c      	sub	sp, #112	; 0x70
 8004782:	ab1d      	add	r3, sp, #116	; 0x74
 8004784:	9002      	str	r0, [sp, #8]
 8004786:	9006      	str	r0, [sp, #24]
 8004788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800478c:	4809      	ldr	r0, [pc, #36]	; (80047b4 <siprintf+0x38>)
 800478e:	9107      	str	r1, [sp, #28]
 8004790:	9104      	str	r1, [sp, #16]
 8004792:	4909      	ldr	r1, [pc, #36]	; (80047b8 <siprintf+0x3c>)
 8004794:	f853 2b04 	ldr.w	r2, [r3], #4
 8004798:	9105      	str	r1, [sp, #20]
 800479a:	6800      	ldr	r0, [r0, #0]
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	a902      	add	r1, sp, #8
 80047a0:	f000 f866 	bl	8004870 <_svfiprintf_r>
 80047a4:	9b02      	ldr	r3, [sp, #8]
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	b01c      	add	sp, #112	; 0x70
 80047ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80047b0:	b003      	add	sp, #12
 80047b2:	4770      	bx	lr
 80047b4:	2000000c 	.word	0x2000000c
 80047b8:	ffff0208 	.word	0xffff0208

080047bc <__ssputs_r>:
 80047bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c0:	688e      	ldr	r6, [r1, #8]
 80047c2:	429e      	cmp	r6, r3
 80047c4:	4682      	mov	sl, r0
 80047c6:	460c      	mov	r4, r1
 80047c8:	4690      	mov	r8, r2
 80047ca:	4699      	mov	r9, r3
 80047cc:	d837      	bhi.n	800483e <__ssputs_r+0x82>
 80047ce:	898a      	ldrh	r2, [r1, #12]
 80047d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047d4:	d031      	beq.n	800483a <__ssputs_r+0x7e>
 80047d6:	6825      	ldr	r5, [r4, #0]
 80047d8:	6909      	ldr	r1, [r1, #16]
 80047da:	1a6f      	subs	r7, r5, r1
 80047dc:	6965      	ldr	r5, [r4, #20]
 80047de:	2302      	movs	r3, #2
 80047e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80047e8:	f109 0301 	add.w	r3, r9, #1
 80047ec:	443b      	add	r3, r7
 80047ee:	429d      	cmp	r5, r3
 80047f0:	bf38      	it	cc
 80047f2:	461d      	movcc	r5, r3
 80047f4:	0553      	lsls	r3, r2, #21
 80047f6:	d530      	bpl.n	800485a <__ssputs_r+0x9e>
 80047f8:	4629      	mov	r1, r5
 80047fa:	f000 fb2b 	bl	8004e54 <_malloc_r>
 80047fe:	4606      	mov	r6, r0
 8004800:	b950      	cbnz	r0, 8004818 <__ssputs_r+0x5c>
 8004802:	230c      	movs	r3, #12
 8004804:	f8ca 3000 	str.w	r3, [sl]
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800480e:	81a3      	strh	r3, [r4, #12]
 8004810:	f04f 30ff 	mov.w	r0, #4294967295
 8004814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004818:	463a      	mov	r2, r7
 800481a:	6921      	ldr	r1, [r4, #16]
 800481c:	f000 faa8 	bl	8004d70 <memcpy>
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800482a:	81a3      	strh	r3, [r4, #12]
 800482c:	6126      	str	r6, [r4, #16]
 800482e:	6165      	str	r5, [r4, #20]
 8004830:	443e      	add	r6, r7
 8004832:	1bed      	subs	r5, r5, r7
 8004834:	6026      	str	r6, [r4, #0]
 8004836:	60a5      	str	r5, [r4, #8]
 8004838:	464e      	mov	r6, r9
 800483a:	454e      	cmp	r6, r9
 800483c:	d900      	bls.n	8004840 <__ssputs_r+0x84>
 800483e:	464e      	mov	r6, r9
 8004840:	4632      	mov	r2, r6
 8004842:	4641      	mov	r1, r8
 8004844:	6820      	ldr	r0, [r4, #0]
 8004846:	f000 fa9e 	bl	8004d86 <memmove>
 800484a:	68a3      	ldr	r3, [r4, #8]
 800484c:	1b9b      	subs	r3, r3, r6
 800484e:	60a3      	str	r3, [r4, #8]
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	441e      	add	r6, r3
 8004854:	6026      	str	r6, [r4, #0]
 8004856:	2000      	movs	r0, #0
 8004858:	e7dc      	b.n	8004814 <__ssputs_r+0x58>
 800485a:	462a      	mov	r2, r5
 800485c:	f000 fb54 	bl	8004f08 <_realloc_r>
 8004860:	4606      	mov	r6, r0
 8004862:	2800      	cmp	r0, #0
 8004864:	d1e2      	bne.n	800482c <__ssputs_r+0x70>
 8004866:	6921      	ldr	r1, [r4, #16]
 8004868:	4650      	mov	r0, sl
 800486a:	f000 faa5 	bl	8004db8 <_free_r>
 800486e:	e7c8      	b.n	8004802 <__ssputs_r+0x46>

08004870 <_svfiprintf_r>:
 8004870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004874:	461d      	mov	r5, r3
 8004876:	898b      	ldrh	r3, [r1, #12]
 8004878:	061f      	lsls	r7, r3, #24
 800487a:	b09d      	sub	sp, #116	; 0x74
 800487c:	4680      	mov	r8, r0
 800487e:	460c      	mov	r4, r1
 8004880:	4616      	mov	r6, r2
 8004882:	d50f      	bpl.n	80048a4 <_svfiprintf_r+0x34>
 8004884:	690b      	ldr	r3, [r1, #16]
 8004886:	b96b      	cbnz	r3, 80048a4 <_svfiprintf_r+0x34>
 8004888:	2140      	movs	r1, #64	; 0x40
 800488a:	f000 fae3 	bl	8004e54 <_malloc_r>
 800488e:	6020      	str	r0, [r4, #0]
 8004890:	6120      	str	r0, [r4, #16]
 8004892:	b928      	cbnz	r0, 80048a0 <_svfiprintf_r+0x30>
 8004894:	230c      	movs	r3, #12
 8004896:	f8c8 3000 	str.w	r3, [r8]
 800489a:	f04f 30ff 	mov.w	r0, #4294967295
 800489e:	e0c8      	b.n	8004a32 <_svfiprintf_r+0x1c2>
 80048a0:	2340      	movs	r3, #64	; 0x40
 80048a2:	6163      	str	r3, [r4, #20]
 80048a4:	2300      	movs	r3, #0
 80048a6:	9309      	str	r3, [sp, #36]	; 0x24
 80048a8:	2320      	movs	r3, #32
 80048aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048ae:	2330      	movs	r3, #48	; 0x30
 80048b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048b4:	9503      	str	r5, [sp, #12]
 80048b6:	f04f 0b01 	mov.w	fp, #1
 80048ba:	4637      	mov	r7, r6
 80048bc:	463d      	mov	r5, r7
 80048be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80048c2:	b10b      	cbz	r3, 80048c8 <_svfiprintf_r+0x58>
 80048c4:	2b25      	cmp	r3, #37	; 0x25
 80048c6:	d13e      	bne.n	8004946 <_svfiprintf_r+0xd6>
 80048c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80048cc:	d00b      	beq.n	80048e6 <_svfiprintf_r+0x76>
 80048ce:	4653      	mov	r3, sl
 80048d0:	4632      	mov	r2, r6
 80048d2:	4621      	mov	r1, r4
 80048d4:	4640      	mov	r0, r8
 80048d6:	f7ff ff71 	bl	80047bc <__ssputs_r>
 80048da:	3001      	adds	r0, #1
 80048dc:	f000 80a4 	beq.w	8004a28 <_svfiprintf_r+0x1b8>
 80048e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e2:	4453      	add	r3, sl
 80048e4:	9309      	str	r3, [sp, #36]	; 0x24
 80048e6:	783b      	ldrb	r3, [r7, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 809d 	beq.w	8004a28 <_svfiprintf_r+0x1b8>
 80048ee:	2300      	movs	r3, #0
 80048f0:	f04f 32ff 	mov.w	r2, #4294967295
 80048f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048f8:	9304      	str	r3, [sp, #16]
 80048fa:	9307      	str	r3, [sp, #28]
 80048fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004900:	931a      	str	r3, [sp, #104]	; 0x68
 8004902:	462f      	mov	r7, r5
 8004904:	2205      	movs	r2, #5
 8004906:	f817 1b01 	ldrb.w	r1, [r7], #1
 800490a:	4850      	ldr	r0, [pc, #320]	; (8004a4c <_svfiprintf_r+0x1dc>)
 800490c:	f7fb fc60 	bl	80001d0 <memchr>
 8004910:	9b04      	ldr	r3, [sp, #16]
 8004912:	b9d0      	cbnz	r0, 800494a <_svfiprintf_r+0xda>
 8004914:	06d9      	lsls	r1, r3, #27
 8004916:	bf44      	itt	mi
 8004918:	2220      	movmi	r2, #32
 800491a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800491e:	071a      	lsls	r2, r3, #28
 8004920:	bf44      	itt	mi
 8004922:	222b      	movmi	r2, #43	; 0x2b
 8004924:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004928:	782a      	ldrb	r2, [r5, #0]
 800492a:	2a2a      	cmp	r2, #42	; 0x2a
 800492c:	d015      	beq.n	800495a <_svfiprintf_r+0xea>
 800492e:	9a07      	ldr	r2, [sp, #28]
 8004930:	462f      	mov	r7, r5
 8004932:	2000      	movs	r0, #0
 8004934:	250a      	movs	r5, #10
 8004936:	4639      	mov	r1, r7
 8004938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800493c:	3b30      	subs	r3, #48	; 0x30
 800493e:	2b09      	cmp	r3, #9
 8004940:	d94d      	bls.n	80049de <_svfiprintf_r+0x16e>
 8004942:	b1b8      	cbz	r0, 8004974 <_svfiprintf_r+0x104>
 8004944:	e00f      	b.n	8004966 <_svfiprintf_r+0xf6>
 8004946:	462f      	mov	r7, r5
 8004948:	e7b8      	b.n	80048bc <_svfiprintf_r+0x4c>
 800494a:	4a40      	ldr	r2, [pc, #256]	; (8004a4c <_svfiprintf_r+0x1dc>)
 800494c:	1a80      	subs	r0, r0, r2
 800494e:	fa0b f000 	lsl.w	r0, fp, r0
 8004952:	4318      	orrs	r0, r3
 8004954:	9004      	str	r0, [sp, #16]
 8004956:	463d      	mov	r5, r7
 8004958:	e7d3      	b.n	8004902 <_svfiprintf_r+0x92>
 800495a:	9a03      	ldr	r2, [sp, #12]
 800495c:	1d11      	adds	r1, r2, #4
 800495e:	6812      	ldr	r2, [r2, #0]
 8004960:	9103      	str	r1, [sp, #12]
 8004962:	2a00      	cmp	r2, #0
 8004964:	db01      	blt.n	800496a <_svfiprintf_r+0xfa>
 8004966:	9207      	str	r2, [sp, #28]
 8004968:	e004      	b.n	8004974 <_svfiprintf_r+0x104>
 800496a:	4252      	negs	r2, r2
 800496c:	f043 0302 	orr.w	r3, r3, #2
 8004970:	9207      	str	r2, [sp, #28]
 8004972:	9304      	str	r3, [sp, #16]
 8004974:	783b      	ldrb	r3, [r7, #0]
 8004976:	2b2e      	cmp	r3, #46	; 0x2e
 8004978:	d10c      	bne.n	8004994 <_svfiprintf_r+0x124>
 800497a:	787b      	ldrb	r3, [r7, #1]
 800497c:	2b2a      	cmp	r3, #42	; 0x2a
 800497e:	d133      	bne.n	80049e8 <_svfiprintf_r+0x178>
 8004980:	9b03      	ldr	r3, [sp, #12]
 8004982:	1d1a      	adds	r2, r3, #4
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	9203      	str	r2, [sp, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	bfb8      	it	lt
 800498c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004990:	3702      	adds	r7, #2
 8004992:	9305      	str	r3, [sp, #20]
 8004994:	4d2e      	ldr	r5, [pc, #184]	; (8004a50 <_svfiprintf_r+0x1e0>)
 8004996:	7839      	ldrb	r1, [r7, #0]
 8004998:	2203      	movs	r2, #3
 800499a:	4628      	mov	r0, r5
 800499c:	f7fb fc18 	bl	80001d0 <memchr>
 80049a0:	b138      	cbz	r0, 80049b2 <_svfiprintf_r+0x142>
 80049a2:	2340      	movs	r3, #64	; 0x40
 80049a4:	1b40      	subs	r0, r0, r5
 80049a6:	fa03 f000 	lsl.w	r0, r3, r0
 80049aa:	9b04      	ldr	r3, [sp, #16]
 80049ac:	4303      	orrs	r3, r0
 80049ae:	3701      	adds	r7, #1
 80049b0:	9304      	str	r3, [sp, #16]
 80049b2:	7839      	ldrb	r1, [r7, #0]
 80049b4:	4827      	ldr	r0, [pc, #156]	; (8004a54 <_svfiprintf_r+0x1e4>)
 80049b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049ba:	2206      	movs	r2, #6
 80049bc:	1c7e      	adds	r6, r7, #1
 80049be:	f7fb fc07 	bl	80001d0 <memchr>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d038      	beq.n	8004a38 <_svfiprintf_r+0x1c8>
 80049c6:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <_svfiprintf_r+0x1e8>)
 80049c8:	bb13      	cbnz	r3, 8004a10 <_svfiprintf_r+0x1a0>
 80049ca:	9b03      	ldr	r3, [sp, #12]
 80049cc:	3307      	adds	r3, #7
 80049ce:	f023 0307 	bic.w	r3, r3, #7
 80049d2:	3308      	adds	r3, #8
 80049d4:	9303      	str	r3, [sp, #12]
 80049d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049d8:	444b      	add	r3, r9
 80049da:	9309      	str	r3, [sp, #36]	; 0x24
 80049dc:	e76d      	b.n	80048ba <_svfiprintf_r+0x4a>
 80049de:	fb05 3202 	mla	r2, r5, r2, r3
 80049e2:	2001      	movs	r0, #1
 80049e4:	460f      	mov	r7, r1
 80049e6:	e7a6      	b.n	8004936 <_svfiprintf_r+0xc6>
 80049e8:	2300      	movs	r3, #0
 80049ea:	3701      	adds	r7, #1
 80049ec:	9305      	str	r3, [sp, #20]
 80049ee:	4619      	mov	r1, r3
 80049f0:	250a      	movs	r5, #10
 80049f2:	4638      	mov	r0, r7
 80049f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049f8:	3a30      	subs	r2, #48	; 0x30
 80049fa:	2a09      	cmp	r2, #9
 80049fc:	d903      	bls.n	8004a06 <_svfiprintf_r+0x196>
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0c8      	beq.n	8004994 <_svfiprintf_r+0x124>
 8004a02:	9105      	str	r1, [sp, #20]
 8004a04:	e7c6      	b.n	8004994 <_svfiprintf_r+0x124>
 8004a06:	fb05 2101 	mla	r1, r5, r1, r2
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	4607      	mov	r7, r0
 8004a0e:	e7f0      	b.n	80049f2 <_svfiprintf_r+0x182>
 8004a10:	ab03      	add	r3, sp, #12
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	4622      	mov	r2, r4
 8004a16:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <_svfiprintf_r+0x1ec>)
 8004a18:	a904      	add	r1, sp, #16
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	f3af 8000 	nop.w
 8004a20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004a24:	4681      	mov	r9, r0
 8004a26:	d1d6      	bne.n	80049d6 <_svfiprintf_r+0x166>
 8004a28:	89a3      	ldrh	r3, [r4, #12]
 8004a2a:	065b      	lsls	r3, r3, #25
 8004a2c:	f53f af35 	bmi.w	800489a <_svfiprintf_r+0x2a>
 8004a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a32:	b01d      	add	sp, #116	; 0x74
 8004a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a38:	ab03      	add	r3, sp, #12
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <_svfiprintf_r+0x1ec>)
 8004a40:	a904      	add	r1, sp, #16
 8004a42:	4640      	mov	r0, r8
 8004a44:	f000 f882 	bl	8004b4c <_printf_i>
 8004a48:	e7ea      	b.n	8004a20 <_svfiprintf_r+0x1b0>
 8004a4a:	bf00      	nop
 8004a4c:	08004fe4 	.word	0x08004fe4
 8004a50:	08004fea 	.word	0x08004fea
 8004a54:	08004fee 	.word	0x08004fee
 8004a58:	00000000 	.word	0x00000000
 8004a5c:	080047bd 	.word	0x080047bd

08004a60 <_printf_common>:
 8004a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a64:	4691      	mov	r9, r2
 8004a66:	461f      	mov	r7, r3
 8004a68:	688a      	ldr	r2, [r1, #8]
 8004a6a:	690b      	ldr	r3, [r1, #16]
 8004a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a70:	4293      	cmp	r3, r2
 8004a72:	bfb8      	it	lt
 8004a74:	4613      	movlt	r3, r2
 8004a76:	f8c9 3000 	str.w	r3, [r9]
 8004a7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a7e:	4606      	mov	r6, r0
 8004a80:	460c      	mov	r4, r1
 8004a82:	b112      	cbz	r2, 8004a8a <_printf_common+0x2a>
 8004a84:	3301      	adds	r3, #1
 8004a86:	f8c9 3000 	str.w	r3, [r9]
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	0699      	lsls	r1, r3, #26
 8004a8e:	bf42      	ittt	mi
 8004a90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a94:	3302      	addmi	r3, #2
 8004a96:	f8c9 3000 	strmi.w	r3, [r9]
 8004a9a:	6825      	ldr	r5, [r4, #0]
 8004a9c:	f015 0506 	ands.w	r5, r5, #6
 8004aa0:	d107      	bne.n	8004ab2 <_printf_common+0x52>
 8004aa2:	f104 0a19 	add.w	sl, r4, #25
 8004aa6:	68e3      	ldr	r3, [r4, #12]
 8004aa8:	f8d9 2000 	ldr.w	r2, [r9]
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	42ab      	cmp	r3, r5
 8004ab0:	dc28      	bgt.n	8004b04 <_printf_common+0xa4>
 8004ab2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ab6:	6822      	ldr	r2, [r4, #0]
 8004ab8:	3300      	adds	r3, #0
 8004aba:	bf18      	it	ne
 8004abc:	2301      	movne	r3, #1
 8004abe:	0692      	lsls	r2, r2, #26
 8004ac0:	d42d      	bmi.n	8004b1e <_printf_common+0xbe>
 8004ac2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ac6:	4639      	mov	r1, r7
 8004ac8:	4630      	mov	r0, r6
 8004aca:	47c0      	blx	r8
 8004acc:	3001      	adds	r0, #1
 8004ace:	d020      	beq.n	8004b12 <_printf_common+0xb2>
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	68e5      	ldr	r5, [r4, #12]
 8004ad4:	f8d9 2000 	ldr.w	r2, [r9]
 8004ad8:	f003 0306 	and.w	r3, r3, #6
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	bf08      	it	eq
 8004ae0:	1aad      	subeq	r5, r5, r2
 8004ae2:	68a3      	ldr	r3, [r4, #8]
 8004ae4:	6922      	ldr	r2, [r4, #16]
 8004ae6:	bf0c      	ite	eq
 8004ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aec:	2500      	movne	r5, #0
 8004aee:	4293      	cmp	r3, r2
 8004af0:	bfc4      	itt	gt
 8004af2:	1a9b      	subgt	r3, r3, r2
 8004af4:	18ed      	addgt	r5, r5, r3
 8004af6:	f04f 0900 	mov.w	r9, #0
 8004afa:	341a      	adds	r4, #26
 8004afc:	454d      	cmp	r5, r9
 8004afe:	d11a      	bne.n	8004b36 <_printf_common+0xd6>
 8004b00:	2000      	movs	r0, #0
 8004b02:	e008      	b.n	8004b16 <_printf_common+0xb6>
 8004b04:	2301      	movs	r3, #1
 8004b06:	4652      	mov	r2, sl
 8004b08:	4639      	mov	r1, r7
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	47c0      	blx	r8
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d103      	bne.n	8004b1a <_printf_common+0xba>
 8004b12:	f04f 30ff 	mov.w	r0, #4294967295
 8004b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1a:	3501      	adds	r5, #1
 8004b1c:	e7c3      	b.n	8004aa6 <_printf_common+0x46>
 8004b1e:	18e1      	adds	r1, r4, r3
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	2030      	movs	r0, #48	; 0x30
 8004b24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b28:	4422      	add	r2, r4
 8004b2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b32:	3302      	adds	r3, #2
 8004b34:	e7c5      	b.n	8004ac2 <_printf_common+0x62>
 8004b36:	2301      	movs	r3, #1
 8004b38:	4622      	mov	r2, r4
 8004b3a:	4639      	mov	r1, r7
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	47c0      	blx	r8
 8004b40:	3001      	adds	r0, #1
 8004b42:	d0e6      	beq.n	8004b12 <_printf_common+0xb2>
 8004b44:	f109 0901 	add.w	r9, r9, #1
 8004b48:	e7d8      	b.n	8004afc <_printf_common+0x9c>
	...

08004b4c <_printf_i>:
 8004b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b54:	460c      	mov	r4, r1
 8004b56:	7e09      	ldrb	r1, [r1, #24]
 8004b58:	b085      	sub	sp, #20
 8004b5a:	296e      	cmp	r1, #110	; 0x6e
 8004b5c:	4617      	mov	r7, r2
 8004b5e:	4606      	mov	r6, r0
 8004b60:	4698      	mov	r8, r3
 8004b62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b64:	f000 80b3 	beq.w	8004cce <_printf_i+0x182>
 8004b68:	d822      	bhi.n	8004bb0 <_printf_i+0x64>
 8004b6a:	2963      	cmp	r1, #99	; 0x63
 8004b6c:	d036      	beq.n	8004bdc <_printf_i+0x90>
 8004b6e:	d80a      	bhi.n	8004b86 <_printf_i+0x3a>
 8004b70:	2900      	cmp	r1, #0
 8004b72:	f000 80b9 	beq.w	8004ce8 <_printf_i+0x19c>
 8004b76:	2958      	cmp	r1, #88	; 0x58
 8004b78:	f000 8083 	beq.w	8004c82 <_printf_i+0x136>
 8004b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b84:	e032      	b.n	8004bec <_printf_i+0xa0>
 8004b86:	2964      	cmp	r1, #100	; 0x64
 8004b88:	d001      	beq.n	8004b8e <_printf_i+0x42>
 8004b8a:	2969      	cmp	r1, #105	; 0x69
 8004b8c:	d1f6      	bne.n	8004b7c <_printf_i+0x30>
 8004b8e:	6820      	ldr	r0, [r4, #0]
 8004b90:	6813      	ldr	r3, [r2, #0]
 8004b92:	0605      	lsls	r5, r0, #24
 8004b94:	f103 0104 	add.w	r1, r3, #4
 8004b98:	d52a      	bpl.n	8004bf0 <_printf_i+0xa4>
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6011      	str	r1, [r2, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	da03      	bge.n	8004baa <_printf_i+0x5e>
 8004ba2:	222d      	movs	r2, #45	; 0x2d
 8004ba4:	425b      	negs	r3, r3
 8004ba6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004baa:	486f      	ldr	r0, [pc, #444]	; (8004d68 <_printf_i+0x21c>)
 8004bac:	220a      	movs	r2, #10
 8004bae:	e039      	b.n	8004c24 <_printf_i+0xd8>
 8004bb0:	2973      	cmp	r1, #115	; 0x73
 8004bb2:	f000 809d 	beq.w	8004cf0 <_printf_i+0x1a4>
 8004bb6:	d808      	bhi.n	8004bca <_printf_i+0x7e>
 8004bb8:	296f      	cmp	r1, #111	; 0x6f
 8004bba:	d020      	beq.n	8004bfe <_printf_i+0xb2>
 8004bbc:	2970      	cmp	r1, #112	; 0x70
 8004bbe:	d1dd      	bne.n	8004b7c <_printf_i+0x30>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	f043 0320 	orr.w	r3, r3, #32
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	e003      	b.n	8004bd2 <_printf_i+0x86>
 8004bca:	2975      	cmp	r1, #117	; 0x75
 8004bcc:	d017      	beq.n	8004bfe <_printf_i+0xb2>
 8004bce:	2978      	cmp	r1, #120	; 0x78
 8004bd0:	d1d4      	bne.n	8004b7c <_printf_i+0x30>
 8004bd2:	2378      	movs	r3, #120	; 0x78
 8004bd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bd8:	4864      	ldr	r0, [pc, #400]	; (8004d6c <_printf_i+0x220>)
 8004bda:	e055      	b.n	8004c88 <_printf_i+0x13c>
 8004bdc:	6813      	ldr	r3, [r2, #0]
 8004bde:	1d19      	adds	r1, r3, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6011      	str	r1, [r2, #0]
 8004be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bec:	2301      	movs	r3, #1
 8004bee:	e08c      	b.n	8004d0a <_printf_i+0x1be>
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6011      	str	r1, [r2, #0]
 8004bf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bf8:	bf18      	it	ne
 8004bfa:	b21b      	sxthne	r3, r3
 8004bfc:	e7cf      	b.n	8004b9e <_printf_i+0x52>
 8004bfe:	6813      	ldr	r3, [r2, #0]
 8004c00:	6825      	ldr	r5, [r4, #0]
 8004c02:	1d18      	adds	r0, r3, #4
 8004c04:	6010      	str	r0, [r2, #0]
 8004c06:	0628      	lsls	r0, r5, #24
 8004c08:	d501      	bpl.n	8004c0e <_printf_i+0xc2>
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	e002      	b.n	8004c14 <_printf_i+0xc8>
 8004c0e:	0668      	lsls	r0, r5, #25
 8004c10:	d5fb      	bpl.n	8004c0a <_printf_i+0xbe>
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	4854      	ldr	r0, [pc, #336]	; (8004d68 <_printf_i+0x21c>)
 8004c16:	296f      	cmp	r1, #111	; 0x6f
 8004c18:	bf14      	ite	ne
 8004c1a:	220a      	movne	r2, #10
 8004c1c:	2208      	moveq	r2, #8
 8004c1e:	2100      	movs	r1, #0
 8004c20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c24:	6865      	ldr	r5, [r4, #4]
 8004c26:	60a5      	str	r5, [r4, #8]
 8004c28:	2d00      	cmp	r5, #0
 8004c2a:	f2c0 8095 	blt.w	8004d58 <_printf_i+0x20c>
 8004c2e:	6821      	ldr	r1, [r4, #0]
 8004c30:	f021 0104 	bic.w	r1, r1, #4
 8004c34:	6021      	str	r1, [r4, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d13d      	bne.n	8004cb6 <_printf_i+0x16a>
 8004c3a:	2d00      	cmp	r5, #0
 8004c3c:	f040 808e 	bne.w	8004d5c <_printf_i+0x210>
 8004c40:	4665      	mov	r5, ip
 8004c42:	2a08      	cmp	r2, #8
 8004c44:	d10b      	bne.n	8004c5e <_printf_i+0x112>
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	07db      	lsls	r3, r3, #31
 8004c4a:	d508      	bpl.n	8004c5e <_printf_i+0x112>
 8004c4c:	6923      	ldr	r3, [r4, #16]
 8004c4e:	6862      	ldr	r2, [r4, #4]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	bfde      	ittt	le
 8004c54:	2330      	movle	r3, #48	; 0x30
 8004c56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c5e:	ebac 0305 	sub.w	r3, ip, r5
 8004c62:	6123      	str	r3, [r4, #16]
 8004c64:	f8cd 8000 	str.w	r8, [sp]
 8004c68:	463b      	mov	r3, r7
 8004c6a:	aa03      	add	r2, sp, #12
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f7ff fef6 	bl	8004a60 <_printf_common>
 8004c74:	3001      	adds	r0, #1
 8004c76:	d14d      	bne.n	8004d14 <_printf_i+0x1c8>
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	b005      	add	sp, #20
 8004c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c82:	4839      	ldr	r0, [pc, #228]	; (8004d68 <_printf_i+0x21c>)
 8004c84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c88:	6813      	ldr	r3, [r2, #0]
 8004c8a:	6821      	ldr	r1, [r4, #0]
 8004c8c:	1d1d      	adds	r5, r3, #4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6015      	str	r5, [r2, #0]
 8004c92:	060a      	lsls	r2, r1, #24
 8004c94:	d50b      	bpl.n	8004cae <_printf_i+0x162>
 8004c96:	07ca      	lsls	r2, r1, #31
 8004c98:	bf44      	itt	mi
 8004c9a:	f041 0120 	orrmi.w	r1, r1, #32
 8004c9e:	6021      	strmi	r1, [r4, #0]
 8004ca0:	b91b      	cbnz	r3, 8004caa <_printf_i+0x15e>
 8004ca2:	6822      	ldr	r2, [r4, #0]
 8004ca4:	f022 0220 	bic.w	r2, r2, #32
 8004ca8:	6022      	str	r2, [r4, #0]
 8004caa:	2210      	movs	r2, #16
 8004cac:	e7b7      	b.n	8004c1e <_printf_i+0xd2>
 8004cae:	064d      	lsls	r5, r1, #25
 8004cb0:	bf48      	it	mi
 8004cb2:	b29b      	uxthmi	r3, r3
 8004cb4:	e7ef      	b.n	8004c96 <_printf_i+0x14a>
 8004cb6:	4665      	mov	r5, ip
 8004cb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cbc:	fb02 3311 	mls	r3, r2, r1, r3
 8004cc0:	5cc3      	ldrb	r3, [r0, r3]
 8004cc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	2900      	cmp	r1, #0
 8004cca:	d1f5      	bne.n	8004cb8 <_printf_i+0x16c>
 8004ccc:	e7b9      	b.n	8004c42 <_printf_i+0xf6>
 8004cce:	6813      	ldr	r3, [r2, #0]
 8004cd0:	6825      	ldr	r5, [r4, #0]
 8004cd2:	6961      	ldr	r1, [r4, #20]
 8004cd4:	1d18      	adds	r0, r3, #4
 8004cd6:	6010      	str	r0, [r2, #0]
 8004cd8:	0628      	lsls	r0, r5, #24
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	d501      	bpl.n	8004ce2 <_printf_i+0x196>
 8004cde:	6019      	str	r1, [r3, #0]
 8004ce0:	e002      	b.n	8004ce8 <_printf_i+0x19c>
 8004ce2:	066a      	lsls	r2, r5, #25
 8004ce4:	d5fb      	bpl.n	8004cde <_printf_i+0x192>
 8004ce6:	8019      	strh	r1, [r3, #0]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	6123      	str	r3, [r4, #16]
 8004cec:	4665      	mov	r5, ip
 8004cee:	e7b9      	b.n	8004c64 <_printf_i+0x118>
 8004cf0:	6813      	ldr	r3, [r2, #0]
 8004cf2:	1d19      	adds	r1, r3, #4
 8004cf4:	6011      	str	r1, [r2, #0]
 8004cf6:	681d      	ldr	r5, [r3, #0]
 8004cf8:	6862      	ldr	r2, [r4, #4]
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	f7fb fa67 	bl	80001d0 <memchr>
 8004d02:	b108      	cbz	r0, 8004d08 <_printf_i+0x1bc>
 8004d04:	1b40      	subs	r0, r0, r5
 8004d06:	6060      	str	r0, [r4, #4]
 8004d08:	6863      	ldr	r3, [r4, #4]
 8004d0a:	6123      	str	r3, [r4, #16]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d12:	e7a7      	b.n	8004c64 <_printf_i+0x118>
 8004d14:	6923      	ldr	r3, [r4, #16]
 8004d16:	462a      	mov	r2, r5
 8004d18:	4639      	mov	r1, r7
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	47c0      	blx	r8
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d0aa      	beq.n	8004c78 <_printf_i+0x12c>
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	079b      	lsls	r3, r3, #30
 8004d26:	d413      	bmi.n	8004d50 <_printf_i+0x204>
 8004d28:	68e0      	ldr	r0, [r4, #12]
 8004d2a:	9b03      	ldr	r3, [sp, #12]
 8004d2c:	4298      	cmp	r0, r3
 8004d2e:	bfb8      	it	lt
 8004d30:	4618      	movlt	r0, r3
 8004d32:	e7a3      	b.n	8004c7c <_printf_i+0x130>
 8004d34:	2301      	movs	r3, #1
 8004d36:	464a      	mov	r2, r9
 8004d38:	4639      	mov	r1, r7
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	47c0      	blx	r8
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d09a      	beq.n	8004c78 <_printf_i+0x12c>
 8004d42:	3501      	adds	r5, #1
 8004d44:	68e3      	ldr	r3, [r4, #12]
 8004d46:	9a03      	ldr	r2, [sp, #12]
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	42ab      	cmp	r3, r5
 8004d4c:	dcf2      	bgt.n	8004d34 <_printf_i+0x1e8>
 8004d4e:	e7eb      	b.n	8004d28 <_printf_i+0x1dc>
 8004d50:	2500      	movs	r5, #0
 8004d52:	f104 0919 	add.w	r9, r4, #25
 8004d56:	e7f5      	b.n	8004d44 <_printf_i+0x1f8>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1ac      	bne.n	8004cb6 <_printf_i+0x16a>
 8004d5c:	7803      	ldrb	r3, [r0, #0]
 8004d5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d66:	e76c      	b.n	8004c42 <_printf_i+0xf6>
 8004d68:	08004ff5 	.word	0x08004ff5
 8004d6c:	08005006 	.word	0x08005006

08004d70 <memcpy>:
 8004d70:	b510      	push	{r4, lr}
 8004d72:	1e43      	subs	r3, r0, #1
 8004d74:	440a      	add	r2, r1
 8004d76:	4291      	cmp	r1, r2
 8004d78:	d100      	bne.n	8004d7c <memcpy+0xc>
 8004d7a:	bd10      	pop	{r4, pc}
 8004d7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d84:	e7f7      	b.n	8004d76 <memcpy+0x6>

08004d86 <memmove>:
 8004d86:	4288      	cmp	r0, r1
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	eb01 0302 	add.w	r3, r1, r2
 8004d8e:	d807      	bhi.n	8004da0 <memmove+0x1a>
 8004d90:	1e42      	subs	r2, r0, #1
 8004d92:	4299      	cmp	r1, r3
 8004d94:	d00a      	beq.n	8004dac <memmove+0x26>
 8004d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d9a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004d9e:	e7f8      	b.n	8004d92 <memmove+0xc>
 8004da0:	4283      	cmp	r3, r0
 8004da2:	d9f5      	bls.n	8004d90 <memmove+0xa>
 8004da4:	1881      	adds	r1, r0, r2
 8004da6:	1ad2      	subs	r2, r2, r3
 8004da8:	42d3      	cmn	r3, r2
 8004daa:	d100      	bne.n	8004dae <memmove+0x28>
 8004dac:	bd10      	pop	{r4, pc}
 8004dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004db2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004db6:	e7f7      	b.n	8004da8 <memmove+0x22>

08004db8 <_free_r>:
 8004db8:	b538      	push	{r3, r4, r5, lr}
 8004dba:	4605      	mov	r5, r0
 8004dbc:	2900      	cmp	r1, #0
 8004dbe:	d045      	beq.n	8004e4c <_free_r+0x94>
 8004dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dc4:	1f0c      	subs	r4, r1, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bfb8      	it	lt
 8004dca:	18e4      	addlt	r4, r4, r3
 8004dcc:	f000 f8d2 	bl	8004f74 <__malloc_lock>
 8004dd0:	4a1f      	ldr	r2, [pc, #124]	; (8004e50 <_free_r+0x98>)
 8004dd2:	6813      	ldr	r3, [r2, #0]
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	b933      	cbnz	r3, 8004de6 <_free_r+0x2e>
 8004dd8:	6063      	str	r3, [r4, #4]
 8004dda:	6014      	str	r4, [r2, #0]
 8004ddc:	4628      	mov	r0, r5
 8004dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004de2:	f000 b8c8 	b.w	8004f76 <__malloc_unlock>
 8004de6:	42a3      	cmp	r3, r4
 8004de8:	d90c      	bls.n	8004e04 <_free_r+0x4c>
 8004dea:	6821      	ldr	r1, [r4, #0]
 8004dec:	1862      	adds	r2, r4, r1
 8004dee:	4293      	cmp	r3, r2
 8004df0:	bf04      	itt	eq
 8004df2:	681a      	ldreq	r2, [r3, #0]
 8004df4:	685b      	ldreq	r3, [r3, #4]
 8004df6:	6063      	str	r3, [r4, #4]
 8004df8:	bf04      	itt	eq
 8004dfa:	1852      	addeq	r2, r2, r1
 8004dfc:	6022      	streq	r2, [r4, #0]
 8004dfe:	6004      	str	r4, [r0, #0]
 8004e00:	e7ec      	b.n	8004ddc <_free_r+0x24>
 8004e02:	4613      	mov	r3, r2
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	b10a      	cbz	r2, 8004e0c <_free_r+0x54>
 8004e08:	42a2      	cmp	r2, r4
 8004e0a:	d9fa      	bls.n	8004e02 <_free_r+0x4a>
 8004e0c:	6819      	ldr	r1, [r3, #0]
 8004e0e:	1858      	adds	r0, r3, r1
 8004e10:	42a0      	cmp	r0, r4
 8004e12:	d10b      	bne.n	8004e2c <_free_r+0x74>
 8004e14:	6820      	ldr	r0, [r4, #0]
 8004e16:	4401      	add	r1, r0
 8004e18:	1858      	adds	r0, r3, r1
 8004e1a:	4282      	cmp	r2, r0
 8004e1c:	6019      	str	r1, [r3, #0]
 8004e1e:	d1dd      	bne.n	8004ddc <_free_r+0x24>
 8004e20:	6810      	ldr	r0, [r2, #0]
 8004e22:	6852      	ldr	r2, [r2, #4]
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	4401      	add	r1, r0
 8004e28:	6019      	str	r1, [r3, #0]
 8004e2a:	e7d7      	b.n	8004ddc <_free_r+0x24>
 8004e2c:	d902      	bls.n	8004e34 <_free_r+0x7c>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	602b      	str	r3, [r5, #0]
 8004e32:	e7d3      	b.n	8004ddc <_free_r+0x24>
 8004e34:	6820      	ldr	r0, [r4, #0]
 8004e36:	1821      	adds	r1, r4, r0
 8004e38:	428a      	cmp	r2, r1
 8004e3a:	bf04      	itt	eq
 8004e3c:	6811      	ldreq	r1, [r2, #0]
 8004e3e:	6852      	ldreq	r2, [r2, #4]
 8004e40:	6062      	str	r2, [r4, #4]
 8004e42:	bf04      	itt	eq
 8004e44:	1809      	addeq	r1, r1, r0
 8004e46:	6021      	streq	r1, [r4, #0]
 8004e48:	605c      	str	r4, [r3, #4]
 8004e4a:	e7c7      	b.n	8004ddc <_free_r+0x24>
 8004e4c:	bd38      	pop	{r3, r4, r5, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000090 	.word	0x20000090

08004e54 <_malloc_r>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	1ccd      	adds	r5, r1, #3
 8004e58:	f025 0503 	bic.w	r5, r5, #3
 8004e5c:	3508      	adds	r5, #8
 8004e5e:	2d0c      	cmp	r5, #12
 8004e60:	bf38      	it	cc
 8004e62:	250c      	movcc	r5, #12
 8004e64:	2d00      	cmp	r5, #0
 8004e66:	4606      	mov	r6, r0
 8004e68:	db01      	blt.n	8004e6e <_malloc_r+0x1a>
 8004e6a:	42a9      	cmp	r1, r5
 8004e6c:	d903      	bls.n	8004e76 <_malloc_r+0x22>
 8004e6e:	230c      	movs	r3, #12
 8004e70:	6033      	str	r3, [r6, #0]
 8004e72:	2000      	movs	r0, #0
 8004e74:	bd70      	pop	{r4, r5, r6, pc}
 8004e76:	f000 f87d 	bl	8004f74 <__malloc_lock>
 8004e7a:	4a21      	ldr	r2, [pc, #132]	; (8004f00 <_malloc_r+0xac>)
 8004e7c:	6814      	ldr	r4, [r2, #0]
 8004e7e:	4621      	mov	r1, r4
 8004e80:	b991      	cbnz	r1, 8004ea8 <_malloc_r+0x54>
 8004e82:	4c20      	ldr	r4, [pc, #128]	; (8004f04 <_malloc_r+0xb0>)
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	b91b      	cbnz	r3, 8004e90 <_malloc_r+0x3c>
 8004e88:	4630      	mov	r0, r6
 8004e8a:	f000 f863 	bl	8004f54 <_sbrk_r>
 8004e8e:	6020      	str	r0, [r4, #0]
 8004e90:	4629      	mov	r1, r5
 8004e92:	4630      	mov	r0, r6
 8004e94:	f000 f85e 	bl	8004f54 <_sbrk_r>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d124      	bne.n	8004ee6 <_malloc_r+0x92>
 8004e9c:	230c      	movs	r3, #12
 8004e9e:	6033      	str	r3, [r6, #0]
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f000 f868 	bl	8004f76 <__malloc_unlock>
 8004ea6:	e7e4      	b.n	8004e72 <_malloc_r+0x1e>
 8004ea8:	680b      	ldr	r3, [r1, #0]
 8004eaa:	1b5b      	subs	r3, r3, r5
 8004eac:	d418      	bmi.n	8004ee0 <_malloc_r+0x8c>
 8004eae:	2b0b      	cmp	r3, #11
 8004eb0:	d90f      	bls.n	8004ed2 <_malloc_r+0x7e>
 8004eb2:	600b      	str	r3, [r1, #0]
 8004eb4:	50cd      	str	r5, [r1, r3]
 8004eb6:	18cc      	adds	r4, r1, r3
 8004eb8:	4630      	mov	r0, r6
 8004eba:	f000 f85c 	bl	8004f76 <__malloc_unlock>
 8004ebe:	f104 000b 	add.w	r0, r4, #11
 8004ec2:	1d23      	adds	r3, r4, #4
 8004ec4:	f020 0007 	bic.w	r0, r0, #7
 8004ec8:	1ac3      	subs	r3, r0, r3
 8004eca:	d0d3      	beq.n	8004e74 <_malloc_r+0x20>
 8004ecc:	425a      	negs	r2, r3
 8004ece:	50e2      	str	r2, [r4, r3]
 8004ed0:	e7d0      	b.n	8004e74 <_malloc_r+0x20>
 8004ed2:	428c      	cmp	r4, r1
 8004ed4:	684b      	ldr	r3, [r1, #4]
 8004ed6:	bf16      	itet	ne
 8004ed8:	6063      	strne	r3, [r4, #4]
 8004eda:	6013      	streq	r3, [r2, #0]
 8004edc:	460c      	movne	r4, r1
 8004ede:	e7eb      	b.n	8004eb8 <_malloc_r+0x64>
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	6849      	ldr	r1, [r1, #4]
 8004ee4:	e7cc      	b.n	8004e80 <_malloc_r+0x2c>
 8004ee6:	1cc4      	adds	r4, r0, #3
 8004ee8:	f024 0403 	bic.w	r4, r4, #3
 8004eec:	42a0      	cmp	r0, r4
 8004eee:	d005      	beq.n	8004efc <_malloc_r+0xa8>
 8004ef0:	1a21      	subs	r1, r4, r0
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f000 f82e 	bl	8004f54 <_sbrk_r>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d0cf      	beq.n	8004e9c <_malloc_r+0x48>
 8004efc:	6025      	str	r5, [r4, #0]
 8004efe:	e7db      	b.n	8004eb8 <_malloc_r+0x64>
 8004f00:	20000090 	.word	0x20000090
 8004f04:	20000094 	.word	0x20000094

08004f08 <_realloc_r>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	4607      	mov	r7, r0
 8004f0c:	4614      	mov	r4, r2
 8004f0e:	460e      	mov	r6, r1
 8004f10:	b921      	cbnz	r1, 8004f1c <_realloc_r+0x14>
 8004f12:	4611      	mov	r1, r2
 8004f14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f18:	f7ff bf9c 	b.w	8004e54 <_malloc_r>
 8004f1c:	b922      	cbnz	r2, 8004f28 <_realloc_r+0x20>
 8004f1e:	f7ff ff4b 	bl	8004db8 <_free_r>
 8004f22:	4625      	mov	r5, r4
 8004f24:	4628      	mov	r0, r5
 8004f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f28:	f000 f826 	bl	8004f78 <_malloc_usable_size_r>
 8004f2c:	42a0      	cmp	r0, r4
 8004f2e:	d20f      	bcs.n	8004f50 <_realloc_r+0x48>
 8004f30:	4621      	mov	r1, r4
 8004f32:	4638      	mov	r0, r7
 8004f34:	f7ff ff8e 	bl	8004e54 <_malloc_r>
 8004f38:	4605      	mov	r5, r0
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d0f2      	beq.n	8004f24 <_realloc_r+0x1c>
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4622      	mov	r2, r4
 8004f42:	f7ff ff15 	bl	8004d70 <memcpy>
 8004f46:	4631      	mov	r1, r6
 8004f48:	4638      	mov	r0, r7
 8004f4a:	f7ff ff35 	bl	8004db8 <_free_r>
 8004f4e:	e7e9      	b.n	8004f24 <_realloc_r+0x1c>
 8004f50:	4635      	mov	r5, r6
 8004f52:	e7e7      	b.n	8004f24 <_realloc_r+0x1c>

08004f54 <_sbrk_r>:
 8004f54:	b538      	push	{r3, r4, r5, lr}
 8004f56:	4c06      	ldr	r4, [pc, #24]	; (8004f70 <_sbrk_r+0x1c>)
 8004f58:	2300      	movs	r3, #0
 8004f5a:	4605      	mov	r5, r0
 8004f5c:	4608      	mov	r0, r1
 8004f5e:	6023      	str	r3, [r4, #0]
 8004f60:	f7ff fb3a 	bl	80045d8 <_sbrk>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d102      	bne.n	8004f6e <_sbrk_r+0x1a>
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	b103      	cbz	r3, 8004f6e <_sbrk_r+0x1a>
 8004f6c:	602b      	str	r3, [r5, #0]
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	200001a0 	.word	0x200001a0

08004f74 <__malloc_lock>:
 8004f74:	4770      	bx	lr

08004f76 <__malloc_unlock>:
 8004f76:	4770      	bx	lr

08004f78 <_malloc_usable_size_r>:
 8004f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f7c:	1f18      	subs	r0, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bfbc      	itt	lt
 8004f82:	580b      	ldrlt	r3, [r1, r0]
 8004f84:	18c0      	addlt	r0, r0, r3
 8004f86:	4770      	bx	lr

08004f88 <_init>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr

08004f94 <_fini>:
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f96:	bf00      	nop
 8004f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9a:	bc08      	pop	{r3}
 8004f9c:	469e      	mov	lr, r3
 8004f9e:	4770      	bx	lr
