
F466_readtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a38  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002c08  08002c08  00012c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c68  08002c68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c70  08002c70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c70  08002c70  00012c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c74  08002c74  00012c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08002ce8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002ce8  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006985  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000144f  00000000  00000000  00026a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000680  00000000  00000000  00027e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c8  00000000  00000000  000284f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000201c8  00000000  00000000  00028ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005f3d  00000000  00000000  00048c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c71f4  00000000  00000000  0004ebc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00115db9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c64  00000000  00000000  00115e34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002bf0 	.word	0x08002bf0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08002bf0 	.word	0x08002bf0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_Init+0x40>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <HAL_Init+0x40>)
 80005ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_Init+0x40>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <HAL_Init+0x40>)
 80005c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_Init+0x40>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <HAL_Init+0x40>)
 80005d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d8:	2003      	movs	r0, #3
 80005da:	f000 f92f 	bl	800083c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 f808 	bl	80005f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e4:	f001 fd6c 	bl	80020c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023c00 	.word	0x40023c00

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_InitTick+0x54>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_InitTick+0x58>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	fbb3 f3f1 	udiv	r3, r3, r1
 800060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f939 	bl	800088a <HAL_SYSTICK_Config>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	e00e      	b.n	8000640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d80a      	bhi.n	800063e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000628:	2200      	movs	r2, #0
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	f000 f90f 	bl	8000852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <HAL_InitTick+0x5c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000008 	.word	0x20000008
 800064c:	20000004 	.word	0x20000004
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x20>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_IncTick+0x24>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_IncTick+0x24>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000004 	.word	0x20000004
 8000678:	20000098 	.word	0x20000098

0800067c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return uwTick;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <HAL_GetTick+0x14>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000098 	.word	0x20000098

08000694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800069c:	f7ff ffee 	bl	800067c <HAL_GetTick>
 80006a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ac:	d005      	beq.n	80006ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_Delay+0x40>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ba:	bf00      	nop
 80006bc:	f7ff ffde 	bl	800067c <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d8f7      	bhi.n	80006bc <HAL_Delay+0x28>
  {
  }
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000004 	.word	0x20000004

080006d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070a:	4a04      	ldr	r2, [pc, #16]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <__NVIC_GetPriorityGrouping+0x18>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	f003 0307 	and.w	r3, r3, #7
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db0a      	blt.n	8000766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	490c      	ldr	r1, [pc, #48]	; (8000788 <__NVIC_SetPriority+0x4c>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000764:	e00a      	b.n	800077c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4908      	ldr	r1, [pc, #32]	; (800078c <__NVIC_SetPriority+0x50>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	3b04      	subs	r3, #4
 8000774:	0112      	lsls	r2, r2, #4
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	440b      	add	r3, r1
 800077a:	761a      	strb	r2, [r3, #24]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f1c3 0307 	rsb	r3, r3, #7
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	bf28      	it	cs
 80007ae:	2304      	movcs	r3, #4
 80007b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3304      	adds	r3, #4
 80007b6:	2b06      	cmp	r3, #6
 80007b8:	d902      	bls.n	80007c0 <NVIC_EncodePriority+0x30>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3b03      	subs	r3, #3
 80007be:	e000      	b.n	80007c2 <NVIC_EncodePriority+0x32>
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	f04f 32ff 	mov.w	r2, #4294967295
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43da      	mvns	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	401a      	ands	r2, r3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d8:	f04f 31ff 	mov.w	r1, #4294967295
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	43d9      	mvns	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	4313      	orrs	r3, r2
         );
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3724      	adds	r7, #36	; 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000808:	d301      	bcc.n	800080e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080a:	2301      	movs	r3, #1
 800080c:	e00f      	b.n	800082e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <SysTick_Config+0x40>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000816:	210f      	movs	r1, #15
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f7ff ff8e 	bl	800073c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <SysTick_Config+0x40>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <SysTick_Config+0x40>)
 8000828:	2207      	movs	r2, #7
 800082a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	e000e010 	.word	0xe000e010

0800083c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ff47 	bl	80006d8 <__NVIC_SetPriorityGrouping>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000864:	f7ff ff5c 	bl	8000720 <__NVIC_GetPriorityGrouping>
 8000868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	6978      	ldr	r0, [r7, #20]
 8000870:	f7ff ff8e 	bl	8000790 <NVIC_EncodePriority>
 8000874:	4602      	mov	r2, r0
 8000876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff5d 	bl	800073c <__NVIC_SetPriority>
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ffb0 	bl	80007f8 <SysTick_Config>
 8000898:	4603      	mov	r3, r0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
 80008be:	e165      	b.n	8000b8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008c0:	2201      	movs	r2, #1
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	429a      	cmp	r2, r3
 80008da:	f040 8154 	bne.w	8000b86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d003      	beq.n	80008ee <HAL_GPIO_Init+0x4a>
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b12      	cmp	r3, #18
 80008ec:	d123      	bne.n	8000936 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	08da      	lsrs	r2, r3, #3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3208      	adds	r2, #8
 80008f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	220f      	movs	r2, #15
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4013      	ands	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	691a      	ldr	r2, [r3, #16]
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	f003 0307 	and.w	r3, r3, #7
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	4313      	orrs	r3, r2
 8000926:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	08da      	lsrs	r2, r3, #3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3208      	adds	r2, #8
 8000930:	69b9      	ldr	r1, [r7, #24]
 8000932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	2203      	movs	r2, #3
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43db      	mvns	r3, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4013      	ands	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f003 0203 	and.w	r2, r3, #3
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	4313      	orrs	r3, r2
 8000962:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d00b      	beq.n	800098a <HAL_GPIO_Init+0xe6>
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	2b02      	cmp	r3, #2
 8000978:	d007      	beq.n	800098a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800097e:	2b11      	cmp	r3, #17
 8000980:	d003      	beq.n	800098a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	2b12      	cmp	r3, #18
 8000988:	d130      	bne.n	80009ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	2203      	movs	r2, #3
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4013      	ands	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	68da      	ldr	r2, [r3, #12]
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009c0:	2201      	movs	r2, #1
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	4013      	ands	r3, r2
 80009ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	091b      	lsrs	r3, r3, #4
 80009d6:	f003 0201 	and.w	r2, r3, #1
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	2203      	movs	r2, #3
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	4013      	ands	r3, r2
 8000a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	689a      	ldr	r2, [r3, #8]
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f000 80ae 	beq.w	8000b86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ba0 <HAL_GPIO_Init+0x2fc>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a5b      	ldr	r2, [pc, #364]	; (8000ba0 <HAL_GPIO_Init+0x2fc>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b59      	ldr	r3, [pc, #356]	; (8000ba0 <HAL_GPIO_Init+0x2fc>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a46:	4a57      	ldr	r2, [pc, #348]	; (8000ba4 <HAL_GPIO_Init+0x300>)
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f003 0303 	and.w	r3, r3, #3
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	4013      	ands	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4e      	ldr	r2, [pc, #312]	; (8000ba8 <HAL_GPIO_Init+0x304>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d025      	beq.n	8000abe <HAL_GPIO_Init+0x21a>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a4d      	ldr	r2, [pc, #308]	; (8000bac <HAL_GPIO_Init+0x308>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d01f      	beq.n	8000aba <HAL_GPIO_Init+0x216>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a4c      	ldr	r2, [pc, #304]	; (8000bb0 <HAL_GPIO_Init+0x30c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d019      	beq.n	8000ab6 <HAL_GPIO_Init+0x212>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a4b      	ldr	r2, [pc, #300]	; (8000bb4 <HAL_GPIO_Init+0x310>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d013      	beq.n	8000ab2 <HAL_GPIO_Init+0x20e>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a4a      	ldr	r2, [pc, #296]	; (8000bb8 <HAL_GPIO_Init+0x314>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d00d      	beq.n	8000aae <HAL_GPIO_Init+0x20a>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a49      	ldr	r2, [pc, #292]	; (8000bbc <HAL_GPIO_Init+0x318>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d007      	beq.n	8000aaa <HAL_GPIO_Init+0x206>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a48      	ldr	r2, [pc, #288]	; (8000bc0 <HAL_GPIO_Init+0x31c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <HAL_GPIO_Init+0x202>
 8000aa2:	2306      	movs	r3, #6
 8000aa4:	e00c      	b.n	8000ac0 <HAL_GPIO_Init+0x21c>
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	e00a      	b.n	8000ac0 <HAL_GPIO_Init+0x21c>
 8000aaa:	2305      	movs	r3, #5
 8000aac:	e008      	b.n	8000ac0 <HAL_GPIO_Init+0x21c>
 8000aae:	2304      	movs	r3, #4
 8000ab0:	e006      	b.n	8000ac0 <HAL_GPIO_Init+0x21c>
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	e004      	b.n	8000ac0 <HAL_GPIO_Init+0x21c>
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e002      	b.n	8000ac0 <HAL_GPIO_Init+0x21c>
 8000aba:	2301      	movs	r3, #1
 8000abc:	e000      	b.n	8000ac0 <HAL_GPIO_Init+0x21c>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	69fa      	ldr	r2, [r7, #28]
 8000ac2:	f002 0203 	and.w	r2, r2, #3
 8000ac6:	0092      	lsls	r2, r2, #2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ad0:	4934      	ldr	r1, [pc, #208]	; (8000ba4 <HAL_GPIO_Init+0x300>)
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ade:	4b39      	ldr	r3, [pc, #228]	; (8000bc4 <HAL_GPIO_Init+0x320>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	4013      	ands	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b02:	4a30      	ldr	r2, [pc, #192]	; (8000bc4 <HAL_GPIO_Init+0x320>)
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b08:	4b2e      	ldr	r3, [pc, #184]	; (8000bc4 <HAL_GPIO_Init+0x320>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	4013      	ands	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d003      	beq.n	8000b2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b2c:	4a25      	ldr	r2, [pc, #148]	; (8000bc4 <HAL_GPIO_Init+0x320>)
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b32:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <HAL_GPIO_Init+0x320>)
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b56:	4a1b      	ldr	r2, [pc, #108]	; (8000bc4 <HAL_GPIO_Init+0x320>)
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <HAL_GPIO_Init+0x320>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b80:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <HAL_GPIO_Init+0x320>)
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	61fb      	str	r3, [r7, #28]
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	2b0f      	cmp	r3, #15
 8000b90:	f67f ae96 	bls.w	80008c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b94:	bf00      	nop
 8000b96:	3724      	adds	r7, #36	; 0x24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40013800 	.word	0x40013800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020c00 	.word	0x40020c00
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40021400 	.word	0x40021400
 8000bc0:	40021800 	.word	0x40021800
 8000bc4:	40013c00 	.word	0x40013c00

08000bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	807b      	strh	r3, [r7, #2]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bd8:	787b      	ldrb	r3, [r7, #1]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bde:	887a      	ldrh	r2, [r7, #2]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000be4:	e003      	b.n	8000bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	041a      	lsls	r2, r3, #16
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	619a      	str	r2, [r3, #24]
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e0ca      	b.n	8000da6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c10:	4b67      	ldr	r3, [pc, #412]	; (8000db0 <HAL_RCC_ClockConfig+0x1b4>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 030f 	and.w	r3, r3, #15
 8000c18:	683a      	ldr	r2, [r7, #0]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d90c      	bls.n	8000c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c1e:	4b64      	ldr	r3, [pc, #400]	; (8000db0 <HAL_RCC_ClockConfig+0x1b4>)
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c26:	4b62      	ldr	r3, [pc, #392]	; (8000db0 <HAL_RCC_ClockConfig+0x1b4>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d001      	beq.n	8000c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e0b6      	b.n	8000da6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d020      	beq.n	8000c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d005      	beq.n	8000c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c50:	4b58      	ldr	r3, [pc, #352]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	4a57      	ldr	r2, [pc, #348]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000c5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 0308 	and.w	r3, r3, #8
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d005      	beq.n	8000c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c68:	4b52      	ldr	r3, [pc, #328]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	4a51      	ldr	r2, [pc, #324]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c74:	4b4f      	ldr	r3, [pc, #316]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	494c      	ldr	r1, [pc, #304]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c82:	4313      	orrs	r3, r2
 8000c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d044      	beq.n	8000d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d107      	bne.n	8000caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9a:	4b46      	ldr	r3, [pc, #280]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d119      	bne.n	8000cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e07d      	b.n	8000da6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d003      	beq.n	8000cba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d107      	bne.n	8000cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cba:	4b3e      	ldr	r3, [pc, #248]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d109      	bne.n	8000cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e06d      	b.n	8000da6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cca:	4b3a      	ldr	r3, [pc, #232]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e065      	b.n	8000da6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cda:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f023 0203 	bic.w	r2, r3, #3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	4933      	ldr	r1, [pc, #204]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cec:	f7ff fcc6 	bl	800067c <HAL_GetTick>
 8000cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cf2:	e00a      	b.n	8000d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf4:	f7ff fcc2 	bl	800067c <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d901      	bls.n	8000d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e04d      	b.n	8000da6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f003 020c 	and.w	r2, r3, #12
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d1eb      	bne.n	8000cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <HAL_RCC_ClockConfig+0x1b4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 030f 	and.w	r3, r3, #15
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d20c      	bcs.n	8000d44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <HAL_RCC_ClockConfig+0x1b4>)
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <HAL_RCC_ClockConfig+0x1b4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d001      	beq.n	8000d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e030      	b.n	8000da6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d008      	beq.n	8000d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	4915      	ldr	r1, [pc, #84]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d009      	beq.n	8000d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	490d      	ldr	r1, [pc, #52]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d82:	f000 f851 	bl	8000e28 <HAL_RCC_GetSysClockFreq>
 8000d86:	4601      	mov	r1, r0
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	091b      	lsrs	r3, r3, #4
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d94:	5cd3      	ldrb	r3, [r2, r3]
 8000d96:	fa21 f303 	lsr.w	r3, r1, r3
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_RCC_ClockConfig+0x1c0>)
 8000d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f7ff fc28 	bl	80005f4 <HAL_InitTick>

  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023c00 	.word	0x40023c00
 8000db4:	40023800 	.word	0x40023800
 8000db8:	08002c1c 	.word	0x08002c1c
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ddc:	f7ff fff0 	bl	8000dc0 <HAL_RCC_GetHCLKFreq>
 8000de0:	4601      	mov	r1, r0
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	0a9b      	lsrs	r3, r3, #10
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8000dee:	5cd3      	ldrb	r3, [r2, r3]
 8000df0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	08002c2c 	.word	0x08002c2c

08000e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e04:	f7ff ffdc 	bl	8000dc0 <HAL_RCC_GetHCLKFreq>
 8000e08:	4601      	mov	r1, r0
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	0b5b      	lsrs	r3, r3, #13
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	4a03      	ldr	r2, [pc, #12]	; (8000e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e16:	5cd3      	ldrb	r3, [r2, r3]
 8000e18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800
 8000e24:	08002c2c 	.word	0x08002c2c

08000e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e42:	4b9f      	ldr	r3, [pc, #636]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x298>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	2b0c      	cmp	r3, #12
 8000e4c:	f200 8130 	bhi.w	80010b0 <HAL_RCC_GetSysClockFreq+0x288>
 8000e50:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <HAL_RCC_GetSysClockFreq+0x30>)
 8000e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e56:	bf00      	nop
 8000e58:	08000e8d 	.word	0x08000e8d
 8000e5c:	080010b1 	.word	0x080010b1
 8000e60:	080010b1 	.word	0x080010b1
 8000e64:	080010b1 	.word	0x080010b1
 8000e68:	08000e93 	.word	0x08000e93
 8000e6c:	080010b1 	.word	0x080010b1
 8000e70:	080010b1 	.word	0x080010b1
 8000e74:	080010b1 	.word	0x080010b1
 8000e78:	08000e99 	.word	0x08000e99
 8000e7c:	080010b1 	.word	0x080010b1
 8000e80:	080010b1 	.word	0x080010b1
 8000e84:	080010b1 	.word	0x080010b1
 8000e88:	08000fa7 	.word	0x08000fa7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e8c:	4b8d      	ldr	r3, [pc, #564]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x29c>)
 8000e8e:	613b      	str	r3, [r7, #16]
       break;
 8000e90:	e111      	b.n	80010b6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000e92:	4b8d      	ldr	r3, [pc, #564]	; (80010c8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000e94:	613b      	str	r3, [r7, #16]
      break;
 8000e96:	e10e      	b.n	80010b6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e98:	4b89      	ldr	r3, [pc, #548]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x298>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ea0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ea2:	4b87      	ldr	r3, [pc, #540]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x298>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000eae:	4b84      	ldr	r3, [pc, #528]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x298>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	099b      	lsrs	r3, r3, #6
 8000eb4:	f04f 0400 	mov.w	r4, #0
 8000eb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	ea03 0501 	and.w	r5, r3, r1
 8000ec4:	ea04 0602 	and.w	r6, r4, r2
 8000ec8:	4a7f      	ldr	r2, [pc, #508]	; (80010c8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000eca:	fb02 f106 	mul.w	r1, r2, r6
 8000ece:	2200      	movs	r2, #0
 8000ed0:	fb02 f205 	mul.w	r2, r2, r5
 8000ed4:	440a      	add	r2, r1
 8000ed6:	497c      	ldr	r1, [pc, #496]	; (80010c8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000ed8:	fba5 0101 	umull	r0, r1, r5, r1
 8000edc:	1853      	adds	r3, r2, r1
 8000ede:	4619      	mov	r1, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f04f 0400 	mov.w	r4, #0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4623      	mov	r3, r4
 8000eea:	f7ff f9e1 	bl	80002b0 <__aeabi_uldivmod>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460c      	mov	r4, r1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	e049      	b.n	8000f8a <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ef6:	4b72      	ldr	r3, [pc, #456]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x298>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	099b      	lsrs	r3, r3, #6
 8000efc:	f04f 0400 	mov.w	r4, #0
 8000f00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	ea03 0501 	and.w	r5, r3, r1
 8000f0c:	ea04 0602 	and.w	r6, r4, r2
 8000f10:	4629      	mov	r1, r5
 8000f12:	4632      	mov	r2, r6
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	f04f 0400 	mov.w	r4, #0
 8000f1c:	0154      	lsls	r4, r2, #5
 8000f1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f22:	014b      	lsls	r3, r1, #5
 8000f24:	4619      	mov	r1, r3
 8000f26:	4622      	mov	r2, r4
 8000f28:	1b49      	subs	r1, r1, r5
 8000f2a:	eb62 0206 	sbc.w	r2, r2, r6
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	f04f 0400 	mov.w	r4, #0
 8000f36:	0194      	lsls	r4, r2, #6
 8000f38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000f3c:	018b      	lsls	r3, r1, #6
 8000f3e:	1a5b      	subs	r3, r3, r1
 8000f40:	eb64 0402 	sbc.w	r4, r4, r2
 8000f44:	f04f 0100 	mov.w	r1, #0
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	00e2      	lsls	r2, r4, #3
 8000f4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f52:	00d9      	lsls	r1, r3, #3
 8000f54:	460b      	mov	r3, r1
 8000f56:	4614      	mov	r4, r2
 8000f58:	195b      	adds	r3, r3, r5
 8000f5a:	eb44 0406 	adc.w	r4, r4, r6
 8000f5e:	f04f 0100 	mov.w	r1, #0
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	02a2      	lsls	r2, r4, #10
 8000f68:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000f6c:	0299      	lsls	r1, r3, #10
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4614      	mov	r4, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	4621      	mov	r1, r4
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f04f 0400 	mov.w	r4, #0
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4623      	mov	r3, r4
 8000f80:	f7ff f996 	bl	80002b0 <__aeabi_uldivmod>
 8000f84:	4603      	mov	r3, r0
 8000f86:	460c      	mov	r4, r1
 8000f88:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f8a:	4b4d      	ldr	r3, [pc, #308]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x298>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	0c1b      	lsrs	r3, r3, #16
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	3301      	adds	r3, #1
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	613b      	str	r3, [r7, #16]
      break;
 8000fa4:	e087      	b.n	80010b6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fa6:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x298>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fae:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fb0:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x298>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d023      	beq.n	8001004 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fbc:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x298>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	099b      	lsrs	r3, r3, #6
 8000fc2:	f04f 0400 	mov.w	r4, #0
 8000fc6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	ea03 0501 	and.w	r5, r3, r1
 8000fd2:	ea04 0602 	and.w	r6, r4, r2
 8000fd6:	4a3c      	ldr	r2, [pc, #240]	; (80010c8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000fd8:	fb02 f106 	mul.w	r1, r2, r6
 8000fdc:	2200      	movs	r2, #0
 8000fde:	fb02 f205 	mul.w	r2, r2, r5
 8000fe2:	440a      	add	r2, r1
 8000fe4:	4938      	ldr	r1, [pc, #224]	; (80010c8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000fe6:	fba5 0101 	umull	r0, r1, r5, r1
 8000fea:	1853      	adds	r3, r2, r1
 8000fec:	4619      	mov	r1, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f04f 0400 	mov.w	r4, #0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4623      	mov	r3, r4
 8000ff8:	f7ff f95a 	bl	80002b0 <__aeabi_uldivmod>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	460c      	mov	r4, r1
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	e049      	b.n	8001098 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001004:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x298>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	099b      	lsrs	r3, r3, #6
 800100a:	f04f 0400 	mov.w	r4, #0
 800100e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	ea03 0501 	and.w	r5, r3, r1
 800101a:	ea04 0602 	and.w	r6, r4, r2
 800101e:	4629      	mov	r1, r5
 8001020:	4632      	mov	r2, r6
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	f04f 0400 	mov.w	r4, #0
 800102a:	0154      	lsls	r4, r2, #5
 800102c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001030:	014b      	lsls	r3, r1, #5
 8001032:	4619      	mov	r1, r3
 8001034:	4622      	mov	r2, r4
 8001036:	1b49      	subs	r1, r1, r5
 8001038:	eb62 0206 	sbc.w	r2, r2, r6
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	f04f 0400 	mov.w	r4, #0
 8001044:	0194      	lsls	r4, r2, #6
 8001046:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800104a:	018b      	lsls	r3, r1, #6
 800104c:	1a5b      	subs	r3, r3, r1
 800104e:	eb64 0402 	sbc.w	r4, r4, r2
 8001052:	f04f 0100 	mov.w	r1, #0
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	00e2      	lsls	r2, r4, #3
 800105c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001060:	00d9      	lsls	r1, r3, #3
 8001062:	460b      	mov	r3, r1
 8001064:	4614      	mov	r4, r2
 8001066:	195b      	adds	r3, r3, r5
 8001068:	eb44 0406 	adc.w	r4, r4, r6
 800106c:	f04f 0100 	mov.w	r1, #0
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	02a2      	lsls	r2, r4, #10
 8001076:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800107a:	0299      	lsls	r1, r3, #10
 800107c:	460b      	mov	r3, r1
 800107e:	4614      	mov	r4, r2
 8001080:	4618      	mov	r0, r3
 8001082:	4621      	mov	r1, r4
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f04f 0400 	mov.w	r4, #0
 800108a:	461a      	mov	r2, r3
 800108c:	4623      	mov	r3, r4
 800108e:	f7ff f90f 	bl	80002b0 <__aeabi_uldivmod>
 8001092:	4603      	mov	r3, r0
 8001094:	460c      	mov	r4, r1
 8001096:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x298>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	0f1b      	lsrs	r3, r3, #28
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ac:	613b      	str	r3, [r7, #16]
      break;
 80010ae:	e002      	b.n	80010b6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x29c>)
 80010b2:	613b      	str	r3, [r7, #16]
      break;
 80010b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80010b6:	693b      	ldr	r3, [r7, #16]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	00f42400 	.word	0x00f42400
 80010c8:	017d7840 	.word	0x017d7840

080010cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 8083 	beq.w	80011ec <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80010e6:	4b95      	ldr	r3, [pc, #596]	; (800133c <HAL_RCC_OscConfig+0x270>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	d019      	beq.n	8001126 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80010f2:	4b92      	ldr	r3, [pc, #584]	; (800133c <HAL_RCC_OscConfig+0x270>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d106      	bne.n	800110c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80010fe:	4b8f      	ldr	r3, [pc, #572]	; (800133c <HAL_RCC_OscConfig+0x270>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800110a:	d00c      	beq.n	8001126 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800110c:	4b8b      	ldr	r3, [pc, #556]	; (800133c <HAL_RCC_OscConfig+0x270>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001114:	2b0c      	cmp	r3, #12
 8001116:	d112      	bne.n	800113e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001118:	4b88      	ldr	r3, [pc, #544]	; (800133c <HAL_RCC_OscConfig+0x270>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001124:	d10b      	bne.n	800113e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001126:	4b85      	ldr	r3, [pc, #532]	; (800133c <HAL_RCC_OscConfig+0x270>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d05b      	beq.n	80011ea <HAL_RCC_OscConfig+0x11e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d157      	bne.n	80011ea <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e216      	b.n	800156c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001146:	d106      	bne.n	8001156 <HAL_RCC_OscConfig+0x8a>
 8001148:	4b7c      	ldr	r3, [pc, #496]	; (800133c <HAL_RCC_OscConfig+0x270>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a7b      	ldr	r2, [pc, #492]	; (800133c <HAL_RCC_OscConfig+0x270>)
 800114e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	e01d      	b.n	8001192 <HAL_RCC_OscConfig+0xc6>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115e:	d10c      	bne.n	800117a <HAL_RCC_OscConfig+0xae>
 8001160:	4b76      	ldr	r3, [pc, #472]	; (800133c <HAL_RCC_OscConfig+0x270>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a75      	ldr	r2, [pc, #468]	; (800133c <HAL_RCC_OscConfig+0x270>)
 8001166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b73      	ldr	r3, [pc, #460]	; (800133c <HAL_RCC_OscConfig+0x270>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a72      	ldr	r2, [pc, #456]	; (800133c <HAL_RCC_OscConfig+0x270>)
 8001172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	e00b      	b.n	8001192 <HAL_RCC_OscConfig+0xc6>
 800117a:	4b70      	ldr	r3, [pc, #448]	; (800133c <HAL_RCC_OscConfig+0x270>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a6f      	ldr	r2, [pc, #444]	; (800133c <HAL_RCC_OscConfig+0x270>)
 8001180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b6d      	ldr	r3, [pc, #436]	; (800133c <HAL_RCC_OscConfig+0x270>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a6c      	ldr	r2, [pc, #432]	; (800133c <HAL_RCC_OscConfig+0x270>)
 800118c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001190:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d013      	beq.n	80011c2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119a:	f7ff fa6f 	bl	800067c <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a2:	f7ff fa6b 	bl	800067c <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b64      	cmp	r3, #100	; 0x64
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e1db      	b.n	800156c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b4:	4b61      	ldr	r3, [pc, #388]	; (800133c <HAL_RCC_OscConfig+0x270>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0f0      	beq.n	80011a2 <HAL_RCC_OscConfig+0xd6>
 80011c0:	e014      	b.n	80011ec <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c2:	f7ff fa5b 	bl	800067c <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ca:	f7ff fa57 	bl	800067c <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b64      	cmp	r3, #100	; 0x64
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e1c7      	b.n	800156c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011dc:	4b57      	ldr	r3, [pc, #348]	; (800133c <HAL_RCC_OscConfig+0x270>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f0      	bne.n	80011ca <HAL_RCC_OscConfig+0xfe>
 80011e8:	e000      	b.n	80011ec <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d06f      	beq.n	80012d8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80011f8:	4b50      	ldr	r3, [pc, #320]	; (800133c <HAL_RCC_OscConfig+0x270>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	2b00      	cmp	r3, #0
 8001202:	d017      	beq.n	8001234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001204:	4b4d      	ldr	r3, [pc, #308]	; (800133c <HAL_RCC_OscConfig+0x270>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800120c:	2b08      	cmp	r3, #8
 800120e:	d105      	bne.n	800121c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001210:	4b4a      	ldr	r3, [pc, #296]	; (800133c <HAL_RCC_OscConfig+0x270>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00b      	beq.n	8001234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121c:	4b47      	ldr	r3, [pc, #284]	; (800133c <HAL_RCC_OscConfig+0x270>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001224:	2b0c      	cmp	r3, #12
 8001226:	d11c      	bne.n	8001262 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001228:	4b44      	ldr	r3, [pc, #272]	; (800133c <HAL_RCC_OscConfig+0x270>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d116      	bne.n	8001262 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001234:	4b41      	ldr	r3, [pc, #260]	; (800133c <HAL_RCC_OscConfig+0x270>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_RCC_OscConfig+0x180>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d001      	beq.n	800124c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e18f      	b.n	800156c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124c:	4b3b      	ldr	r3, [pc, #236]	; (800133c <HAL_RCC_OscConfig+0x270>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4938      	ldr	r1, [pc, #224]	; (800133c <HAL_RCC_OscConfig+0x270>)
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001260:	e03a      	b.n	80012d8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d020      	beq.n	80012ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126a:	4b35      	ldr	r3, [pc, #212]	; (8001340 <HAL_RCC_OscConfig+0x274>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001270:	f7ff fa04 	bl	800067c <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001278:	f7ff fa00 	bl	800067c <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e170      	b.n	800156c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128a:	4b2c      	ldr	r3, [pc, #176]	; (800133c <HAL_RCC_OscConfig+0x270>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001296:	4b29      	ldr	r3, [pc, #164]	; (800133c <HAL_RCC_OscConfig+0x270>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4925      	ldr	r1, [pc, #148]	; (800133c <HAL_RCC_OscConfig+0x270>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
 80012aa:	e015      	b.n	80012d8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_RCC_OscConfig+0x274>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b2:	f7ff f9e3 	bl	800067c <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ba:	f7ff f9df 	bl	800067c <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e14f      	b.n	800156c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_RCC_OscConfig+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f0      	bne.n	80012ba <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d037      	beq.n	8001354 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d016      	beq.n	800131a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_RCC_OscConfig+0x278>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f2:	f7ff f9c3 	bl	800067c <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fa:	f7ff f9bf 	bl	800067c <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e12f      	b.n	800156c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_RCC_OscConfig+0x270>)
 800130e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x22e>
 8001318:	e01c      	b.n	8001354 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_RCC_OscConfig+0x278>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001320:	f7ff f9ac 	bl	800067c <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001326:	e00f      	b.n	8001348 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001328:	f7ff f9a8 	bl	800067c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d908      	bls.n	8001348 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e118      	b.n	800156c <HAL_RCC_OscConfig+0x4a0>
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	42470000 	.word	0x42470000
 8001344:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001348:	4b8a      	ldr	r3, [pc, #552]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 800134a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1e9      	bne.n	8001328 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8097 	beq.w	8001490 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001366:	4b83      	ldr	r3, [pc, #524]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10f      	bne.n	8001392 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b7f      	ldr	r3, [pc, #508]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a7e      	ldr	r2, [pc, #504]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b7c      	ldr	r3, [pc, #496]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800138e:	2301      	movs	r3, #1
 8001390:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001392:	4b79      	ldr	r3, [pc, #484]	; (8001578 <HAL_RCC_OscConfig+0x4ac>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139a:	2b00      	cmp	r3, #0
 800139c:	d118      	bne.n	80013d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800139e:	4b76      	ldr	r3, [pc, #472]	; (8001578 <HAL_RCC_OscConfig+0x4ac>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a75      	ldr	r2, [pc, #468]	; (8001578 <HAL_RCC_OscConfig+0x4ac>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013aa:	f7ff f967 	bl	800067c <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b2:	f7ff f963 	bl	800067c <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e0d3      	b.n	800156c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c4:	4b6c      	ldr	r3, [pc, #432]	; (8001578 <HAL_RCC_OscConfig+0x4ac>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_OscConfig+0x31a>
 80013d8:	4b66      	ldr	r3, [pc, #408]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	4a65      	ldr	r2, [pc, #404]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6713      	str	r3, [r2, #112]	; 0x70
 80013e4:	e01c      	b.n	8001420 <HAL_RCC_OscConfig+0x354>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	d10c      	bne.n	8001408 <HAL_RCC_OscConfig+0x33c>
 80013ee:	4b61      	ldr	r3, [pc, #388]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f2:	4a60      	ldr	r2, [pc, #384]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6713      	str	r3, [r2, #112]	; 0x70
 80013fa:	4b5e      	ldr	r3, [pc, #376]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fe:	4a5d      	ldr	r2, [pc, #372]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6713      	str	r3, [r2, #112]	; 0x70
 8001406:	e00b      	b.n	8001420 <HAL_RCC_OscConfig+0x354>
 8001408:	4b5a      	ldr	r3, [pc, #360]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 800140a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140c:	4a59      	ldr	r2, [pc, #356]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 800140e:	f023 0301 	bic.w	r3, r3, #1
 8001412:	6713      	str	r3, [r2, #112]	; 0x70
 8001414:	4b57      	ldr	r3, [pc, #348]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001418:	4a56      	ldr	r2, [pc, #344]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 800141a:	f023 0304 	bic.w	r3, r3, #4
 800141e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d015      	beq.n	8001454 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001428:	f7ff f928 	bl	800067c <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142e:	e00a      	b.n	8001446 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001430:	f7ff f924 	bl	800067c <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f241 3288 	movw	r2, #5000	; 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e092      	b.n	800156c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001446:	4b4b      	ldr	r3, [pc, #300]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0ee      	beq.n	8001430 <HAL_RCC_OscConfig+0x364>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001454:	f7ff f912 	bl	800067c <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145c:	f7ff f90e 	bl	800067c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	; 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e07c      	b.n	800156c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001472:	4b40      	ldr	r3, [pc, #256]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1ee      	bne.n	800145c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d105      	bne.n	8001490 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001484:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	4a3a      	ldr	r2, [pc, #232]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 800148a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d068      	beq.n	800156a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001498:	4b36      	ldr	r3, [pc, #216]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d060      	beq.n	8001566 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d145      	bne.n	8001538 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ac:	4b33      	ldr	r3, [pc, #204]	; (800157c <HAL_RCC_OscConfig+0x4b0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff f8e3 	bl	800067c <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff f8df 	bl	800067c <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e04f      	b.n	800156c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69da      	ldr	r2, [r3, #28]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	019b      	lsls	r3, r3, #6
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	085b      	lsrs	r3, r3, #1
 80014f0:	3b01      	subs	r3, #1
 80014f2:	041b      	lsls	r3, r3, #16
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	061b      	lsls	r3, r3, #24
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	071b      	lsls	r3, r3, #28
 8001504:	491b      	ldr	r1, [pc, #108]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_RCC_OscConfig+0x4b0>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff f8b4 	bl	800067c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff f8b0 	bl	800067c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e020      	b.n	800156c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x44c>
 8001536:	e018      	b.n	800156a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_RCC_OscConfig+0x4b0>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153e:	f7ff f89d 	bl	800067c <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001546:	f7ff f899 	bl	800067c <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e009      	b.n	800156c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_RCC_OscConfig+0x4a8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f0      	bne.n	8001546 <HAL_RCC_OscConfig+0x47a>
 8001564:	e001      	b.n	800156a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000
 800157c:	42470060 	.word	0x42470060

08001580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e03f      	b.n	8001612 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d106      	bne.n	80015ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 fdb2 	bl	8002110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2224      	movs	r2, #36	; 0x24
 80015b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f9b1 	bl	800192c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	695a      	ldr	r2, [r3, #20]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2220      	movs	r2, #32
 8001604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2220      	movs	r2, #32
 800160c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b088      	sub	sp, #32
 800161e:	af02      	add	r7, sp, #8
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	4613      	mov	r3, r2
 8001628:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b20      	cmp	r3, #32
 8001638:	f040 8083 	bne.w	8001742 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <HAL_UART_Transmit+0x2e>
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e07b      	b.n	8001744 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_UART_Transmit+0x40>
 8001656:	2302      	movs	r3, #2
 8001658:	e074      	b.n	8001744 <HAL_UART_Transmit+0x12a>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2221      	movs	r2, #33	; 0x21
 800166c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001670:	f7ff f804 	bl	800067c <HAL_GetTick>
 8001674:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	88fa      	ldrh	r2, [r7, #6]
 800167a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	88fa      	ldrh	r2, [r7, #6]
 8001680:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001682:	e042      	b.n	800170a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001688:	b29b      	uxth	r3, r3
 800168a:	3b01      	subs	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800169a:	d122      	bne.n	80016e2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	2200      	movs	r2, #0
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f8f6 	bl	8001898 <UART_WaitOnFlagUntilTimeout>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e046      	b.n	8001744 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016c8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d103      	bne.n	80016da <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	3302      	adds	r3, #2
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	e017      	b.n	800170a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	3301      	adds	r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	e013      	b.n	800170a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2200      	movs	r2, #0
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 f8d3 	bl	8001898 <UART_WaitOnFlagUntilTimeout>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e023      	b.n	8001744 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	60ba      	str	r2, [r7, #8]
 8001702:	781a      	ldrb	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800170e:	b29b      	uxth	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1b7      	bne.n	8001684 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2200      	movs	r2, #0
 800171c:	2140      	movs	r1, #64	; 0x40
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 f8ba 	bl	8001898 <UART_WaitOnFlagUntilTimeout>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e00a      	b.n	8001744 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2220      	movs	r2, #32
 8001732:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e000      	b.n	8001744 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001742:	2302      	movs	r3, #2
  }
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af02      	add	r7, sp, #8
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b20      	cmp	r3, #32
 800176a:	f040 8090 	bne.w	800188e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <HAL_UART_Receive+0x2e>
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e088      	b.n	8001890 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_UART_Receive+0x40>
 8001788:	2302      	movs	r3, #2
 800178a:	e081      	b.n	8001890 <HAL_UART_Receive+0x144>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2222      	movs	r2, #34	; 0x22
 800179e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80017a2:	f7fe ff6b 	bl	800067c <HAL_GetTick>
 80017a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	88fa      	ldrh	r2, [r7, #6]
 80017ac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	88fa      	ldrh	r2, [r7, #6]
 80017b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80017b4:	e05c      	b.n	8001870 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017cc:	d12b      	bne.n	8001826 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2200      	movs	r2, #0
 80017d6:	2120      	movs	r1, #32
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 f85d 	bl	8001898 <UART_WaitOnFlagUntilTimeout>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e053      	b.n	8001890 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10c      	bne.n	800180e <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001800:	b29a      	uxth	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	3302      	adds	r3, #2
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	e030      	b.n	8001870 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	b29b      	uxth	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	b29a      	uxth	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	3301      	adds	r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	e024      	b.n	8001870 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2200      	movs	r2, #0
 800182e:	2120      	movs	r1, #32
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 f831 	bl	8001898 <UART_WaitOnFlagUntilTimeout>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e027      	b.n	8001890 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d108      	bne.n	800185a <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6859      	ldr	r1, [r3, #4]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	60ba      	str	r2, [r7, #8]
 8001854:	b2ca      	uxtb	r2, r1
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	e00a      	b.n	8001870 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1c59      	adds	r1, r3, #1
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001874:	b29b      	uxth	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d19d      	bne.n	80017b6 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2220      	movs	r2, #32
 800187e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800188e:	2302      	movs	r3, #2
  }
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	4613      	mov	r3, r2
 80018a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018a8:	e02c      	b.n	8001904 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d028      	beq.n	8001904 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d007      	beq.n	80018c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80018b8:	f7fe fee0 	bl	800067c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d21d      	bcs.n	8001904 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80018d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2220      	movs	r2, #32
 80018ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2220      	movs	r2, #32
 80018f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e00f      	b.n	8001924 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	4013      	ands	r3, r2
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	429a      	cmp	r2, r3
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	429a      	cmp	r2, r3
 8001920:	d0c3      	beq.n	80018aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800192c:	b5b0      	push	{r4, r5, r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4313      	orrs	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800196c:	f023 030c 	bic.w	r3, r3, #12
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	68f9      	ldr	r1, [r7, #12]
 8001976:	430b      	orrs	r3, r1
 8001978:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699a      	ldr	r2, [r3, #24]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001998:	f040 80e4 	bne.w	8001b64 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4aab      	ldr	r2, [pc, #684]	; (8001c50 <UART_SetConfig+0x324>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d004      	beq.n	80019b0 <UART_SetConfig+0x84>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4aaa      	ldr	r2, [pc, #680]	; (8001c54 <UART_SetConfig+0x328>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d16c      	bne.n	8001a8a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80019b0:	f7ff fa26 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	009a      	lsls	r2, r3, #2
 80019be:	441a      	add	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4aa3      	ldr	r2, [pc, #652]	; (8001c58 <UART_SetConfig+0x32c>)
 80019cc:	fba2 2303 	umull	r2, r3, r2, r3
 80019d0:	095b      	lsrs	r3, r3, #5
 80019d2:	011c      	lsls	r4, r3, #4
 80019d4:	f7ff fa14 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 80019d8:	4602      	mov	r2, r0
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	009a      	lsls	r2, r3, #2
 80019e2:	441a      	add	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fbb2 f5f3 	udiv	r5, r2, r3
 80019ee:	f7ff fa07 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 80019f2:	4602      	mov	r2, r0
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	009a      	lsls	r2, r3, #2
 80019fc:	441a      	add	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a08:	4a93      	ldr	r2, [pc, #588]	; (8001c58 <UART_SetConfig+0x32c>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	2264      	movs	r2, #100	; 0x64
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	1aeb      	subs	r3, r5, r3
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	3332      	adds	r3, #50	; 0x32
 8001a1c:	4a8e      	ldr	r2, [pc, #568]	; (8001c58 <UART_SetConfig+0x32c>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001a2a:	441c      	add	r4, r3
 8001a2c:	f7ff f9e8 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	009a      	lsls	r2, r3, #2
 8001a3a:	441a      	add	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	fbb2 f5f3 	udiv	r5, r2, r3
 8001a46:	f7ff f9db 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	009a      	lsls	r2, r3, #2
 8001a54:	441a      	add	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a60:	4a7d      	ldr	r2, [pc, #500]	; (8001c58 <UART_SetConfig+0x32c>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2264      	movs	r2, #100	; 0x64
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	1aeb      	subs	r3, r5, r3
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	3332      	adds	r3, #50	; 0x32
 8001a74:	4a78      	ldr	r2, [pc, #480]	; (8001c58 <UART_SetConfig+0x32c>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	f003 0207 	and.w	r2, r3, #7
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4422      	add	r2, r4
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	e154      	b.n	8001d34 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a8a:	f7ff f9a5 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	009a      	lsls	r2, r3, #2
 8001a98:	441a      	add	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	4a6c      	ldr	r2, [pc, #432]	; (8001c58 <UART_SetConfig+0x32c>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	011c      	lsls	r4, r3, #4
 8001aae:	f7ff f993 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	009a      	lsls	r2, r3, #2
 8001abc:	441a      	add	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fbb2 f5f3 	udiv	r5, r2, r3
 8001ac8:	f7ff f986 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009a      	lsls	r2, r3, #2
 8001ad6:	441a      	add	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	4a5d      	ldr	r2, [pc, #372]	; (8001c58 <UART_SetConfig+0x32c>)
 8001ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae8:	095b      	lsrs	r3, r3, #5
 8001aea:	2264      	movs	r2, #100	; 0x64
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	1aeb      	subs	r3, r5, r3
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	3332      	adds	r3, #50	; 0x32
 8001af6:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <UART_SetConfig+0x32c>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	095b      	lsrs	r3, r3, #5
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001b04:	441c      	add	r4, r3
 8001b06:	f7ff f967 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	009a      	lsls	r2, r3, #2
 8001b14:	441a      	add	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001b20:	f7ff f95a 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009a      	lsls	r2, r3, #2
 8001b2e:	441a      	add	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4a47      	ldr	r2, [pc, #284]	; (8001c58 <UART_SetConfig+0x32c>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	095b      	lsrs	r3, r3, #5
 8001b42:	2264      	movs	r2, #100	; 0x64
 8001b44:	fb02 f303 	mul.w	r3, r2, r3
 8001b48:	1aeb      	subs	r3, r5, r3
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	3332      	adds	r3, #50	; 0x32
 8001b4e:	4a42      	ldr	r2, [pc, #264]	; (8001c58 <UART_SetConfig+0x32c>)
 8001b50:	fba2 2303 	umull	r2, r3, r2, r3
 8001b54:	095b      	lsrs	r3, r3, #5
 8001b56:	f003 0207 	and.w	r2, r3, #7
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4422      	add	r2, r4
 8001b60:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001b62:	e0e7      	b.n	8001d34 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a39      	ldr	r2, [pc, #228]	; (8001c50 <UART_SetConfig+0x324>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d004      	beq.n	8001b78 <UART_SetConfig+0x24c>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a38      	ldr	r2, [pc, #224]	; (8001c54 <UART_SetConfig+0x328>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d171      	bne.n	8001c5c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b78:	f7ff f942 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	009a      	lsls	r2, r3, #2
 8001b86:	441a      	add	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	4a31      	ldr	r2, [pc, #196]	; (8001c58 <UART_SetConfig+0x32c>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	095b      	lsrs	r3, r3, #5
 8001b9a:	011c      	lsls	r4, r3, #4
 8001b9c:	f7ff f930 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009a      	lsls	r2, r3, #2
 8001baa:	441a      	add	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8001bb6:	f7ff f923 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009a      	lsls	r2, r3, #2
 8001bc4:	441a      	add	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd0:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <UART_SetConfig+0x32c>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2264      	movs	r2, #100	; 0x64
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	1aeb      	subs	r3, r5, r3
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	3332      	adds	r3, #50	; 0x32
 8001be4:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <UART_SetConfig+0x32c>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf0:	441c      	add	r4, r3
 8001bf2:	f7ff f905 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009a      	lsls	r2, r3, #2
 8001c00:	441a      	add	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	fbb2 f5f3 	udiv	r5, r2, r3
 8001c0c:	f7ff f8f8 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	009a      	lsls	r2, r3, #2
 8001c1a:	441a      	add	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4a0c      	ldr	r2, [pc, #48]	; (8001c58 <UART_SetConfig+0x32c>)
 8001c28:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2c:	095b      	lsrs	r3, r3, #5
 8001c2e:	2264      	movs	r2, #100	; 0x64
 8001c30:	fb02 f303 	mul.w	r3, r2, r3
 8001c34:	1aeb      	subs	r3, r5, r3
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	3332      	adds	r3, #50	; 0x32
 8001c3a:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <UART_SetConfig+0x32c>)
 8001c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c40:	095b      	lsrs	r3, r3, #5
 8001c42:	f003 020f 	and.w	r2, r3, #15
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4422      	add	r2, r4
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	e071      	b.n	8001d34 <UART_SetConfig+0x408>
 8001c50:	40011000 	.word	0x40011000
 8001c54:	40011400 	.word	0x40011400
 8001c58:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c5c:	f7ff f8bc 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	009a      	lsls	r2, r3, #2
 8001c6a:	441a      	add	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	4a31      	ldr	r2, [pc, #196]	; (8001d3c <UART_SetConfig+0x410>)
 8001c78:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7c:	095b      	lsrs	r3, r3, #5
 8001c7e:	011c      	lsls	r4, r3, #4
 8001c80:	f7ff f8aa 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009a      	lsls	r2, r3, #2
 8001c8e:	441a      	add	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	fbb2 f5f3 	udiv	r5, r2, r3
 8001c9a:	f7ff f89d 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009a      	lsls	r2, r3, #2
 8001ca8:	441a      	add	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb4:	4a21      	ldr	r2, [pc, #132]	; (8001d3c <UART_SetConfig+0x410>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2264      	movs	r2, #100	; 0x64
 8001cbe:	fb02 f303 	mul.w	r3, r2, r3
 8001cc2:	1aeb      	subs	r3, r5, r3
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	3332      	adds	r3, #50	; 0x32
 8001cc8:	4a1c      	ldr	r2, [pc, #112]	; (8001d3c <UART_SetConfig+0x410>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd4:	441c      	add	r4, r3
 8001cd6:	f7ff f87f 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009a      	lsls	r2, r3, #2
 8001ce4:	441a      	add	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	fbb2 f5f3 	udiv	r5, r2, r3
 8001cf0:	f7ff f872 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009a      	lsls	r2, r3, #2
 8001cfe:	441a      	add	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <UART_SetConfig+0x410>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	095b      	lsrs	r3, r3, #5
 8001d12:	2264      	movs	r2, #100	; 0x64
 8001d14:	fb02 f303 	mul.w	r3, r2, r3
 8001d18:	1aeb      	subs	r3, r5, r3
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	3332      	adds	r3, #50	; 0x32
 8001d1e:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <UART_SetConfig+0x410>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	f003 020f 	and.w	r2, r3, #15
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4422      	add	r2, r4
 8001d30:	609a      	str	r2, [r3, #8]
}
 8001d32:	e7ff      	b.n	8001d34 <UART_SetConfig+0x408>
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d3c:	51eb851f 	.word	0x51eb851f

08001d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b0d3      	sub	sp, #332	; 0x14c
 8001d44:	af00      	add	r7, sp, #0
int main(void)
 8001d46:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001d4a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d4e:	f7fe fc2f 	bl	80005b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d52:	f000 f8b5 	bl	8001ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d56:	f000 f967 	bl	8002028 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d5a:	f000 f911 	bl	8001f80 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001d5e:	f000 f939 	bl	8001fd4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t txdata[9] = {0};
 8001d62:	f207 1337 	addw	r3, r7, #311	; 0x137
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	721a      	strb	r2, [r3, #8]
  uint8_t txdata2[7] = {0};
 8001d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	f8c3 2003 	str.w	r2, [r3, #3]
  uint8_t rxdata[9] = {0};
 8001d7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	721a      	strb	r2, [r3, #8]
  char txbuf[] ="\n\r hello world";
 8001d86:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <main+0x118>)
 8001d88:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8001d8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d8e:	c407      	stmia	r4!, {r0, r1, r2}
 8001d90:	8023      	strh	r3, [r4, #0]
 8001d92:	3402      	adds	r4, #2
 8001d94:	0c1b      	lsrs	r3, r3, #16
 8001d96:	7023      	strb	r3, [r4, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //PCへの送信テスト
	  	  HAL_UART_Transmit(&huart2,(uint8_t*) txbuf,sizeof(txbuf),0xFFFF);
 8001d98:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da0:	220f      	movs	r2, #15
 8001da2:	482e      	ldr	r0, [pc, #184]	; (8001e5c <main+0x11c>)
 8001da4:	f7ff fc39 	bl	800161a <HAL_UART_Transmit>
	        HAL_Delay(500);
 8001da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dac:	f7fe fc72 	bl	8000694 <HAL_Delay>


	  	  while(1)
	  	  {
	  		   //B3Mから情報を読み取る
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001db0:	2201      	movs	r2, #1
 8001db2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db6:	482a      	ldr	r0, [pc, #168]	; (8001e60 <main+0x120>)
 8001db8:	f7fe ff06 	bl	8000bc8 <HAL_GPIO_WritePin>
	  		  read(0x08,0x2C,0x02);
 8001dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001dc0:	469c      	mov	ip, r3
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	212c      	movs	r1, #44	; 0x2c
 8001dc6:	2008      	movs	r0, #8
 8001dc8:	f000 f850 	bl	8001e6c <read.7603>
	  		  HAL_UART_Transmit(&huart6, txdata2,7,0xFFFF);
 8001dcc:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	4823      	ldr	r0, [pc, #140]	; (8001e64 <main+0x124>)
 8001dd8:	f7ff fc1f 	bl	800161a <HAL_UART_Transmit>
	  		  //HAL_Delay(0.3);
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de2:	481f      	ldr	r0, [pc, #124]	; (8001e60 <main+0x120>)
 8001de4:	f7fe fef0 	bl	8000bc8 <HAL_GPIO_WritePin>
	  		  HAL_UART_Receive(&huart6,rxdata,10,0x100);
 8001de8:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df0:	220a      	movs	r2, #10
 8001df2:	481c      	ldr	r0, [pc, #112]	; (8001e64 <main+0x124>)
 8001df4:	f7ff fcaa 	bl	800174c <HAL_UART_Receive>


	  	  if(rxdata[1]!=0)
 8001df8:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d100      	bne.n	8001e02 <main+0xc2>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001e00:	e7d6      	b.n	8001db0 <main+0x70>
	  	  	  {
	  		  break;
 8001e02:	bf00      	nop
	  	  	  }
	  	  }

	  	  pos_data=rxdata[4];
 8001e04:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001e08:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	  	  pos_data+=rxdata[5]<<8;
 8001e0c:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e16:	4413      	add	r3, r2
 8001e18:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
//	  	  pos_data+=rxdata[6]<<16;
//	  	  pos_data+=rxdata[7]<<24;
	  	  rxdata[1]=0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111

	  //B3Mの情報をPCへ送信
	  	  char PC_txdata[256]={'\0'};
 8001e22:	463b      	mov	r3, r7
 8001e24:	4618      	mov	r0, r3
 8001e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	f000 fad1 	bl	80023d4 <memset>
	  		  sprintf(PC_txdata,"%d\n", pos_data); // 文字列に変換
 8001e32:	463b      	mov	r3, r7
 8001e34:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e38:	490b      	ldr	r1, [pc, #44]	; (8001e68 <main+0x128>)
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fad2 	bl	80023e4 <siprintf>
	  		  HAL_UART_Transmit(&huart2, (uint8_t*)PC_txdata,sizeof(PC_txdata),0xFFFF);
 8001e40:	4639      	mov	r1, r7
 8001e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e4a:	4804      	ldr	r0, [pc, #16]	; (8001e5c <main+0x11c>)
 8001e4c:	f7ff fbe5 	bl	800161a <HAL_UART_Transmit>
	  		  HAL_Delay(100);
 8001e50:	2064      	movs	r0, #100	; 0x64
 8001e52:	f7fe fc1f 	bl	8000694 <HAL_Delay>
  {
 8001e56:	e79f      	b.n	8001d98 <main+0x58>
 8001e58:	08002c0c 	.word	0x08002c0c
 8001e5c:	200000dc 	.word	0x200000dc
 8001e60:	40020000 	.word	0x40020000
 8001e64:	2000009c 	.word	0x2000009c
 8001e68:	08002c08 	.word	0x08002c08

08001e6c <read.7603>:
    {
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	460b      	mov	r3, r1
 8001e78:	71bb      	strb	r3, [r7, #6]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	717b      	strb	r3, [r7, #5]
 8001e7e:	4663      	mov	r3, ip
 8001e80:	f8c7 c000 	str.w	ip, [r7]
        unsigned char sum = (0x07+0x03+0x00+id+address+length)&0x00FF;
 8001e84:	79f9      	ldrb	r1, [r7, #7]
 8001e86:	79ba      	ldrb	r2, [r7, #6]
 8001e88:	440a      	add	r2, r1
 8001e8a:	b2d1      	uxtb	r1, r2
 8001e8c:	797a      	ldrb	r2, [r7, #5]
 8001e8e:	440a      	add	r2, r1
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	320a      	adds	r2, #10
 8001e94:	73fa      	strb	r2, [r7, #15]
        txdata2[0]=0x07;       //SIZE
 8001e96:	2207      	movs	r2, #7
 8001e98:	701a      	strb	r2, [r3, #0]
        txdata2[1]=0x03;       //COMMAND
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	705a      	strb	r2, [r3, #1]
        txdata2[2]=0x00;       //OPTION
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	709a      	strb	r2, [r3, #2]
        txdata2[3]=id;         //ID
 8001ea2:	79fa      	ldrb	r2, [r7, #7]
 8001ea4:	70da      	strb	r2, [r3, #3]
        txdata2[4]=address;    //ADDRESS(Current 0x48,MotorTemperature 0x46)
 8001ea6:	79ba      	ldrb	r2, [r7, #6]
 8001ea8:	711a      	strb	r2, [r3, #4]
        txdata2[5]=length;     //LENGTH byte
 8001eaa:	797a      	ldrb	r2, [r7, #5]
 8001eac:	715a      	strb	r2, [r3, #5]
        txdata2[6]=sum;        //SUM
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	719a      	strb	r2, [r3, #6]
    }
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b094      	sub	sp, #80	; 0x50
 8001ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	2234      	movs	r2, #52	; 0x34
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fa80 	bl	80023d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed4:	f107 0308 	add.w	r3, r7, #8
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <SystemClock_Config+0xb8>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <SystemClock_Config+0xb8>)
 8001eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef4:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <SystemClock_Config+0xb8>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f00:	2300      	movs	r3, #0
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <SystemClock_Config+0xbc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f0c:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <SystemClock_Config+0xbc>)
 8001f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <SystemClock_Config+0xbc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f20:	2302      	movs	r3, #2
 8001f22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f24:	2301      	movs	r3, #1
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f28:	2310      	movs	r3, #16
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f8c9 	bl	80010cc <HAL_RCC_OscConfig>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001f40:	f000 f8b6 	bl	80020b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f44:	230f      	movs	r3, #15
 8001f46:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fe4c 	bl	8000bfc <HAL_RCC_ClockConfig>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001f6a:	f000 f8a1 	bl	80020b0 <Error_Handler>
  }
}
 8001f6e:	bf00      	nop
 8001f70:	3750      	adds	r7, #80	; 0x50
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40007000 	.word	0x40007000

08001f80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <MX_USART2_UART_Init+0x50>)
 8001f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001f8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001fb8:	f7ff fae2 	bl	8001580 <HAL_UART_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fc2:	f000 f875 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200000dc 	.word	0x200000dc
 8001fd0:	40004400 	.word	0x40004400

08001fd4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <MX_USART6_UART_Init+0x4c>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <MX_USART6_UART_Init+0x50>)
 8001fdc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <MX_USART6_UART_Init+0x4c>)
 8001fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fe4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <MX_USART6_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <MX_USART6_UART_Init+0x4c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <MX_USART6_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <MX_USART6_UART_Init+0x4c>)
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <MX_USART6_UART_Init+0x4c>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <MX_USART6_UART_Init+0x4c>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800200a:	4805      	ldr	r0, [pc, #20]	; (8002020 <MX_USART6_UART_Init+0x4c>)
 800200c:	f7ff fab8 	bl	8001580 <HAL_UART_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002016:	f000 f84b 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	2000009c 	.word	0x2000009c
 8002024:	40011400 	.word	0x40011400

08002028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <MX_GPIO_Init+0x80>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <MX_GPIO_Init+0x80>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <MX_GPIO_Init+0x80>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <MX_GPIO_Init+0x80>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <MX_GPIO_Init+0x80>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <MX_GPIO_Init+0x80>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002076:	2200      	movs	r2, #0
 8002078:	f44f 7180 	mov.w	r1, #256	; 0x100
 800207c:	480b      	ldr	r0, [pc, #44]	; (80020ac <MX_GPIO_Init+0x84>)
 800207e:	f7fe fda3 	bl	8000bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002088:	2301      	movs	r3, #1
 800208a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	4619      	mov	r1, r3
 800209a:	4804      	ldr	r0, [pc, #16]	; (80020ac <MX_GPIO_Init+0x84>)
 800209c:	f7fe fc02 	bl	80008a4 <HAL_GPIO_Init>

}
 80020a0:	bf00      	nop
 80020a2:	3720      	adds	r7, #32
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020000 	.word	0x40020000

080020b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_MspInit+0x4c>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	4a0f      	ldr	r2, [pc, #60]	; (800210c <HAL_MspInit+0x4c>)
 80020d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d4:	6453      	str	r3, [r2, #68]	; 0x44
 80020d6:	4b0d      	ldr	r3, [pc, #52]	; (800210c <HAL_MspInit+0x4c>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_MspInit+0x4c>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a08      	ldr	r2, [pc, #32]	; (800210c <HAL_MspInit+0x4c>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_MspInit+0x4c>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800

08002110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08c      	sub	sp, #48	; 0x30
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a32      	ldr	r2, [pc, #200]	; (80021f8 <HAL_UART_MspInit+0xe8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d12c      	bne.n	800218c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	4b31      	ldr	r3, [pc, #196]	; (80021fc <HAL_UART_MspInit+0xec>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a30      	ldr	r2, [pc, #192]	; (80021fc <HAL_UART_MspInit+0xec>)
 800213c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <HAL_UART_MspInit+0xec>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	61bb      	str	r3, [r7, #24]
 800214c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <HAL_UART_MspInit+0xec>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a29      	ldr	r2, [pc, #164]	; (80021fc <HAL_UART_MspInit+0xec>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b27      	ldr	r3, [pc, #156]	; (80021fc <HAL_UART_MspInit+0xec>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800216a:	230c      	movs	r3, #12
 800216c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002172:	2301      	movs	r3, #1
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800217a:	2307      	movs	r3, #7
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	481e      	ldr	r0, [pc, #120]	; (8002200 <HAL_UART_MspInit+0xf0>)
 8002186:	f7fe fb8d 	bl	80008a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800218a:	e030      	b.n	80021ee <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <HAL_UART_MspInit+0xf4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d12b      	bne.n	80021ee <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	4b18      	ldr	r3, [pc, #96]	; (80021fc <HAL_UART_MspInit+0xec>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HAL_UART_MspInit+0xec>)
 80021a0:	f043 0320 	orr.w	r3, r3, #32
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_UART_MspInit+0xec>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_UART_MspInit+0xec>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a10      	ldr	r2, [pc, #64]	; (80021fc <HAL_UART_MspInit+0xec>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <HAL_UART_MspInit+0xec>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021ce:	23c0      	movs	r3, #192	; 0xc0
 80021d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d6:	2301      	movs	r3, #1
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021da:	2303      	movs	r3, #3
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021de:	2308      	movs	r3, #8
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e2:	f107 031c 	add.w	r3, r7, #28
 80021e6:	4619      	mov	r1, r3
 80021e8:	4807      	ldr	r0, [pc, #28]	; (8002208 <HAL_UART_MspInit+0xf8>)
 80021ea:	f7fe fb5b 	bl	80008a4 <HAL_GPIO_Init>
}
 80021ee:	bf00      	nop
 80021f0:	3730      	adds	r7, #48	; 0x30
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40004400 	.word	0x40004400
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020000 	.word	0x40020000
 8002204:	40011400 	.word	0x40011400
 8002208:	40020800 	.word	0x40020800

0800220c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <HardFault_Handler+0x4>

08002220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <MemManage_Handler+0x4>

08002226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <BusFault_Handler+0x4>

0800222c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <UsageFault_Handler+0x4>

08002232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002260:	f7fe f9f8 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}

08002268 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <_sbrk+0x50>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <_sbrk+0x16>
		heap_end = &end;
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <_sbrk+0x50>)
 800227a:	4a10      	ldr	r2, [pc, #64]	; (80022bc <_sbrk+0x54>)
 800227c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <_sbrk+0x50>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <_sbrk+0x50>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	466a      	mov	r2, sp
 800228e:	4293      	cmp	r3, r2
 8002290:	d907      	bls.n	80022a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002292:	f000 f875 	bl	8002380 <__errno>
 8002296:	4602      	mov	r2, r0
 8002298:	230c      	movs	r3, #12
 800229a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800229c:	f04f 33ff 	mov.w	r3, #4294967295
 80022a0:	e006      	b.n	80022b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <_sbrk+0x50>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	4a03      	ldr	r2, [pc, #12]	; (80022b8 <_sbrk+0x50>)
 80022ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	2000008c 	.word	0x2000008c
 80022bc:	20000120 	.word	0x20000120

080022c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c4:	4b16      	ldr	r3, [pc, #88]	; (8002320 <SystemInit+0x60>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	4a15      	ldr	r2, [pc, #84]	; (8002320 <SystemInit+0x60>)
 80022cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <SystemInit+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a12      	ldr	r2, [pc, #72]	; (8002324 <SystemInit+0x64>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <SystemInit+0x64>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <SystemInit+0x64>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <SystemInit+0x64>)
 80022ec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80022f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <SystemInit+0x64>)
 80022f8:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <SystemInit+0x68>)
 80022fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <SystemInit+0x64>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a08      	ldr	r2, [pc, #32]	; (8002324 <SystemInit+0x64>)
 8002302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002306:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <SystemInit+0x64>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <SystemInit+0x60>)
 8002310:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002314:	609a      	str	r2, [r3, #8]
#endif
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000ed00 	.word	0xe000ed00
 8002324:	40023800 	.word	0x40023800
 8002328:	24003010 	.word	0x24003010

0800232c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800232c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002364 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002330:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002332:	e003      	b.n	800233c <LoopCopyDataInit>

08002334 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002336:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002338:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800233a:	3104      	adds	r1, #4

0800233c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800233c:	480b      	ldr	r0, [pc, #44]	; (800236c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002340:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002342:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002344:	d3f6      	bcc.n	8002334 <CopyDataInit>
  ldr  r2, =_sbss
 8002346:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002348:	e002      	b.n	8002350 <LoopFillZerobss>

0800234a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800234a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800234c:	f842 3b04 	str.w	r3, [r2], #4

08002350 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002352:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002354:	d3f9      	bcc.n	800234a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002356:	f7ff ffb3 	bl	80022c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800235a:	f000 f817 	bl	800238c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800235e:	f7ff fcef 	bl	8001d40 <main>
  bx  lr    
 8002362:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002364:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002368:	08002c78 	.word	0x08002c78
  ldr  r0, =_sdata
 800236c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002370:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002374:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002378:	20000120 	.word	0x20000120

0800237c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800237c:	e7fe      	b.n	800237c <ADC_IRQHandler>
	...

08002380 <__errno>:
 8002380:	4b01      	ldr	r3, [pc, #4]	; (8002388 <__errno+0x8>)
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	2000000c 	.word	0x2000000c

0800238c <__libc_init_array>:
 800238c:	b570      	push	{r4, r5, r6, lr}
 800238e:	4e0d      	ldr	r6, [pc, #52]	; (80023c4 <__libc_init_array+0x38>)
 8002390:	4c0d      	ldr	r4, [pc, #52]	; (80023c8 <__libc_init_array+0x3c>)
 8002392:	1ba4      	subs	r4, r4, r6
 8002394:	10a4      	asrs	r4, r4, #2
 8002396:	2500      	movs	r5, #0
 8002398:	42a5      	cmp	r5, r4
 800239a:	d109      	bne.n	80023b0 <__libc_init_array+0x24>
 800239c:	4e0b      	ldr	r6, [pc, #44]	; (80023cc <__libc_init_array+0x40>)
 800239e:	4c0c      	ldr	r4, [pc, #48]	; (80023d0 <__libc_init_array+0x44>)
 80023a0:	f000 fc26 	bl	8002bf0 <_init>
 80023a4:	1ba4      	subs	r4, r4, r6
 80023a6:	10a4      	asrs	r4, r4, #2
 80023a8:	2500      	movs	r5, #0
 80023aa:	42a5      	cmp	r5, r4
 80023ac:	d105      	bne.n	80023ba <__libc_init_array+0x2e>
 80023ae:	bd70      	pop	{r4, r5, r6, pc}
 80023b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023b4:	4798      	blx	r3
 80023b6:	3501      	adds	r5, #1
 80023b8:	e7ee      	b.n	8002398 <__libc_init_array+0xc>
 80023ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023be:	4798      	blx	r3
 80023c0:	3501      	adds	r5, #1
 80023c2:	e7f2      	b.n	80023aa <__libc_init_array+0x1e>
 80023c4:	08002c70 	.word	0x08002c70
 80023c8:	08002c70 	.word	0x08002c70
 80023cc:	08002c70 	.word	0x08002c70
 80023d0:	08002c74 	.word	0x08002c74

080023d4 <memset>:
 80023d4:	4402      	add	r2, r0
 80023d6:	4603      	mov	r3, r0
 80023d8:	4293      	cmp	r3, r2
 80023da:	d100      	bne.n	80023de <memset+0xa>
 80023dc:	4770      	bx	lr
 80023de:	f803 1b01 	strb.w	r1, [r3], #1
 80023e2:	e7f9      	b.n	80023d8 <memset+0x4>

080023e4 <siprintf>:
 80023e4:	b40e      	push	{r1, r2, r3}
 80023e6:	b500      	push	{lr}
 80023e8:	b09c      	sub	sp, #112	; 0x70
 80023ea:	ab1d      	add	r3, sp, #116	; 0x74
 80023ec:	9002      	str	r0, [sp, #8]
 80023ee:	9006      	str	r0, [sp, #24]
 80023f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80023f4:	4809      	ldr	r0, [pc, #36]	; (800241c <siprintf+0x38>)
 80023f6:	9107      	str	r1, [sp, #28]
 80023f8:	9104      	str	r1, [sp, #16]
 80023fa:	4909      	ldr	r1, [pc, #36]	; (8002420 <siprintf+0x3c>)
 80023fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002400:	9105      	str	r1, [sp, #20]
 8002402:	6800      	ldr	r0, [r0, #0]
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	a902      	add	r1, sp, #8
 8002408:	f000 f866 	bl	80024d8 <_svfiprintf_r>
 800240c:	9b02      	ldr	r3, [sp, #8]
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	b01c      	add	sp, #112	; 0x70
 8002414:	f85d eb04 	ldr.w	lr, [sp], #4
 8002418:	b003      	add	sp, #12
 800241a:	4770      	bx	lr
 800241c:	2000000c 	.word	0x2000000c
 8002420:	ffff0208 	.word	0xffff0208

08002424 <__ssputs_r>:
 8002424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002428:	688e      	ldr	r6, [r1, #8]
 800242a:	429e      	cmp	r6, r3
 800242c:	4682      	mov	sl, r0
 800242e:	460c      	mov	r4, r1
 8002430:	4690      	mov	r8, r2
 8002432:	4699      	mov	r9, r3
 8002434:	d837      	bhi.n	80024a6 <__ssputs_r+0x82>
 8002436:	898a      	ldrh	r2, [r1, #12]
 8002438:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800243c:	d031      	beq.n	80024a2 <__ssputs_r+0x7e>
 800243e:	6825      	ldr	r5, [r4, #0]
 8002440:	6909      	ldr	r1, [r1, #16]
 8002442:	1a6f      	subs	r7, r5, r1
 8002444:	6965      	ldr	r5, [r4, #20]
 8002446:	2302      	movs	r3, #2
 8002448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800244c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002450:	f109 0301 	add.w	r3, r9, #1
 8002454:	443b      	add	r3, r7
 8002456:	429d      	cmp	r5, r3
 8002458:	bf38      	it	cc
 800245a:	461d      	movcc	r5, r3
 800245c:	0553      	lsls	r3, r2, #21
 800245e:	d530      	bpl.n	80024c2 <__ssputs_r+0x9e>
 8002460:	4629      	mov	r1, r5
 8002462:	f000 fb2b 	bl	8002abc <_malloc_r>
 8002466:	4606      	mov	r6, r0
 8002468:	b950      	cbnz	r0, 8002480 <__ssputs_r+0x5c>
 800246a:	230c      	movs	r3, #12
 800246c:	f8ca 3000 	str.w	r3, [sl]
 8002470:	89a3      	ldrh	r3, [r4, #12]
 8002472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002476:	81a3      	strh	r3, [r4, #12]
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002480:	463a      	mov	r2, r7
 8002482:	6921      	ldr	r1, [r4, #16]
 8002484:	f000 faa8 	bl	80029d8 <memcpy>
 8002488:	89a3      	ldrh	r3, [r4, #12]
 800248a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800248e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002492:	81a3      	strh	r3, [r4, #12]
 8002494:	6126      	str	r6, [r4, #16]
 8002496:	6165      	str	r5, [r4, #20]
 8002498:	443e      	add	r6, r7
 800249a:	1bed      	subs	r5, r5, r7
 800249c:	6026      	str	r6, [r4, #0]
 800249e:	60a5      	str	r5, [r4, #8]
 80024a0:	464e      	mov	r6, r9
 80024a2:	454e      	cmp	r6, r9
 80024a4:	d900      	bls.n	80024a8 <__ssputs_r+0x84>
 80024a6:	464e      	mov	r6, r9
 80024a8:	4632      	mov	r2, r6
 80024aa:	4641      	mov	r1, r8
 80024ac:	6820      	ldr	r0, [r4, #0]
 80024ae:	f000 fa9e 	bl	80029ee <memmove>
 80024b2:	68a3      	ldr	r3, [r4, #8]
 80024b4:	1b9b      	subs	r3, r3, r6
 80024b6:	60a3      	str	r3, [r4, #8]
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	441e      	add	r6, r3
 80024bc:	6026      	str	r6, [r4, #0]
 80024be:	2000      	movs	r0, #0
 80024c0:	e7dc      	b.n	800247c <__ssputs_r+0x58>
 80024c2:	462a      	mov	r2, r5
 80024c4:	f000 fb54 	bl	8002b70 <_realloc_r>
 80024c8:	4606      	mov	r6, r0
 80024ca:	2800      	cmp	r0, #0
 80024cc:	d1e2      	bne.n	8002494 <__ssputs_r+0x70>
 80024ce:	6921      	ldr	r1, [r4, #16]
 80024d0:	4650      	mov	r0, sl
 80024d2:	f000 faa5 	bl	8002a20 <_free_r>
 80024d6:	e7c8      	b.n	800246a <__ssputs_r+0x46>

080024d8 <_svfiprintf_r>:
 80024d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024dc:	461d      	mov	r5, r3
 80024de:	898b      	ldrh	r3, [r1, #12]
 80024e0:	061f      	lsls	r7, r3, #24
 80024e2:	b09d      	sub	sp, #116	; 0x74
 80024e4:	4680      	mov	r8, r0
 80024e6:	460c      	mov	r4, r1
 80024e8:	4616      	mov	r6, r2
 80024ea:	d50f      	bpl.n	800250c <_svfiprintf_r+0x34>
 80024ec:	690b      	ldr	r3, [r1, #16]
 80024ee:	b96b      	cbnz	r3, 800250c <_svfiprintf_r+0x34>
 80024f0:	2140      	movs	r1, #64	; 0x40
 80024f2:	f000 fae3 	bl	8002abc <_malloc_r>
 80024f6:	6020      	str	r0, [r4, #0]
 80024f8:	6120      	str	r0, [r4, #16]
 80024fa:	b928      	cbnz	r0, 8002508 <_svfiprintf_r+0x30>
 80024fc:	230c      	movs	r3, #12
 80024fe:	f8c8 3000 	str.w	r3, [r8]
 8002502:	f04f 30ff 	mov.w	r0, #4294967295
 8002506:	e0c8      	b.n	800269a <_svfiprintf_r+0x1c2>
 8002508:	2340      	movs	r3, #64	; 0x40
 800250a:	6163      	str	r3, [r4, #20]
 800250c:	2300      	movs	r3, #0
 800250e:	9309      	str	r3, [sp, #36]	; 0x24
 8002510:	2320      	movs	r3, #32
 8002512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002516:	2330      	movs	r3, #48	; 0x30
 8002518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800251c:	9503      	str	r5, [sp, #12]
 800251e:	f04f 0b01 	mov.w	fp, #1
 8002522:	4637      	mov	r7, r6
 8002524:	463d      	mov	r5, r7
 8002526:	f815 3b01 	ldrb.w	r3, [r5], #1
 800252a:	b10b      	cbz	r3, 8002530 <_svfiprintf_r+0x58>
 800252c:	2b25      	cmp	r3, #37	; 0x25
 800252e:	d13e      	bne.n	80025ae <_svfiprintf_r+0xd6>
 8002530:	ebb7 0a06 	subs.w	sl, r7, r6
 8002534:	d00b      	beq.n	800254e <_svfiprintf_r+0x76>
 8002536:	4653      	mov	r3, sl
 8002538:	4632      	mov	r2, r6
 800253a:	4621      	mov	r1, r4
 800253c:	4640      	mov	r0, r8
 800253e:	f7ff ff71 	bl	8002424 <__ssputs_r>
 8002542:	3001      	adds	r0, #1
 8002544:	f000 80a4 	beq.w	8002690 <_svfiprintf_r+0x1b8>
 8002548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800254a:	4453      	add	r3, sl
 800254c:	9309      	str	r3, [sp, #36]	; 0x24
 800254e:	783b      	ldrb	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 809d 	beq.w	8002690 <_svfiprintf_r+0x1b8>
 8002556:	2300      	movs	r3, #0
 8002558:	f04f 32ff 	mov.w	r2, #4294967295
 800255c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002560:	9304      	str	r3, [sp, #16]
 8002562:	9307      	str	r3, [sp, #28]
 8002564:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002568:	931a      	str	r3, [sp, #104]	; 0x68
 800256a:	462f      	mov	r7, r5
 800256c:	2205      	movs	r2, #5
 800256e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002572:	4850      	ldr	r0, [pc, #320]	; (80026b4 <_svfiprintf_r+0x1dc>)
 8002574:	f7fd fe4c 	bl	8000210 <memchr>
 8002578:	9b04      	ldr	r3, [sp, #16]
 800257a:	b9d0      	cbnz	r0, 80025b2 <_svfiprintf_r+0xda>
 800257c:	06d9      	lsls	r1, r3, #27
 800257e:	bf44      	itt	mi
 8002580:	2220      	movmi	r2, #32
 8002582:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002586:	071a      	lsls	r2, r3, #28
 8002588:	bf44      	itt	mi
 800258a:	222b      	movmi	r2, #43	; 0x2b
 800258c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002590:	782a      	ldrb	r2, [r5, #0]
 8002592:	2a2a      	cmp	r2, #42	; 0x2a
 8002594:	d015      	beq.n	80025c2 <_svfiprintf_r+0xea>
 8002596:	9a07      	ldr	r2, [sp, #28]
 8002598:	462f      	mov	r7, r5
 800259a:	2000      	movs	r0, #0
 800259c:	250a      	movs	r5, #10
 800259e:	4639      	mov	r1, r7
 80025a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025a4:	3b30      	subs	r3, #48	; 0x30
 80025a6:	2b09      	cmp	r3, #9
 80025a8:	d94d      	bls.n	8002646 <_svfiprintf_r+0x16e>
 80025aa:	b1b8      	cbz	r0, 80025dc <_svfiprintf_r+0x104>
 80025ac:	e00f      	b.n	80025ce <_svfiprintf_r+0xf6>
 80025ae:	462f      	mov	r7, r5
 80025b0:	e7b8      	b.n	8002524 <_svfiprintf_r+0x4c>
 80025b2:	4a40      	ldr	r2, [pc, #256]	; (80026b4 <_svfiprintf_r+0x1dc>)
 80025b4:	1a80      	subs	r0, r0, r2
 80025b6:	fa0b f000 	lsl.w	r0, fp, r0
 80025ba:	4318      	orrs	r0, r3
 80025bc:	9004      	str	r0, [sp, #16]
 80025be:	463d      	mov	r5, r7
 80025c0:	e7d3      	b.n	800256a <_svfiprintf_r+0x92>
 80025c2:	9a03      	ldr	r2, [sp, #12]
 80025c4:	1d11      	adds	r1, r2, #4
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	9103      	str	r1, [sp, #12]
 80025ca:	2a00      	cmp	r2, #0
 80025cc:	db01      	blt.n	80025d2 <_svfiprintf_r+0xfa>
 80025ce:	9207      	str	r2, [sp, #28]
 80025d0:	e004      	b.n	80025dc <_svfiprintf_r+0x104>
 80025d2:	4252      	negs	r2, r2
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	9207      	str	r2, [sp, #28]
 80025da:	9304      	str	r3, [sp, #16]
 80025dc:	783b      	ldrb	r3, [r7, #0]
 80025de:	2b2e      	cmp	r3, #46	; 0x2e
 80025e0:	d10c      	bne.n	80025fc <_svfiprintf_r+0x124>
 80025e2:	787b      	ldrb	r3, [r7, #1]
 80025e4:	2b2a      	cmp	r3, #42	; 0x2a
 80025e6:	d133      	bne.n	8002650 <_svfiprintf_r+0x178>
 80025e8:	9b03      	ldr	r3, [sp, #12]
 80025ea:	1d1a      	adds	r2, r3, #4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	9203      	str	r2, [sp, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bfb8      	it	lt
 80025f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80025f8:	3702      	adds	r7, #2
 80025fa:	9305      	str	r3, [sp, #20]
 80025fc:	4d2e      	ldr	r5, [pc, #184]	; (80026b8 <_svfiprintf_r+0x1e0>)
 80025fe:	7839      	ldrb	r1, [r7, #0]
 8002600:	2203      	movs	r2, #3
 8002602:	4628      	mov	r0, r5
 8002604:	f7fd fe04 	bl	8000210 <memchr>
 8002608:	b138      	cbz	r0, 800261a <_svfiprintf_r+0x142>
 800260a:	2340      	movs	r3, #64	; 0x40
 800260c:	1b40      	subs	r0, r0, r5
 800260e:	fa03 f000 	lsl.w	r0, r3, r0
 8002612:	9b04      	ldr	r3, [sp, #16]
 8002614:	4303      	orrs	r3, r0
 8002616:	3701      	adds	r7, #1
 8002618:	9304      	str	r3, [sp, #16]
 800261a:	7839      	ldrb	r1, [r7, #0]
 800261c:	4827      	ldr	r0, [pc, #156]	; (80026bc <_svfiprintf_r+0x1e4>)
 800261e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002622:	2206      	movs	r2, #6
 8002624:	1c7e      	adds	r6, r7, #1
 8002626:	f7fd fdf3 	bl	8000210 <memchr>
 800262a:	2800      	cmp	r0, #0
 800262c:	d038      	beq.n	80026a0 <_svfiprintf_r+0x1c8>
 800262e:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <_svfiprintf_r+0x1e8>)
 8002630:	bb13      	cbnz	r3, 8002678 <_svfiprintf_r+0x1a0>
 8002632:	9b03      	ldr	r3, [sp, #12]
 8002634:	3307      	adds	r3, #7
 8002636:	f023 0307 	bic.w	r3, r3, #7
 800263a:	3308      	adds	r3, #8
 800263c:	9303      	str	r3, [sp, #12]
 800263e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002640:	444b      	add	r3, r9
 8002642:	9309      	str	r3, [sp, #36]	; 0x24
 8002644:	e76d      	b.n	8002522 <_svfiprintf_r+0x4a>
 8002646:	fb05 3202 	mla	r2, r5, r2, r3
 800264a:	2001      	movs	r0, #1
 800264c:	460f      	mov	r7, r1
 800264e:	e7a6      	b.n	800259e <_svfiprintf_r+0xc6>
 8002650:	2300      	movs	r3, #0
 8002652:	3701      	adds	r7, #1
 8002654:	9305      	str	r3, [sp, #20]
 8002656:	4619      	mov	r1, r3
 8002658:	250a      	movs	r5, #10
 800265a:	4638      	mov	r0, r7
 800265c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002660:	3a30      	subs	r2, #48	; 0x30
 8002662:	2a09      	cmp	r2, #9
 8002664:	d903      	bls.n	800266e <_svfiprintf_r+0x196>
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0c8      	beq.n	80025fc <_svfiprintf_r+0x124>
 800266a:	9105      	str	r1, [sp, #20]
 800266c:	e7c6      	b.n	80025fc <_svfiprintf_r+0x124>
 800266e:	fb05 2101 	mla	r1, r5, r1, r2
 8002672:	2301      	movs	r3, #1
 8002674:	4607      	mov	r7, r0
 8002676:	e7f0      	b.n	800265a <_svfiprintf_r+0x182>
 8002678:	ab03      	add	r3, sp, #12
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	4622      	mov	r2, r4
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <_svfiprintf_r+0x1ec>)
 8002680:	a904      	add	r1, sp, #16
 8002682:	4640      	mov	r0, r8
 8002684:	f3af 8000 	nop.w
 8002688:	f1b0 3fff 	cmp.w	r0, #4294967295
 800268c:	4681      	mov	r9, r0
 800268e:	d1d6      	bne.n	800263e <_svfiprintf_r+0x166>
 8002690:	89a3      	ldrh	r3, [r4, #12]
 8002692:	065b      	lsls	r3, r3, #25
 8002694:	f53f af35 	bmi.w	8002502 <_svfiprintf_r+0x2a>
 8002698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800269a:	b01d      	add	sp, #116	; 0x74
 800269c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026a0:	ab03      	add	r3, sp, #12
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	4622      	mov	r2, r4
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <_svfiprintf_r+0x1ec>)
 80026a8:	a904      	add	r1, sp, #16
 80026aa:	4640      	mov	r0, r8
 80026ac:	f000 f882 	bl	80027b4 <_printf_i>
 80026b0:	e7ea      	b.n	8002688 <_svfiprintf_r+0x1b0>
 80026b2:	bf00      	nop
 80026b4:	08002c34 	.word	0x08002c34
 80026b8:	08002c3a 	.word	0x08002c3a
 80026bc:	08002c3e 	.word	0x08002c3e
 80026c0:	00000000 	.word	0x00000000
 80026c4:	08002425 	.word	0x08002425

080026c8 <_printf_common>:
 80026c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026cc:	4691      	mov	r9, r2
 80026ce:	461f      	mov	r7, r3
 80026d0:	688a      	ldr	r2, [r1, #8]
 80026d2:	690b      	ldr	r3, [r1, #16]
 80026d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026d8:	4293      	cmp	r3, r2
 80026da:	bfb8      	it	lt
 80026dc:	4613      	movlt	r3, r2
 80026de:	f8c9 3000 	str.w	r3, [r9]
 80026e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026e6:	4606      	mov	r6, r0
 80026e8:	460c      	mov	r4, r1
 80026ea:	b112      	cbz	r2, 80026f2 <_printf_common+0x2a>
 80026ec:	3301      	adds	r3, #1
 80026ee:	f8c9 3000 	str.w	r3, [r9]
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	0699      	lsls	r1, r3, #26
 80026f6:	bf42      	ittt	mi
 80026f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80026fc:	3302      	addmi	r3, #2
 80026fe:	f8c9 3000 	strmi.w	r3, [r9]
 8002702:	6825      	ldr	r5, [r4, #0]
 8002704:	f015 0506 	ands.w	r5, r5, #6
 8002708:	d107      	bne.n	800271a <_printf_common+0x52>
 800270a:	f104 0a19 	add.w	sl, r4, #25
 800270e:	68e3      	ldr	r3, [r4, #12]
 8002710:	f8d9 2000 	ldr.w	r2, [r9]
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	42ab      	cmp	r3, r5
 8002718:	dc28      	bgt.n	800276c <_printf_common+0xa4>
 800271a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800271e:	6822      	ldr	r2, [r4, #0]
 8002720:	3300      	adds	r3, #0
 8002722:	bf18      	it	ne
 8002724:	2301      	movne	r3, #1
 8002726:	0692      	lsls	r2, r2, #26
 8002728:	d42d      	bmi.n	8002786 <_printf_common+0xbe>
 800272a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800272e:	4639      	mov	r1, r7
 8002730:	4630      	mov	r0, r6
 8002732:	47c0      	blx	r8
 8002734:	3001      	adds	r0, #1
 8002736:	d020      	beq.n	800277a <_printf_common+0xb2>
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	68e5      	ldr	r5, [r4, #12]
 800273c:	f8d9 2000 	ldr.w	r2, [r9]
 8002740:	f003 0306 	and.w	r3, r3, #6
 8002744:	2b04      	cmp	r3, #4
 8002746:	bf08      	it	eq
 8002748:	1aad      	subeq	r5, r5, r2
 800274a:	68a3      	ldr	r3, [r4, #8]
 800274c:	6922      	ldr	r2, [r4, #16]
 800274e:	bf0c      	ite	eq
 8002750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002754:	2500      	movne	r5, #0
 8002756:	4293      	cmp	r3, r2
 8002758:	bfc4      	itt	gt
 800275a:	1a9b      	subgt	r3, r3, r2
 800275c:	18ed      	addgt	r5, r5, r3
 800275e:	f04f 0900 	mov.w	r9, #0
 8002762:	341a      	adds	r4, #26
 8002764:	454d      	cmp	r5, r9
 8002766:	d11a      	bne.n	800279e <_printf_common+0xd6>
 8002768:	2000      	movs	r0, #0
 800276a:	e008      	b.n	800277e <_printf_common+0xb6>
 800276c:	2301      	movs	r3, #1
 800276e:	4652      	mov	r2, sl
 8002770:	4639      	mov	r1, r7
 8002772:	4630      	mov	r0, r6
 8002774:	47c0      	blx	r8
 8002776:	3001      	adds	r0, #1
 8002778:	d103      	bne.n	8002782 <_printf_common+0xba>
 800277a:	f04f 30ff 	mov.w	r0, #4294967295
 800277e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002782:	3501      	adds	r5, #1
 8002784:	e7c3      	b.n	800270e <_printf_common+0x46>
 8002786:	18e1      	adds	r1, r4, r3
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	2030      	movs	r0, #48	; 0x30
 800278c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002790:	4422      	add	r2, r4
 8002792:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002796:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800279a:	3302      	adds	r3, #2
 800279c:	e7c5      	b.n	800272a <_printf_common+0x62>
 800279e:	2301      	movs	r3, #1
 80027a0:	4622      	mov	r2, r4
 80027a2:	4639      	mov	r1, r7
 80027a4:	4630      	mov	r0, r6
 80027a6:	47c0      	blx	r8
 80027a8:	3001      	adds	r0, #1
 80027aa:	d0e6      	beq.n	800277a <_printf_common+0xb2>
 80027ac:	f109 0901 	add.w	r9, r9, #1
 80027b0:	e7d8      	b.n	8002764 <_printf_common+0x9c>
	...

080027b4 <_printf_i>:
 80027b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80027bc:	460c      	mov	r4, r1
 80027be:	7e09      	ldrb	r1, [r1, #24]
 80027c0:	b085      	sub	sp, #20
 80027c2:	296e      	cmp	r1, #110	; 0x6e
 80027c4:	4617      	mov	r7, r2
 80027c6:	4606      	mov	r6, r0
 80027c8:	4698      	mov	r8, r3
 80027ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80027cc:	f000 80b3 	beq.w	8002936 <_printf_i+0x182>
 80027d0:	d822      	bhi.n	8002818 <_printf_i+0x64>
 80027d2:	2963      	cmp	r1, #99	; 0x63
 80027d4:	d036      	beq.n	8002844 <_printf_i+0x90>
 80027d6:	d80a      	bhi.n	80027ee <_printf_i+0x3a>
 80027d8:	2900      	cmp	r1, #0
 80027da:	f000 80b9 	beq.w	8002950 <_printf_i+0x19c>
 80027de:	2958      	cmp	r1, #88	; 0x58
 80027e0:	f000 8083 	beq.w	80028ea <_printf_i+0x136>
 80027e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80027ec:	e032      	b.n	8002854 <_printf_i+0xa0>
 80027ee:	2964      	cmp	r1, #100	; 0x64
 80027f0:	d001      	beq.n	80027f6 <_printf_i+0x42>
 80027f2:	2969      	cmp	r1, #105	; 0x69
 80027f4:	d1f6      	bne.n	80027e4 <_printf_i+0x30>
 80027f6:	6820      	ldr	r0, [r4, #0]
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	0605      	lsls	r5, r0, #24
 80027fc:	f103 0104 	add.w	r1, r3, #4
 8002800:	d52a      	bpl.n	8002858 <_printf_i+0xa4>
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6011      	str	r1, [r2, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	da03      	bge.n	8002812 <_printf_i+0x5e>
 800280a:	222d      	movs	r2, #45	; 0x2d
 800280c:	425b      	negs	r3, r3
 800280e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002812:	486f      	ldr	r0, [pc, #444]	; (80029d0 <_printf_i+0x21c>)
 8002814:	220a      	movs	r2, #10
 8002816:	e039      	b.n	800288c <_printf_i+0xd8>
 8002818:	2973      	cmp	r1, #115	; 0x73
 800281a:	f000 809d 	beq.w	8002958 <_printf_i+0x1a4>
 800281e:	d808      	bhi.n	8002832 <_printf_i+0x7e>
 8002820:	296f      	cmp	r1, #111	; 0x6f
 8002822:	d020      	beq.n	8002866 <_printf_i+0xb2>
 8002824:	2970      	cmp	r1, #112	; 0x70
 8002826:	d1dd      	bne.n	80027e4 <_printf_i+0x30>
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	f043 0320 	orr.w	r3, r3, #32
 800282e:	6023      	str	r3, [r4, #0]
 8002830:	e003      	b.n	800283a <_printf_i+0x86>
 8002832:	2975      	cmp	r1, #117	; 0x75
 8002834:	d017      	beq.n	8002866 <_printf_i+0xb2>
 8002836:	2978      	cmp	r1, #120	; 0x78
 8002838:	d1d4      	bne.n	80027e4 <_printf_i+0x30>
 800283a:	2378      	movs	r3, #120	; 0x78
 800283c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002840:	4864      	ldr	r0, [pc, #400]	; (80029d4 <_printf_i+0x220>)
 8002842:	e055      	b.n	80028f0 <_printf_i+0x13c>
 8002844:	6813      	ldr	r3, [r2, #0]
 8002846:	1d19      	adds	r1, r3, #4
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6011      	str	r1, [r2, #0]
 800284c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002854:	2301      	movs	r3, #1
 8002856:	e08c      	b.n	8002972 <_printf_i+0x1be>
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6011      	str	r1, [r2, #0]
 800285c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002860:	bf18      	it	ne
 8002862:	b21b      	sxthne	r3, r3
 8002864:	e7cf      	b.n	8002806 <_printf_i+0x52>
 8002866:	6813      	ldr	r3, [r2, #0]
 8002868:	6825      	ldr	r5, [r4, #0]
 800286a:	1d18      	adds	r0, r3, #4
 800286c:	6010      	str	r0, [r2, #0]
 800286e:	0628      	lsls	r0, r5, #24
 8002870:	d501      	bpl.n	8002876 <_printf_i+0xc2>
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	e002      	b.n	800287c <_printf_i+0xc8>
 8002876:	0668      	lsls	r0, r5, #25
 8002878:	d5fb      	bpl.n	8002872 <_printf_i+0xbe>
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	4854      	ldr	r0, [pc, #336]	; (80029d0 <_printf_i+0x21c>)
 800287e:	296f      	cmp	r1, #111	; 0x6f
 8002880:	bf14      	ite	ne
 8002882:	220a      	movne	r2, #10
 8002884:	2208      	moveq	r2, #8
 8002886:	2100      	movs	r1, #0
 8002888:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800288c:	6865      	ldr	r5, [r4, #4]
 800288e:	60a5      	str	r5, [r4, #8]
 8002890:	2d00      	cmp	r5, #0
 8002892:	f2c0 8095 	blt.w	80029c0 <_printf_i+0x20c>
 8002896:	6821      	ldr	r1, [r4, #0]
 8002898:	f021 0104 	bic.w	r1, r1, #4
 800289c:	6021      	str	r1, [r4, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d13d      	bne.n	800291e <_printf_i+0x16a>
 80028a2:	2d00      	cmp	r5, #0
 80028a4:	f040 808e 	bne.w	80029c4 <_printf_i+0x210>
 80028a8:	4665      	mov	r5, ip
 80028aa:	2a08      	cmp	r2, #8
 80028ac:	d10b      	bne.n	80028c6 <_printf_i+0x112>
 80028ae:	6823      	ldr	r3, [r4, #0]
 80028b0:	07db      	lsls	r3, r3, #31
 80028b2:	d508      	bpl.n	80028c6 <_printf_i+0x112>
 80028b4:	6923      	ldr	r3, [r4, #16]
 80028b6:	6862      	ldr	r2, [r4, #4]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	bfde      	ittt	le
 80028bc:	2330      	movle	r3, #48	; 0x30
 80028be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80028c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80028c6:	ebac 0305 	sub.w	r3, ip, r5
 80028ca:	6123      	str	r3, [r4, #16]
 80028cc:	f8cd 8000 	str.w	r8, [sp]
 80028d0:	463b      	mov	r3, r7
 80028d2:	aa03      	add	r2, sp, #12
 80028d4:	4621      	mov	r1, r4
 80028d6:	4630      	mov	r0, r6
 80028d8:	f7ff fef6 	bl	80026c8 <_printf_common>
 80028dc:	3001      	adds	r0, #1
 80028de:	d14d      	bne.n	800297c <_printf_i+0x1c8>
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295
 80028e4:	b005      	add	sp, #20
 80028e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028ea:	4839      	ldr	r0, [pc, #228]	; (80029d0 <_printf_i+0x21c>)
 80028ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80028f0:	6813      	ldr	r3, [r2, #0]
 80028f2:	6821      	ldr	r1, [r4, #0]
 80028f4:	1d1d      	adds	r5, r3, #4
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6015      	str	r5, [r2, #0]
 80028fa:	060a      	lsls	r2, r1, #24
 80028fc:	d50b      	bpl.n	8002916 <_printf_i+0x162>
 80028fe:	07ca      	lsls	r2, r1, #31
 8002900:	bf44      	itt	mi
 8002902:	f041 0120 	orrmi.w	r1, r1, #32
 8002906:	6021      	strmi	r1, [r4, #0]
 8002908:	b91b      	cbnz	r3, 8002912 <_printf_i+0x15e>
 800290a:	6822      	ldr	r2, [r4, #0]
 800290c:	f022 0220 	bic.w	r2, r2, #32
 8002910:	6022      	str	r2, [r4, #0]
 8002912:	2210      	movs	r2, #16
 8002914:	e7b7      	b.n	8002886 <_printf_i+0xd2>
 8002916:	064d      	lsls	r5, r1, #25
 8002918:	bf48      	it	mi
 800291a:	b29b      	uxthmi	r3, r3
 800291c:	e7ef      	b.n	80028fe <_printf_i+0x14a>
 800291e:	4665      	mov	r5, ip
 8002920:	fbb3 f1f2 	udiv	r1, r3, r2
 8002924:	fb02 3311 	mls	r3, r2, r1, r3
 8002928:	5cc3      	ldrb	r3, [r0, r3]
 800292a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800292e:	460b      	mov	r3, r1
 8002930:	2900      	cmp	r1, #0
 8002932:	d1f5      	bne.n	8002920 <_printf_i+0x16c>
 8002934:	e7b9      	b.n	80028aa <_printf_i+0xf6>
 8002936:	6813      	ldr	r3, [r2, #0]
 8002938:	6825      	ldr	r5, [r4, #0]
 800293a:	6961      	ldr	r1, [r4, #20]
 800293c:	1d18      	adds	r0, r3, #4
 800293e:	6010      	str	r0, [r2, #0]
 8002940:	0628      	lsls	r0, r5, #24
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	d501      	bpl.n	800294a <_printf_i+0x196>
 8002946:	6019      	str	r1, [r3, #0]
 8002948:	e002      	b.n	8002950 <_printf_i+0x19c>
 800294a:	066a      	lsls	r2, r5, #25
 800294c:	d5fb      	bpl.n	8002946 <_printf_i+0x192>
 800294e:	8019      	strh	r1, [r3, #0]
 8002950:	2300      	movs	r3, #0
 8002952:	6123      	str	r3, [r4, #16]
 8002954:	4665      	mov	r5, ip
 8002956:	e7b9      	b.n	80028cc <_printf_i+0x118>
 8002958:	6813      	ldr	r3, [r2, #0]
 800295a:	1d19      	adds	r1, r3, #4
 800295c:	6011      	str	r1, [r2, #0]
 800295e:	681d      	ldr	r5, [r3, #0]
 8002960:	6862      	ldr	r2, [r4, #4]
 8002962:	2100      	movs	r1, #0
 8002964:	4628      	mov	r0, r5
 8002966:	f7fd fc53 	bl	8000210 <memchr>
 800296a:	b108      	cbz	r0, 8002970 <_printf_i+0x1bc>
 800296c:	1b40      	subs	r0, r0, r5
 800296e:	6060      	str	r0, [r4, #4]
 8002970:	6863      	ldr	r3, [r4, #4]
 8002972:	6123      	str	r3, [r4, #16]
 8002974:	2300      	movs	r3, #0
 8002976:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800297a:	e7a7      	b.n	80028cc <_printf_i+0x118>
 800297c:	6923      	ldr	r3, [r4, #16]
 800297e:	462a      	mov	r2, r5
 8002980:	4639      	mov	r1, r7
 8002982:	4630      	mov	r0, r6
 8002984:	47c0      	blx	r8
 8002986:	3001      	adds	r0, #1
 8002988:	d0aa      	beq.n	80028e0 <_printf_i+0x12c>
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	079b      	lsls	r3, r3, #30
 800298e:	d413      	bmi.n	80029b8 <_printf_i+0x204>
 8002990:	68e0      	ldr	r0, [r4, #12]
 8002992:	9b03      	ldr	r3, [sp, #12]
 8002994:	4298      	cmp	r0, r3
 8002996:	bfb8      	it	lt
 8002998:	4618      	movlt	r0, r3
 800299a:	e7a3      	b.n	80028e4 <_printf_i+0x130>
 800299c:	2301      	movs	r3, #1
 800299e:	464a      	mov	r2, r9
 80029a0:	4639      	mov	r1, r7
 80029a2:	4630      	mov	r0, r6
 80029a4:	47c0      	blx	r8
 80029a6:	3001      	adds	r0, #1
 80029a8:	d09a      	beq.n	80028e0 <_printf_i+0x12c>
 80029aa:	3501      	adds	r5, #1
 80029ac:	68e3      	ldr	r3, [r4, #12]
 80029ae:	9a03      	ldr	r2, [sp, #12]
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	42ab      	cmp	r3, r5
 80029b4:	dcf2      	bgt.n	800299c <_printf_i+0x1e8>
 80029b6:	e7eb      	b.n	8002990 <_printf_i+0x1dc>
 80029b8:	2500      	movs	r5, #0
 80029ba:	f104 0919 	add.w	r9, r4, #25
 80029be:	e7f5      	b.n	80029ac <_printf_i+0x1f8>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ac      	bne.n	800291e <_printf_i+0x16a>
 80029c4:	7803      	ldrb	r3, [r0, #0]
 80029c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029ce:	e76c      	b.n	80028aa <_printf_i+0xf6>
 80029d0:	08002c45 	.word	0x08002c45
 80029d4:	08002c56 	.word	0x08002c56

080029d8 <memcpy>:
 80029d8:	b510      	push	{r4, lr}
 80029da:	1e43      	subs	r3, r0, #1
 80029dc:	440a      	add	r2, r1
 80029de:	4291      	cmp	r1, r2
 80029e0:	d100      	bne.n	80029e4 <memcpy+0xc>
 80029e2:	bd10      	pop	{r4, pc}
 80029e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029ec:	e7f7      	b.n	80029de <memcpy+0x6>

080029ee <memmove>:
 80029ee:	4288      	cmp	r0, r1
 80029f0:	b510      	push	{r4, lr}
 80029f2:	eb01 0302 	add.w	r3, r1, r2
 80029f6:	d807      	bhi.n	8002a08 <memmove+0x1a>
 80029f8:	1e42      	subs	r2, r0, #1
 80029fa:	4299      	cmp	r1, r3
 80029fc:	d00a      	beq.n	8002a14 <memmove+0x26>
 80029fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a02:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002a06:	e7f8      	b.n	80029fa <memmove+0xc>
 8002a08:	4283      	cmp	r3, r0
 8002a0a:	d9f5      	bls.n	80029f8 <memmove+0xa>
 8002a0c:	1881      	adds	r1, r0, r2
 8002a0e:	1ad2      	subs	r2, r2, r3
 8002a10:	42d3      	cmn	r3, r2
 8002a12:	d100      	bne.n	8002a16 <memmove+0x28>
 8002a14:	bd10      	pop	{r4, pc}
 8002a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a1a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002a1e:	e7f7      	b.n	8002a10 <memmove+0x22>

08002a20 <_free_r>:
 8002a20:	b538      	push	{r3, r4, r5, lr}
 8002a22:	4605      	mov	r5, r0
 8002a24:	2900      	cmp	r1, #0
 8002a26:	d045      	beq.n	8002ab4 <_free_r+0x94>
 8002a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a2c:	1f0c      	subs	r4, r1, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bfb8      	it	lt
 8002a32:	18e4      	addlt	r4, r4, r3
 8002a34:	f000 f8d2 	bl	8002bdc <__malloc_lock>
 8002a38:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <_free_r+0x98>)
 8002a3a:	6813      	ldr	r3, [r2, #0]
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	b933      	cbnz	r3, 8002a4e <_free_r+0x2e>
 8002a40:	6063      	str	r3, [r4, #4]
 8002a42:	6014      	str	r4, [r2, #0]
 8002a44:	4628      	mov	r0, r5
 8002a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a4a:	f000 b8c8 	b.w	8002bde <__malloc_unlock>
 8002a4e:	42a3      	cmp	r3, r4
 8002a50:	d90c      	bls.n	8002a6c <_free_r+0x4c>
 8002a52:	6821      	ldr	r1, [r4, #0]
 8002a54:	1862      	adds	r2, r4, r1
 8002a56:	4293      	cmp	r3, r2
 8002a58:	bf04      	itt	eq
 8002a5a:	681a      	ldreq	r2, [r3, #0]
 8002a5c:	685b      	ldreq	r3, [r3, #4]
 8002a5e:	6063      	str	r3, [r4, #4]
 8002a60:	bf04      	itt	eq
 8002a62:	1852      	addeq	r2, r2, r1
 8002a64:	6022      	streq	r2, [r4, #0]
 8002a66:	6004      	str	r4, [r0, #0]
 8002a68:	e7ec      	b.n	8002a44 <_free_r+0x24>
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	b10a      	cbz	r2, 8002a74 <_free_r+0x54>
 8002a70:	42a2      	cmp	r2, r4
 8002a72:	d9fa      	bls.n	8002a6a <_free_r+0x4a>
 8002a74:	6819      	ldr	r1, [r3, #0]
 8002a76:	1858      	adds	r0, r3, r1
 8002a78:	42a0      	cmp	r0, r4
 8002a7a:	d10b      	bne.n	8002a94 <_free_r+0x74>
 8002a7c:	6820      	ldr	r0, [r4, #0]
 8002a7e:	4401      	add	r1, r0
 8002a80:	1858      	adds	r0, r3, r1
 8002a82:	4282      	cmp	r2, r0
 8002a84:	6019      	str	r1, [r3, #0]
 8002a86:	d1dd      	bne.n	8002a44 <_free_r+0x24>
 8002a88:	6810      	ldr	r0, [r2, #0]
 8002a8a:	6852      	ldr	r2, [r2, #4]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	4401      	add	r1, r0
 8002a90:	6019      	str	r1, [r3, #0]
 8002a92:	e7d7      	b.n	8002a44 <_free_r+0x24>
 8002a94:	d902      	bls.n	8002a9c <_free_r+0x7c>
 8002a96:	230c      	movs	r3, #12
 8002a98:	602b      	str	r3, [r5, #0]
 8002a9a:	e7d3      	b.n	8002a44 <_free_r+0x24>
 8002a9c:	6820      	ldr	r0, [r4, #0]
 8002a9e:	1821      	adds	r1, r4, r0
 8002aa0:	428a      	cmp	r2, r1
 8002aa2:	bf04      	itt	eq
 8002aa4:	6811      	ldreq	r1, [r2, #0]
 8002aa6:	6852      	ldreq	r2, [r2, #4]
 8002aa8:	6062      	str	r2, [r4, #4]
 8002aaa:	bf04      	itt	eq
 8002aac:	1809      	addeq	r1, r1, r0
 8002aae:	6021      	streq	r1, [r4, #0]
 8002ab0:	605c      	str	r4, [r3, #4]
 8002ab2:	e7c7      	b.n	8002a44 <_free_r+0x24>
 8002ab4:	bd38      	pop	{r3, r4, r5, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000090 	.word	0x20000090

08002abc <_malloc_r>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	1ccd      	adds	r5, r1, #3
 8002ac0:	f025 0503 	bic.w	r5, r5, #3
 8002ac4:	3508      	adds	r5, #8
 8002ac6:	2d0c      	cmp	r5, #12
 8002ac8:	bf38      	it	cc
 8002aca:	250c      	movcc	r5, #12
 8002acc:	2d00      	cmp	r5, #0
 8002ace:	4606      	mov	r6, r0
 8002ad0:	db01      	blt.n	8002ad6 <_malloc_r+0x1a>
 8002ad2:	42a9      	cmp	r1, r5
 8002ad4:	d903      	bls.n	8002ade <_malloc_r+0x22>
 8002ad6:	230c      	movs	r3, #12
 8002ad8:	6033      	str	r3, [r6, #0]
 8002ada:	2000      	movs	r0, #0
 8002adc:	bd70      	pop	{r4, r5, r6, pc}
 8002ade:	f000 f87d 	bl	8002bdc <__malloc_lock>
 8002ae2:	4a21      	ldr	r2, [pc, #132]	; (8002b68 <_malloc_r+0xac>)
 8002ae4:	6814      	ldr	r4, [r2, #0]
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	b991      	cbnz	r1, 8002b10 <_malloc_r+0x54>
 8002aea:	4c20      	ldr	r4, [pc, #128]	; (8002b6c <_malloc_r+0xb0>)
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	b91b      	cbnz	r3, 8002af8 <_malloc_r+0x3c>
 8002af0:	4630      	mov	r0, r6
 8002af2:	f000 f863 	bl	8002bbc <_sbrk_r>
 8002af6:	6020      	str	r0, [r4, #0]
 8002af8:	4629      	mov	r1, r5
 8002afa:	4630      	mov	r0, r6
 8002afc:	f000 f85e 	bl	8002bbc <_sbrk_r>
 8002b00:	1c43      	adds	r3, r0, #1
 8002b02:	d124      	bne.n	8002b4e <_malloc_r+0x92>
 8002b04:	230c      	movs	r3, #12
 8002b06:	6033      	str	r3, [r6, #0]
 8002b08:	4630      	mov	r0, r6
 8002b0a:	f000 f868 	bl	8002bde <__malloc_unlock>
 8002b0e:	e7e4      	b.n	8002ada <_malloc_r+0x1e>
 8002b10:	680b      	ldr	r3, [r1, #0]
 8002b12:	1b5b      	subs	r3, r3, r5
 8002b14:	d418      	bmi.n	8002b48 <_malloc_r+0x8c>
 8002b16:	2b0b      	cmp	r3, #11
 8002b18:	d90f      	bls.n	8002b3a <_malloc_r+0x7e>
 8002b1a:	600b      	str	r3, [r1, #0]
 8002b1c:	50cd      	str	r5, [r1, r3]
 8002b1e:	18cc      	adds	r4, r1, r3
 8002b20:	4630      	mov	r0, r6
 8002b22:	f000 f85c 	bl	8002bde <__malloc_unlock>
 8002b26:	f104 000b 	add.w	r0, r4, #11
 8002b2a:	1d23      	adds	r3, r4, #4
 8002b2c:	f020 0007 	bic.w	r0, r0, #7
 8002b30:	1ac3      	subs	r3, r0, r3
 8002b32:	d0d3      	beq.n	8002adc <_malloc_r+0x20>
 8002b34:	425a      	negs	r2, r3
 8002b36:	50e2      	str	r2, [r4, r3]
 8002b38:	e7d0      	b.n	8002adc <_malloc_r+0x20>
 8002b3a:	428c      	cmp	r4, r1
 8002b3c:	684b      	ldr	r3, [r1, #4]
 8002b3e:	bf16      	itet	ne
 8002b40:	6063      	strne	r3, [r4, #4]
 8002b42:	6013      	streq	r3, [r2, #0]
 8002b44:	460c      	movne	r4, r1
 8002b46:	e7eb      	b.n	8002b20 <_malloc_r+0x64>
 8002b48:	460c      	mov	r4, r1
 8002b4a:	6849      	ldr	r1, [r1, #4]
 8002b4c:	e7cc      	b.n	8002ae8 <_malloc_r+0x2c>
 8002b4e:	1cc4      	adds	r4, r0, #3
 8002b50:	f024 0403 	bic.w	r4, r4, #3
 8002b54:	42a0      	cmp	r0, r4
 8002b56:	d005      	beq.n	8002b64 <_malloc_r+0xa8>
 8002b58:	1a21      	subs	r1, r4, r0
 8002b5a:	4630      	mov	r0, r6
 8002b5c:	f000 f82e 	bl	8002bbc <_sbrk_r>
 8002b60:	3001      	adds	r0, #1
 8002b62:	d0cf      	beq.n	8002b04 <_malloc_r+0x48>
 8002b64:	6025      	str	r5, [r4, #0]
 8002b66:	e7db      	b.n	8002b20 <_malloc_r+0x64>
 8002b68:	20000090 	.word	0x20000090
 8002b6c:	20000094 	.word	0x20000094

08002b70 <_realloc_r>:
 8002b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b72:	4607      	mov	r7, r0
 8002b74:	4614      	mov	r4, r2
 8002b76:	460e      	mov	r6, r1
 8002b78:	b921      	cbnz	r1, 8002b84 <_realloc_r+0x14>
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b80:	f7ff bf9c 	b.w	8002abc <_malloc_r>
 8002b84:	b922      	cbnz	r2, 8002b90 <_realloc_r+0x20>
 8002b86:	f7ff ff4b 	bl	8002a20 <_free_r>
 8002b8a:	4625      	mov	r5, r4
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b90:	f000 f826 	bl	8002be0 <_malloc_usable_size_r>
 8002b94:	42a0      	cmp	r0, r4
 8002b96:	d20f      	bcs.n	8002bb8 <_realloc_r+0x48>
 8002b98:	4621      	mov	r1, r4
 8002b9a:	4638      	mov	r0, r7
 8002b9c:	f7ff ff8e 	bl	8002abc <_malloc_r>
 8002ba0:	4605      	mov	r5, r0
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	d0f2      	beq.n	8002b8c <_realloc_r+0x1c>
 8002ba6:	4631      	mov	r1, r6
 8002ba8:	4622      	mov	r2, r4
 8002baa:	f7ff ff15 	bl	80029d8 <memcpy>
 8002bae:	4631      	mov	r1, r6
 8002bb0:	4638      	mov	r0, r7
 8002bb2:	f7ff ff35 	bl	8002a20 <_free_r>
 8002bb6:	e7e9      	b.n	8002b8c <_realloc_r+0x1c>
 8002bb8:	4635      	mov	r5, r6
 8002bba:	e7e7      	b.n	8002b8c <_realloc_r+0x1c>

08002bbc <_sbrk_r>:
 8002bbc:	b538      	push	{r3, r4, r5, lr}
 8002bbe:	4c06      	ldr	r4, [pc, #24]	; (8002bd8 <_sbrk_r+0x1c>)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	4605      	mov	r5, r0
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	6023      	str	r3, [r4, #0]
 8002bc8:	f7ff fb4e 	bl	8002268 <_sbrk>
 8002bcc:	1c43      	adds	r3, r0, #1
 8002bce:	d102      	bne.n	8002bd6 <_sbrk_r+0x1a>
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	b103      	cbz	r3, 8002bd6 <_sbrk_r+0x1a>
 8002bd4:	602b      	str	r3, [r5, #0]
 8002bd6:	bd38      	pop	{r3, r4, r5, pc}
 8002bd8:	2000011c 	.word	0x2000011c

08002bdc <__malloc_lock>:
 8002bdc:	4770      	bx	lr

08002bde <__malloc_unlock>:
 8002bde:	4770      	bx	lr

08002be0 <_malloc_usable_size_r>:
 8002be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002be4:	1f18      	subs	r0, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bfbc      	itt	lt
 8002bea:	580b      	ldrlt	r3, [r1, r0]
 8002bec:	18c0      	addlt	r0, r0, r3
 8002bee:	4770      	bx	lr

08002bf0 <_init>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	bf00      	nop
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr

08002bfc <_fini>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	bf00      	nop
 8002c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c02:	bc08      	pop	{r3}
 8002c04:	469e      	mov	lr, r3
 8002c06:	4770      	bx	lr
