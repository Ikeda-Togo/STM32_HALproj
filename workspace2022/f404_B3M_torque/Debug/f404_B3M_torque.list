
f404_B3M_torque.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000416c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800430c  0800430c  0001430c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004514  08004514  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004514  08004514  00014514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800451c  0800451c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004520  08004520  00014520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000070  08004594  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08004594  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a897  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae9  00000000  00000000  0002a937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002c420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  0002cbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016063  00000000  00000000  0002d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009326  00000000  00000000  0004334b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086856  00000000  00000000  0004c671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2ec7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d4  00000000  00000000  000d2f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042f4 	.word	0x080042f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080042f4 	.word	0x080042f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <pos2enc_tg.7514>:
  printf("start read test\r\n");
  uint8_t txdata[9] = {0};
  uint8_t rxdata[20] = {0};
  short torque_val=0, enc_data=0,dis=0;

  float pos2enc_tg(int pos){
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	f8c7 c000 	str.w	ip, [r7]
	  float deg = pos/100;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a0c      	ldr	r2, [pc, #48]	; (80005b8 <pos2enc_tg.7514+0x40>)
 8000588:	fb82 1203 	smull	r1, r2, r2, r3
 800058c:	1152      	asrs	r2, r2, #5
 800058e:	17db      	asrs	r3, r3, #31
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	ee07 3a90 	vmov	s15, r3
 8000596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800059a:	edc7 7a03 	vstr	s15, [r7, #12]
	  return 11.375*deg;
 800059e:	edd7 7a03 	vldr	s15, [r7, #12]
 80005a2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80005bc <pos2enc_tg.7514+0x44>
 80005a6:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
 80005aa:	eeb0 0a67 	vmov.f32	s0, s15
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	51eb851f 	.word	0x51eb851f
 80005bc:	41360000 	.word	0x41360000

080005c0 <main>:
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08e      	sub	sp, #56	; 0x38
 80005c4:	af00      	add	r7, sp, #0
int main(void)
 80005c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Init();
 80005cc:	f000 fd4c 	bl	8001068 <HAL_Init>
  SystemClock_Config();
 80005d0:	f000 fa32 	bl	8000a38 <SystemClock_Config>
  MX_GPIO_Init();
 80005d4:	f000 faf0 	bl	8000bb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d8:	f000 fa9a 	bl	8000b10 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005dc:	f000 fac2 	bl	8000b64 <MX_USART6_UART_Init>
  printf("start read test\r\n");
 80005e0:	4865      	ldr	r0, [pc, #404]	; (8000778 <main+0x1b8>)
 80005e2:	f002 feb3 	bl	800334c <puts>
  uint8_t txdata[9] = {0};
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	711a      	strb	r2, [r3, #4]
  uint8_t rxdata[20] = {0};
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
  short torque_val=0, enc_data=0,dis=0;
 8000606:	2300      	movs	r3, #0
 8000608:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800060a:	2300      	movs	r3, #0
 800060c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800060e:	2300      	movs	r3, #0
 8000610:	85bb      	strh	r3, [r7, #44]	; 0x2c
	  if(abs(enc_tg-enc_data)<DED_ZONE)torque=0;

	  return torque;
  }

  float enc_tg=pos2enc_tg(0);
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	469c      	mov	ip, r3
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff ffad 	bl	8000578 <pos2enc_tg.7514>
 800061e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

//  printf("target encoder is %5.2f\r\n",enc_tg);

  HAL_Delay(3000);
 8000622:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000626:	f000 fd91 	bl	800114c <HAL_Delay>
  write(0x01,0x0A,0x28);
 800062a:	f107 0318 	add.w	r3, r7, #24
 800062e:	469c      	mov	ip, r3
 8000630:	2228      	movs	r2, #40	; 0x28
 8000632:	210a      	movs	r1, #10
 8000634:	2001      	movs	r0, #1
 8000636:	f000 f94f 	bl	80008d8 <write.7544>
  write(0x01,0x02,0x5C);
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	469c      	mov	ip, r3
 8000640:	225c      	movs	r2, #92	; 0x5c
 8000642:	2102      	movs	r1, #2
 8000644:	2001      	movs	r0, #1
 8000646:	f000 f947 	bl	80008d8 <write.7544>
  write(0x01,0x08,0x28);
 800064a:	f107 0318 	add.w	r3, r7, #24
 800064e:	469c      	mov	ip, r3
 8000650:	2228      	movs	r2, #40	; 0x28
 8000652:	2108      	movs	r1, #8
 8000654:	2001      	movs	r0, #1
 8000656:	f000 f93f 	bl	80008d8 <write.7544>

  HAL_UART_Receive_IT(&huart2, buffer,6);
 800065a:	2206      	movs	r2, #6
 800065c:	4947      	ldr	r1, [pc, #284]	; (800077c <main+0x1bc>)
 800065e:	4848      	ldr	r0, [pc, #288]	; (8000780 <main+0x1c0>)
 8000660:	f001 fecf 	bl	8002402 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	  if(gUartReceived == 1) {
 8000664:	4b47      	ldr	r3, [pc, #284]	; (8000784 <main+0x1c4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d12a      	bne.n	80006c2 <main+0x102>
  		  int pos_tg=atol(buffer);
 800066c:	4843      	ldr	r0, [pc, #268]	; (800077c <main+0x1bc>)
 800066e:	f002 fdb1 	bl	80031d4 <atol>
 8000672:	62b8      	str	r0, [r7, #40]	; 0x28
  		  if(abs(pos_tg)>18000){ //posistion error handler
 8000674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000676:	2b00      	cmp	r3, #0
 8000678:	bfb8      	it	lt
 800067a:	425b      	neglt	r3, r3
 800067c:	f244 6250 	movw	r2, #18000	; 0x4650
 8000680:	4293      	cmp	r3, r2
 8000682:	dd04      	ble.n	800068e <main+0xce>
  			  printf("pos ERORR %d\r\n",pos_tg);
 8000684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000686:	4840      	ldr	r0, [pc, #256]	; (8000788 <main+0x1c8>)
 8000688:	f002 fdda 	bl	8003240 <iprintf>
 800068c:	e016      	b.n	80006bc <main+0xfc>
  		  }
  		  else{
  			  pos(0x02,pos_tg,1000);
 800068e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000690:	b21b      	sxth	r3, r3
 8000692:	f107 0218 	add.w	r2, r7, #24
 8000696:	4694      	mov	ip, r2
 8000698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800069c:	4619      	mov	r1, r3
 800069e:	2002      	movs	r0, #2
 80006a0:	f000 f87a 	bl	8000798 <pos.7520>
  			  enc_tg=pos2enc_tg(pos_tg);
 80006a4:	f107 0318 	add.w	r3, r7, #24
 80006a8:	469c      	mov	ip, r3
 80006aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006ac:	f7ff ff64 	bl	8000578 <pos2enc_tg.7514>
 80006b0:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  			  printf("position is %d\r\n",pos_tg);
 80006b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80006b6:	4835      	ldr	r0, [pc, #212]	; (800078c <main+0x1cc>)
 80006b8:	f002 fdc2 	bl	8003240 <iprintf>
  		  }
  		  gUartReceived = 0;
 80006bc:	4b31      	ldr	r3, [pc, #196]	; (8000784 <main+0x1c4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
  	  }
	  dis=enc_data-enc_tg;
 80006c2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80006c6:	ee07 3a90 	vmov	s15, r3
 80006ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80006d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006da:	ee17 3a90 	vmov	r3, s15
 80006de:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	  else if(torque_val>-80 && 0>torque_val)torque_val=-80;
//
//	  if(torque_val>-5 && 5>torque_val)torque_val=0;


	  torque(0x01,torque_val=torque_calc(enc_data,enc_tg));
 80006e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80006e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006e8:	ee17 3a90 	vmov	r3, s15
 80006ec:	b21a      	sxth	r2, r3
 80006ee:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80006f2:	f107 0118 	add.w	r1, r7, #24
 80006f6:	468c      	mov	ip, r1
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f96a 	bl	80009d4 <torque_calc.7555>
 8000700:	4603      	mov	r3, r0
 8000702:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000704:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000708:	f107 0218 	add.w	r2, r7, #24
 800070c:	4694      	mov	ip, r2
 800070e:	4619      	mov	r1, r3
 8000710:	2001      	movs	r0, #1
 8000712:	f000 f897 	bl	8000844 <torque.7536>
	  printf("torque :%3d encoder :%d\r\n",torque_val,enc_data);
 8000716:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800071a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800071e:	4619      	mov	r1, r3
 8000720:	481b      	ldr	r0, [pc, #108]	; (8000790 <main+0x1d0>)
 8000722:	f002 fd8d 	bl	8003240 <iprintf>


//-------read-------------------------
	  read(0x01,0x50,0x02);
 8000726:	f107 0318 	add.w	r3, r7, #24
 800072a:	469c      	mov	ip, r3
 800072c:	2202      	movs	r2, #2
 800072e:	2150      	movs	r1, #80	; 0x50
 8000730:	2001      	movs	r0, #1
 8000732:	f000 f913 	bl	800095c <read.7550>
      HAL_UART_Receive(&huart6,rxdata,10,10);
 8000736:	1d39      	adds	r1, r7, #4
 8000738:	230a      	movs	r3, #10
 800073a:	220a      	movs	r2, #10
 800073c:	4815      	ldr	r0, [pc, #84]	; (8000794 <main+0x1d4>)
 800073e:	f001 fdbe 	bl	80022be <HAL_UART_Receive>

	  if(rxdata[1]!=0){
 8000742:	797b      	ldrb	r3, [r7, #5]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d08d      	beq.n	8000664 <main+0xa4>
	  	  enc_data=rxdata[4];
 8000748:	7a3b      	ldrb	r3, [r7, #8]
 800074a:	86fb      	strh	r3, [r7, #54]	; 0x36
	  	  enc_data+=rxdata[5]<<8;
 800074c:	7a7b      	ldrb	r3, [r7, #9]
 800074e:	b29b      	uxth	r3, r3
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	b29a      	uxth	r2, r3
 8000754:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000756:	4413      	add	r3, r2
 8000758:	b29b      	uxth	r3, r3
 800075a:	86fb      	strh	r3, [r7, #54]	; 0x36
	  	  if(enc_data>2047) enc_data-=4095;
 800075c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000764:	db04      	blt.n	8000770 <main+0x1b0>
 8000766:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000768:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 800076c:	b29b      	uxth	r3, r3
 800076e:	86fb      	strh	r3, [r7, #54]	; 0x36
//	  	  printf("encoder : %d\r\n",enc_data);

	  	  rxdata[1] = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	717b      	strb	r3, [r7, #5]
  	  if(gUartReceived == 1) {
 8000774:	e776      	b.n	8000664 <main+0xa4>
 8000776:	bf00      	nop
 8000778:	0800430c 	.word	0x0800430c
 800077c:	2000009c 	.word	0x2000009c
 8000780:	200001e0 	.word	0x200001e0
 8000784:	2000008c 	.word	0x2000008c
 8000788:	08004320 	.word	0x08004320
 800078c:	08004330 	.word	0x08004330
 8000790:	08004344 	.word	0x08004344
 8000794:	2000019c 	.word	0x2000019c

08000798 <pos.7520>:
  {
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b087      	sub	sp, #28
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	73fb      	strb	r3, [r7, #15]
 80007a2:	460b      	mov	r3, r1
 80007a4:	81bb      	strh	r3, [r7, #12]
 80007a6:	4613      	mov	r3, r2
 80007a8:	817b      	strh	r3, [r7, #10]
 80007aa:	4664      	mov	r4, ip
 80007ac:	f8c7 c004 	str.w	ip, [r7, #4]
    unsigned char deg_l = (unsigned char)(deg)&0x00FF;
 80007b0:	89bb      	ldrh	r3, [r7, #12]
 80007b2:	75fb      	strb	r3, [r7, #23]
    unsigned char deg_h = (unsigned char)(deg>>8)&0x00FF;
 80007b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007b8:	121b      	asrs	r3, r3, #8
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	75bb      	strb	r3, [r7, #22]
    unsigned char time_l = (unsigned char)(time)&0x00FF;
 80007be:	897b      	ldrh	r3, [r7, #10]
 80007c0:	757b      	strb	r3, [r7, #21]
    unsigned char time_h = (unsigned char)(time>>8)&0x00FF;
 80007c2:	897b      	ldrh	r3, [r7, #10]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	753b      	strb	r3, [r7, #20]
    unsigned char sum = (0x09+0x06+id+deg_l+deg_h+time_l+time_h)&0x00FF;
 80007ca:	7bfa      	ldrb	r2, [r7, #15]
 80007cc:	7dfb      	ldrb	r3, [r7, #23]
 80007ce:	4413      	add	r3, r2
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	7dbb      	ldrb	r3, [r7, #22]
 80007d4:	4413      	add	r3, r2
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	7d7b      	ldrb	r3, [r7, #21]
 80007da:	4413      	add	r3, r2
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	7d3b      	ldrb	r3, [r7, #20]
 80007e0:	4413      	add	r3, r2
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	330f      	adds	r3, #15
 80007e6:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2104      	movs	r1, #4
 80007ec:	4813      	ldr	r0, [pc, #76]	; (800083c <pos.7520+0xa4>)
 80007ee:	f000 fff9 	bl	80017e4 <HAL_GPIO_WritePin>
    txdata[0]=0x09;   //1 SIZE
 80007f2:	2309      	movs	r3, #9
 80007f4:	7023      	strb	r3, [r4, #0]
    txdata[1]=0x06;   //2 COMMAND
 80007f6:	2306      	movs	r3, #6
 80007f8:	7063      	strb	r3, [r4, #1]
    txdata[2]=0x00;   //3 OPTION
 80007fa:	2300      	movs	r3, #0
 80007fc:	70a3      	strb	r3, [r4, #2]
    txdata[3]=id;     //4 ID
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	70e3      	strb	r3, [r4, #3]
    txdata[4]=deg_l;  //5 POS_L
 8000802:	7dfb      	ldrb	r3, [r7, #23]
 8000804:	7123      	strb	r3, [r4, #4]
    txdata[5]=deg_h;  //6 POS_H
 8000806:	7dbb      	ldrb	r3, [r7, #22]
 8000808:	7163      	strb	r3, [r4, #5]
    txdata[6]=time_l; //7 TIME_L
 800080a:	7d7b      	ldrb	r3, [r7, #21]
 800080c:	71a3      	strb	r3, [r4, #6]
    txdata[7]=time_h; //8 TIME_H
 800080e:	7d3b      	ldrb	r3, [r7, #20]
 8000810:	71e3      	strb	r3, [r4, #7]
    txdata[8]=sum;    //9 SUM
 8000812:	7cfb      	ldrb	r3, [r7, #19]
 8000814:	7223      	strb	r3, [r4, #8]
	HAL_UART_Transmit(&huart6, txdata, 9, 0xFFFF);
 8000816:	4621      	mov	r1, r4
 8000818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081c:	2209      	movs	r2, #9
 800081e:	4808      	ldr	r0, [pc, #32]	; (8000840 <pos.7520+0xa8>)
 8000820:	f001 fcbb 	bl	800219a <HAL_UART_Transmit>
    HAL_Delay(0.03);
 8000824:	2000      	movs	r0, #0
 8000826:	f000 fc91 	bl	800114c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2104      	movs	r1, #4
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <pos.7520+0xa4>)
 8000830:	f000 ffd8 	bl	80017e4 <HAL_GPIO_WritePin>
  }
 8000834:	bf00      	nop
 8000836:	371c      	adds	r7, #28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd90      	pop	{r4, r7, pc}
 800083c:	40020400 	.word	0x40020400
 8000840:	2000019c 	.word	0x2000019c

08000844 <torque.7536>:
  {
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	460a      	mov	r2, r1
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	4613      	mov	r3, r2
 8000852:	80bb      	strh	r3, [r7, #4]
 8000854:	4664      	mov	r4, ip
 8000856:	f8c7 c000 	str.w	ip, [r7]
      unsigned char torque_l = (unsigned char)(torque)&0x00FF;
 800085a:	88bb      	ldrh	r3, [r7, #4]
 800085c:	73fb      	strb	r3, [r7, #15]
      unsigned char torque_h = (unsigned char)(torque>>8)&0x00FF;
 800085e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000862:	121b      	asrs	r3, r3, #8
 8000864:	b21b      	sxth	r3, r3
 8000866:	73bb      	strb	r3, [r7, #14]
      unsigned char sum = (0x09+0x04+0x00+id+torque_l+torque_h+0x3C+0x01)&0x00FF;
 8000868:	79fa      	ldrb	r2, [r7, #7]
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	4413      	add	r3, r2
 800086e:	b2da      	uxtb	r2, r3
 8000870:	7bbb      	ldrb	r3, [r7, #14]
 8000872:	4413      	add	r3, r2
 8000874:	b2db      	uxtb	r3, r3
 8000876:	334a      	adds	r3, #74	; 0x4a
 8000878:	737b      	strb	r3, [r7, #13]
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800087a:	2201      	movs	r2, #1
 800087c:	2104      	movs	r1, #4
 800087e:	4814      	ldr	r0, [pc, #80]	; (80008d0 <torque.7536+0x8c>)
 8000880:	f000 ffb0 	bl	80017e4 <HAL_GPIO_WritePin>
      txdata[0]=0x09;//SIZE
 8000884:	2309      	movs	r3, #9
 8000886:	7023      	strb	r3, [r4, #0]
      txdata[1]=0x04;//COMMAND
 8000888:	2304      	movs	r3, #4
 800088a:	7063      	strb	r3, [r4, #1]
      txdata[2]=0x00;//OPTION
 800088c:	2300      	movs	r3, #0
 800088e:	70a3      	strb	r3, [r4, #2]
      txdata[3]=id;//ID
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	70e3      	strb	r3, [r4, #3]
      txdata[4]=torque_l;//TORQUE_LOWBYTE
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	7123      	strb	r3, [r4, #4]
      txdata[5]=torque_h;//TORQUE_HIGHBYTE
 8000898:	7bbb      	ldrb	r3, [r7, #14]
 800089a:	7163      	strb	r3, [r4, #5]
      txdata[6]=0x3C;//ADRESS(TORQUE 0x03)
 800089c:	233c      	movs	r3, #60	; 0x3c
 800089e:	71a3      	strb	r3, [r4, #6]
      txdata[7]=0x01;//COUNT
 80008a0:	2301      	movs	r3, #1
 80008a2:	71e3      	strb	r3, [r4, #7]
      txdata[8]=sum;//SUM
 80008a4:	7b7b      	ldrb	r3, [r7, #13]
 80008a6:	7223      	strb	r3, [r4, #8]
      HAL_UART_Transmit(&huart6, txdata, 9, 0xFFFF);
 80008a8:	4621      	mov	r1, r4
 80008aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ae:	2209      	movs	r2, #9
 80008b0:	4808      	ldr	r0, [pc, #32]	; (80008d4 <torque.7536+0x90>)
 80008b2:	f001 fc72 	bl	800219a <HAL_UART_Transmit>
      HAL_Delay(0.03);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 fc48 	bl	800114c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2104      	movs	r1, #4
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <torque.7536+0x8c>)
 80008c2:	f000 ff8f 	bl	80017e4 <HAL_GPIO_WritePin>
  }
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd90      	pop	{r4, r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40020400 	.word	0x40020400
 80008d4:	2000019c 	.word	0x2000019c

080008d8 <write.7544>:
  {
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
 80008e2:	460b      	mov	r3, r1
 80008e4:	71bb      	strb	r3, [r7, #6]
 80008e6:	4613      	mov	r3, r2
 80008e8:	717b      	strb	r3, [r7, #5]
 80008ea:	4664      	mov	r4, ip
 80008ec:	f8c7 c000 	str.w	ip, [r7]
      unsigned char sum = (0x08+0x04+0x00+id+data+adress+0x01)&0x00FF;
 80008f0:	79fa      	ldrb	r2, [r7, #7]
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	4413      	add	r3, r2
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	797b      	ldrb	r3, [r7, #5]
 80008fa:	4413      	add	r3, r2
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	330d      	adds	r3, #13
 8000900:	73fb      	strb	r3, [r7, #15]
     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000902:	2201      	movs	r2, #1
 8000904:	2104      	movs	r1, #4
 8000906:	4813      	ldr	r0, [pc, #76]	; (8000954 <write.7544+0x7c>)
 8000908:	f000 ff6c 	bl	80017e4 <HAL_GPIO_WritePin>
     txdata[0]=0x08;   //1 SIZE
 800090c:	2308      	movs	r3, #8
 800090e:	7023      	strb	r3, [r4, #0]
     txdata[1]=0x04;   //2 COMMAND
 8000910:	2304      	movs	r3, #4
 8000912:	7063      	strb	r3, [r4, #1]
     txdata[2]=0x00;   //3 OPTION
 8000914:	2300      	movs	r3, #0
 8000916:	70a3      	strb	r3, [r4, #2]
     txdata[3]=id;     //4 ID
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	70e3      	strb	r3, [r4, #3]
     txdata[4]=data;  //DATA
 800091c:	79bb      	ldrb	r3, [r7, #6]
 800091e:	7123      	strb	r3, [r4, #4]
     txdata[5]=adress;  //ADRESS
 8000920:	797b      	ldrb	r3, [r7, #5]
 8000922:	7163      	strb	r3, [r4, #5]
     txdata[6]=0x01; //COUNT
 8000924:	2301      	movs	r3, #1
 8000926:	71a3      	strb	r3, [r4, #6]
     txdata[7]=sum;    //9 SUM
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	71e3      	strb	r3, [r4, #7]
     HAL_UART_Transmit(&huart6, txdata, 8, 0xFFFF);
 800092c:	4621      	mov	r1, r4
 800092e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000932:	2208      	movs	r2, #8
 8000934:	4808      	ldr	r0, [pc, #32]	; (8000958 <write.7544+0x80>)
 8000936:	f001 fc30 	bl	800219a <HAL_UART_Transmit>
     HAL_Delay(0.03);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 fc06 	bl	800114c <HAL_Delay>
     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2104      	movs	r1, #4
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <write.7544+0x7c>)
 8000946:	f000 ff4d 	bl	80017e4 <HAL_GPIO_WritePin>
  }
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bd90      	pop	{r4, r7, pc}
 8000952:	bf00      	nop
 8000954:	40020400 	.word	0x40020400
 8000958:	2000019c 	.word	0x2000019c

0800095c <read.7550>:
  {
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	460b      	mov	r3, r1
 8000968:	71bb      	strb	r3, [r7, #6]
 800096a:	4613      	mov	r3, r2
 800096c:	717b      	strb	r3, [r7, #5]
 800096e:	4664      	mov	r4, ip
 8000970:	f8c7 c000 	str.w	ip, [r7]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000974:	2201      	movs	r2, #1
 8000976:	2104      	movs	r1, #4
 8000978:	4814      	ldr	r0, [pc, #80]	; (80009cc <read.7550+0x70>)
 800097a:	f000 ff33 	bl	80017e4 <HAL_GPIO_WritePin>
      unsigned char sum = (0x07+0x03+0x00+id+address+length)&0x00FF;
 800097e:	79fa      	ldrb	r2, [r7, #7]
 8000980:	79bb      	ldrb	r3, [r7, #6]
 8000982:	4413      	add	r3, r2
 8000984:	b2da      	uxtb	r2, r3
 8000986:	797b      	ldrb	r3, [r7, #5]
 8000988:	4413      	add	r3, r2
 800098a:	b2db      	uxtb	r3, r3
 800098c:	330a      	adds	r3, #10
 800098e:	73fb      	strb	r3, [r7, #15]
      txdata[0]=0x07;       //SIZE
 8000990:	2307      	movs	r3, #7
 8000992:	7023      	strb	r3, [r4, #0]
      txdata[1]=0x03;       //COMMAND
 8000994:	2303      	movs	r3, #3
 8000996:	7063      	strb	r3, [r4, #1]
      txdata[2]=0x00;       //OPTION
 8000998:	2300      	movs	r3, #0
 800099a:	70a3      	strb	r3, [r4, #2]
      txdata[3]=id;         //ID
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	70e3      	strb	r3, [r4, #3]
      txdata[4]=address;    //ADDRESS(Current 0x48,MotorTemperature 0x46)
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	7123      	strb	r3, [r4, #4]
      txdata[5]=length;     //LENGTH byte
 80009a4:	797b      	ldrb	r3, [r7, #5]
 80009a6:	7163      	strb	r3, [r4, #5]
      txdata[6]=sum;        //SUM
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	71a3      	strb	r3, [r4, #6]
      HAL_UART_Transmit(&huart6, txdata, 7, 0xFFFF);
 80009ac:	4621      	mov	r1, r4
 80009ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009b2:	2207      	movs	r2, #7
 80009b4:	4806      	ldr	r0, [pc, #24]	; (80009d0 <read.7550+0x74>)
 80009b6:	f001 fbf0 	bl	800219a <HAL_UART_Transmit>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2104      	movs	r1, #4
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <read.7550+0x70>)
 80009c0:	f000 ff10 	bl	80017e4 <HAL_GPIO_WritePin>
  }
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd90      	pop	{r4, r7, pc}
 80009cc:	40020400 	.word	0x40020400
 80009d0:	2000019c 	.word	0x2000019c

080009d4 <torque_calc.7555>:
  int torque_calc(short enc_data,short enc_tg){
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	460a      	mov	r2, r1
 80009de:	80fb      	strh	r3, [r7, #6]
 80009e0:	4613      	mov	r3, r2
 80009e2:	80bb      	strh	r3, [r7, #4]
 80009e4:	f8c7 c000 	str.w	ip, [r7]
	  short torque=0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	81fb      	strh	r3, [r7, #14]
	  if(enc_tg-enc_data<0)torque=-100;
 80009ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80009f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	da03      	bge.n	8000a02 <torque_calc.7555+0x2e>
 80009fa:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80009fe:	81fb      	strh	r3, [r7, #14]
 8000a00:	e001      	b.n	8000a06 <torque_calc.7555+0x32>
	  else torque=100;
 8000a02:	2364      	movs	r3, #100	; 0x64
 8000a04:	81fb      	strh	r3, [r7, #14]
	  if(abs(enc_tg-enc_data)<DED_ZONE)torque=0;
 8000a06:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	f113 0f09 	cmn.w	r3, #9
 8000a14:	db08      	blt.n	8000a28 <torque_calc.7555+0x54>
 8000a16:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	2b09      	cmp	r3, #9
 8000a22:	dc01      	bgt.n	8000a28 <torque_calc.7555+0x54>
 8000a24:	2300      	movs	r3, #0
 8000a26:	81fb      	strh	r3, [r7, #14]
	  return torque;
 8000a28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  }
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	; 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	2230      	movs	r2, #48	; 0x30
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f002 fbf2 	bl	8003230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <SystemClock_Config+0xd0>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a28      	ldr	r2, [pc, #160]	; (8000b08 <SystemClock_Config+0xd0>)
 8000a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <SystemClock_Config+0xd0>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a84:	4a21      	ldr	r2, [pc, #132]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000aac:	2310      	movs	r3, #16
 8000aae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ab0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ab4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aba:	2307      	movs	r3, #7
 8000abc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abe:	f107 0320 	add.w	r3, r7, #32
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fea8 	bl	8001818 <HAL_RCC_OscConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ace:	f000 f921 	bl	8000d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2102      	movs	r1, #2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 f90a 	bl	8001d08 <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000afa:	f000 f90b 	bl	8000d14 <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	3750      	adds	r7, #80	; 0x50
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40007000 	.word	0x40007000

08000b10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MX_USART2_UART_Init+0x50>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b48:	f001 fada 	bl	8002100 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b52:	f000 f8df 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200001e0 	.word	0x200001e0
 8000b60:	40004400 	.word	0x40004400

08000b64 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b68:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_USART6_UART_Init+0x48>)
 8000b6a:	4a11      	ldr	r2, [pc, #68]	; (8000bb0 <MX_USART6_UART_Init+0x4c>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 1500000;
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_USART6_UART_Init+0x48>)
 8000b70:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <MX_USART6_UART_Init+0x50>)
 8000b72:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <MX_USART6_UART_Init+0x48>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USART6_UART_Init+0x48>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MX_USART6_UART_Init+0x48>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USART6_UART_Init+0x48>)
 8000b88:	220c      	movs	r2, #12
 8000b8a:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <MX_USART6_UART_Init+0x48>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USART6_UART_Init+0x48>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_USART6_UART_Init+0x48>)
 8000b9a:	f001 fab1 	bl	8002100 <HAL_UART_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 8000ba4:	f000 f8b6 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000019c 	.word	0x2000019c
 8000bb0:	40011400 	.word	0x40011400
 8000bb4:	0016e360 	.word	0x0016e360

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <MX_GPIO_Init+0xf8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a36      	ldr	r2, [pc, #216]	; (8000cb0 <MX_GPIO_Init+0xf8>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b34      	ldr	r3, [pc, #208]	; (8000cb0 <MX_GPIO_Init+0xf8>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <MX_GPIO_Init+0xf8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a2f      	ldr	r2, [pc, #188]	; (8000cb0 <MX_GPIO_Init+0xf8>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <MX_GPIO_Init+0xf8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <MX_GPIO_Init+0xf8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a28      	ldr	r2, [pc, #160]	; (8000cb0 <MX_GPIO_Init+0xf8>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <MX_GPIO_Init+0xf8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <MX_GPIO_Init+0xf8>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <MX_GPIO_Init+0xf8>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <MX_GPIO_Init+0xf8>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2120      	movs	r1, #32
 8000c42:	481c      	ldr	r0, [pc, #112]	; (8000cb4 <MX_GPIO_Init+0xfc>)
 8000c44:	f000 fdce 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	481a      	ldr	r0, [pc, #104]	; (8000cb8 <MX_GPIO_Init+0x100>)
 8000c4e:	f000 fdc9 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4814      	ldr	r0, [pc, #80]	; (8000cbc <MX_GPIO_Init+0x104>)
 8000c6a:	f000 fc37 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c6e:	2320      	movs	r3, #32
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <MX_GPIO_Init+0xfc>)
 8000c86:	f000 fc29 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_GPIO_Init+0x100>)
 8000ca2:	f000 fc1b 	bl	80014dc <HAL_GPIO_Init>

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	40020400 	.word	0x40020400
 8000cbc:	40020800 	.word	0x40020800

08000cc0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	gUartReceived = 1;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_UART_RxCpltCallback+0x20>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, buffer,6);
 8000cce:	2206      	movs	r2, #6
 8000cd0:	4904      	ldr	r1, [pc, #16]	; (8000ce4 <HAL_UART_RxCpltCallback+0x24>)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <HAL_UART_RxCpltCallback+0x28>)
 8000cd4:	f001 fb95 	bl	8002402 <HAL_UART_Receive_IT>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000008c 	.word	0x2000008c
 8000ce4:	2000009c 	.word	0x2000009c
 8000ce8:	200001e0 	.word	0x200001e0

08000cec <_write>:
int _write(int file, char *ptr, int len)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,50);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	2332      	movs	r3, #50	; 0x32
 8000cfe:	68b9      	ldr	r1, [r7, #8]
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <_write+0x24>)
 8000d02:	f001 fa4a 	bl	800219a <HAL_UART_Transmit>
  return len;
 8000d06:	687b      	ldr	r3, [r7, #4]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200001e0 	.word	0x200001e0

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f000 fae8 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a36      	ldr	r2, [pc, #216]	; (8000e68 <HAL_UART_MspInit+0xf8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d134      	bne.n	8000dfc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a34      	ldr	r2, [pc, #208]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a2d      	ldr	r2, [pc, #180]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	4822      	ldr	r0, [pc, #136]	; (8000e70 <HAL_UART_MspInit+0x100>)
 8000de6:	f000 fb79 	bl	80014dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	2026      	movs	r0, #38	; 0x26
 8000df0:	f000 faab 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000df4:	2026      	movs	r0, #38	; 0x26
 8000df6:	f000 fac4 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000dfa:	e031      	b.n	8000e60 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <HAL_UART_MspInit+0x104>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d12c      	bne.n	8000e60 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e10:	f043 0320 	orr.w	r3, r3, #32
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f003 0320 	and.w	r3, r3, #32
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e50:	2308      	movs	r3, #8
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_UART_MspInit+0x100>)
 8000e5c:	f000 fb3e 	bl	80014dc <HAL_GPIO_Init>
}
 8000e60:	bf00      	nop
 8000e62:	3730      	adds	r7, #48	; 0x30
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40004400 	.word	0x40004400
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40011400 	.word	0x40011400

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <NMI_Handler+0x4>

08000e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 f922 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <USART2_IRQHandler+0x10>)
 8000ed2:	f001 fac7 	bl	8002464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200001e0 	.word	0x200001e0

08000ee0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e00a      	b.n	8000f08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ef2:	f3af 8000 	nop.w
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	b2ca      	uxtb	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf0      	blt.n	8000ef2 <_read+0x12>
	}

return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	return -1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f42:	605a      	str	r2, [r3, #4]
	return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_isatty>:

int _isatty(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
	return 1;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
	return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f002 f912 	bl	80031dc <__errno>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20018000 	.word	0x20018000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	20000090 	.word	0x20000090
 8000fec:	20000238 	.word	0x20000238

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800104c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800101a:	490e      	ldr	r1, [pc, #56]	; (8001054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001030:	4c0b      	ldr	r4, [pc, #44]	; (8001060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800103e:	f7ff ffd7 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001042:	f002 f8d1 	bl	80031e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fabb 	bl	80005c0 <main>
  bx  lr    
 800104a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800104c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001058:	08004524 	.word	0x08004524
  ldr r2, =_sbss
 800105c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001060:	20000238 	.word	0x20000238

08001064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <HAL_Init+0x40>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_Init+0x40>)
 800107e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_Init+0x40>)
 800108a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f94f 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	2000      	movs	r0, #0
 8001098:	f000 f808 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fe40 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023c00 	.word	0x40023c00

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f967 	bl	800139e <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 f92f 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000
 8001104:	20000008 	.word	0x20000008
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	20000224 	.word	0x20000224

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000224 	.word	0x20000224

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_Delay+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff29 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff3e 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff8e 	bl	8001288 <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff31 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffa2 	bl	80012f0 <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff feb6 	bl	8001134 <HAL_GetTick>
 80013c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d008      	beq.n	80013e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e052      	b.n	800148e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0216 	bic.w	r2, r2, #22
 80013f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001406:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	2b00      	cmp	r3, #0
 800140e:	d103      	bne.n	8001418 <HAL_DMA_Abort+0x62>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001414:	2b00      	cmp	r3, #0
 8001416:	d007      	beq.n	8001428 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0208 	bic.w	r2, r2, #8
 8001426:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001438:	e013      	b.n	8001462 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800143a:	f7ff fe7b 	bl	8001134 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b05      	cmp	r3, #5
 8001446:	d90c      	bls.n	8001462 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2220      	movs	r2, #32
 800144c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2203      	movs	r2, #3
 8001452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e015      	b.n	800148e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1e4      	bne.n	800143a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001474:	223f      	movs	r2, #63	; 0x3f
 8001476:	409a      	lsls	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d004      	beq.n	80014b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e00c      	b.n	80014ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2205      	movs	r2, #5
 80014b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	e159      	b.n	80017ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f8:	2201      	movs	r2, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	429a      	cmp	r2, r3
 8001512:	f040 8148 	bne.w	80017a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b01      	cmp	r3, #1
 8001520:	d005      	beq.n	800152e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152a:	2b02      	cmp	r3, #2
 800152c:	d130      	bne.n	8001590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	2203      	movs	r2, #3
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001564:	2201      	movs	r2, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 0201 	and.w	r2, r3, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b03      	cmp	r3, #3
 800159a:	d017      	beq.n	80015cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2203      	movs	r2, #3
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d123      	bne.n	8001620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	08da      	lsrs	r2, r3, #3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3208      	adds	r2, #8
 80015e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	08da      	lsrs	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3208      	adds	r2, #8
 800161a:	69b9      	ldr	r1, [r7, #24]
 800161c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	2203      	movs	r2, #3
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0203 	and.w	r2, r3, #3
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80a2 	beq.w	80017a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b57      	ldr	r3, [pc, #348]	; (80017c4 <HAL_GPIO_Init+0x2e8>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a56      	ldr	r2, [pc, #344]	; (80017c4 <HAL_GPIO_Init+0x2e8>)
 800166c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <HAL_GPIO_Init+0x2e8>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800167e:	4a52      	ldr	r2, [pc, #328]	; (80017c8 <HAL_GPIO_Init+0x2ec>)
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3302      	adds	r3, #2
 8001686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	220f      	movs	r2, #15
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a49      	ldr	r2, [pc, #292]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d019      	beq.n	80016de <HAL_GPIO_Init+0x202>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a48      	ldr	r2, [pc, #288]	; (80017d0 <HAL_GPIO_Init+0x2f4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d013      	beq.n	80016da <HAL_GPIO_Init+0x1fe>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a47      	ldr	r2, [pc, #284]	; (80017d4 <HAL_GPIO_Init+0x2f8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d00d      	beq.n	80016d6 <HAL_GPIO_Init+0x1fa>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a46      	ldr	r2, [pc, #280]	; (80017d8 <HAL_GPIO_Init+0x2fc>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d007      	beq.n	80016d2 <HAL_GPIO_Init+0x1f6>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a45      	ldr	r2, [pc, #276]	; (80017dc <HAL_GPIO_Init+0x300>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d101      	bne.n	80016ce <HAL_GPIO_Init+0x1f2>
 80016ca:	2304      	movs	r3, #4
 80016cc:	e008      	b.n	80016e0 <HAL_GPIO_Init+0x204>
 80016ce:	2307      	movs	r3, #7
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x204>
 80016d2:	2303      	movs	r3, #3
 80016d4:	e004      	b.n	80016e0 <HAL_GPIO_Init+0x204>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e002      	b.n	80016e0 <HAL_GPIO_Init+0x204>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_GPIO_Init+0x204>
 80016de:	2300      	movs	r3, #0
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	f002 0203 	and.w	r2, r2, #3
 80016e6:	0092      	lsls	r2, r2, #2
 80016e8:	4093      	lsls	r3, r2
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f0:	4935      	ldr	r1, [pc, #212]	; (80017c8 <HAL_GPIO_Init+0x2ec>)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016fe:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <HAL_GPIO_Init+0x304>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001722:	4a2f      	ldr	r2, [pc, #188]	; (80017e0 <HAL_GPIO_Init+0x304>)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001728:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <HAL_GPIO_Init+0x304>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174c:	4a24      	ldr	r2, [pc, #144]	; (80017e0 <HAL_GPIO_Init+0x304>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_GPIO_Init+0x304>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001776:	4a1a      	ldr	r2, [pc, #104]	; (80017e0 <HAL_GPIO_Init+0x304>)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <HAL_GPIO_Init+0x304>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017a0:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_GPIO_Init+0x304>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	f67f aea2 	bls.w	80014f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40013800 	.word	0x40013800
 80017cc:	40020000 	.word	0x40020000
 80017d0:	40020400 	.word	0x40020400
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020c00 	.word	0x40020c00
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40013c00 	.word	0x40013c00

080017e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
 80017f0:	4613      	mov	r3, r2
 80017f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f4:	787b      	ldrb	r3, [r7, #1]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001800:	e003      	b.n	800180a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	041a      	lsls	r2, r3, #16
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	619a      	str	r2, [r3, #24]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e264      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d075      	beq.n	8001922 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001836:	4ba3      	ldr	r3, [pc, #652]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b04      	cmp	r3, #4
 8001840:	d00c      	beq.n	800185c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001842:	4ba0      	ldr	r3, [pc, #640]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800184a:	2b08      	cmp	r3, #8
 800184c:	d112      	bne.n	8001874 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800184e:	4b9d      	ldr	r3, [pc, #628]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800185a:	d10b      	bne.n	8001874 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185c:	4b99      	ldr	r3, [pc, #612]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d05b      	beq.n	8001920 <HAL_RCC_OscConfig+0x108>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d157      	bne.n	8001920 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e23f      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187c:	d106      	bne.n	800188c <HAL_RCC_OscConfig+0x74>
 800187e:	4b91      	ldr	r3, [pc, #580]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a90      	ldr	r2, [pc, #576]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e01d      	b.n	80018c8 <HAL_RCC_OscConfig+0xb0>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x98>
 8001896:	4b8b      	ldr	r3, [pc, #556]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a8a      	ldr	r2, [pc, #552]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 800189c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b88      	ldr	r3, [pc, #544]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a87      	ldr	r2, [pc, #540]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e00b      	b.n	80018c8 <HAL_RCC_OscConfig+0xb0>
 80018b0:	4b84      	ldr	r3, [pc, #528]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a83      	ldr	r2, [pc, #524]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 80018b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b81      	ldr	r3, [pc, #516]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a80      	ldr	r2, [pc, #512]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 80018c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d013      	beq.n	80018f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fc30 	bl	8001134 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff fc2c 	bl	8001134 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e204      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b76      	ldr	r3, [pc, #472]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0xc0>
 80018f6:	e014      	b.n	8001922 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff fc1c 	bl	8001134 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff fc18 	bl	8001134 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e1f0      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	4b6c      	ldr	r3, [pc, #432]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0xe8>
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d063      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800192e:	4b65      	ldr	r3, [pc, #404]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193a:	4b62      	ldr	r3, [pc, #392]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001942:	2b08      	cmp	r3, #8
 8001944:	d11c      	bne.n	8001980 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001946:	4b5f      	ldr	r3, [pc, #380]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d116      	bne.n	8001980 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001952:	4b5c      	ldr	r3, [pc, #368]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_RCC_OscConfig+0x152>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e1c4      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b56      	ldr	r3, [pc, #344]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4952      	ldr	r1, [pc, #328]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	e03a      	b.n	80019f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d020      	beq.n	80019ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001988:	4b4f      	ldr	r3, [pc, #316]	; (8001ac8 <HAL_RCC_OscConfig+0x2b0>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198e:	f7ff fbd1 	bl	8001134 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001996:	f7ff fbcd 	bl	8001134 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e1a5      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	4b46      	ldr	r3, [pc, #280]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4940      	ldr	r1, [pc, #256]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
 80019c8:	e015      	b.n	80019f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ca:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <HAL_RCC_OscConfig+0x2b0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fbb0 	bl	8001134 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d8:	f7ff fbac 	bl	8001134 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e184      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d030      	beq.n	8001a64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d016      	beq.n	8001a38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0a:	4b30      	ldr	r3, [pc, #192]	; (8001acc <HAL_RCC_OscConfig+0x2b4>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a10:	f7ff fb90 	bl	8001134 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff fb8c 	bl	8001134 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e164      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x200>
 8001a36:	e015      	b.n	8001a64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_RCC_OscConfig+0x2b4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3e:	f7ff fb79 	bl	8001134 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a46:	f7ff fb75 	bl	8001134 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e14d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80a0 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10f      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_RCC_OscConfig+0x2b8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d121      	bne.n	8001af2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <HAL_RCC_OscConfig+0x2b8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <HAL_RCC_OscConfig+0x2b8>)
 8001ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fb3b 	bl	8001134 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	e011      	b.n	8001ae6 <HAL_RCC_OscConfig+0x2ce>
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	42470000 	.word	0x42470000
 8001acc:	42470e80 	.word	0x42470e80
 8001ad0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad4:	f7ff fb2e 	bl	8001134 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e106      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	4b85      	ldr	r3, [pc, #532]	; (8001cfc <HAL_RCC_OscConfig+0x4e4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d106      	bne.n	8001b08 <HAL_RCC_OscConfig+0x2f0>
 8001afa:	4b81      	ldr	r3, [pc, #516]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afe:	4a80      	ldr	r2, [pc, #512]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6713      	str	r3, [r2, #112]	; 0x70
 8001b06:	e01c      	b.n	8001b42 <HAL_RCC_OscConfig+0x32a>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b05      	cmp	r3, #5
 8001b0e:	d10c      	bne.n	8001b2a <HAL_RCC_OscConfig+0x312>
 8001b10:	4b7b      	ldr	r3, [pc, #492]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	4a7a      	ldr	r2, [pc, #488]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b16:	f043 0304 	orr.w	r3, r3, #4
 8001b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1c:	4b78      	ldr	r3, [pc, #480]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	4a77      	ldr	r2, [pc, #476]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6713      	str	r3, [r2, #112]	; 0x70
 8001b28:	e00b      	b.n	8001b42 <HAL_RCC_OscConfig+0x32a>
 8001b2a:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	4a74      	ldr	r2, [pc, #464]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6713      	str	r3, [r2, #112]	; 0x70
 8001b36:	4b72      	ldr	r3, [pc, #456]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	4a71      	ldr	r2, [pc, #452]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b3c:	f023 0304 	bic.w	r3, r3, #4
 8001b40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d015      	beq.n	8001b76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7ff faf3 	bl	8001134 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff faef 	bl	8001134 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e0c5      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b68:	4b65      	ldr	r3, [pc, #404]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0ee      	beq.n	8001b52 <HAL_RCC_OscConfig+0x33a>
 8001b74:	e014      	b.n	8001ba0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fadd 	bl	8001134 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7ff fad9 	bl	8001134 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0af      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b94:	4b5a      	ldr	r3, [pc, #360]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1ee      	bne.n	8001b7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d105      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba6:	4b56      	ldr	r3, [pc, #344]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a55      	ldr	r2, [pc, #340]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 809b 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bbc:	4b50      	ldr	r3, [pc, #320]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d05c      	beq.n	8001c82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d141      	bne.n	8001c54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd0:	4b4c      	ldr	r3, [pc, #304]	; (8001d04 <HAL_RCC_OscConfig+0x4ec>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff faad 	bl	8001134 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bde:	f7ff faa9 	bl	8001134 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e081      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf0:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f0      	bne.n	8001bde <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69da      	ldr	r2, [r3, #28]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	019b      	lsls	r3, r3, #6
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	085b      	lsrs	r3, r3, #1
 8001c14:	3b01      	subs	r3, #1
 8001c16:	041b      	lsls	r3, r3, #16
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	061b      	lsls	r3, r3, #24
 8001c20:	4937      	ldr	r1, [pc, #220]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c26:	4b37      	ldr	r3, [pc, #220]	; (8001d04 <HAL_RCC_OscConfig+0x4ec>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fa82 	bl	8001134 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c34:	f7ff fa7e 	bl	8001134 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e056      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	4b2e      	ldr	r3, [pc, #184]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x41c>
 8001c52:	e04e      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c54:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <HAL_RCC_OscConfig+0x4ec>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fa6b 	bl	8001134 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff fa67 	bl	8001134 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e03f      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x44a>
 8001c80:	e037      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e032      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d028      	beq.n	8001cee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d121      	bne.n	8001cee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d11a      	bne.n	8001cee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cc4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d111      	bne.n	8001cee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	085b      	lsrs	r3, r3, #1
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	40023800 	.word	0x40023800
 8001d04:	42470060 	.word	0x42470060

08001d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0cc      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b68      	ldr	r3, [pc, #416]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d90c      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b65      	ldr	r3, [pc, #404]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0b8      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4a52      	ldr	r2, [pc, #328]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d80:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	494d      	ldr	r1, [pc, #308]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d044      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d119      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e07f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc6:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e067      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de6:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4934      	ldr	r1, [pc, #208]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df8:	f7ff f99c 	bl	8001134 <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7ff f998 	bl	8001134 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e04f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 020c 	and.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1eb      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d20c      	bcs.n	8001e50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e032      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4916      	ldr	r1, [pc, #88]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e8e:	f000 f821 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	490a      	ldr	r1, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	5ccb      	ldrb	r3, [r1, r3]
 8001ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f8fc 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023c00 	.word	0x40023c00
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	08004360 	.word	0x08004360
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eec:	4b67      	ldr	r3, [pc, #412]	; (800208c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d00d      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x40>
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	f200 80bd 	bhi.w	8002078 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x34>
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f06:	e0b7      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f08:	4b61      	ldr	r3, [pc, #388]	; (8002090 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f0a:	60bb      	str	r3, [r7, #8]
       break;
 8001f0c:	e0b7      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f0e:	4b61      	ldr	r3, [pc, #388]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001f10:	60bb      	str	r3, [r7, #8]
      break;
 8001f12:	e0b4      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f14:	4b5d      	ldr	r3, [pc, #372]	; (800208c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f1e:	4b5b      	ldr	r3, [pc, #364]	; (800208c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d04d      	beq.n	8001fc6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2a:	4b58      	ldr	r3, [pc, #352]	; (800208c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	099b      	lsrs	r3, r3, #6
 8001f30:	461a      	mov	r2, r3
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f3a:	f04f 0100 	mov.w	r1, #0
 8001f3e:	ea02 0800 	and.w	r8, r2, r0
 8001f42:	ea03 0901 	and.w	r9, r3, r1
 8001f46:	4640      	mov	r0, r8
 8001f48:	4649      	mov	r1, r9
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	014b      	lsls	r3, r1, #5
 8001f54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f58:	0142      	lsls	r2, r0, #5
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	ebb0 0008 	subs.w	r0, r0, r8
 8001f62:	eb61 0109 	sbc.w	r1, r1, r9
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	018b      	lsls	r3, r1, #6
 8001f70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f74:	0182      	lsls	r2, r0, #6
 8001f76:	1a12      	subs	r2, r2, r0
 8001f78:	eb63 0301 	sbc.w	r3, r3, r1
 8001f7c:	f04f 0000 	mov.w	r0, #0
 8001f80:	f04f 0100 	mov.w	r1, #0
 8001f84:	00d9      	lsls	r1, r3, #3
 8001f86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f8a:	00d0      	lsls	r0, r2, #3
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	eb12 0208 	adds.w	r2, r2, r8
 8001f94:	eb43 0309 	adc.w	r3, r3, r9
 8001f98:	f04f 0000 	mov.w	r0, #0
 8001f9c:	f04f 0100 	mov.w	r1, #0
 8001fa0:	0259      	lsls	r1, r3, #9
 8001fa2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001fa6:	0250      	lsls	r0, r2, #9
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	f7fe f962 	bl	8000280 <__aeabi_uldivmod>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e04a      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc6:	4b31      	ldr	r3, [pc, #196]	; (800208c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	099b      	lsrs	r3, r3, #6
 8001fcc:	461a      	mov	r2, r3
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fd6:	f04f 0100 	mov.w	r1, #0
 8001fda:	ea02 0400 	and.w	r4, r2, r0
 8001fde:	ea03 0501 	and.w	r5, r3, r1
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	014b      	lsls	r3, r1, #5
 8001ff0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ff4:	0142      	lsls	r2, r0, #5
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	1b00      	subs	r0, r0, r4
 8001ffc:	eb61 0105 	sbc.w	r1, r1, r5
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	f04f 0300 	mov.w	r3, #0
 8002008:	018b      	lsls	r3, r1, #6
 800200a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800200e:	0182      	lsls	r2, r0, #6
 8002010:	1a12      	subs	r2, r2, r0
 8002012:	eb63 0301 	sbc.w	r3, r3, r1
 8002016:	f04f 0000 	mov.w	r0, #0
 800201a:	f04f 0100 	mov.w	r1, #0
 800201e:	00d9      	lsls	r1, r3, #3
 8002020:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002024:	00d0      	lsls	r0, r2, #3
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	1912      	adds	r2, r2, r4
 800202c:	eb45 0303 	adc.w	r3, r5, r3
 8002030:	f04f 0000 	mov.w	r0, #0
 8002034:	f04f 0100 	mov.w	r1, #0
 8002038:	0299      	lsls	r1, r3, #10
 800203a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800203e:	0290      	lsls	r0, r2, #10
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	461a      	mov	r2, r3
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	f7fe f916 	bl	8000280 <__aeabi_uldivmod>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4613      	mov	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	3301      	adds	r3, #1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	60bb      	str	r3, [r7, #8]
      break;
 8002076:	e002      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800207a:	60bb      	str	r3, [r7, #8]
      break;
 800207c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800207e:	68bb      	ldr	r3, [r7, #8]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	00f42400 	.word	0x00f42400
 8002094:	007a1200 	.word	0x007a1200

08002098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_RCC_GetHCLKFreq+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000000 	.word	0x20000000

080020b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020b4:	f7ff fff0 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	0a9b      	lsrs	r3, r3, #10
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	4903      	ldr	r1, [pc, #12]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40023800 	.word	0x40023800
 80020d4:	08004370 	.word	0x08004370

080020d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020dc:	f7ff ffdc 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	0b5b      	lsrs	r3, r3, #13
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4903      	ldr	r1, [pc, #12]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40023800 	.word	0x40023800
 80020fc:	08004370 	.word	0x08004370

08002100 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e03f      	b.n	8002192 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe fe22 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2224      	movs	r2, #36	; 0x24
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002142:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fe7d 	bl	8002e44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002158:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002168:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002178:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b08a      	sub	sp, #40	; 0x28
 800219e:	af02      	add	r7, sp, #8
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	4613      	mov	r3, r2
 80021a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	d17c      	bne.n	80022b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_UART_Transmit+0x2c>
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e075      	b.n	80022b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_UART_Transmit+0x3e>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e06e      	b.n	80022b6 <HAL_UART_Transmit+0x11c>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2221      	movs	r2, #33	; 0x21
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ee:	f7fe ffa1 	bl	8001134 <HAL_GetTick>
 80021f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	88fa      	ldrh	r2, [r7, #6]
 80021f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002208:	d108      	bne.n	800221c <HAL_UART_Transmit+0x82>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d104      	bne.n	800221c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	e003      	b.n	8002224 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800222c:	e02a      	b.n	8002284 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2200      	movs	r2, #0
 8002236:	2180      	movs	r1, #128	; 0x80
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 fbc1 	bl	80029c0 <UART_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e036      	b.n	80022b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10b      	bne.n	8002266 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800225c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	3302      	adds	r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	e007      	b.n	8002276 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	3301      	adds	r3, #1
 8002274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1cf      	bne.n	800222e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2200      	movs	r2, #0
 8002296:	2140      	movs	r1, #64	; 0x40
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 fb91 	bl	80029c0 <UART_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e006      	b.n	80022b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	e000      	b.n	80022b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022b4:	2302      	movs	r3, #2
  }
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b08a      	sub	sp, #40	; 0x28
 80022c2:	af02      	add	r7, sp, #8
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	4613      	mov	r3, r2
 80022cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b20      	cmp	r3, #32
 80022dc:	f040 808c 	bne.w	80023f8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_UART_Receive+0x2e>
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e084      	b.n	80023fa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_UART_Receive+0x40>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e07d      	b.n	80023fa <HAL_UART_Receive+0x13c>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2222      	movs	r2, #34	; 0x22
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800231a:	f7fe ff0b 	bl	8001134 <HAL_GetTick>
 800231e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	88fa      	ldrh	r2, [r7, #6]
 8002324:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	88fa      	ldrh	r2, [r7, #6]
 800232a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002334:	d108      	bne.n	8002348 <HAL_UART_Receive+0x8a>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d104      	bne.n	8002348 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	e003      	b.n	8002350 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002358:	e043      	b.n	80023e2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2200      	movs	r2, #0
 8002362:	2120      	movs	r1, #32
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fb2b 	bl	80029c0 <UART_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e042      	b.n	80023fa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10c      	bne.n	8002394 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	b29b      	uxth	r3, r3
 8002382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002386:	b29a      	uxth	r2, r3
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	3302      	adds	r3, #2
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	e01f      	b.n	80023d4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239c:	d007      	beq.n	80023ae <HAL_UART_Receive+0xf0>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <HAL_UART_Receive+0xfe>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	701a      	strb	r2, [r3, #0]
 80023ba:	e008      	b.n	80023ce <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3301      	adds	r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1b6      	bne.n	800235a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	e000      	b.n	80023fa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	4613      	mov	r3, r2
 800240e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b20      	cmp	r3, #32
 800241a:	d11d      	bne.n	8002458 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_UART_Receive_IT+0x26>
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e016      	b.n	800245a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_UART_Receive_IT+0x38>
 8002436:	2302      	movs	r3, #2
 8002438:	e00f      	b.n	800245a <HAL_UART_Receive_IT+0x58>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	461a      	mov	r2, r3
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fb24 	bl	8002a9c <UART_Start_Receive_IT>
 8002454:	4603      	mov	r3, r0
 8002456:	e000      	b.n	800245a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b0ba      	sub	sp, #232	; 0xe8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80024a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10f      	bne.n	80024ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_UART_IRQHandler+0x66>
 80024b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fc03 	bl	8002cce <UART_Receive_IT>
      return;
 80024c8:	e256      	b.n	8002978 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80de 	beq.w	8002690 <HAL_UART_IRQHandler+0x22c>
 80024d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d106      	bne.n	80024ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80d1 	beq.w	8002690 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_UART_IRQHandler+0xae>
 80024fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_UART_IRQHandler+0xd2>
 800251e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f043 0202 	orr.w	r2, r3, #2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_UART_IRQHandler+0xf6>
 8002542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f043 0204 	orr.w	r2, r3, #4
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800255a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d011      	beq.n	800258a <HAL_UART_IRQHandler+0x126>
 8002566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	2b00      	cmp	r3, #0
 8002570:	d105      	bne.n	800257e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f043 0208 	orr.w	r2, r3, #8
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 81ed 	beq.w	800296e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_UART_IRQHandler+0x14e>
 80025a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fb8e 	bl	8002cce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025bc:	2b40      	cmp	r3, #64	; 0x40
 80025be:	bf0c      	ite	eq
 80025c0:	2301      	moveq	r3, #1
 80025c2:	2300      	movne	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d103      	bne.n	80025de <HAL_UART_IRQHandler+0x17a>
 80025d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d04f      	beq.n	800267e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fa96 	bl	8002b10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d141      	bne.n	8002676 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3314      	adds	r3, #20
 80025f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002600:	e853 3f00 	ldrex	r3, [r3]
 8002604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800260c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3314      	adds	r3, #20
 800261a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800261e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002626:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800262a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800262e:	e841 2300 	strex	r3, r2, [r1]
 8002632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1d9      	bne.n	80025f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	2b00      	cmp	r3, #0
 8002644:	d013      	beq.n	800266e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	4a7d      	ldr	r2, [pc, #500]	; (8002840 <HAL_UART_IRQHandler+0x3dc>)
 800264c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe ff1f 	bl	8001496 <HAL_DMA_Abort_IT>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d016      	beq.n	800268c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002668:	4610      	mov	r0, r2
 800266a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266c:	e00e      	b.n	800268c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f990 	bl	8002994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002674:	e00a      	b.n	800268c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f98c 	bl	8002994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800267c:	e006      	b.n	800268c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f988 	bl	8002994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800268a:	e170      	b.n	800296e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800268c:	bf00      	nop
    return;
 800268e:	e16e      	b.n	800296e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	2b01      	cmp	r3, #1
 8002696:	f040 814a 	bne.w	800292e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800269a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8143 	beq.w	800292e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80026a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 813c 	beq.w	800292e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b40      	cmp	r3, #64	; 0x40
 80026d8:	f040 80b4 	bne.w	8002844 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8140 	beq.w	8002972 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026fa:	429a      	cmp	r2, r3
 80026fc:	f080 8139 	bcs.w	8002972 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002706:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002712:	f000 8088 	beq.w	8002826 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	330c      	adds	r3, #12
 800271c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002724:	e853 3f00 	ldrex	r3, [r3]
 8002728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800272c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	330c      	adds	r3, #12
 800273e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002742:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800274e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002752:	e841 2300 	strex	r3, r2, [r1]
 8002756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800275a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1d9      	bne.n	8002716 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3314      	adds	r3, #20
 8002768:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800276c:	e853 3f00 	ldrex	r3, [r3]
 8002770:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3314      	adds	r3, #20
 8002782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002786:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800278a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800278e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002792:	e841 2300 	strex	r3, r2, [r1]
 8002796:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1e1      	bne.n	8002762 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3314      	adds	r3, #20
 80027a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027a8:	e853 3f00 	ldrex	r3, [r3]
 80027ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80027ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3314      	adds	r3, #20
 80027be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80027c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80027c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80027ca:	e841 2300 	strex	r3, r2, [r1]
 80027ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80027d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e3      	bne.n	800279e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	330c      	adds	r3, #12
 80027ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ee:	e853 3f00 	ldrex	r3, [r3]
 80027f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f6:	f023 0310 	bic.w	r3, r3, #16
 80027fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	330c      	adds	r3, #12
 8002804:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002808:	65ba      	str	r2, [r7, #88]	; 0x58
 800280a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800280e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002810:	e841 2300 	strex	r3, r2, [r1]
 8002814:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e3      	bne.n	80027e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fdc8 	bl	80013b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800282e:	b29b      	uxth	r3, r3
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	b29b      	uxth	r3, r3
 8002834:	4619      	mov	r1, r3
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8b6 	bl	80029a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800283c:	e099      	b.n	8002972 <HAL_UART_IRQHandler+0x50e>
 800283e:	bf00      	nop
 8002840:	08002bd7 	.word	0x08002bd7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800284c:	b29b      	uxth	r3, r3
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 808b 	beq.w	8002976 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8086 	beq.w	8002976 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	330c      	adds	r3, #12
 8002870:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002874:	e853 3f00 	ldrex	r3, [r3]
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800287a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002880:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	330c      	adds	r3, #12
 800288a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800288e:	647a      	str	r2, [r7, #68]	; 0x44
 8002890:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002896:	e841 2300 	strex	r3, r2, [r1]
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800289c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e3      	bne.n	800286a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3314      	adds	r3, #20
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	623b      	str	r3, [r7, #32]
   return(result);
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3314      	adds	r3, #20
 80028c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80028c6:	633a      	str	r2, [r7, #48]	; 0x30
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ce:	e841 2300 	strex	r3, r2, [r1]
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1e3      	bne.n	80028a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	e853 3f00 	ldrex	r3, [r3]
 80028f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0310 	bic.w	r3, r3, #16
 80028fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	330c      	adds	r3, #12
 8002908:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800290c:	61fa      	str	r2, [r7, #28]
 800290e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002910:	69b9      	ldr	r1, [r7, #24]
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	e841 2300 	strex	r3, r2, [r1]
 8002918:	617b      	str	r3, [r7, #20]
   return(result);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1e3      	bne.n	80028e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002924:	4619      	mov	r1, r3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f83e 	bl	80029a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800292c:	e023      	b.n	8002976 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800292e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x4ea>
 800293a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f959 	bl	8002bfe <UART_Transmit_IT>
    return;
 800294c:	e014      	b.n	8002978 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800294e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00e      	beq.n	8002978 <HAL_UART_IRQHandler+0x514>
 800295a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f999 	bl	8002c9e <UART_EndTransmit_IT>
    return;
 800296c:	e004      	b.n	8002978 <HAL_UART_IRQHandler+0x514>
    return;
 800296e:	bf00      	nop
 8002970:	e002      	b.n	8002978 <HAL_UART_IRQHandler+0x514>
      return;
 8002972:	bf00      	nop
 8002974:	e000      	b.n	8002978 <HAL_UART_IRQHandler+0x514>
      return;
 8002976:	bf00      	nop
  }
}
 8002978:	37e8      	adds	r7, #232	; 0xe8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop

08002980 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b090      	sub	sp, #64	; 0x40
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	4613      	mov	r3, r2
 80029ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d0:	e050      	b.n	8002a74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d04c      	beq.n	8002a74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80029e0:	f7fe fba8 	bl	8001134 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d241      	bcs.n	8002a74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	330c      	adds	r3, #12
 8002a0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a10:	637a      	str	r2, [r7, #52]	; 0x34
 8002a12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a18:	e841 2300 	strex	r3, r2, [r1]
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e5      	bne.n	80029f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3314      	adds	r3, #20
 8002a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	e853 3f00 	ldrex	r3, [r3]
 8002a32:	613b      	str	r3, [r7, #16]
   return(result);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3314      	adds	r3, #20
 8002a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a44:	623a      	str	r2, [r7, #32]
 8002a46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a48:	69f9      	ldr	r1, [r7, #28]
 8002a4a:	6a3a      	ldr	r2, [r7, #32]
 8002a4c:	e841 2300 	strex	r3, r2, [r1]
 8002a50:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e5      	bne.n	8002a24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e00f      	b.n	8002a94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d09f      	beq.n	80029d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3740      	adds	r7, #64	; 0x40
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	88fa      	ldrh	r2, [r7, #6]
 8002ab4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2222      	movs	r2, #34	; 0x22
 8002ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0201 	orr.w	r2, r2, #1
 8002af0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0220 	orr.w	r2, r2, #32
 8002b00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b095      	sub	sp, #84	; 0x54
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b22:	e853 3f00 	ldrex	r3, [r3]
 8002b26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b38:	643a      	str	r2, [r7, #64]	; 0x40
 8002b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b40:	e841 2300 	strex	r3, r2, [r1]
 8002b44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e5      	bne.n	8002b18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3314      	adds	r3, #20
 8002b52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	e853 3f00 	ldrex	r3, [r3]
 8002b5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3314      	adds	r3, #20
 8002b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b74:	e841 2300 	strex	r3, r2, [r1]
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1e5      	bne.n	8002b4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d119      	bne.n	8002bbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	330c      	adds	r3, #12
 8002b8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	e853 3f00 	ldrex	r3, [r3]
 8002b96:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f023 0310 	bic.w	r3, r3, #16
 8002b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ba8:	61ba      	str	r2, [r7, #24]
 8002baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bac:	6979      	ldr	r1, [r7, #20]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	e841 2300 	strex	r3, r2, [r1]
 8002bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1e5      	bne.n	8002b88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bca:	bf00      	nop
 8002bcc:	3754      	adds	r7, #84	; 0x54
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7ff fecf 	bl	8002994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b21      	cmp	r3, #33	; 0x21
 8002c10:	d13e      	bne.n	8002c90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1a:	d114      	bne.n	8002c46 <UART_Transmit_IT+0x48>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d110      	bne.n	8002c46 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	1c9a      	adds	r2, r3, #2
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	621a      	str	r2, [r3, #32]
 8002c44:	e008      	b.n	8002c58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	1c59      	adds	r1, r3, #1
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6211      	str	r1, [r2, #32]
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4619      	mov	r1, r3
 8002c66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10f      	bne.n	8002c8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e000      	b.n	8002c92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
  }
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff fe5e 	bl	8002980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b08c      	sub	sp, #48	; 0x30
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b22      	cmp	r3, #34	; 0x22
 8002ce0:	f040 80ab 	bne.w	8002e3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cec:	d117      	bne.n	8002d1e <UART_Receive_IT+0x50>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d113      	bne.n	8002d1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	1c9a      	adds	r2, r3, #2
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d1c:	e026      	b.n	8002d6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d30:	d007      	beq.n	8002d42 <UART_Receive_IT+0x74>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10a      	bne.n	8002d50 <UART_Receive_IT+0x82>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	e008      	b.n	8002d62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d15a      	bne.n	8002e36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0220 	bic.w	r2, r2, #32
 8002d8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d135      	bne.n	8002e2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	330c      	adds	r3, #12
 8002dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	e853 3f00 	ldrex	r3, [r3]
 8002dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f023 0310 	bic.w	r3, r3, #16
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	330c      	adds	r3, #12
 8002de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de6:	623a      	str	r2, [r7, #32]
 8002de8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dea:	69f9      	ldr	r1, [r7, #28]
 8002dec:	6a3a      	ldr	r2, [r7, #32]
 8002dee:	e841 2300 	strex	r3, r2, [r1]
 8002df2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1e5      	bne.n	8002dc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d10a      	bne.n	8002e1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e22:	4619      	mov	r1, r3
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff fdbf 	bl	80029a8 <HAL_UARTEx_RxEventCallback>
 8002e2a:	e002      	b.n	8002e32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7fd ff47 	bl	8000cc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e002      	b.n	8002e3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e000      	b.n	8002e3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
  }
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3730      	adds	r7, #48	; 0x30
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e48:	b09f      	sub	sp, #124	; 0x7c
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5a:	68d9      	ldr	r1, [r3, #12]
 8002e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	ea40 0301 	orr.w	r3, r0, r1
 8002e64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	431a      	orrs	r2, r3
 8002e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e88:	f021 010c 	bic.w	r1, r1, #12
 8002e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e92:	430b      	orrs	r3, r1
 8002e94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea2:	6999      	ldr	r1, [r3, #24]
 8002ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	ea40 0301 	orr.w	r3, r0, r1
 8002eac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4bc5      	ldr	r3, [pc, #788]	; (80031c8 <UART_SetConfig+0x384>)
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d004      	beq.n	8002ec2 <UART_SetConfig+0x7e>
 8002eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4bc3      	ldr	r3, [pc, #780]	; (80031cc <UART_SetConfig+0x388>)
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d103      	bne.n	8002eca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ec2:	f7ff f909 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 8002ec6:	6778      	str	r0, [r7, #116]	; 0x74
 8002ec8:	e002      	b.n	8002ed0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eca:	f7ff f8f1 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 8002ece:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ed8:	f040 80b6 	bne.w	8003048 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ede:	461c      	mov	r4, r3
 8002ee0:	f04f 0500 	mov.w	r5, #0
 8002ee4:	4622      	mov	r2, r4
 8002ee6:	462b      	mov	r3, r5
 8002ee8:	1891      	adds	r1, r2, r2
 8002eea:	6439      	str	r1, [r7, #64]	; 0x40
 8002eec:	415b      	adcs	r3, r3
 8002eee:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ef4:	1912      	adds	r2, r2, r4
 8002ef6:	eb45 0303 	adc.w	r3, r5, r3
 8002efa:	f04f 0000 	mov.w	r0, #0
 8002efe:	f04f 0100 	mov.w	r1, #0
 8002f02:	00d9      	lsls	r1, r3, #3
 8002f04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f08:	00d0      	lsls	r0, r2, #3
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	1911      	adds	r1, r2, r4
 8002f10:	6639      	str	r1, [r7, #96]	; 0x60
 8002f12:	416b      	adcs	r3, r5
 8002f14:	667b      	str	r3, [r7, #100]	; 0x64
 8002f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	1891      	adds	r1, r2, r2
 8002f22:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f24:	415b      	adcs	r3, r3
 8002f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002f30:	f7fd f9a6 	bl	8000280 <__aeabi_uldivmod>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4ba5      	ldr	r3, [pc, #660]	; (80031d0 <UART_SetConfig+0x38c>)
 8002f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	011e      	lsls	r6, r3, #4
 8002f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f44:	461c      	mov	r4, r3
 8002f46:	f04f 0500 	mov.w	r5, #0
 8002f4a:	4622      	mov	r2, r4
 8002f4c:	462b      	mov	r3, r5
 8002f4e:	1891      	adds	r1, r2, r2
 8002f50:	6339      	str	r1, [r7, #48]	; 0x30
 8002f52:	415b      	adcs	r3, r3
 8002f54:	637b      	str	r3, [r7, #52]	; 0x34
 8002f56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f5a:	1912      	adds	r2, r2, r4
 8002f5c:	eb45 0303 	adc.w	r3, r5, r3
 8002f60:	f04f 0000 	mov.w	r0, #0
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	00d9      	lsls	r1, r3, #3
 8002f6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f6e:	00d0      	lsls	r0, r2, #3
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	1911      	adds	r1, r2, r4
 8002f76:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f78:	416b      	adcs	r3, r5
 8002f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	461a      	mov	r2, r3
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	1891      	adds	r1, r2, r2
 8002f88:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f8a:	415b      	adcs	r3, r3
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f96:	f7fd f973 	bl	8000280 <__aeabi_uldivmod>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4b8c      	ldr	r3, [pc, #560]	; (80031d0 <UART_SetConfig+0x38c>)
 8002fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	2164      	movs	r1, #100	; 0x64
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	3332      	adds	r3, #50	; 0x32
 8002fb2:	4a87      	ldr	r2, [pc, #540]	; (80031d0 <UART_SetConfig+0x38c>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fc0:	441e      	add	r6, r3
 8002fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f04f 0100 	mov.w	r1, #0
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	1894      	adds	r4, r2, r2
 8002fd0:	623c      	str	r4, [r7, #32]
 8002fd2:	415b      	adcs	r3, r3
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fda:	1812      	adds	r2, r2, r0
 8002fdc:	eb41 0303 	adc.w	r3, r1, r3
 8002fe0:	f04f 0400 	mov.w	r4, #0
 8002fe4:	f04f 0500 	mov.w	r5, #0
 8002fe8:	00dd      	lsls	r5, r3, #3
 8002fea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002fee:	00d4      	lsls	r4, r2, #3
 8002ff0:	4622      	mov	r2, r4
 8002ff2:	462b      	mov	r3, r5
 8002ff4:	1814      	adds	r4, r2, r0
 8002ff6:	653c      	str	r4, [r7, #80]	; 0x50
 8002ff8:	414b      	adcs	r3, r1
 8002ffa:	657b      	str	r3, [r7, #84]	; 0x54
 8002ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	461a      	mov	r2, r3
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	1891      	adds	r1, r2, r2
 8003008:	61b9      	str	r1, [r7, #24]
 800300a:	415b      	adcs	r3, r3
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003012:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003016:	f7fd f933 	bl	8000280 <__aeabi_uldivmod>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4b6c      	ldr	r3, [pc, #432]	; (80031d0 <UART_SetConfig+0x38c>)
 8003020:	fba3 1302 	umull	r1, r3, r3, r2
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	2164      	movs	r1, #100	; 0x64
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	3332      	adds	r3, #50	; 0x32
 8003032:	4a67      	ldr	r2, [pc, #412]	; (80031d0 <UART_SetConfig+0x38c>)
 8003034:	fba2 2303 	umull	r2, r3, r2, r3
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	f003 0207 	and.w	r2, r3, #7
 800303e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4432      	add	r2, r6
 8003044:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003046:	e0b9      	b.n	80031bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800304a:	461c      	mov	r4, r3
 800304c:	f04f 0500 	mov.w	r5, #0
 8003050:	4622      	mov	r2, r4
 8003052:	462b      	mov	r3, r5
 8003054:	1891      	adds	r1, r2, r2
 8003056:	6139      	str	r1, [r7, #16]
 8003058:	415b      	adcs	r3, r3
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003060:	1912      	adds	r2, r2, r4
 8003062:	eb45 0303 	adc.w	r3, r5, r3
 8003066:	f04f 0000 	mov.w	r0, #0
 800306a:	f04f 0100 	mov.w	r1, #0
 800306e:	00d9      	lsls	r1, r3, #3
 8003070:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003074:	00d0      	lsls	r0, r2, #3
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	eb12 0804 	adds.w	r8, r2, r4
 800307e:	eb43 0905 	adc.w	r9, r3, r5
 8003082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4618      	mov	r0, r3
 8003088:	f04f 0100 	mov.w	r1, #0
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	008b      	lsls	r3, r1, #2
 8003096:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800309a:	0082      	lsls	r2, r0, #2
 800309c:	4640      	mov	r0, r8
 800309e:	4649      	mov	r1, r9
 80030a0:	f7fd f8ee 	bl	8000280 <__aeabi_uldivmod>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4b49      	ldr	r3, [pc, #292]	; (80031d0 <UART_SetConfig+0x38c>)
 80030aa:	fba3 2302 	umull	r2, r3, r3, r2
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	011e      	lsls	r6, r3, #4
 80030b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b4:	4618      	mov	r0, r3
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	1894      	adds	r4, r2, r2
 80030c0:	60bc      	str	r4, [r7, #8]
 80030c2:	415b      	adcs	r3, r3
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030ca:	1812      	adds	r2, r2, r0
 80030cc:	eb41 0303 	adc.w	r3, r1, r3
 80030d0:	f04f 0400 	mov.w	r4, #0
 80030d4:	f04f 0500 	mov.w	r5, #0
 80030d8:	00dd      	lsls	r5, r3, #3
 80030da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030de:	00d4      	lsls	r4, r2, #3
 80030e0:	4622      	mov	r2, r4
 80030e2:	462b      	mov	r3, r5
 80030e4:	1814      	adds	r4, r2, r0
 80030e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80030e8:	414b      	adcs	r3, r1
 80030ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f04f 0100 	mov.w	r1, #0
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	008b      	lsls	r3, r1, #2
 8003100:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003104:	0082      	lsls	r2, r0, #2
 8003106:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800310a:	f7fd f8b9 	bl	8000280 <__aeabi_uldivmod>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4b2f      	ldr	r3, [pc, #188]	; (80031d0 <UART_SetConfig+0x38c>)
 8003114:	fba3 1302 	umull	r1, r3, r3, r2
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	2164      	movs	r1, #100	; 0x64
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	3332      	adds	r3, #50	; 0x32
 8003126:	4a2a      	ldr	r2, [pc, #168]	; (80031d0 <UART_SetConfig+0x38c>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003132:	441e      	add	r6, r3
 8003134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003136:	4618      	mov	r0, r3
 8003138:	f04f 0100 	mov.w	r1, #0
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	1894      	adds	r4, r2, r2
 8003142:	603c      	str	r4, [r7, #0]
 8003144:	415b      	adcs	r3, r3
 8003146:	607b      	str	r3, [r7, #4]
 8003148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800314c:	1812      	adds	r2, r2, r0
 800314e:	eb41 0303 	adc.w	r3, r1, r3
 8003152:	f04f 0400 	mov.w	r4, #0
 8003156:	f04f 0500 	mov.w	r5, #0
 800315a:	00dd      	lsls	r5, r3, #3
 800315c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003160:	00d4      	lsls	r4, r2, #3
 8003162:	4622      	mov	r2, r4
 8003164:	462b      	mov	r3, r5
 8003166:	eb12 0a00 	adds.w	sl, r2, r0
 800316a:	eb43 0b01 	adc.w	fp, r3, r1
 800316e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4618      	mov	r0, r3
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	008b      	lsls	r3, r1, #2
 8003182:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003186:	0082      	lsls	r2, r0, #2
 8003188:	4650      	mov	r0, sl
 800318a:	4659      	mov	r1, fp
 800318c:	f7fd f878 	bl	8000280 <__aeabi_uldivmod>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <UART_SetConfig+0x38c>)
 8003196:	fba3 1302 	umull	r1, r3, r3, r2
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2164      	movs	r1, #100	; 0x64
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	3332      	adds	r3, #50	; 0x32
 80031a8:	4a09      	ldr	r2, [pc, #36]	; (80031d0 <UART_SetConfig+0x38c>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	f003 020f 	and.w	r2, r3, #15
 80031b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4432      	add	r2, r6
 80031ba:	609a      	str	r2, [r3, #8]
}
 80031bc:	bf00      	nop
 80031be:	377c      	adds	r7, #124	; 0x7c
 80031c0:	46bd      	mov	sp, r7
 80031c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031c6:	bf00      	nop
 80031c8:	40011000 	.word	0x40011000
 80031cc:	40011400 	.word	0x40011400
 80031d0:	51eb851f 	.word	0x51eb851f

080031d4 <atol>:
 80031d4:	220a      	movs	r2, #10
 80031d6:	2100      	movs	r1, #0
 80031d8:	f000 b944 	b.w	8003464 <strtol>

080031dc <__errno>:
 80031dc:	4b01      	ldr	r3, [pc, #4]	; (80031e4 <__errno+0x8>)
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	2000000c 	.word	0x2000000c

080031e8 <__libc_init_array>:
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	4d0d      	ldr	r5, [pc, #52]	; (8003220 <__libc_init_array+0x38>)
 80031ec:	4c0d      	ldr	r4, [pc, #52]	; (8003224 <__libc_init_array+0x3c>)
 80031ee:	1b64      	subs	r4, r4, r5
 80031f0:	10a4      	asrs	r4, r4, #2
 80031f2:	2600      	movs	r6, #0
 80031f4:	42a6      	cmp	r6, r4
 80031f6:	d109      	bne.n	800320c <__libc_init_array+0x24>
 80031f8:	4d0b      	ldr	r5, [pc, #44]	; (8003228 <__libc_init_array+0x40>)
 80031fa:	4c0c      	ldr	r4, [pc, #48]	; (800322c <__libc_init_array+0x44>)
 80031fc:	f001 f87a 	bl	80042f4 <_init>
 8003200:	1b64      	subs	r4, r4, r5
 8003202:	10a4      	asrs	r4, r4, #2
 8003204:	2600      	movs	r6, #0
 8003206:	42a6      	cmp	r6, r4
 8003208:	d105      	bne.n	8003216 <__libc_init_array+0x2e>
 800320a:	bd70      	pop	{r4, r5, r6, pc}
 800320c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003210:	4798      	blx	r3
 8003212:	3601      	adds	r6, #1
 8003214:	e7ee      	b.n	80031f4 <__libc_init_array+0xc>
 8003216:	f855 3b04 	ldr.w	r3, [r5], #4
 800321a:	4798      	blx	r3
 800321c:	3601      	adds	r6, #1
 800321e:	e7f2      	b.n	8003206 <__libc_init_array+0x1e>
 8003220:	0800451c 	.word	0x0800451c
 8003224:	0800451c 	.word	0x0800451c
 8003228:	0800451c 	.word	0x0800451c
 800322c:	08004520 	.word	0x08004520

08003230 <memset>:
 8003230:	4402      	add	r2, r0
 8003232:	4603      	mov	r3, r0
 8003234:	4293      	cmp	r3, r2
 8003236:	d100      	bne.n	800323a <memset+0xa>
 8003238:	4770      	bx	lr
 800323a:	f803 1b01 	strb.w	r1, [r3], #1
 800323e:	e7f9      	b.n	8003234 <memset+0x4>

08003240 <iprintf>:
 8003240:	b40f      	push	{r0, r1, r2, r3}
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <iprintf+0x2c>)
 8003244:	b513      	push	{r0, r1, r4, lr}
 8003246:	681c      	ldr	r4, [r3, #0]
 8003248:	b124      	cbz	r4, 8003254 <iprintf+0x14>
 800324a:	69a3      	ldr	r3, [r4, #24]
 800324c:	b913      	cbnz	r3, 8003254 <iprintf+0x14>
 800324e:	4620      	mov	r0, r4
 8003250:	f000 faec 	bl	800382c <__sinit>
 8003254:	ab05      	add	r3, sp, #20
 8003256:	9a04      	ldr	r2, [sp, #16]
 8003258:	68a1      	ldr	r1, [r4, #8]
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	4620      	mov	r0, r4
 800325e:	f000 fcbd 	bl	8003bdc <_vfiprintf_r>
 8003262:	b002      	add	sp, #8
 8003264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003268:	b004      	add	sp, #16
 800326a:	4770      	bx	lr
 800326c:	2000000c 	.word	0x2000000c

08003270 <_puts_r>:
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	460e      	mov	r6, r1
 8003274:	4605      	mov	r5, r0
 8003276:	b118      	cbz	r0, 8003280 <_puts_r+0x10>
 8003278:	6983      	ldr	r3, [r0, #24]
 800327a:	b90b      	cbnz	r3, 8003280 <_puts_r+0x10>
 800327c:	f000 fad6 	bl	800382c <__sinit>
 8003280:	69ab      	ldr	r3, [r5, #24]
 8003282:	68ac      	ldr	r4, [r5, #8]
 8003284:	b913      	cbnz	r3, 800328c <_puts_r+0x1c>
 8003286:	4628      	mov	r0, r5
 8003288:	f000 fad0 	bl	800382c <__sinit>
 800328c:	4b2c      	ldr	r3, [pc, #176]	; (8003340 <_puts_r+0xd0>)
 800328e:	429c      	cmp	r4, r3
 8003290:	d120      	bne.n	80032d4 <_puts_r+0x64>
 8003292:	686c      	ldr	r4, [r5, #4]
 8003294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003296:	07db      	lsls	r3, r3, #31
 8003298:	d405      	bmi.n	80032a6 <_puts_r+0x36>
 800329a:	89a3      	ldrh	r3, [r4, #12]
 800329c:	0598      	lsls	r0, r3, #22
 800329e:	d402      	bmi.n	80032a6 <_puts_r+0x36>
 80032a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032a2:	f000 fb61 	bl	8003968 <__retarget_lock_acquire_recursive>
 80032a6:	89a3      	ldrh	r3, [r4, #12]
 80032a8:	0719      	lsls	r1, r3, #28
 80032aa:	d51d      	bpl.n	80032e8 <_puts_r+0x78>
 80032ac:	6923      	ldr	r3, [r4, #16]
 80032ae:	b1db      	cbz	r3, 80032e8 <_puts_r+0x78>
 80032b0:	3e01      	subs	r6, #1
 80032b2:	68a3      	ldr	r3, [r4, #8]
 80032b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032b8:	3b01      	subs	r3, #1
 80032ba:	60a3      	str	r3, [r4, #8]
 80032bc:	bb39      	cbnz	r1, 800330e <_puts_r+0x9e>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	da38      	bge.n	8003334 <_puts_r+0xc4>
 80032c2:	4622      	mov	r2, r4
 80032c4:	210a      	movs	r1, #10
 80032c6:	4628      	mov	r0, r5
 80032c8:	f000 f8d6 	bl	8003478 <__swbuf_r>
 80032cc:	3001      	adds	r0, #1
 80032ce:	d011      	beq.n	80032f4 <_puts_r+0x84>
 80032d0:	250a      	movs	r5, #10
 80032d2:	e011      	b.n	80032f8 <_puts_r+0x88>
 80032d4:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <_puts_r+0xd4>)
 80032d6:	429c      	cmp	r4, r3
 80032d8:	d101      	bne.n	80032de <_puts_r+0x6e>
 80032da:	68ac      	ldr	r4, [r5, #8]
 80032dc:	e7da      	b.n	8003294 <_puts_r+0x24>
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <_puts_r+0xd8>)
 80032e0:	429c      	cmp	r4, r3
 80032e2:	bf08      	it	eq
 80032e4:	68ec      	ldreq	r4, [r5, #12]
 80032e6:	e7d5      	b.n	8003294 <_puts_r+0x24>
 80032e8:	4621      	mov	r1, r4
 80032ea:	4628      	mov	r0, r5
 80032ec:	f000 f916 	bl	800351c <__swsetup_r>
 80032f0:	2800      	cmp	r0, #0
 80032f2:	d0dd      	beq.n	80032b0 <_puts_r+0x40>
 80032f4:	f04f 35ff 	mov.w	r5, #4294967295
 80032f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032fa:	07da      	lsls	r2, r3, #31
 80032fc:	d405      	bmi.n	800330a <_puts_r+0x9a>
 80032fe:	89a3      	ldrh	r3, [r4, #12]
 8003300:	059b      	lsls	r3, r3, #22
 8003302:	d402      	bmi.n	800330a <_puts_r+0x9a>
 8003304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003306:	f000 fb30 	bl	800396a <__retarget_lock_release_recursive>
 800330a:	4628      	mov	r0, r5
 800330c:	bd70      	pop	{r4, r5, r6, pc}
 800330e:	2b00      	cmp	r3, #0
 8003310:	da04      	bge.n	800331c <_puts_r+0xac>
 8003312:	69a2      	ldr	r2, [r4, #24]
 8003314:	429a      	cmp	r2, r3
 8003316:	dc06      	bgt.n	8003326 <_puts_r+0xb6>
 8003318:	290a      	cmp	r1, #10
 800331a:	d004      	beq.n	8003326 <_puts_r+0xb6>
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	6022      	str	r2, [r4, #0]
 8003322:	7019      	strb	r1, [r3, #0]
 8003324:	e7c5      	b.n	80032b2 <_puts_r+0x42>
 8003326:	4622      	mov	r2, r4
 8003328:	4628      	mov	r0, r5
 800332a:	f000 f8a5 	bl	8003478 <__swbuf_r>
 800332e:	3001      	adds	r0, #1
 8003330:	d1bf      	bne.n	80032b2 <_puts_r+0x42>
 8003332:	e7df      	b.n	80032f4 <_puts_r+0x84>
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	250a      	movs	r5, #10
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	6022      	str	r2, [r4, #0]
 800333c:	701d      	strb	r5, [r3, #0]
 800333e:	e7db      	b.n	80032f8 <_puts_r+0x88>
 8003340:	080044a0 	.word	0x080044a0
 8003344:	080044c0 	.word	0x080044c0
 8003348:	08004480 	.word	0x08004480

0800334c <puts>:
 800334c:	4b02      	ldr	r3, [pc, #8]	; (8003358 <puts+0xc>)
 800334e:	4601      	mov	r1, r0
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	f7ff bf8d 	b.w	8003270 <_puts_r>
 8003356:	bf00      	nop
 8003358:	2000000c 	.word	0x2000000c

0800335c <_strtol_l.isra.0>:
 800335c:	2b01      	cmp	r3, #1
 800335e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003362:	d001      	beq.n	8003368 <_strtol_l.isra.0+0xc>
 8003364:	2b24      	cmp	r3, #36	; 0x24
 8003366:	d906      	bls.n	8003376 <_strtol_l.isra.0+0x1a>
 8003368:	f7ff ff38 	bl	80031dc <__errno>
 800336c:	2316      	movs	r3, #22
 800336e:	6003      	str	r3, [r0, #0]
 8003370:	2000      	movs	r0, #0
 8003372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003376:	4f3a      	ldr	r7, [pc, #232]	; (8003460 <_strtol_l.isra.0+0x104>)
 8003378:	468e      	mov	lr, r1
 800337a:	4676      	mov	r6, lr
 800337c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003380:	5de5      	ldrb	r5, [r4, r7]
 8003382:	f015 0508 	ands.w	r5, r5, #8
 8003386:	d1f8      	bne.n	800337a <_strtol_l.isra.0+0x1e>
 8003388:	2c2d      	cmp	r4, #45	; 0x2d
 800338a:	d134      	bne.n	80033f6 <_strtol_l.isra.0+0x9a>
 800338c:	f89e 4000 	ldrb.w	r4, [lr]
 8003390:	f04f 0801 	mov.w	r8, #1
 8003394:	f106 0e02 	add.w	lr, r6, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d05c      	beq.n	8003456 <_strtol_l.isra.0+0xfa>
 800339c:	2b10      	cmp	r3, #16
 800339e:	d10c      	bne.n	80033ba <_strtol_l.isra.0+0x5e>
 80033a0:	2c30      	cmp	r4, #48	; 0x30
 80033a2:	d10a      	bne.n	80033ba <_strtol_l.isra.0+0x5e>
 80033a4:	f89e 4000 	ldrb.w	r4, [lr]
 80033a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80033ac:	2c58      	cmp	r4, #88	; 0x58
 80033ae:	d14d      	bne.n	800344c <_strtol_l.isra.0+0xf0>
 80033b0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80033b4:	2310      	movs	r3, #16
 80033b6:	f10e 0e02 	add.w	lr, lr, #2
 80033ba:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80033be:	f10c 3cff 	add.w	ip, ip, #4294967295
 80033c2:	2600      	movs	r6, #0
 80033c4:	fbbc f9f3 	udiv	r9, ip, r3
 80033c8:	4635      	mov	r5, r6
 80033ca:	fb03 ca19 	mls	sl, r3, r9, ip
 80033ce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80033d2:	2f09      	cmp	r7, #9
 80033d4:	d818      	bhi.n	8003408 <_strtol_l.isra.0+0xac>
 80033d6:	463c      	mov	r4, r7
 80033d8:	42a3      	cmp	r3, r4
 80033da:	dd24      	ble.n	8003426 <_strtol_l.isra.0+0xca>
 80033dc:	2e00      	cmp	r6, #0
 80033de:	db1f      	blt.n	8003420 <_strtol_l.isra.0+0xc4>
 80033e0:	45a9      	cmp	r9, r5
 80033e2:	d31d      	bcc.n	8003420 <_strtol_l.isra.0+0xc4>
 80033e4:	d101      	bne.n	80033ea <_strtol_l.isra.0+0x8e>
 80033e6:	45a2      	cmp	sl, r4
 80033e8:	db1a      	blt.n	8003420 <_strtol_l.isra.0+0xc4>
 80033ea:	fb05 4503 	mla	r5, r5, r3, r4
 80033ee:	2601      	movs	r6, #1
 80033f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80033f4:	e7eb      	b.n	80033ce <_strtol_l.isra.0+0x72>
 80033f6:	2c2b      	cmp	r4, #43	; 0x2b
 80033f8:	bf08      	it	eq
 80033fa:	f89e 4000 	ldrbeq.w	r4, [lr]
 80033fe:	46a8      	mov	r8, r5
 8003400:	bf08      	it	eq
 8003402:	f106 0e02 	addeq.w	lr, r6, #2
 8003406:	e7c7      	b.n	8003398 <_strtol_l.isra.0+0x3c>
 8003408:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800340c:	2f19      	cmp	r7, #25
 800340e:	d801      	bhi.n	8003414 <_strtol_l.isra.0+0xb8>
 8003410:	3c37      	subs	r4, #55	; 0x37
 8003412:	e7e1      	b.n	80033d8 <_strtol_l.isra.0+0x7c>
 8003414:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003418:	2f19      	cmp	r7, #25
 800341a:	d804      	bhi.n	8003426 <_strtol_l.isra.0+0xca>
 800341c:	3c57      	subs	r4, #87	; 0x57
 800341e:	e7db      	b.n	80033d8 <_strtol_l.isra.0+0x7c>
 8003420:	f04f 36ff 	mov.w	r6, #4294967295
 8003424:	e7e4      	b.n	80033f0 <_strtol_l.isra.0+0x94>
 8003426:	2e00      	cmp	r6, #0
 8003428:	da05      	bge.n	8003436 <_strtol_l.isra.0+0xda>
 800342a:	2322      	movs	r3, #34	; 0x22
 800342c:	6003      	str	r3, [r0, #0]
 800342e:	4665      	mov	r5, ip
 8003430:	b942      	cbnz	r2, 8003444 <_strtol_l.isra.0+0xe8>
 8003432:	4628      	mov	r0, r5
 8003434:	e79d      	b.n	8003372 <_strtol_l.isra.0+0x16>
 8003436:	f1b8 0f00 	cmp.w	r8, #0
 800343a:	d000      	beq.n	800343e <_strtol_l.isra.0+0xe2>
 800343c:	426d      	negs	r5, r5
 800343e:	2a00      	cmp	r2, #0
 8003440:	d0f7      	beq.n	8003432 <_strtol_l.isra.0+0xd6>
 8003442:	b10e      	cbz	r6, 8003448 <_strtol_l.isra.0+0xec>
 8003444:	f10e 31ff 	add.w	r1, lr, #4294967295
 8003448:	6011      	str	r1, [r2, #0]
 800344a:	e7f2      	b.n	8003432 <_strtol_l.isra.0+0xd6>
 800344c:	2430      	movs	r4, #48	; 0x30
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1b3      	bne.n	80033ba <_strtol_l.isra.0+0x5e>
 8003452:	2308      	movs	r3, #8
 8003454:	e7b1      	b.n	80033ba <_strtol_l.isra.0+0x5e>
 8003456:	2c30      	cmp	r4, #48	; 0x30
 8003458:	d0a4      	beq.n	80033a4 <_strtol_l.isra.0+0x48>
 800345a:	230a      	movs	r3, #10
 800345c:	e7ad      	b.n	80033ba <_strtol_l.isra.0+0x5e>
 800345e:	bf00      	nop
 8003460:	0800437d 	.word	0x0800437d

08003464 <strtol>:
 8003464:	4613      	mov	r3, r2
 8003466:	460a      	mov	r2, r1
 8003468:	4601      	mov	r1, r0
 800346a:	4802      	ldr	r0, [pc, #8]	; (8003474 <strtol+0x10>)
 800346c:	6800      	ldr	r0, [r0, #0]
 800346e:	f7ff bf75 	b.w	800335c <_strtol_l.isra.0>
 8003472:	bf00      	nop
 8003474:	2000000c 	.word	0x2000000c

08003478 <__swbuf_r>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	460e      	mov	r6, r1
 800347c:	4614      	mov	r4, r2
 800347e:	4605      	mov	r5, r0
 8003480:	b118      	cbz	r0, 800348a <__swbuf_r+0x12>
 8003482:	6983      	ldr	r3, [r0, #24]
 8003484:	b90b      	cbnz	r3, 800348a <__swbuf_r+0x12>
 8003486:	f000 f9d1 	bl	800382c <__sinit>
 800348a:	4b21      	ldr	r3, [pc, #132]	; (8003510 <__swbuf_r+0x98>)
 800348c:	429c      	cmp	r4, r3
 800348e:	d12b      	bne.n	80034e8 <__swbuf_r+0x70>
 8003490:	686c      	ldr	r4, [r5, #4]
 8003492:	69a3      	ldr	r3, [r4, #24]
 8003494:	60a3      	str	r3, [r4, #8]
 8003496:	89a3      	ldrh	r3, [r4, #12]
 8003498:	071a      	lsls	r2, r3, #28
 800349a:	d52f      	bpl.n	80034fc <__swbuf_r+0x84>
 800349c:	6923      	ldr	r3, [r4, #16]
 800349e:	b36b      	cbz	r3, 80034fc <__swbuf_r+0x84>
 80034a0:	6923      	ldr	r3, [r4, #16]
 80034a2:	6820      	ldr	r0, [r4, #0]
 80034a4:	1ac0      	subs	r0, r0, r3
 80034a6:	6963      	ldr	r3, [r4, #20]
 80034a8:	b2f6      	uxtb	r6, r6
 80034aa:	4283      	cmp	r3, r0
 80034ac:	4637      	mov	r7, r6
 80034ae:	dc04      	bgt.n	80034ba <__swbuf_r+0x42>
 80034b0:	4621      	mov	r1, r4
 80034b2:	4628      	mov	r0, r5
 80034b4:	f000 f926 	bl	8003704 <_fflush_r>
 80034b8:	bb30      	cbnz	r0, 8003508 <__swbuf_r+0x90>
 80034ba:	68a3      	ldr	r3, [r4, #8]
 80034bc:	3b01      	subs	r3, #1
 80034be:	60a3      	str	r3, [r4, #8]
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	6022      	str	r2, [r4, #0]
 80034c6:	701e      	strb	r6, [r3, #0]
 80034c8:	6963      	ldr	r3, [r4, #20]
 80034ca:	3001      	adds	r0, #1
 80034cc:	4283      	cmp	r3, r0
 80034ce:	d004      	beq.n	80034da <__swbuf_r+0x62>
 80034d0:	89a3      	ldrh	r3, [r4, #12]
 80034d2:	07db      	lsls	r3, r3, #31
 80034d4:	d506      	bpl.n	80034e4 <__swbuf_r+0x6c>
 80034d6:	2e0a      	cmp	r6, #10
 80034d8:	d104      	bne.n	80034e4 <__swbuf_r+0x6c>
 80034da:	4621      	mov	r1, r4
 80034dc:	4628      	mov	r0, r5
 80034de:	f000 f911 	bl	8003704 <_fflush_r>
 80034e2:	b988      	cbnz	r0, 8003508 <__swbuf_r+0x90>
 80034e4:	4638      	mov	r0, r7
 80034e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <__swbuf_r+0x9c>)
 80034ea:	429c      	cmp	r4, r3
 80034ec:	d101      	bne.n	80034f2 <__swbuf_r+0x7a>
 80034ee:	68ac      	ldr	r4, [r5, #8]
 80034f0:	e7cf      	b.n	8003492 <__swbuf_r+0x1a>
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <__swbuf_r+0xa0>)
 80034f4:	429c      	cmp	r4, r3
 80034f6:	bf08      	it	eq
 80034f8:	68ec      	ldreq	r4, [r5, #12]
 80034fa:	e7ca      	b.n	8003492 <__swbuf_r+0x1a>
 80034fc:	4621      	mov	r1, r4
 80034fe:	4628      	mov	r0, r5
 8003500:	f000 f80c 	bl	800351c <__swsetup_r>
 8003504:	2800      	cmp	r0, #0
 8003506:	d0cb      	beq.n	80034a0 <__swbuf_r+0x28>
 8003508:	f04f 37ff 	mov.w	r7, #4294967295
 800350c:	e7ea      	b.n	80034e4 <__swbuf_r+0x6c>
 800350e:	bf00      	nop
 8003510:	080044a0 	.word	0x080044a0
 8003514:	080044c0 	.word	0x080044c0
 8003518:	08004480 	.word	0x08004480

0800351c <__swsetup_r>:
 800351c:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <__swsetup_r+0xcc>)
 800351e:	b570      	push	{r4, r5, r6, lr}
 8003520:	681d      	ldr	r5, [r3, #0]
 8003522:	4606      	mov	r6, r0
 8003524:	460c      	mov	r4, r1
 8003526:	b125      	cbz	r5, 8003532 <__swsetup_r+0x16>
 8003528:	69ab      	ldr	r3, [r5, #24]
 800352a:	b913      	cbnz	r3, 8003532 <__swsetup_r+0x16>
 800352c:	4628      	mov	r0, r5
 800352e:	f000 f97d 	bl	800382c <__sinit>
 8003532:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <__swsetup_r+0xd0>)
 8003534:	429c      	cmp	r4, r3
 8003536:	d10f      	bne.n	8003558 <__swsetup_r+0x3c>
 8003538:	686c      	ldr	r4, [r5, #4]
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003540:	0719      	lsls	r1, r3, #28
 8003542:	d42c      	bmi.n	800359e <__swsetup_r+0x82>
 8003544:	06dd      	lsls	r5, r3, #27
 8003546:	d411      	bmi.n	800356c <__swsetup_r+0x50>
 8003548:	2309      	movs	r3, #9
 800354a:	6033      	str	r3, [r6, #0]
 800354c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003550:	81a3      	strh	r3, [r4, #12]
 8003552:	f04f 30ff 	mov.w	r0, #4294967295
 8003556:	e03e      	b.n	80035d6 <__swsetup_r+0xba>
 8003558:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <__swsetup_r+0xd4>)
 800355a:	429c      	cmp	r4, r3
 800355c:	d101      	bne.n	8003562 <__swsetup_r+0x46>
 800355e:	68ac      	ldr	r4, [r5, #8]
 8003560:	e7eb      	b.n	800353a <__swsetup_r+0x1e>
 8003562:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <__swsetup_r+0xd8>)
 8003564:	429c      	cmp	r4, r3
 8003566:	bf08      	it	eq
 8003568:	68ec      	ldreq	r4, [r5, #12]
 800356a:	e7e6      	b.n	800353a <__swsetup_r+0x1e>
 800356c:	0758      	lsls	r0, r3, #29
 800356e:	d512      	bpl.n	8003596 <__swsetup_r+0x7a>
 8003570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003572:	b141      	cbz	r1, 8003586 <__swsetup_r+0x6a>
 8003574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003578:	4299      	cmp	r1, r3
 800357a:	d002      	beq.n	8003582 <__swsetup_r+0x66>
 800357c:	4630      	mov	r0, r6
 800357e:	f000 fa59 	bl	8003a34 <_free_r>
 8003582:	2300      	movs	r3, #0
 8003584:	6363      	str	r3, [r4, #52]	; 0x34
 8003586:	89a3      	ldrh	r3, [r4, #12]
 8003588:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800358c:	81a3      	strh	r3, [r4, #12]
 800358e:	2300      	movs	r3, #0
 8003590:	6063      	str	r3, [r4, #4]
 8003592:	6923      	ldr	r3, [r4, #16]
 8003594:	6023      	str	r3, [r4, #0]
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	f043 0308 	orr.w	r3, r3, #8
 800359c:	81a3      	strh	r3, [r4, #12]
 800359e:	6923      	ldr	r3, [r4, #16]
 80035a0:	b94b      	cbnz	r3, 80035b6 <__swsetup_r+0x9a>
 80035a2:	89a3      	ldrh	r3, [r4, #12]
 80035a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ac:	d003      	beq.n	80035b6 <__swsetup_r+0x9a>
 80035ae:	4621      	mov	r1, r4
 80035b0:	4630      	mov	r0, r6
 80035b2:	f000 f9ff 	bl	80039b4 <__smakebuf_r>
 80035b6:	89a0      	ldrh	r0, [r4, #12]
 80035b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035bc:	f010 0301 	ands.w	r3, r0, #1
 80035c0:	d00a      	beq.n	80035d8 <__swsetup_r+0xbc>
 80035c2:	2300      	movs	r3, #0
 80035c4:	60a3      	str	r3, [r4, #8]
 80035c6:	6963      	ldr	r3, [r4, #20]
 80035c8:	425b      	negs	r3, r3
 80035ca:	61a3      	str	r3, [r4, #24]
 80035cc:	6923      	ldr	r3, [r4, #16]
 80035ce:	b943      	cbnz	r3, 80035e2 <__swsetup_r+0xc6>
 80035d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80035d4:	d1ba      	bne.n	800354c <__swsetup_r+0x30>
 80035d6:	bd70      	pop	{r4, r5, r6, pc}
 80035d8:	0781      	lsls	r1, r0, #30
 80035da:	bf58      	it	pl
 80035dc:	6963      	ldrpl	r3, [r4, #20]
 80035de:	60a3      	str	r3, [r4, #8]
 80035e0:	e7f4      	b.n	80035cc <__swsetup_r+0xb0>
 80035e2:	2000      	movs	r0, #0
 80035e4:	e7f7      	b.n	80035d6 <__swsetup_r+0xba>
 80035e6:	bf00      	nop
 80035e8:	2000000c 	.word	0x2000000c
 80035ec:	080044a0 	.word	0x080044a0
 80035f0:	080044c0 	.word	0x080044c0
 80035f4:	08004480 	.word	0x08004480

080035f8 <__sflush_r>:
 80035f8:	898a      	ldrh	r2, [r1, #12]
 80035fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035fe:	4605      	mov	r5, r0
 8003600:	0710      	lsls	r0, r2, #28
 8003602:	460c      	mov	r4, r1
 8003604:	d458      	bmi.n	80036b8 <__sflush_r+0xc0>
 8003606:	684b      	ldr	r3, [r1, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	dc05      	bgt.n	8003618 <__sflush_r+0x20>
 800360c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	dc02      	bgt.n	8003618 <__sflush_r+0x20>
 8003612:	2000      	movs	r0, #0
 8003614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800361a:	2e00      	cmp	r6, #0
 800361c:	d0f9      	beq.n	8003612 <__sflush_r+0x1a>
 800361e:	2300      	movs	r3, #0
 8003620:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003624:	682f      	ldr	r7, [r5, #0]
 8003626:	602b      	str	r3, [r5, #0]
 8003628:	d032      	beq.n	8003690 <__sflush_r+0x98>
 800362a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800362c:	89a3      	ldrh	r3, [r4, #12]
 800362e:	075a      	lsls	r2, r3, #29
 8003630:	d505      	bpl.n	800363e <__sflush_r+0x46>
 8003632:	6863      	ldr	r3, [r4, #4]
 8003634:	1ac0      	subs	r0, r0, r3
 8003636:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003638:	b10b      	cbz	r3, 800363e <__sflush_r+0x46>
 800363a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800363c:	1ac0      	subs	r0, r0, r3
 800363e:	2300      	movs	r3, #0
 8003640:	4602      	mov	r2, r0
 8003642:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003644:	6a21      	ldr	r1, [r4, #32]
 8003646:	4628      	mov	r0, r5
 8003648:	47b0      	blx	r6
 800364a:	1c43      	adds	r3, r0, #1
 800364c:	89a3      	ldrh	r3, [r4, #12]
 800364e:	d106      	bne.n	800365e <__sflush_r+0x66>
 8003650:	6829      	ldr	r1, [r5, #0]
 8003652:	291d      	cmp	r1, #29
 8003654:	d82c      	bhi.n	80036b0 <__sflush_r+0xb8>
 8003656:	4a2a      	ldr	r2, [pc, #168]	; (8003700 <__sflush_r+0x108>)
 8003658:	40ca      	lsrs	r2, r1
 800365a:	07d6      	lsls	r6, r2, #31
 800365c:	d528      	bpl.n	80036b0 <__sflush_r+0xb8>
 800365e:	2200      	movs	r2, #0
 8003660:	6062      	str	r2, [r4, #4]
 8003662:	04d9      	lsls	r1, r3, #19
 8003664:	6922      	ldr	r2, [r4, #16]
 8003666:	6022      	str	r2, [r4, #0]
 8003668:	d504      	bpl.n	8003674 <__sflush_r+0x7c>
 800366a:	1c42      	adds	r2, r0, #1
 800366c:	d101      	bne.n	8003672 <__sflush_r+0x7a>
 800366e:	682b      	ldr	r3, [r5, #0]
 8003670:	b903      	cbnz	r3, 8003674 <__sflush_r+0x7c>
 8003672:	6560      	str	r0, [r4, #84]	; 0x54
 8003674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003676:	602f      	str	r7, [r5, #0]
 8003678:	2900      	cmp	r1, #0
 800367a:	d0ca      	beq.n	8003612 <__sflush_r+0x1a>
 800367c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003680:	4299      	cmp	r1, r3
 8003682:	d002      	beq.n	800368a <__sflush_r+0x92>
 8003684:	4628      	mov	r0, r5
 8003686:	f000 f9d5 	bl	8003a34 <_free_r>
 800368a:	2000      	movs	r0, #0
 800368c:	6360      	str	r0, [r4, #52]	; 0x34
 800368e:	e7c1      	b.n	8003614 <__sflush_r+0x1c>
 8003690:	6a21      	ldr	r1, [r4, #32]
 8003692:	2301      	movs	r3, #1
 8003694:	4628      	mov	r0, r5
 8003696:	47b0      	blx	r6
 8003698:	1c41      	adds	r1, r0, #1
 800369a:	d1c7      	bne.n	800362c <__sflush_r+0x34>
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0c4      	beq.n	800362c <__sflush_r+0x34>
 80036a2:	2b1d      	cmp	r3, #29
 80036a4:	d001      	beq.n	80036aa <__sflush_r+0xb2>
 80036a6:	2b16      	cmp	r3, #22
 80036a8:	d101      	bne.n	80036ae <__sflush_r+0xb6>
 80036aa:	602f      	str	r7, [r5, #0]
 80036ac:	e7b1      	b.n	8003612 <__sflush_r+0x1a>
 80036ae:	89a3      	ldrh	r3, [r4, #12]
 80036b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b4:	81a3      	strh	r3, [r4, #12]
 80036b6:	e7ad      	b.n	8003614 <__sflush_r+0x1c>
 80036b8:	690f      	ldr	r7, [r1, #16]
 80036ba:	2f00      	cmp	r7, #0
 80036bc:	d0a9      	beq.n	8003612 <__sflush_r+0x1a>
 80036be:	0793      	lsls	r3, r2, #30
 80036c0:	680e      	ldr	r6, [r1, #0]
 80036c2:	bf08      	it	eq
 80036c4:	694b      	ldreq	r3, [r1, #20]
 80036c6:	600f      	str	r7, [r1, #0]
 80036c8:	bf18      	it	ne
 80036ca:	2300      	movne	r3, #0
 80036cc:	eba6 0807 	sub.w	r8, r6, r7
 80036d0:	608b      	str	r3, [r1, #8]
 80036d2:	f1b8 0f00 	cmp.w	r8, #0
 80036d6:	dd9c      	ble.n	8003612 <__sflush_r+0x1a>
 80036d8:	6a21      	ldr	r1, [r4, #32]
 80036da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80036dc:	4643      	mov	r3, r8
 80036de:	463a      	mov	r2, r7
 80036e0:	4628      	mov	r0, r5
 80036e2:	47b0      	blx	r6
 80036e4:	2800      	cmp	r0, #0
 80036e6:	dc06      	bgt.n	80036f6 <__sflush_r+0xfe>
 80036e8:	89a3      	ldrh	r3, [r4, #12]
 80036ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ee:	81a3      	strh	r3, [r4, #12]
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	e78e      	b.n	8003614 <__sflush_r+0x1c>
 80036f6:	4407      	add	r7, r0
 80036f8:	eba8 0800 	sub.w	r8, r8, r0
 80036fc:	e7e9      	b.n	80036d2 <__sflush_r+0xda>
 80036fe:	bf00      	nop
 8003700:	20400001 	.word	0x20400001

08003704 <_fflush_r>:
 8003704:	b538      	push	{r3, r4, r5, lr}
 8003706:	690b      	ldr	r3, [r1, #16]
 8003708:	4605      	mov	r5, r0
 800370a:	460c      	mov	r4, r1
 800370c:	b913      	cbnz	r3, 8003714 <_fflush_r+0x10>
 800370e:	2500      	movs	r5, #0
 8003710:	4628      	mov	r0, r5
 8003712:	bd38      	pop	{r3, r4, r5, pc}
 8003714:	b118      	cbz	r0, 800371e <_fflush_r+0x1a>
 8003716:	6983      	ldr	r3, [r0, #24]
 8003718:	b90b      	cbnz	r3, 800371e <_fflush_r+0x1a>
 800371a:	f000 f887 	bl	800382c <__sinit>
 800371e:	4b14      	ldr	r3, [pc, #80]	; (8003770 <_fflush_r+0x6c>)
 8003720:	429c      	cmp	r4, r3
 8003722:	d11b      	bne.n	800375c <_fflush_r+0x58>
 8003724:	686c      	ldr	r4, [r5, #4]
 8003726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0ef      	beq.n	800370e <_fflush_r+0xa>
 800372e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003730:	07d0      	lsls	r0, r2, #31
 8003732:	d404      	bmi.n	800373e <_fflush_r+0x3a>
 8003734:	0599      	lsls	r1, r3, #22
 8003736:	d402      	bmi.n	800373e <_fflush_r+0x3a>
 8003738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800373a:	f000 f915 	bl	8003968 <__retarget_lock_acquire_recursive>
 800373e:	4628      	mov	r0, r5
 8003740:	4621      	mov	r1, r4
 8003742:	f7ff ff59 	bl	80035f8 <__sflush_r>
 8003746:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003748:	07da      	lsls	r2, r3, #31
 800374a:	4605      	mov	r5, r0
 800374c:	d4e0      	bmi.n	8003710 <_fflush_r+0xc>
 800374e:	89a3      	ldrh	r3, [r4, #12]
 8003750:	059b      	lsls	r3, r3, #22
 8003752:	d4dd      	bmi.n	8003710 <_fflush_r+0xc>
 8003754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003756:	f000 f908 	bl	800396a <__retarget_lock_release_recursive>
 800375a:	e7d9      	b.n	8003710 <_fflush_r+0xc>
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <_fflush_r+0x70>)
 800375e:	429c      	cmp	r4, r3
 8003760:	d101      	bne.n	8003766 <_fflush_r+0x62>
 8003762:	68ac      	ldr	r4, [r5, #8]
 8003764:	e7df      	b.n	8003726 <_fflush_r+0x22>
 8003766:	4b04      	ldr	r3, [pc, #16]	; (8003778 <_fflush_r+0x74>)
 8003768:	429c      	cmp	r4, r3
 800376a:	bf08      	it	eq
 800376c:	68ec      	ldreq	r4, [r5, #12]
 800376e:	e7da      	b.n	8003726 <_fflush_r+0x22>
 8003770:	080044a0 	.word	0x080044a0
 8003774:	080044c0 	.word	0x080044c0
 8003778:	08004480 	.word	0x08004480

0800377c <std>:
 800377c:	2300      	movs	r3, #0
 800377e:	b510      	push	{r4, lr}
 8003780:	4604      	mov	r4, r0
 8003782:	e9c0 3300 	strd	r3, r3, [r0]
 8003786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800378a:	6083      	str	r3, [r0, #8]
 800378c:	8181      	strh	r1, [r0, #12]
 800378e:	6643      	str	r3, [r0, #100]	; 0x64
 8003790:	81c2      	strh	r2, [r0, #14]
 8003792:	6183      	str	r3, [r0, #24]
 8003794:	4619      	mov	r1, r3
 8003796:	2208      	movs	r2, #8
 8003798:	305c      	adds	r0, #92	; 0x5c
 800379a:	f7ff fd49 	bl	8003230 <memset>
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <std+0x38>)
 80037a0:	6263      	str	r3, [r4, #36]	; 0x24
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <std+0x3c>)
 80037a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <std+0x40>)
 80037a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <std+0x44>)
 80037ac:	6224      	str	r4, [r4, #32]
 80037ae:	6323      	str	r3, [r4, #48]	; 0x30
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	bf00      	nop
 80037b4:	08004185 	.word	0x08004185
 80037b8:	080041a7 	.word	0x080041a7
 80037bc:	080041df 	.word	0x080041df
 80037c0:	08004203 	.word	0x08004203

080037c4 <_cleanup_r>:
 80037c4:	4901      	ldr	r1, [pc, #4]	; (80037cc <_cleanup_r+0x8>)
 80037c6:	f000 b8af 	b.w	8003928 <_fwalk_reent>
 80037ca:	bf00      	nop
 80037cc:	08003705 	.word	0x08003705

080037d0 <__sfmoreglue>:
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	1e4a      	subs	r2, r1, #1
 80037d4:	2568      	movs	r5, #104	; 0x68
 80037d6:	4355      	muls	r5, r2
 80037d8:	460e      	mov	r6, r1
 80037da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80037de:	f000 f979 	bl	8003ad4 <_malloc_r>
 80037e2:	4604      	mov	r4, r0
 80037e4:	b140      	cbz	r0, 80037f8 <__sfmoreglue+0x28>
 80037e6:	2100      	movs	r1, #0
 80037e8:	e9c0 1600 	strd	r1, r6, [r0]
 80037ec:	300c      	adds	r0, #12
 80037ee:	60a0      	str	r0, [r4, #8]
 80037f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037f4:	f7ff fd1c 	bl	8003230 <memset>
 80037f8:	4620      	mov	r0, r4
 80037fa:	bd70      	pop	{r4, r5, r6, pc}

080037fc <__sfp_lock_acquire>:
 80037fc:	4801      	ldr	r0, [pc, #4]	; (8003804 <__sfp_lock_acquire+0x8>)
 80037fe:	f000 b8b3 	b.w	8003968 <__retarget_lock_acquire_recursive>
 8003802:	bf00      	nop
 8003804:	20000230 	.word	0x20000230

08003808 <__sfp_lock_release>:
 8003808:	4801      	ldr	r0, [pc, #4]	; (8003810 <__sfp_lock_release+0x8>)
 800380a:	f000 b8ae 	b.w	800396a <__retarget_lock_release_recursive>
 800380e:	bf00      	nop
 8003810:	20000230 	.word	0x20000230

08003814 <__sinit_lock_acquire>:
 8003814:	4801      	ldr	r0, [pc, #4]	; (800381c <__sinit_lock_acquire+0x8>)
 8003816:	f000 b8a7 	b.w	8003968 <__retarget_lock_acquire_recursive>
 800381a:	bf00      	nop
 800381c:	2000022b 	.word	0x2000022b

08003820 <__sinit_lock_release>:
 8003820:	4801      	ldr	r0, [pc, #4]	; (8003828 <__sinit_lock_release+0x8>)
 8003822:	f000 b8a2 	b.w	800396a <__retarget_lock_release_recursive>
 8003826:	bf00      	nop
 8003828:	2000022b 	.word	0x2000022b

0800382c <__sinit>:
 800382c:	b510      	push	{r4, lr}
 800382e:	4604      	mov	r4, r0
 8003830:	f7ff fff0 	bl	8003814 <__sinit_lock_acquire>
 8003834:	69a3      	ldr	r3, [r4, #24]
 8003836:	b11b      	cbz	r3, 8003840 <__sinit+0x14>
 8003838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800383c:	f7ff bff0 	b.w	8003820 <__sinit_lock_release>
 8003840:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003844:	6523      	str	r3, [r4, #80]	; 0x50
 8003846:	4b13      	ldr	r3, [pc, #76]	; (8003894 <__sinit+0x68>)
 8003848:	4a13      	ldr	r2, [pc, #76]	; (8003898 <__sinit+0x6c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	62a2      	str	r2, [r4, #40]	; 0x28
 800384e:	42a3      	cmp	r3, r4
 8003850:	bf04      	itt	eq
 8003852:	2301      	moveq	r3, #1
 8003854:	61a3      	streq	r3, [r4, #24]
 8003856:	4620      	mov	r0, r4
 8003858:	f000 f820 	bl	800389c <__sfp>
 800385c:	6060      	str	r0, [r4, #4]
 800385e:	4620      	mov	r0, r4
 8003860:	f000 f81c 	bl	800389c <__sfp>
 8003864:	60a0      	str	r0, [r4, #8]
 8003866:	4620      	mov	r0, r4
 8003868:	f000 f818 	bl	800389c <__sfp>
 800386c:	2200      	movs	r2, #0
 800386e:	60e0      	str	r0, [r4, #12]
 8003870:	2104      	movs	r1, #4
 8003872:	6860      	ldr	r0, [r4, #4]
 8003874:	f7ff ff82 	bl	800377c <std>
 8003878:	68a0      	ldr	r0, [r4, #8]
 800387a:	2201      	movs	r2, #1
 800387c:	2109      	movs	r1, #9
 800387e:	f7ff ff7d 	bl	800377c <std>
 8003882:	68e0      	ldr	r0, [r4, #12]
 8003884:	2202      	movs	r2, #2
 8003886:	2112      	movs	r1, #18
 8003888:	f7ff ff78 	bl	800377c <std>
 800388c:	2301      	movs	r3, #1
 800388e:	61a3      	str	r3, [r4, #24]
 8003890:	e7d2      	b.n	8003838 <__sinit+0xc>
 8003892:	bf00      	nop
 8003894:	08004378 	.word	0x08004378
 8003898:	080037c5 	.word	0x080037c5

0800389c <__sfp>:
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	4607      	mov	r7, r0
 80038a0:	f7ff ffac 	bl	80037fc <__sfp_lock_acquire>
 80038a4:	4b1e      	ldr	r3, [pc, #120]	; (8003920 <__sfp+0x84>)
 80038a6:	681e      	ldr	r6, [r3, #0]
 80038a8:	69b3      	ldr	r3, [r6, #24]
 80038aa:	b913      	cbnz	r3, 80038b2 <__sfp+0x16>
 80038ac:	4630      	mov	r0, r6
 80038ae:	f7ff ffbd 	bl	800382c <__sinit>
 80038b2:	3648      	adds	r6, #72	; 0x48
 80038b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	d503      	bpl.n	80038c4 <__sfp+0x28>
 80038bc:	6833      	ldr	r3, [r6, #0]
 80038be:	b30b      	cbz	r3, 8003904 <__sfp+0x68>
 80038c0:	6836      	ldr	r6, [r6, #0]
 80038c2:	e7f7      	b.n	80038b4 <__sfp+0x18>
 80038c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038c8:	b9d5      	cbnz	r5, 8003900 <__sfp+0x64>
 80038ca:	4b16      	ldr	r3, [pc, #88]	; (8003924 <__sfp+0x88>)
 80038cc:	60e3      	str	r3, [r4, #12]
 80038ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80038d2:	6665      	str	r5, [r4, #100]	; 0x64
 80038d4:	f000 f847 	bl	8003966 <__retarget_lock_init_recursive>
 80038d8:	f7ff ff96 	bl	8003808 <__sfp_lock_release>
 80038dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80038e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80038e4:	6025      	str	r5, [r4, #0]
 80038e6:	61a5      	str	r5, [r4, #24]
 80038e8:	2208      	movs	r2, #8
 80038ea:	4629      	mov	r1, r5
 80038ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038f0:	f7ff fc9e 	bl	8003230 <memset>
 80038f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038fc:	4620      	mov	r0, r4
 80038fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003900:	3468      	adds	r4, #104	; 0x68
 8003902:	e7d9      	b.n	80038b8 <__sfp+0x1c>
 8003904:	2104      	movs	r1, #4
 8003906:	4638      	mov	r0, r7
 8003908:	f7ff ff62 	bl	80037d0 <__sfmoreglue>
 800390c:	4604      	mov	r4, r0
 800390e:	6030      	str	r0, [r6, #0]
 8003910:	2800      	cmp	r0, #0
 8003912:	d1d5      	bne.n	80038c0 <__sfp+0x24>
 8003914:	f7ff ff78 	bl	8003808 <__sfp_lock_release>
 8003918:	230c      	movs	r3, #12
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	e7ee      	b.n	80038fc <__sfp+0x60>
 800391e:	bf00      	nop
 8003920:	08004378 	.word	0x08004378
 8003924:	ffff0001 	.word	0xffff0001

08003928 <_fwalk_reent>:
 8003928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800392c:	4606      	mov	r6, r0
 800392e:	4688      	mov	r8, r1
 8003930:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003934:	2700      	movs	r7, #0
 8003936:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800393a:	f1b9 0901 	subs.w	r9, r9, #1
 800393e:	d505      	bpl.n	800394c <_fwalk_reent+0x24>
 8003940:	6824      	ldr	r4, [r4, #0]
 8003942:	2c00      	cmp	r4, #0
 8003944:	d1f7      	bne.n	8003936 <_fwalk_reent+0xe>
 8003946:	4638      	mov	r0, r7
 8003948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800394c:	89ab      	ldrh	r3, [r5, #12]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d907      	bls.n	8003962 <_fwalk_reent+0x3a>
 8003952:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003956:	3301      	adds	r3, #1
 8003958:	d003      	beq.n	8003962 <_fwalk_reent+0x3a>
 800395a:	4629      	mov	r1, r5
 800395c:	4630      	mov	r0, r6
 800395e:	47c0      	blx	r8
 8003960:	4307      	orrs	r7, r0
 8003962:	3568      	adds	r5, #104	; 0x68
 8003964:	e7e9      	b.n	800393a <_fwalk_reent+0x12>

08003966 <__retarget_lock_init_recursive>:
 8003966:	4770      	bx	lr

08003968 <__retarget_lock_acquire_recursive>:
 8003968:	4770      	bx	lr

0800396a <__retarget_lock_release_recursive>:
 800396a:	4770      	bx	lr

0800396c <__swhatbuf_r>:
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	460e      	mov	r6, r1
 8003970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003974:	2900      	cmp	r1, #0
 8003976:	b096      	sub	sp, #88	; 0x58
 8003978:	4614      	mov	r4, r2
 800397a:	461d      	mov	r5, r3
 800397c:	da07      	bge.n	800398e <__swhatbuf_r+0x22>
 800397e:	2300      	movs	r3, #0
 8003980:	602b      	str	r3, [r5, #0]
 8003982:	89b3      	ldrh	r3, [r6, #12]
 8003984:	061a      	lsls	r2, r3, #24
 8003986:	d410      	bmi.n	80039aa <__swhatbuf_r+0x3e>
 8003988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800398c:	e00e      	b.n	80039ac <__swhatbuf_r+0x40>
 800398e:	466a      	mov	r2, sp
 8003990:	f000 fc5e 	bl	8004250 <_fstat_r>
 8003994:	2800      	cmp	r0, #0
 8003996:	dbf2      	blt.n	800397e <__swhatbuf_r+0x12>
 8003998:	9a01      	ldr	r2, [sp, #4]
 800399a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800399e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039a2:	425a      	negs	r2, r3
 80039a4:	415a      	adcs	r2, r3
 80039a6:	602a      	str	r2, [r5, #0]
 80039a8:	e7ee      	b.n	8003988 <__swhatbuf_r+0x1c>
 80039aa:	2340      	movs	r3, #64	; 0x40
 80039ac:	2000      	movs	r0, #0
 80039ae:	6023      	str	r3, [r4, #0]
 80039b0:	b016      	add	sp, #88	; 0x58
 80039b2:	bd70      	pop	{r4, r5, r6, pc}

080039b4 <__smakebuf_r>:
 80039b4:	898b      	ldrh	r3, [r1, #12]
 80039b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039b8:	079d      	lsls	r5, r3, #30
 80039ba:	4606      	mov	r6, r0
 80039bc:	460c      	mov	r4, r1
 80039be:	d507      	bpl.n	80039d0 <__smakebuf_r+0x1c>
 80039c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039c4:	6023      	str	r3, [r4, #0]
 80039c6:	6123      	str	r3, [r4, #16]
 80039c8:	2301      	movs	r3, #1
 80039ca:	6163      	str	r3, [r4, #20]
 80039cc:	b002      	add	sp, #8
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
 80039d0:	ab01      	add	r3, sp, #4
 80039d2:	466a      	mov	r2, sp
 80039d4:	f7ff ffca 	bl	800396c <__swhatbuf_r>
 80039d8:	9900      	ldr	r1, [sp, #0]
 80039da:	4605      	mov	r5, r0
 80039dc:	4630      	mov	r0, r6
 80039de:	f000 f879 	bl	8003ad4 <_malloc_r>
 80039e2:	b948      	cbnz	r0, 80039f8 <__smakebuf_r+0x44>
 80039e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039e8:	059a      	lsls	r2, r3, #22
 80039ea:	d4ef      	bmi.n	80039cc <__smakebuf_r+0x18>
 80039ec:	f023 0303 	bic.w	r3, r3, #3
 80039f0:	f043 0302 	orr.w	r3, r3, #2
 80039f4:	81a3      	strh	r3, [r4, #12]
 80039f6:	e7e3      	b.n	80039c0 <__smakebuf_r+0xc>
 80039f8:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <__smakebuf_r+0x7c>)
 80039fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	6020      	str	r0, [r4, #0]
 8003a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a04:	81a3      	strh	r3, [r4, #12]
 8003a06:	9b00      	ldr	r3, [sp, #0]
 8003a08:	6163      	str	r3, [r4, #20]
 8003a0a:	9b01      	ldr	r3, [sp, #4]
 8003a0c:	6120      	str	r0, [r4, #16]
 8003a0e:	b15b      	cbz	r3, 8003a28 <__smakebuf_r+0x74>
 8003a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a14:	4630      	mov	r0, r6
 8003a16:	f000 fc2d 	bl	8004274 <_isatty_r>
 8003a1a:	b128      	cbz	r0, 8003a28 <__smakebuf_r+0x74>
 8003a1c:	89a3      	ldrh	r3, [r4, #12]
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	81a3      	strh	r3, [r4, #12]
 8003a28:	89a0      	ldrh	r0, [r4, #12]
 8003a2a:	4305      	orrs	r5, r0
 8003a2c:	81a5      	strh	r5, [r4, #12]
 8003a2e:	e7cd      	b.n	80039cc <__smakebuf_r+0x18>
 8003a30:	080037c5 	.word	0x080037c5

08003a34 <_free_r>:
 8003a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a36:	2900      	cmp	r1, #0
 8003a38:	d048      	beq.n	8003acc <_free_r+0x98>
 8003a3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a3e:	9001      	str	r0, [sp, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f1a1 0404 	sub.w	r4, r1, #4
 8003a46:	bfb8      	it	lt
 8003a48:	18e4      	addlt	r4, r4, r3
 8003a4a:	f000 fc35 	bl	80042b8 <__malloc_lock>
 8003a4e:	4a20      	ldr	r2, [pc, #128]	; (8003ad0 <_free_r+0x9c>)
 8003a50:	9801      	ldr	r0, [sp, #4]
 8003a52:	6813      	ldr	r3, [r2, #0]
 8003a54:	4615      	mov	r5, r2
 8003a56:	b933      	cbnz	r3, 8003a66 <_free_r+0x32>
 8003a58:	6063      	str	r3, [r4, #4]
 8003a5a:	6014      	str	r4, [r2, #0]
 8003a5c:	b003      	add	sp, #12
 8003a5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a62:	f000 bc2f 	b.w	80042c4 <__malloc_unlock>
 8003a66:	42a3      	cmp	r3, r4
 8003a68:	d90b      	bls.n	8003a82 <_free_r+0x4e>
 8003a6a:	6821      	ldr	r1, [r4, #0]
 8003a6c:	1862      	adds	r2, r4, r1
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	bf04      	itt	eq
 8003a72:	681a      	ldreq	r2, [r3, #0]
 8003a74:	685b      	ldreq	r3, [r3, #4]
 8003a76:	6063      	str	r3, [r4, #4]
 8003a78:	bf04      	itt	eq
 8003a7a:	1852      	addeq	r2, r2, r1
 8003a7c:	6022      	streq	r2, [r4, #0]
 8003a7e:	602c      	str	r4, [r5, #0]
 8003a80:	e7ec      	b.n	8003a5c <_free_r+0x28>
 8003a82:	461a      	mov	r2, r3
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	b10b      	cbz	r3, 8003a8c <_free_r+0x58>
 8003a88:	42a3      	cmp	r3, r4
 8003a8a:	d9fa      	bls.n	8003a82 <_free_r+0x4e>
 8003a8c:	6811      	ldr	r1, [r2, #0]
 8003a8e:	1855      	adds	r5, r2, r1
 8003a90:	42a5      	cmp	r5, r4
 8003a92:	d10b      	bne.n	8003aac <_free_r+0x78>
 8003a94:	6824      	ldr	r4, [r4, #0]
 8003a96:	4421      	add	r1, r4
 8003a98:	1854      	adds	r4, r2, r1
 8003a9a:	42a3      	cmp	r3, r4
 8003a9c:	6011      	str	r1, [r2, #0]
 8003a9e:	d1dd      	bne.n	8003a5c <_free_r+0x28>
 8003aa0:	681c      	ldr	r4, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	6053      	str	r3, [r2, #4]
 8003aa6:	4421      	add	r1, r4
 8003aa8:	6011      	str	r1, [r2, #0]
 8003aaa:	e7d7      	b.n	8003a5c <_free_r+0x28>
 8003aac:	d902      	bls.n	8003ab4 <_free_r+0x80>
 8003aae:	230c      	movs	r3, #12
 8003ab0:	6003      	str	r3, [r0, #0]
 8003ab2:	e7d3      	b.n	8003a5c <_free_r+0x28>
 8003ab4:	6825      	ldr	r5, [r4, #0]
 8003ab6:	1961      	adds	r1, r4, r5
 8003ab8:	428b      	cmp	r3, r1
 8003aba:	bf04      	itt	eq
 8003abc:	6819      	ldreq	r1, [r3, #0]
 8003abe:	685b      	ldreq	r3, [r3, #4]
 8003ac0:	6063      	str	r3, [r4, #4]
 8003ac2:	bf04      	itt	eq
 8003ac4:	1949      	addeq	r1, r1, r5
 8003ac6:	6021      	streq	r1, [r4, #0]
 8003ac8:	6054      	str	r4, [r2, #4]
 8003aca:	e7c7      	b.n	8003a5c <_free_r+0x28>
 8003acc:	b003      	add	sp, #12
 8003ace:	bd30      	pop	{r4, r5, pc}
 8003ad0:	20000094 	.word	0x20000094

08003ad4 <_malloc_r>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	1ccd      	adds	r5, r1, #3
 8003ad8:	f025 0503 	bic.w	r5, r5, #3
 8003adc:	3508      	adds	r5, #8
 8003ade:	2d0c      	cmp	r5, #12
 8003ae0:	bf38      	it	cc
 8003ae2:	250c      	movcc	r5, #12
 8003ae4:	2d00      	cmp	r5, #0
 8003ae6:	4606      	mov	r6, r0
 8003ae8:	db01      	blt.n	8003aee <_malloc_r+0x1a>
 8003aea:	42a9      	cmp	r1, r5
 8003aec:	d903      	bls.n	8003af6 <_malloc_r+0x22>
 8003aee:	230c      	movs	r3, #12
 8003af0:	6033      	str	r3, [r6, #0]
 8003af2:	2000      	movs	r0, #0
 8003af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003af6:	f000 fbdf 	bl	80042b8 <__malloc_lock>
 8003afa:	4921      	ldr	r1, [pc, #132]	; (8003b80 <_malloc_r+0xac>)
 8003afc:	680a      	ldr	r2, [r1, #0]
 8003afe:	4614      	mov	r4, r2
 8003b00:	b99c      	cbnz	r4, 8003b2a <_malloc_r+0x56>
 8003b02:	4f20      	ldr	r7, [pc, #128]	; (8003b84 <_malloc_r+0xb0>)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	b923      	cbnz	r3, 8003b12 <_malloc_r+0x3e>
 8003b08:	4621      	mov	r1, r4
 8003b0a:	4630      	mov	r0, r6
 8003b0c:	f000 fb2a 	bl	8004164 <_sbrk_r>
 8003b10:	6038      	str	r0, [r7, #0]
 8003b12:	4629      	mov	r1, r5
 8003b14:	4630      	mov	r0, r6
 8003b16:	f000 fb25 	bl	8004164 <_sbrk_r>
 8003b1a:	1c43      	adds	r3, r0, #1
 8003b1c:	d123      	bne.n	8003b66 <_malloc_r+0x92>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	6033      	str	r3, [r6, #0]
 8003b22:	4630      	mov	r0, r6
 8003b24:	f000 fbce 	bl	80042c4 <__malloc_unlock>
 8003b28:	e7e3      	b.n	8003af2 <_malloc_r+0x1e>
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	1b5b      	subs	r3, r3, r5
 8003b2e:	d417      	bmi.n	8003b60 <_malloc_r+0x8c>
 8003b30:	2b0b      	cmp	r3, #11
 8003b32:	d903      	bls.n	8003b3c <_malloc_r+0x68>
 8003b34:	6023      	str	r3, [r4, #0]
 8003b36:	441c      	add	r4, r3
 8003b38:	6025      	str	r5, [r4, #0]
 8003b3a:	e004      	b.n	8003b46 <_malloc_r+0x72>
 8003b3c:	6863      	ldr	r3, [r4, #4]
 8003b3e:	42a2      	cmp	r2, r4
 8003b40:	bf0c      	ite	eq
 8003b42:	600b      	streq	r3, [r1, #0]
 8003b44:	6053      	strne	r3, [r2, #4]
 8003b46:	4630      	mov	r0, r6
 8003b48:	f000 fbbc 	bl	80042c4 <__malloc_unlock>
 8003b4c:	f104 000b 	add.w	r0, r4, #11
 8003b50:	1d23      	adds	r3, r4, #4
 8003b52:	f020 0007 	bic.w	r0, r0, #7
 8003b56:	1ac2      	subs	r2, r0, r3
 8003b58:	d0cc      	beq.n	8003af4 <_malloc_r+0x20>
 8003b5a:	1a1b      	subs	r3, r3, r0
 8003b5c:	50a3      	str	r3, [r4, r2]
 8003b5e:	e7c9      	b.n	8003af4 <_malloc_r+0x20>
 8003b60:	4622      	mov	r2, r4
 8003b62:	6864      	ldr	r4, [r4, #4]
 8003b64:	e7cc      	b.n	8003b00 <_malloc_r+0x2c>
 8003b66:	1cc4      	adds	r4, r0, #3
 8003b68:	f024 0403 	bic.w	r4, r4, #3
 8003b6c:	42a0      	cmp	r0, r4
 8003b6e:	d0e3      	beq.n	8003b38 <_malloc_r+0x64>
 8003b70:	1a21      	subs	r1, r4, r0
 8003b72:	4630      	mov	r0, r6
 8003b74:	f000 faf6 	bl	8004164 <_sbrk_r>
 8003b78:	3001      	adds	r0, #1
 8003b7a:	d1dd      	bne.n	8003b38 <_malloc_r+0x64>
 8003b7c:	e7cf      	b.n	8003b1e <_malloc_r+0x4a>
 8003b7e:	bf00      	nop
 8003b80:	20000094 	.word	0x20000094
 8003b84:	20000098 	.word	0x20000098

08003b88 <__sfputc_r>:
 8003b88:	6893      	ldr	r3, [r2, #8]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	b410      	push	{r4}
 8003b90:	6093      	str	r3, [r2, #8]
 8003b92:	da08      	bge.n	8003ba6 <__sfputc_r+0x1e>
 8003b94:	6994      	ldr	r4, [r2, #24]
 8003b96:	42a3      	cmp	r3, r4
 8003b98:	db01      	blt.n	8003b9e <__sfputc_r+0x16>
 8003b9a:	290a      	cmp	r1, #10
 8003b9c:	d103      	bne.n	8003ba6 <__sfputc_r+0x1e>
 8003b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ba2:	f7ff bc69 	b.w	8003478 <__swbuf_r>
 8003ba6:	6813      	ldr	r3, [r2, #0]
 8003ba8:	1c58      	adds	r0, r3, #1
 8003baa:	6010      	str	r0, [r2, #0]
 8003bac:	7019      	strb	r1, [r3, #0]
 8003bae:	4608      	mov	r0, r1
 8003bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <__sfputs_r>:
 8003bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb8:	4606      	mov	r6, r0
 8003bba:	460f      	mov	r7, r1
 8003bbc:	4614      	mov	r4, r2
 8003bbe:	18d5      	adds	r5, r2, r3
 8003bc0:	42ac      	cmp	r4, r5
 8003bc2:	d101      	bne.n	8003bc8 <__sfputs_r+0x12>
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	e007      	b.n	8003bd8 <__sfputs_r+0x22>
 8003bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bcc:	463a      	mov	r2, r7
 8003bce:	4630      	mov	r0, r6
 8003bd0:	f7ff ffda 	bl	8003b88 <__sfputc_r>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d1f3      	bne.n	8003bc0 <__sfputs_r+0xa>
 8003bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bdc <_vfiprintf_r>:
 8003bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be0:	460d      	mov	r5, r1
 8003be2:	b09d      	sub	sp, #116	; 0x74
 8003be4:	4614      	mov	r4, r2
 8003be6:	4698      	mov	r8, r3
 8003be8:	4606      	mov	r6, r0
 8003bea:	b118      	cbz	r0, 8003bf4 <_vfiprintf_r+0x18>
 8003bec:	6983      	ldr	r3, [r0, #24]
 8003bee:	b90b      	cbnz	r3, 8003bf4 <_vfiprintf_r+0x18>
 8003bf0:	f7ff fe1c 	bl	800382c <__sinit>
 8003bf4:	4b89      	ldr	r3, [pc, #548]	; (8003e1c <_vfiprintf_r+0x240>)
 8003bf6:	429d      	cmp	r5, r3
 8003bf8:	d11b      	bne.n	8003c32 <_vfiprintf_r+0x56>
 8003bfa:	6875      	ldr	r5, [r6, #4]
 8003bfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bfe:	07d9      	lsls	r1, r3, #31
 8003c00:	d405      	bmi.n	8003c0e <_vfiprintf_r+0x32>
 8003c02:	89ab      	ldrh	r3, [r5, #12]
 8003c04:	059a      	lsls	r2, r3, #22
 8003c06:	d402      	bmi.n	8003c0e <_vfiprintf_r+0x32>
 8003c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c0a:	f7ff fead 	bl	8003968 <__retarget_lock_acquire_recursive>
 8003c0e:	89ab      	ldrh	r3, [r5, #12]
 8003c10:	071b      	lsls	r3, r3, #28
 8003c12:	d501      	bpl.n	8003c18 <_vfiprintf_r+0x3c>
 8003c14:	692b      	ldr	r3, [r5, #16]
 8003c16:	b9eb      	cbnz	r3, 8003c54 <_vfiprintf_r+0x78>
 8003c18:	4629      	mov	r1, r5
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	f7ff fc7e 	bl	800351c <__swsetup_r>
 8003c20:	b1c0      	cbz	r0, 8003c54 <_vfiprintf_r+0x78>
 8003c22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c24:	07dc      	lsls	r4, r3, #31
 8003c26:	d50e      	bpl.n	8003c46 <_vfiprintf_r+0x6a>
 8003c28:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2c:	b01d      	add	sp, #116	; 0x74
 8003c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c32:	4b7b      	ldr	r3, [pc, #492]	; (8003e20 <_vfiprintf_r+0x244>)
 8003c34:	429d      	cmp	r5, r3
 8003c36:	d101      	bne.n	8003c3c <_vfiprintf_r+0x60>
 8003c38:	68b5      	ldr	r5, [r6, #8]
 8003c3a:	e7df      	b.n	8003bfc <_vfiprintf_r+0x20>
 8003c3c:	4b79      	ldr	r3, [pc, #484]	; (8003e24 <_vfiprintf_r+0x248>)
 8003c3e:	429d      	cmp	r5, r3
 8003c40:	bf08      	it	eq
 8003c42:	68f5      	ldreq	r5, [r6, #12]
 8003c44:	e7da      	b.n	8003bfc <_vfiprintf_r+0x20>
 8003c46:	89ab      	ldrh	r3, [r5, #12]
 8003c48:	0598      	lsls	r0, r3, #22
 8003c4a:	d4ed      	bmi.n	8003c28 <_vfiprintf_r+0x4c>
 8003c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c4e:	f7ff fe8c 	bl	800396a <__retarget_lock_release_recursive>
 8003c52:	e7e9      	b.n	8003c28 <_vfiprintf_r+0x4c>
 8003c54:	2300      	movs	r3, #0
 8003c56:	9309      	str	r3, [sp, #36]	; 0x24
 8003c58:	2320      	movs	r3, #32
 8003c5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c62:	2330      	movs	r3, #48	; 0x30
 8003c64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003e28 <_vfiprintf_r+0x24c>
 8003c68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c6c:	f04f 0901 	mov.w	r9, #1
 8003c70:	4623      	mov	r3, r4
 8003c72:	469a      	mov	sl, r3
 8003c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c78:	b10a      	cbz	r2, 8003c7e <_vfiprintf_r+0xa2>
 8003c7a:	2a25      	cmp	r2, #37	; 0x25
 8003c7c:	d1f9      	bne.n	8003c72 <_vfiprintf_r+0x96>
 8003c7e:	ebba 0b04 	subs.w	fp, sl, r4
 8003c82:	d00b      	beq.n	8003c9c <_vfiprintf_r+0xc0>
 8003c84:	465b      	mov	r3, fp
 8003c86:	4622      	mov	r2, r4
 8003c88:	4629      	mov	r1, r5
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	f7ff ff93 	bl	8003bb6 <__sfputs_r>
 8003c90:	3001      	adds	r0, #1
 8003c92:	f000 80aa 	beq.w	8003dea <_vfiprintf_r+0x20e>
 8003c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c98:	445a      	add	r2, fp
 8003c9a:	9209      	str	r2, [sp, #36]	; 0x24
 8003c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80a2 	beq.w	8003dea <_vfiprintf_r+0x20e>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cb0:	f10a 0a01 	add.w	sl, sl, #1
 8003cb4:	9304      	str	r3, [sp, #16]
 8003cb6:	9307      	str	r3, [sp, #28]
 8003cb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cbc:	931a      	str	r3, [sp, #104]	; 0x68
 8003cbe:	4654      	mov	r4, sl
 8003cc0:	2205      	movs	r2, #5
 8003cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cc6:	4858      	ldr	r0, [pc, #352]	; (8003e28 <_vfiprintf_r+0x24c>)
 8003cc8:	f7fc fa8a 	bl	80001e0 <memchr>
 8003ccc:	9a04      	ldr	r2, [sp, #16]
 8003cce:	b9d8      	cbnz	r0, 8003d08 <_vfiprintf_r+0x12c>
 8003cd0:	06d1      	lsls	r1, r2, #27
 8003cd2:	bf44      	itt	mi
 8003cd4:	2320      	movmi	r3, #32
 8003cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cda:	0713      	lsls	r3, r2, #28
 8003cdc:	bf44      	itt	mi
 8003cde:	232b      	movmi	r3, #43	; 0x2b
 8003ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8003cea:	d015      	beq.n	8003d18 <_vfiprintf_r+0x13c>
 8003cec:	9a07      	ldr	r2, [sp, #28]
 8003cee:	4654      	mov	r4, sl
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f04f 0c0a 	mov.w	ip, #10
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cfc:	3b30      	subs	r3, #48	; 0x30
 8003cfe:	2b09      	cmp	r3, #9
 8003d00:	d94e      	bls.n	8003da0 <_vfiprintf_r+0x1c4>
 8003d02:	b1b0      	cbz	r0, 8003d32 <_vfiprintf_r+0x156>
 8003d04:	9207      	str	r2, [sp, #28]
 8003d06:	e014      	b.n	8003d32 <_vfiprintf_r+0x156>
 8003d08:	eba0 0308 	sub.w	r3, r0, r8
 8003d0c:	fa09 f303 	lsl.w	r3, r9, r3
 8003d10:	4313      	orrs	r3, r2
 8003d12:	9304      	str	r3, [sp, #16]
 8003d14:	46a2      	mov	sl, r4
 8003d16:	e7d2      	b.n	8003cbe <_vfiprintf_r+0xe2>
 8003d18:	9b03      	ldr	r3, [sp, #12]
 8003d1a:	1d19      	adds	r1, r3, #4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	9103      	str	r1, [sp, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bfbb      	ittet	lt
 8003d24:	425b      	neglt	r3, r3
 8003d26:	f042 0202 	orrlt.w	r2, r2, #2
 8003d2a:	9307      	strge	r3, [sp, #28]
 8003d2c:	9307      	strlt	r3, [sp, #28]
 8003d2e:	bfb8      	it	lt
 8003d30:	9204      	strlt	r2, [sp, #16]
 8003d32:	7823      	ldrb	r3, [r4, #0]
 8003d34:	2b2e      	cmp	r3, #46	; 0x2e
 8003d36:	d10c      	bne.n	8003d52 <_vfiprintf_r+0x176>
 8003d38:	7863      	ldrb	r3, [r4, #1]
 8003d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d3c:	d135      	bne.n	8003daa <_vfiprintf_r+0x1ce>
 8003d3e:	9b03      	ldr	r3, [sp, #12]
 8003d40:	1d1a      	adds	r2, r3, #4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	9203      	str	r2, [sp, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bfb8      	it	lt
 8003d4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d4e:	3402      	adds	r4, #2
 8003d50:	9305      	str	r3, [sp, #20]
 8003d52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003e38 <_vfiprintf_r+0x25c>
 8003d56:	7821      	ldrb	r1, [r4, #0]
 8003d58:	2203      	movs	r2, #3
 8003d5a:	4650      	mov	r0, sl
 8003d5c:	f7fc fa40 	bl	80001e0 <memchr>
 8003d60:	b140      	cbz	r0, 8003d74 <_vfiprintf_r+0x198>
 8003d62:	2340      	movs	r3, #64	; 0x40
 8003d64:	eba0 000a 	sub.w	r0, r0, sl
 8003d68:	fa03 f000 	lsl.w	r0, r3, r0
 8003d6c:	9b04      	ldr	r3, [sp, #16]
 8003d6e:	4303      	orrs	r3, r0
 8003d70:	3401      	adds	r4, #1
 8003d72:	9304      	str	r3, [sp, #16]
 8003d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d78:	482c      	ldr	r0, [pc, #176]	; (8003e2c <_vfiprintf_r+0x250>)
 8003d7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d7e:	2206      	movs	r2, #6
 8003d80:	f7fc fa2e 	bl	80001e0 <memchr>
 8003d84:	2800      	cmp	r0, #0
 8003d86:	d03f      	beq.n	8003e08 <_vfiprintf_r+0x22c>
 8003d88:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <_vfiprintf_r+0x254>)
 8003d8a:	bb1b      	cbnz	r3, 8003dd4 <_vfiprintf_r+0x1f8>
 8003d8c:	9b03      	ldr	r3, [sp, #12]
 8003d8e:	3307      	adds	r3, #7
 8003d90:	f023 0307 	bic.w	r3, r3, #7
 8003d94:	3308      	adds	r3, #8
 8003d96:	9303      	str	r3, [sp, #12]
 8003d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d9a:	443b      	add	r3, r7
 8003d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d9e:	e767      	b.n	8003c70 <_vfiprintf_r+0x94>
 8003da0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003da4:	460c      	mov	r4, r1
 8003da6:	2001      	movs	r0, #1
 8003da8:	e7a5      	b.n	8003cf6 <_vfiprintf_r+0x11a>
 8003daa:	2300      	movs	r3, #0
 8003dac:	3401      	adds	r4, #1
 8003dae:	9305      	str	r3, [sp, #20]
 8003db0:	4619      	mov	r1, r3
 8003db2:	f04f 0c0a 	mov.w	ip, #10
 8003db6:	4620      	mov	r0, r4
 8003db8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dbc:	3a30      	subs	r2, #48	; 0x30
 8003dbe:	2a09      	cmp	r2, #9
 8003dc0:	d903      	bls.n	8003dca <_vfiprintf_r+0x1ee>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0c5      	beq.n	8003d52 <_vfiprintf_r+0x176>
 8003dc6:	9105      	str	r1, [sp, #20]
 8003dc8:	e7c3      	b.n	8003d52 <_vfiprintf_r+0x176>
 8003dca:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dce:	4604      	mov	r4, r0
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e7f0      	b.n	8003db6 <_vfiprintf_r+0x1da>
 8003dd4:	ab03      	add	r3, sp, #12
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	462a      	mov	r2, r5
 8003dda:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <_vfiprintf_r+0x258>)
 8003ddc:	a904      	add	r1, sp, #16
 8003dde:	4630      	mov	r0, r6
 8003de0:	f3af 8000 	nop.w
 8003de4:	4607      	mov	r7, r0
 8003de6:	1c78      	adds	r0, r7, #1
 8003de8:	d1d6      	bne.n	8003d98 <_vfiprintf_r+0x1bc>
 8003dea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dec:	07d9      	lsls	r1, r3, #31
 8003dee:	d405      	bmi.n	8003dfc <_vfiprintf_r+0x220>
 8003df0:	89ab      	ldrh	r3, [r5, #12]
 8003df2:	059a      	lsls	r2, r3, #22
 8003df4:	d402      	bmi.n	8003dfc <_vfiprintf_r+0x220>
 8003df6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003df8:	f7ff fdb7 	bl	800396a <__retarget_lock_release_recursive>
 8003dfc:	89ab      	ldrh	r3, [r5, #12]
 8003dfe:	065b      	lsls	r3, r3, #25
 8003e00:	f53f af12 	bmi.w	8003c28 <_vfiprintf_r+0x4c>
 8003e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e06:	e711      	b.n	8003c2c <_vfiprintf_r+0x50>
 8003e08:	ab03      	add	r3, sp, #12
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	462a      	mov	r2, r5
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <_vfiprintf_r+0x258>)
 8003e10:	a904      	add	r1, sp, #16
 8003e12:	4630      	mov	r0, r6
 8003e14:	f000 f880 	bl	8003f18 <_printf_i>
 8003e18:	e7e4      	b.n	8003de4 <_vfiprintf_r+0x208>
 8003e1a:	bf00      	nop
 8003e1c:	080044a0 	.word	0x080044a0
 8003e20:	080044c0 	.word	0x080044c0
 8003e24:	08004480 	.word	0x08004480
 8003e28:	080044e0 	.word	0x080044e0
 8003e2c:	080044ea 	.word	0x080044ea
 8003e30:	00000000 	.word	0x00000000
 8003e34:	08003bb7 	.word	0x08003bb7
 8003e38:	080044e6 	.word	0x080044e6

08003e3c <_printf_common>:
 8003e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e40:	4616      	mov	r6, r2
 8003e42:	4699      	mov	r9, r3
 8003e44:	688a      	ldr	r2, [r1, #8]
 8003e46:	690b      	ldr	r3, [r1, #16]
 8003e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	bfb8      	it	lt
 8003e50:	4613      	movlt	r3, r2
 8003e52:	6033      	str	r3, [r6, #0]
 8003e54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e58:	4607      	mov	r7, r0
 8003e5a:	460c      	mov	r4, r1
 8003e5c:	b10a      	cbz	r2, 8003e62 <_printf_common+0x26>
 8003e5e:	3301      	adds	r3, #1
 8003e60:	6033      	str	r3, [r6, #0]
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	0699      	lsls	r1, r3, #26
 8003e66:	bf42      	ittt	mi
 8003e68:	6833      	ldrmi	r3, [r6, #0]
 8003e6a:	3302      	addmi	r3, #2
 8003e6c:	6033      	strmi	r3, [r6, #0]
 8003e6e:	6825      	ldr	r5, [r4, #0]
 8003e70:	f015 0506 	ands.w	r5, r5, #6
 8003e74:	d106      	bne.n	8003e84 <_printf_common+0x48>
 8003e76:	f104 0a19 	add.w	sl, r4, #25
 8003e7a:	68e3      	ldr	r3, [r4, #12]
 8003e7c:	6832      	ldr	r2, [r6, #0]
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	42ab      	cmp	r3, r5
 8003e82:	dc26      	bgt.n	8003ed2 <_printf_common+0x96>
 8003e84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e88:	1e13      	subs	r3, r2, #0
 8003e8a:	6822      	ldr	r2, [r4, #0]
 8003e8c:	bf18      	it	ne
 8003e8e:	2301      	movne	r3, #1
 8003e90:	0692      	lsls	r2, r2, #26
 8003e92:	d42b      	bmi.n	8003eec <_printf_common+0xb0>
 8003e94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e98:	4649      	mov	r1, r9
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	47c0      	blx	r8
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	d01e      	beq.n	8003ee0 <_printf_common+0xa4>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	68e5      	ldr	r5, [r4, #12]
 8003ea6:	6832      	ldr	r2, [r6, #0]
 8003ea8:	f003 0306 	and.w	r3, r3, #6
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	bf08      	it	eq
 8003eb0:	1aad      	subeq	r5, r5, r2
 8003eb2:	68a3      	ldr	r3, [r4, #8]
 8003eb4:	6922      	ldr	r2, [r4, #16]
 8003eb6:	bf0c      	ite	eq
 8003eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ebc:	2500      	movne	r5, #0
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	bfc4      	itt	gt
 8003ec2:	1a9b      	subgt	r3, r3, r2
 8003ec4:	18ed      	addgt	r5, r5, r3
 8003ec6:	2600      	movs	r6, #0
 8003ec8:	341a      	adds	r4, #26
 8003eca:	42b5      	cmp	r5, r6
 8003ecc:	d11a      	bne.n	8003f04 <_printf_common+0xc8>
 8003ece:	2000      	movs	r0, #0
 8003ed0:	e008      	b.n	8003ee4 <_printf_common+0xa8>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	4652      	mov	r2, sl
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	4638      	mov	r0, r7
 8003eda:	47c0      	blx	r8
 8003edc:	3001      	adds	r0, #1
 8003ede:	d103      	bne.n	8003ee8 <_printf_common+0xac>
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee8:	3501      	adds	r5, #1
 8003eea:	e7c6      	b.n	8003e7a <_printf_common+0x3e>
 8003eec:	18e1      	adds	r1, r4, r3
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	2030      	movs	r0, #48	; 0x30
 8003ef2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ef6:	4422      	add	r2, r4
 8003ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003efc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f00:	3302      	adds	r3, #2
 8003f02:	e7c7      	b.n	8003e94 <_printf_common+0x58>
 8003f04:	2301      	movs	r3, #1
 8003f06:	4622      	mov	r2, r4
 8003f08:	4649      	mov	r1, r9
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	47c0      	blx	r8
 8003f0e:	3001      	adds	r0, #1
 8003f10:	d0e6      	beq.n	8003ee0 <_printf_common+0xa4>
 8003f12:	3601      	adds	r6, #1
 8003f14:	e7d9      	b.n	8003eca <_printf_common+0x8e>
	...

08003f18 <_printf_i>:
 8003f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	4691      	mov	r9, r2
 8003f20:	7e27      	ldrb	r7, [r4, #24]
 8003f22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f24:	2f78      	cmp	r7, #120	; 0x78
 8003f26:	4680      	mov	r8, r0
 8003f28:	469a      	mov	sl, r3
 8003f2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f2e:	d807      	bhi.n	8003f40 <_printf_i+0x28>
 8003f30:	2f62      	cmp	r7, #98	; 0x62
 8003f32:	d80a      	bhi.n	8003f4a <_printf_i+0x32>
 8003f34:	2f00      	cmp	r7, #0
 8003f36:	f000 80d8 	beq.w	80040ea <_printf_i+0x1d2>
 8003f3a:	2f58      	cmp	r7, #88	; 0x58
 8003f3c:	f000 80a3 	beq.w	8004086 <_printf_i+0x16e>
 8003f40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f48:	e03a      	b.n	8003fc0 <_printf_i+0xa8>
 8003f4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f4e:	2b15      	cmp	r3, #21
 8003f50:	d8f6      	bhi.n	8003f40 <_printf_i+0x28>
 8003f52:	a001      	add	r0, pc, #4	; (adr r0, 8003f58 <_printf_i+0x40>)
 8003f54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f58:	08003fb1 	.word	0x08003fb1
 8003f5c:	08003fc5 	.word	0x08003fc5
 8003f60:	08003f41 	.word	0x08003f41
 8003f64:	08003f41 	.word	0x08003f41
 8003f68:	08003f41 	.word	0x08003f41
 8003f6c:	08003f41 	.word	0x08003f41
 8003f70:	08003fc5 	.word	0x08003fc5
 8003f74:	08003f41 	.word	0x08003f41
 8003f78:	08003f41 	.word	0x08003f41
 8003f7c:	08003f41 	.word	0x08003f41
 8003f80:	08003f41 	.word	0x08003f41
 8003f84:	080040d1 	.word	0x080040d1
 8003f88:	08003ff5 	.word	0x08003ff5
 8003f8c:	080040b3 	.word	0x080040b3
 8003f90:	08003f41 	.word	0x08003f41
 8003f94:	08003f41 	.word	0x08003f41
 8003f98:	080040f3 	.word	0x080040f3
 8003f9c:	08003f41 	.word	0x08003f41
 8003fa0:	08003ff5 	.word	0x08003ff5
 8003fa4:	08003f41 	.word	0x08003f41
 8003fa8:	08003f41 	.word	0x08003f41
 8003fac:	080040bb 	.word	0x080040bb
 8003fb0:	680b      	ldr	r3, [r1, #0]
 8003fb2:	1d1a      	adds	r2, r3, #4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	600a      	str	r2, [r1, #0]
 8003fb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0a3      	b.n	800410c <_printf_i+0x1f4>
 8003fc4:	6825      	ldr	r5, [r4, #0]
 8003fc6:	6808      	ldr	r0, [r1, #0]
 8003fc8:	062e      	lsls	r6, r5, #24
 8003fca:	f100 0304 	add.w	r3, r0, #4
 8003fce:	d50a      	bpl.n	8003fe6 <_printf_i+0xce>
 8003fd0:	6805      	ldr	r5, [r0, #0]
 8003fd2:	600b      	str	r3, [r1, #0]
 8003fd4:	2d00      	cmp	r5, #0
 8003fd6:	da03      	bge.n	8003fe0 <_printf_i+0xc8>
 8003fd8:	232d      	movs	r3, #45	; 0x2d
 8003fda:	426d      	negs	r5, r5
 8003fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fe0:	485e      	ldr	r0, [pc, #376]	; (800415c <_printf_i+0x244>)
 8003fe2:	230a      	movs	r3, #10
 8003fe4:	e019      	b.n	800401a <_printf_i+0x102>
 8003fe6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003fea:	6805      	ldr	r5, [r0, #0]
 8003fec:	600b      	str	r3, [r1, #0]
 8003fee:	bf18      	it	ne
 8003ff0:	b22d      	sxthne	r5, r5
 8003ff2:	e7ef      	b.n	8003fd4 <_printf_i+0xbc>
 8003ff4:	680b      	ldr	r3, [r1, #0]
 8003ff6:	6825      	ldr	r5, [r4, #0]
 8003ff8:	1d18      	adds	r0, r3, #4
 8003ffa:	6008      	str	r0, [r1, #0]
 8003ffc:	0628      	lsls	r0, r5, #24
 8003ffe:	d501      	bpl.n	8004004 <_printf_i+0xec>
 8004000:	681d      	ldr	r5, [r3, #0]
 8004002:	e002      	b.n	800400a <_printf_i+0xf2>
 8004004:	0669      	lsls	r1, r5, #25
 8004006:	d5fb      	bpl.n	8004000 <_printf_i+0xe8>
 8004008:	881d      	ldrh	r5, [r3, #0]
 800400a:	4854      	ldr	r0, [pc, #336]	; (800415c <_printf_i+0x244>)
 800400c:	2f6f      	cmp	r7, #111	; 0x6f
 800400e:	bf0c      	ite	eq
 8004010:	2308      	moveq	r3, #8
 8004012:	230a      	movne	r3, #10
 8004014:	2100      	movs	r1, #0
 8004016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800401a:	6866      	ldr	r6, [r4, #4]
 800401c:	60a6      	str	r6, [r4, #8]
 800401e:	2e00      	cmp	r6, #0
 8004020:	bfa2      	ittt	ge
 8004022:	6821      	ldrge	r1, [r4, #0]
 8004024:	f021 0104 	bicge.w	r1, r1, #4
 8004028:	6021      	strge	r1, [r4, #0]
 800402a:	b90d      	cbnz	r5, 8004030 <_printf_i+0x118>
 800402c:	2e00      	cmp	r6, #0
 800402e:	d04d      	beq.n	80040cc <_printf_i+0x1b4>
 8004030:	4616      	mov	r6, r2
 8004032:	fbb5 f1f3 	udiv	r1, r5, r3
 8004036:	fb03 5711 	mls	r7, r3, r1, r5
 800403a:	5dc7      	ldrb	r7, [r0, r7]
 800403c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004040:	462f      	mov	r7, r5
 8004042:	42bb      	cmp	r3, r7
 8004044:	460d      	mov	r5, r1
 8004046:	d9f4      	bls.n	8004032 <_printf_i+0x11a>
 8004048:	2b08      	cmp	r3, #8
 800404a:	d10b      	bne.n	8004064 <_printf_i+0x14c>
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	07df      	lsls	r7, r3, #31
 8004050:	d508      	bpl.n	8004064 <_printf_i+0x14c>
 8004052:	6923      	ldr	r3, [r4, #16]
 8004054:	6861      	ldr	r1, [r4, #4]
 8004056:	4299      	cmp	r1, r3
 8004058:	bfde      	ittt	le
 800405a:	2330      	movle	r3, #48	; 0x30
 800405c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004060:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004064:	1b92      	subs	r2, r2, r6
 8004066:	6122      	str	r2, [r4, #16]
 8004068:	f8cd a000 	str.w	sl, [sp]
 800406c:	464b      	mov	r3, r9
 800406e:	aa03      	add	r2, sp, #12
 8004070:	4621      	mov	r1, r4
 8004072:	4640      	mov	r0, r8
 8004074:	f7ff fee2 	bl	8003e3c <_printf_common>
 8004078:	3001      	adds	r0, #1
 800407a:	d14c      	bne.n	8004116 <_printf_i+0x1fe>
 800407c:	f04f 30ff 	mov.w	r0, #4294967295
 8004080:	b004      	add	sp, #16
 8004082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004086:	4835      	ldr	r0, [pc, #212]	; (800415c <_printf_i+0x244>)
 8004088:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	680e      	ldr	r6, [r1, #0]
 8004090:	061f      	lsls	r7, r3, #24
 8004092:	f856 5b04 	ldr.w	r5, [r6], #4
 8004096:	600e      	str	r6, [r1, #0]
 8004098:	d514      	bpl.n	80040c4 <_printf_i+0x1ac>
 800409a:	07d9      	lsls	r1, r3, #31
 800409c:	bf44      	itt	mi
 800409e:	f043 0320 	orrmi.w	r3, r3, #32
 80040a2:	6023      	strmi	r3, [r4, #0]
 80040a4:	b91d      	cbnz	r5, 80040ae <_printf_i+0x196>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	f023 0320 	bic.w	r3, r3, #32
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	2310      	movs	r3, #16
 80040b0:	e7b0      	b.n	8004014 <_printf_i+0xfc>
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	f043 0320 	orr.w	r3, r3, #32
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	2378      	movs	r3, #120	; 0x78
 80040bc:	4828      	ldr	r0, [pc, #160]	; (8004160 <_printf_i+0x248>)
 80040be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040c2:	e7e3      	b.n	800408c <_printf_i+0x174>
 80040c4:	065e      	lsls	r6, r3, #25
 80040c6:	bf48      	it	mi
 80040c8:	b2ad      	uxthmi	r5, r5
 80040ca:	e7e6      	b.n	800409a <_printf_i+0x182>
 80040cc:	4616      	mov	r6, r2
 80040ce:	e7bb      	b.n	8004048 <_printf_i+0x130>
 80040d0:	680b      	ldr	r3, [r1, #0]
 80040d2:	6826      	ldr	r6, [r4, #0]
 80040d4:	6960      	ldr	r0, [r4, #20]
 80040d6:	1d1d      	adds	r5, r3, #4
 80040d8:	600d      	str	r5, [r1, #0]
 80040da:	0635      	lsls	r5, r6, #24
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	d501      	bpl.n	80040e4 <_printf_i+0x1cc>
 80040e0:	6018      	str	r0, [r3, #0]
 80040e2:	e002      	b.n	80040ea <_printf_i+0x1d2>
 80040e4:	0671      	lsls	r1, r6, #25
 80040e6:	d5fb      	bpl.n	80040e0 <_printf_i+0x1c8>
 80040e8:	8018      	strh	r0, [r3, #0]
 80040ea:	2300      	movs	r3, #0
 80040ec:	6123      	str	r3, [r4, #16]
 80040ee:	4616      	mov	r6, r2
 80040f0:	e7ba      	b.n	8004068 <_printf_i+0x150>
 80040f2:	680b      	ldr	r3, [r1, #0]
 80040f4:	1d1a      	adds	r2, r3, #4
 80040f6:	600a      	str	r2, [r1, #0]
 80040f8:	681e      	ldr	r6, [r3, #0]
 80040fa:	6862      	ldr	r2, [r4, #4]
 80040fc:	2100      	movs	r1, #0
 80040fe:	4630      	mov	r0, r6
 8004100:	f7fc f86e 	bl	80001e0 <memchr>
 8004104:	b108      	cbz	r0, 800410a <_printf_i+0x1f2>
 8004106:	1b80      	subs	r0, r0, r6
 8004108:	6060      	str	r0, [r4, #4]
 800410a:	6863      	ldr	r3, [r4, #4]
 800410c:	6123      	str	r3, [r4, #16]
 800410e:	2300      	movs	r3, #0
 8004110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004114:	e7a8      	b.n	8004068 <_printf_i+0x150>
 8004116:	6923      	ldr	r3, [r4, #16]
 8004118:	4632      	mov	r2, r6
 800411a:	4649      	mov	r1, r9
 800411c:	4640      	mov	r0, r8
 800411e:	47d0      	blx	sl
 8004120:	3001      	adds	r0, #1
 8004122:	d0ab      	beq.n	800407c <_printf_i+0x164>
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	079b      	lsls	r3, r3, #30
 8004128:	d413      	bmi.n	8004152 <_printf_i+0x23a>
 800412a:	68e0      	ldr	r0, [r4, #12]
 800412c:	9b03      	ldr	r3, [sp, #12]
 800412e:	4298      	cmp	r0, r3
 8004130:	bfb8      	it	lt
 8004132:	4618      	movlt	r0, r3
 8004134:	e7a4      	b.n	8004080 <_printf_i+0x168>
 8004136:	2301      	movs	r3, #1
 8004138:	4632      	mov	r2, r6
 800413a:	4649      	mov	r1, r9
 800413c:	4640      	mov	r0, r8
 800413e:	47d0      	blx	sl
 8004140:	3001      	adds	r0, #1
 8004142:	d09b      	beq.n	800407c <_printf_i+0x164>
 8004144:	3501      	adds	r5, #1
 8004146:	68e3      	ldr	r3, [r4, #12]
 8004148:	9903      	ldr	r1, [sp, #12]
 800414a:	1a5b      	subs	r3, r3, r1
 800414c:	42ab      	cmp	r3, r5
 800414e:	dcf2      	bgt.n	8004136 <_printf_i+0x21e>
 8004150:	e7eb      	b.n	800412a <_printf_i+0x212>
 8004152:	2500      	movs	r5, #0
 8004154:	f104 0619 	add.w	r6, r4, #25
 8004158:	e7f5      	b.n	8004146 <_printf_i+0x22e>
 800415a:	bf00      	nop
 800415c:	080044f1 	.word	0x080044f1
 8004160:	08004502 	.word	0x08004502

08004164 <_sbrk_r>:
 8004164:	b538      	push	{r3, r4, r5, lr}
 8004166:	4d06      	ldr	r5, [pc, #24]	; (8004180 <_sbrk_r+0x1c>)
 8004168:	2300      	movs	r3, #0
 800416a:	4604      	mov	r4, r0
 800416c:	4608      	mov	r0, r1
 800416e:	602b      	str	r3, [r5, #0]
 8004170:	f7fc ff08 	bl	8000f84 <_sbrk>
 8004174:	1c43      	adds	r3, r0, #1
 8004176:	d102      	bne.n	800417e <_sbrk_r+0x1a>
 8004178:	682b      	ldr	r3, [r5, #0]
 800417a:	b103      	cbz	r3, 800417e <_sbrk_r+0x1a>
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	bd38      	pop	{r3, r4, r5, pc}
 8004180:	20000234 	.word	0x20000234

08004184 <__sread>:
 8004184:	b510      	push	{r4, lr}
 8004186:	460c      	mov	r4, r1
 8004188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800418c:	f000 f8a0 	bl	80042d0 <_read_r>
 8004190:	2800      	cmp	r0, #0
 8004192:	bfab      	itete	ge
 8004194:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004196:	89a3      	ldrhlt	r3, [r4, #12]
 8004198:	181b      	addge	r3, r3, r0
 800419a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800419e:	bfac      	ite	ge
 80041a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80041a2:	81a3      	strhlt	r3, [r4, #12]
 80041a4:	bd10      	pop	{r4, pc}

080041a6 <__swrite>:
 80041a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041aa:	461f      	mov	r7, r3
 80041ac:	898b      	ldrh	r3, [r1, #12]
 80041ae:	05db      	lsls	r3, r3, #23
 80041b0:	4605      	mov	r5, r0
 80041b2:	460c      	mov	r4, r1
 80041b4:	4616      	mov	r6, r2
 80041b6:	d505      	bpl.n	80041c4 <__swrite+0x1e>
 80041b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041bc:	2302      	movs	r3, #2
 80041be:	2200      	movs	r2, #0
 80041c0:	f000 f868 	bl	8004294 <_lseek_r>
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041ce:	81a3      	strh	r3, [r4, #12]
 80041d0:	4632      	mov	r2, r6
 80041d2:	463b      	mov	r3, r7
 80041d4:	4628      	mov	r0, r5
 80041d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041da:	f000 b817 	b.w	800420c <_write_r>

080041de <__sseek>:
 80041de:	b510      	push	{r4, lr}
 80041e0:	460c      	mov	r4, r1
 80041e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041e6:	f000 f855 	bl	8004294 <_lseek_r>
 80041ea:	1c43      	adds	r3, r0, #1
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	bf15      	itete	ne
 80041f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80041f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041fa:	81a3      	strheq	r3, [r4, #12]
 80041fc:	bf18      	it	ne
 80041fe:	81a3      	strhne	r3, [r4, #12]
 8004200:	bd10      	pop	{r4, pc}

08004202 <__sclose>:
 8004202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004206:	f000 b813 	b.w	8004230 <_close_r>
	...

0800420c <_write_r>:
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	4d07      	ldr	r5, [pc, #28]	; (800422c <_write_r+0x20>)
 8004210:	4604      	mov	r4, r0
 8004212:	4608      	mov	r0, r1
 8004214:	4611      	mov	r1, r2
 8004216:	2200      	movs	r2, #0
 8004218:	602a      	str	r2, [r5, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	f7fc fd66 	bl	8000cec <_write>
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	d102      	bne.n	800422a <_write_r+0x1e>
 8004224:	682b      	ldr	r3, [r5, #0]
 8004226:	b103      	cbz	r3, 800422a <_write_r+0x1e>
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	bd38      	pop	{r3, r4, r5, pc}
 800422c:	20000234 	.word	0x20000234

08004230 <_close_r>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	4d06      	ldr	r5, [pc, #24]	; (800424c <_close_r+0x1c>)
 8004234:	2300      	movs	r3, #0
 8004236:	4604      	mov	r4, r0
 8004238:	4608      	mov	r0, r1
 800423a:	602b      	str	r3, [r5, #0]
 800423c:	f7fc fe6d 	bl	8000f1a <_close>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d102      	bne.n	800424a <_close_r+0x1a>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	b103      	cbz	r3, 800424a <_close_r+0x1a>
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	20000234 	.word	0x20000234

08004250 <_fstat_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4d07      	ldr	r5, [pc, #28]	; (8004270 <_fstat_r+0x20>)
 8004254:	2300      	movs	r3, #0
 8004256:	4604      	mov	r4, r0
 8004258:	4608      	mov	r0, r1
 800425a:	4611      	mov	r1, r2
 800425c:	602b      	str	r3, [r5, #0]
 800425e:	f7fc fe68 	bl	8000f32 <_fstat>
 8004262:	1c43      	adds	r3, r0, #1
 8004264:	d102      	bne.n	800426c <_fstat_r+0x1c>
 8004266:	682b      	ldr	r3, [r5, #0]
 8004268:	b103      	cbz	r3, 800426c <_fstat_r+0x1c>
 800426a:	6023      	str	r3, [r4, #0]
 800426c:	bd38      	pop	{r3, r4, r5, pc}
 800426e:	bf00      	nop
 8004270:	20000234 	.word	0x20000234

08004274 <_isatty_r>:
 8004274:	b538      	push	{r3, r4, r5, lr}
 8004276:	4d06      	ldr	r5, [pc, #24]	; (8004290 <_isatty_r+0x1c>)
 8004278:	2300      	movs	r3, #0
 800427a:	4604      	mov	r4, r0
 800427c:	4608      	mov	r0, r1
 800427e:	602b      	str	r3, [r5, #0]
 8004280:	f7fc fe67 	bl	8000f52 <_isatty>
 8004284:	1c43      	adds	r3, r0, #1
 8004286:	d102      	bne.n	800428e <_isatty_r+0x1a>
 8004288:	682b      	ldr	r3, [r5, #0]
 800428a:	b103      	cbz	r3, 800428e <_isatty_r+0x1a>
 800428c:	6023      	str	r3, [r4, #0]
 800428e:	bd38      	pop	{r3, r4, r5, pc}
 8004290:	20000234 	.word	0x20000234

08004294 <_lseek_r>:
 8004294:	b538      	push	{r3, r4, r5, lr}
 8004296:	4d07      	ldr	r5, [pc, #28]	; (80042b4 <_lseek_r+0x20>)
 8004298:	4604      	mov	r4, r0
 800429a:	4608      	mov	r0, r1
 800429c:	4611      	mov	r1, r2
 800429e:	2200      	movs	r2, #0
 80042a0:	602a      	str	r2, [r5, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	f7fc fe60 	bl	8000f68 <_lseek>
 80042a8:	1c43      	adds	r3, r0, #1
 80042aa:	d102      	bne.n	80042b2 <_lseek_r+0x1e>
 80042ac:	682b      	ldr	r3, [r5, #0]
 80042ae:	b103      	cbz	r3, 80042b2 <_lseek_r+0x1e>
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	bd38      	pop	{r3, r4, r5, pc}
 80042b4:	20000234 	.word	0x20000234

080042b8 <__malloc_lock>:
 80042b8:	4801      	ldr	r0, [pc, #4]	; (80042c0 <__malloc_lock+0x8>)
 80042ba:	f7ff bb55 	b.w	8003968 <__retarget_lock_acquire_recursive>
 80042be:	bf00      	nop
 80042c0:	2000022c 	.word	0x2000022c

080042c4 <__malloc_unlock>:
 80042c4:	4801      	ldr	r0, [pc, #4]	; (80042cc <__malloc_unlock+0x8>)
 80042c6:	f7ff bb50 	b.w	800396a <__retarget_lock_release_recursive>
 80042ca:	bf00      	nop
 80042cc:	2000022c 	.word	0x2000022c

080042d0 <_read_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4d07      	ldr	r5, [pc, #28]	; (80042f0 <_read_r+0x20>)
 80042d4:	4604      	mov	r4, r0
 80042d6:	4608      	mov	r0, r1
 80042d8:	4611      	mov	r1, r2
 80042da:	2200      	movs	r2, #0
 80042dc:	602a      	str	r2, [r5, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	f7fc fdfe 	bl	8000ee0 <_read>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d102      	bne.n	80042ee <_read_r+0x1e>
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	b103      	cbz	r3, 80042ee <_read_r+0x1e>
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
 80042f0:	20000234 	.word	0x20000234

080042f4 <_init>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	bf00      	nop
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr

08004300 <_fini>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	bf00      	nop
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr
