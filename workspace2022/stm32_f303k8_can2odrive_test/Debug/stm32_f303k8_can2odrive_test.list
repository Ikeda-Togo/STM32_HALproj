
stm32_f303k8_can2odrive_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08005d60  08005d60  00015d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f64  08005f64  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08005f64  08005f64  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f64  08005f64  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f68  08005f68  00015f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000084  08005ff0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08005ff0  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e968  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002089  00000000  00000000  0002ea1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  00030aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  00031418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd24  00000000  00000000  00031ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc61  00000000  00000000  0004da0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ef40  00000000  00000000  0005966d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f85ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f60  00000000  00000000  000f8600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d48 	.word	0x08005d48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08005d48 	.word	0x08005d48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <HAL_Init+0x28>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a07      	ldr	r2, [pc, #28]	; (8000298 <HAL_Init+0x28>)
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000280:	2003      	movs	r0, #3
 8000282:	f000 ff91 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000286:	2000      	movs	r0, #0
 8000288:	f000 f808 	bl	800029c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800028c:	f004 f978 	bl	8004580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40022000 	.word	0x40022000

0800029c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <HAL_InitTick+0x54>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <HAL_InitTick+0x58>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4619      	mov	r1, r3
 80002ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 ffa9 	bl	8001212 <HAL_SYSTICK_Config>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e00e      	b.n	80002e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b0f      	cmp	r3, #15
 80002ce:	d80a      	bhi.n	80002e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002d0:	2200      	movs	r2, #0
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	f04f 30ff 	mov.w	r0, #4294967295
 80002d8:	f000 ff71 	bl	80011be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <HAL_InitTick+0x5c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002e2:	2300      	movs	r3, #0
 80002e4:	e000      	b.n	80002e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002e6:	2301      	movs	r3, #1
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	2000001c 	.word	0x2000001c
 80002f4:	20000004 	.word	0x20000004
 80002f8:	20000000 	.word	0x20000000

080002fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_IncTick+0x20>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	461a      	mov	r2, r3
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_IncTick+0x24>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4413      	add	r3, r2
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <HAL_IncTick+0x24>)
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000004 	.word	0x20000004
 8000320:	200000c0 	.word	0x200000c0

08000324 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  return uwTick;  
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <HAL_GetTick+0x14>)
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	200000c0 	.word	0x200000c0

0800033c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000344:	f7ff ffee 	bl	8000324 <HAL_GetTick>
 8000348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000354:	d005      	beq.n	8000362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000356:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <HAL_Delay+0x44>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	461a      	mov	r2, r3
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	4413      	add	r3, r2
 8000360:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000362:	bf00      	nop
 8000364:	f7ff ffde 	bl	8000324 <HAL_GetTick>
 8000368:	4602      	mov	r2, r0
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	429a      	cmp	r2, r3
 8000372:	d8f7      	bhi.n	8000364 <HAL_Delay+0x28>
  {
  }
}
 8000374:	bf00      	nop
 8000376:	bf00      	nop
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000004 	.word	0x20000004

08000384 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d101      	bne.n	8000396 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000392:	2301      	movs	r3, #1
 8000394:	e0ed      	b.n	8000572 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800039c:	b2db      	uxtb	r3, r3
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d102      	bne.n	80003a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80003a2:	6878      	ldr	r0, [r7, #4]
 80003a4:	f004 f910 	bl	80045c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f042 0201 	orr.w	r2, r2, #1
 80003b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80003b8:	f7ff ffb4 	bl	8000324 <HAL_GetTick>
 80003bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80003be:	e012      	b.n	80003e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80003c0:	f7ff ffb0 	bl	8000324 <HAL_GetTick>
 80003c4:	4602      	mov	r2, r0
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	1ad3      	subs	r3, r2, r3
 80003ca:	2b0a      	cmp	r3, #10
 80003cc:	d90b      	bls.n	80003e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2205      	movs	r2, #5
 80003de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80003e2:	2301      	movs	r3, #1
 80003e4:	e0c5      	b.n	8000572 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d0e5      	beq.n	80003c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f022 0202 	bic.w	r2, r2, #2
 8000402:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000404:	f7ff ff8e 	bl	8000324 <HAL_GetTick>
 8000408:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800040a:	e012      	b.n	8000432 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800040c:	f7ff ff8a 	bl	8000324 <HAL_GetTick>
 8000410:	4602      	mov	r2, r0
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	1ad3      	subs	r3, r2, r3
 8000416:	2b0a      	cmp	r3, #10
 8000418:	d90b      	bls.n	8000432 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800041e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2205      	movs	r2, #5
 800042a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800042e:	2301      	movs	r3, #1
 8000430:	e09f      	b.n	8000572 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	f003 0302 	and.w	r3, r3, #2
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1e5      	bne.n	800040c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	7e1b      	ldrb	r3, [r3, #24]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d108      	bne.n	800045a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	e007      	b.n	800046a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000468:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	7e5b      	ldrb	r3, [r3, #25]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d108      	bne.n	8000484 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	e007      	b.n	8000494 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000492:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	7e9b      	ldrb	r3, [r3, #26]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d108      	bne.n	80004ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f042 0220 	orr.w	r2, r2, #32
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	e007      	b.n	80004be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f022 0220 	bic.w	r2, r2, #32
 80004bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	7edb      	ldrb	r3, [r3, #27]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d108      	bne.n	80004d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f022 0210 	bic.w	r2, r2, #16
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	e007      	b.n	80004e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f042 0210 	orr.w	r2, r2, #16
 80004e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	7f1b      	ldrb	r3, [r3, #28]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d108      	bne.n	8000502 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f042 0208 	orr.w	r2, r2, #8
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	e007      	b.n	8000512 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f022 0208 	bic.w	r2, r2, #8
 8000510:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	7f5b      	ldrb	r3, [r3, #29]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d108      	bne.n	800052c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f042 0204 	orr.w	r2, r2, #4
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	e007      	b.n	800053c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f022 0204 	bic.w	r2, r2, #4
 800053a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	431a      	orrs	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	691b      	ldr	r3, [r3, #16]
 800054a:	431a      	orrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	ea42 0103 	orr.w	r1, r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	1e5a      	subs	r2, r3, #1
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	430a      	orrs	r2, r1
 8000560:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2200      	movs	r2, #0
 8000566:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2201      	movs	r2, #1
 800056c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000570:	2300      	movs	r3, #0
}
 8000572:	4618      	mov	r0, r3
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800057a:	b480      	push	{r7}
 800057c:	b087      	sub	sp, #28
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000590:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000592:	7cfb      	ldrb	r3, [r7, #19]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d003      	beq.n	80005a0 <HAL_CAN_ConfigFilter+0x26>
 8000598:	7cfb      	ldrb	r3, [r7, #19]
 800059a:	2b02      	cmp	r3, #2
 800059c:	f040 80aa 	bne.w	80006f4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005a6:	f043 0201 	orr.w	r2, r3, #1
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	f003 031f 	and.w	r3, r3, #31
 80005b8:	2201      	movs	r2, #1
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	43db      	mvns	r3, r3
 80005ca:	401a      	ands	r2, r3
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d123      	bne.n	8000622 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	43db      	mvns	r3, r3
 80005e4:	401a      	ands	r2, r3
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80005fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	3248      	adds	r2, #72	; 0x48
 8000602:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000616:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000618:	6979      	ldr	r1, [r7, #20]
 800061a:	3348      	adds	r3, #72	; 0x48
 800061c:	00db      	lsls	r3, r3, #3
 800061e:	440b      	add	r3, r1
 8000620:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d122      	bne.n	8000670 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	431a      	orrs	r2, r3
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800064a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	3248      	adds	r2, #72	; 0x48
 8000650:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000664:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000666:	6979      	ldr	r1, [r7, #20]
 8000668:	3348      	adds	r3, #72	; 0x48
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	440b      	add	r3, r1
 800066e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d109      	bne.n	800068c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	43db      	mvns	r3, r3
 8000682:	401a      	ands	r2, r3
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800068a:	e007      	b.n	800069c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	431a      	orrs	r2, r3
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d109      	bne.n	80006b8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	43db      	mvns	r3, r3
 80006ae:	401a      	ands	r2, r3
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80006b6:	e007      	b.n	80006c8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	431a      	orrs	r2, r3
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	6a1b      	ldr	r3, [r3, #32]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d107      	bne.n	80006e0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	431a      	orrs	r2, r3
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80006e6:	f023 0201 	bic.w	r2, r3, #1
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80006f0:	2300      	movs	r3, #0
 80006f2:	e006      	b.n	8000702 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000700:	2301      	movs	r3, #1
  }
}
 8000702:	4618      	mov	r0, r3
 8000704:	371c      	adds	r7, #28
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b084      	sub	sp, #16
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b01      	cmp	r3, #1
 8000720:	d12e      	bne.n	8000780 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2202      	movs	r2, #2
 8000726:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f022 0201 	bic.w	r2, r2, #1
 8000738:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800073a:	f7ff fdf3 	bl	8000324 <HAL_GetTick>
 800073e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000740:	e012      	b.n	8000768 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000742:	f7ff fdef 	bl	8000324 <HAL_GetTick>
 8000746:	4602      	mov	r2, r0
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	2b0a      	cmp	r3, #10
 800074e:	d90b      	bls.n	8000768 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000754:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2205      	movs	r2, #5
 8000760:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000764:	2301      	movs	r3, #1
 8000766:	e012      	b.n	800078e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1e5      	bne.n	8000742 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800077c:	2300      	movs	r3, #0
 800077e:	e006      	b.n	800078e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000784:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800078c:	2301      	movs	r3, #1
  }
}
 800078e:	4618      	mov	r0, r3
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000796:	b480      	push	{r7}
 8000798:	b089      	sub	sp, #36	; 0x24
 800079a:	af00      	add	r7, sp, #0
 800079c:	60f8      	str	r0, [r7, #12]
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80007b4:	7ffb      	ldrb	r3, [r7, #31]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d003      	beq.n	80007c2 <HAL_CAN_AddTxMessage+0x2c>
 80007ba:	7ffb      	ldrb	r3, [r7, #31]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	f040 80b8 	bne.w	8000932 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10a      	bne.n	80007e2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d105      	bne.n	80007e2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80007dc:	2b00      	cmp	r3, #0
 80007de:	f000 80a0 	beq.w	8000922 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	0e1b      	lsrs	r3, r3, #24
 80007e6:	f003 0303 	and.w	r3, r3, #3
 80007ea:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d907      	bls.n	8000802 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e09e      	b.n	8000940 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000802:	2201      	movs	r2, #1
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	409a      	lsls	r2, r3
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d10d      	bne.n	8000830 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800081e:	68f9      	ldr	r1, [r7, #12]
 8000820:	6809      	ldr	r1, [r1, #0]
 8000822:	431a      	orrs	r2, r3
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3318      	adds	r3, #24
 8000828:	011b      	lsls	r3, r3, #4
 800082a:	440b      	add	r3, r1
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	e00f      	b.n	8000850 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800083a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000840:	68f9      	ldr	r1, [r7, #12]
 8000842:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000844:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3318      	adds	r3, #24
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	440b      	add	r3, r1
 800084e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	6819      	ldr	r1, [r3, #0]
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	691a      	ldr	r2, [r3, #16]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	3318      	adds	r3, #24
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	440b      	add	r3, r1
 8000860:	3304      	adds	r3, #4
 8000862:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	7d1b      	ldrb	r3, [r3, #20]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d111      	bne.n	8000890 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	3318      	adds	r3, #24
 8000874:	011b      	lsls	r3, r3, #4
 8000876:	4413      	add	r3, r2
 8000878:	3304      	adds	r3, #4
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	6811      	ldr	r1, [r2, #0]
 8000880:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	3318      	adds	r3, #24
 8000888:	011b      	lsls	r3, r3, #4
 800088a:	440b      	add	r3, r1
 800088c:	3304      	adds	r3, #4
 800088e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3307      	adds	r3, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	061a      	lsls	r2, r3, #24
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3306      	adds	r3, #6
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	041b      	lsls	r3, r3, #16
 80008a0:	431a      	orrs	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3305      	adds	r3, #5
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	4313      	orrs	r3, r2
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	3204      	adds	r2, #4
 80008b0:	7812      	ldrb	r2, [r2, #0]
 80008b2:	4610      	mov	r0, r2
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	6811      	ldr	r1, [r2, #0]
 80008b8:	ea43 0200 	orr.w	r2, r3, r0
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	011b      	lsls	r3, r3, #4
 80008c0:	440b      	add	r3, r1
 80008c2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80008c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3303      	adds	r3, #3
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	061a      	lsls	r2, r3, #24
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3302      	adds	r3, #2
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	041b      	lsls	r3, r3, #16
 80008d8:	431a      	orrs	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3301      	adds	r3, #1
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	021b      	lsls	r3, r3, #8
 80008e2:	4313      	orrs	r3, r2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	7812      	ldrb	r2, [r2, #0]
 80008e8:	4610      	mov	r0, r2
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	6811      	ldr	r1, [r2, #0]
 80008ee:	ea43 0200 	orr.w	r2, r3, r0
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	011b      	lsls	r3, r3, #4
 80008f6:	440b      	add	r3, r1
 80008f8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80008fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	3318      	adds	r3, #24
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	4413      	add	r3, r2
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	6811      	ldr	r1, [r2, #0]
 8000910:	f043 0201 	orr.w	r2, r3, #1
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	3318      	adds	r3, #24
 8000918:	011b      	lsls	r3, r3, #4
 800091a:	440b      	add	r3, r1
 800091c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	e00e      	b.n	8000940 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000926:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e006      	b.n	8000940 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000936:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
  }
}
 8000940:	4618      	mov	r0, r3
 8000942:	3724      	adds	r7, #36	; 0x24
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800094c:	b480      	push	{r7}
 800094e:	b087      	sub	sp, #28
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000960:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000962:	7dfb      	ldrb	r3, [r7, #23]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d003      	beq.n	8000970 <HAL_CAN_GetRxMessage+0x24>
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	2b02      	cmp	r3, #2
 800096c:	f040 80f3 	bne.w	8000b56 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10e      	bne.n	8000994 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	f003 0303 	and.w	r3, r3, #3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d116      	bne.n	80009b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000988:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	e0e7      	b.n	8000b64 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	691b      	ldr	r3, [r3, #16]
 800099a:	f003 0303 	and.w	r3, r3, #3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d107      	bne.n	80009b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e0d8      	b.n	8000b64 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	331b      	adds	r3, #27
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	4413      	add	r3, r2
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f003 0204 	and.w	r2, r3, #4
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10c      	bne.n	80009ea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	331b      	adds	r3, #27
 80009d8:	011b      	lsls	r3, r3, #4
 80009da:	4413      	add	r3, r2
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	0d5b      	lsrs	r3, r3, #21
 80009e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	e00b      	b.n	8000a02 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	331b      	adds	r3, #27
 80009f2:	011b      	lsls	r3, r3, #4
 80009f4:	4413      	add	r3, r2
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	08db      	lsrs	r3, r3, #3
 80009fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	331b      	adds	r3, #27
 8000a0a:	011b      	lsls	r3, r3, #4
 8000a0c:	4413      	add	r3, r2
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f003 0202 	and.w	r2, r3, #2
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	331b      	adds	r3, #27
 8000a20:	011b      	lsls	r3, r3, #4
 8000a22:	4413      	add	r3, r2
 8000a24:	3304      	adds	r3, #4
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 020f 	and.w	r2, r3, #15
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	331b      	adds	r3, #27
 8000a38:	011b      	lsls	r3, r3, #4
 8000a3a:	4413      	add	r3, r2
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	331b      	adds	r3, #27
 8000a50:	011b      	lsls	r3, r3, #4
 8000a52:	4413      	add	r3, r2
 8000a54:	3304      	adds	r3, #4
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	0c1b      	lsrs	r3, r3, #16
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	4413      	add	r3, r2
 8000a6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	011b      	lsls	r3, r3, #4
 8000a7e:	4413      	add	r3, r2
 8000a80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	0a1a      	lsrs	r2, r3, #8
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	4413      	add	r3, r2
 8000a9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	0c1a      	lsrs	r2, r3, #16
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	b2d2      	uxtb	r2, r2
 8000aa8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	011b      	lsls	r3, r3, #4
 8000ab2:	4413      	add	r3, r2
 8000ab4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	0e1a      	lsrs	r2, r3, #24
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	3303      	adds	r3, #3
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	011b      	lsls	r3, r3, #4
 8000acc:	4413      	add	r3, r2
 8000ace:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	011b      	lsls	r3, r3, #4
 8000ae4:	4413      	add	r3, r2
 8000ae6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	0a1a      	lsrs	r2, r3, #8
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	3305      	adds	r3, #5
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	4413      	add	r3, r2
 8000b00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	0c1a      	lsrs	r2, r3, #16
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	3306      	adds	r3, #6
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	011b      	lsls	r3, r3, #4
 8000b18:	4413      	add	r3, r2
 8000b1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	0e1a      	lsrs	r2, r3, #24
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	3307      	adds	r3, #7
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d108      	bne.n	8000b42 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	68da      	ldr	r2, [r3, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f042 0220 	orr.w	r2, r2, #32
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	e007      	b.n	8000b52 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	691a      	ldr	r2, [r3, #16]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f042 0220 	orr.w	r2, r2, #32
 8000b50:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e006      	b.n	8000b64 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
  }
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	371c      	adds	r7, #28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b80:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d002      	beq.n	8000b8e <HAL_CAN_ActivateNotification+0x1e>
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d109      	bne.n	8000ba2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6959      	ldr	r1, [r3, #20]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e006      	b.n	8000bb0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
  }
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d07c      	beq.n	8000cfc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d023      	beq.n	8000c54 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2201      	movs	r2, #1
 8000c12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f003 fc28 	bl	8004474 <HAL_CAN_TxMailbox0CompleteCallback>
 8000c24:	e016      	b.n	8000c54 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d004      	beq.n	8000c3a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
 8000c38:	e00c      	b.n	8000c54 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d004      	beq.n	8000c4e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c4c:	e002      	b.n	8000c54 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 f97f 	bl	8000f52 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d024      	beq.n	8000ca8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f000 f959 	bl	8000f2a <HAL_CAN_TxMailbox1CompleteCallback>
 8000c78:	e016      	b.n	8000ca8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d004      	beq.n	8000c8e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c8c:	e00c      	b.n	8000ca8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d004      	beq.n	8000ca2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca0:	e002      	b.n	8000ca8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 f95f 	bl	8000f66 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d024      	beq.n	8000cfc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 f939 	bl	8000f3e <HAL_CAN_TxMailbox2CompleteCallback>
 8000ccc:	e016      	b.n	8000cfc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d004      	beq.n	8000ce2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
 8000ce0:	e00c      	b.n	8000cfc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d004      	beq.n	8000cf6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8000cf4:	e002      	b.n	8000cfc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 f93f 	bl	8000f7a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00c      	beq.n	8000d20 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	f003 0310 	and.w	r3, r3, #16
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d007      	beq.n	8000d20 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2210      	movs	r2, #16
 8000d1e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000d20:	6a3b      	ldr	r3, [r7, #32]
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00b      	beq.n	8000d42 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d006      	beq.n	8000d42 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2208      	movs	r2, #8
 8000d3a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f000 f926 	bl	8000f8e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000d42:	6a3b      	ldr	r3, [r7, #32]
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d009      	beq.n	8000d60 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f003 fba4 	bl	80044a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00c      	beq.n	8000d84 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d007      	beq.n	8000d84 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2210      	movs	r2, #16
 8000d82:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	f003 0320 	and.w	r3, r3, #32
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00b      	beq.n	8000da6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d006      	beq.n	8000da6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2208      	movs	r2, #8
 8000d9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f000 f908 	bl	8000fb6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	f003 0310 	and.w	r3, r3, #16
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d009      	beq.n	8000dc4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 f8ef 	bl	8000fa2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000dc4:	6a3b      	ldr	r3, [r7, #32]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00b      	beq.n	8000de6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2210      	movs	r2, #16
 8000dde:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f8f2 	bl	8000fca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000de6:	6a3b      	ldr	r3, [r7, #32]
 8000de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00b      	beq.n	8000e08 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d006      	beq.n	8000e08 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2208      	movs	r2, #8
 8000e00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f8eb 	bl	8000fde <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000e08:	6a3b      	ldr	r3, [r7, #32]
 8000e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d07b      	beq.n	8000f0a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d072      	beq.n	8000f02 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000e1c:	6a3b      	ldr	r3, [r7, #32]
 8000e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d008      	beq.n	8000e38 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000e38:	6a3b      	ldr	r3, [r7, #32]
 8000e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d008      	beq.n	8000e54 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d008      	beq.n	8000e70 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000e70:	6a3b      	ldr	r3, [r7, #32]
 8000e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d043      	beq.n	8000f02 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d03e      	beq.n	8000f02 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000e8a:	2b60      	cmp	r3, #96	; 0x60
 8000e8c:	d02b      	beq.n	8000ee6 <HAL_CAN_IRQHandler+0x32a>
 8000e8e:	2b60      	cmp	r3, #96	; 0x60
 8000e90:	d82e      	bhi.n	8000ef0 <HAL_CAN_IRQHandler+0x334>
 8000e92:	2b50      	cmp	r3, #80	; 0x50
 8000e94:	d022      	beq.n	8000edc <HAL_CAN_IRQHandler+0x320>
 8000e96:	2b50      	cmp	r3, #80	; 0x50
 8000e98:	d82a      	bhi.n	8000ef0 <HAL_CAN_IRQHandler+0x334>
 8000e9a:	2b40      	cmp	r3, #64	; 0x40
 8000e9c:	d019      	beq.n	8000ed2 <HAL_CAN_IRQHandler+0x316>
 8000e9e:	2b40      	cmp	r3, #64	; 0x40
 8000ea0:	d826      	bhi.n	8000ef0 <HAL_CAN_IRQHandler+0x334>
 8000ea2:	2b30      	cmp	r3, #48	; 0x30
 8000ea4:	d010      	beq.n	8000ec8 <HAL_CAN_IRQHandler+0x30c>
 8000ea6:	2b30      	cmp	r3, #48	; 0x30
 8000ea8:	d822      	bhi.n	8000ef0 <HAL_CAN_IRQHandler+0x334>
 8000eaa:	2b10      	cmp	r3, #16
 8000eac:	d002      	beq.n	8000eb4 <HAL_CAN_IRQHandler+0x2f8>
 8000eae:	2b20      	cmp	r3, #32
 8000eb0:	d005      	beq.n	8000ebe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000eb2:	e01d      	b.n	8000ef0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ebc:	e019      	b.n	8000ef2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ec6:	e014      	b.n	8000ef2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	f043 0320 	orr.w	r3, r3, #32
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ed0:	e00f      	b.n	8000ef2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000eda:	e00a      	b.n	8000ef2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ee4:	e005      	b.n	8000ef2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000eee:	e000      	b.n	8000ef2 <HAL_CAN_IRQHandler+0x336>
            break;
 8000ef0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	699a      	ldr	r2, [r3, #24]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f00:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2204      	movs	r2, #4
 8000f08:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d008      	beq.n	8000f22 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f868 	bl	8000ff2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103a:	4a04      	ldr	r2, [pc, #16]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	60d3      	str	r3, [r2, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <__NVIC_GetPriorityGrouping+0x18>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	f003 0307 	and.w	r3, r3, #7
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db0b      	blt.n	8001096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 021f 	and.w	r2, r3, #31
 8001084:	4907      	ldr	r1, [pc, #28]	; (80010a4 <__NVIC_EnableIRQ+0x38>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	2001      	movs	r0, #1
 800108e:	fa00 f202 	lsl.w	r2, r0, r2
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff29 	bl	8001008 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff3e 	bl	8001050 <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff8e 	bl	80010fc <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5d 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff31 	bl	800106c <__NVIC_EnableIRQ>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffa2 	bl	8001164 <SysTick_Config>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001238:	2b02      	cmp	r3, #2
 800123a:	d008      	beq.n	800124e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2204      	movs	r2, #4
 8001240:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e020      	b.n	8001290 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 020e 	bic.w	r2, r2, #14
 800125c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001276:	2101      	movs	r1, #1
 8001278:	fa01 f202 	lsl.w	r2, r1, r2
 800127c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d005      	beq.n	80012be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2204      	movs	r2, #4
 80012b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	e027      	b.n	800130e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 020e 	bic.w	r2, r2, #14
 80012cc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0201 	bic.w	r2, r2, #1
 80012dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e6:	2101      	movs	r1, #1
 80012e8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ec:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	4798      	blx	r3
    } 
  }
  return status;
 800130e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001326:	e14e      	b.n	80015c6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	2101      	movs	r1, #1
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	4013      	ands	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 8140 	beq.w	80015c0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b01      	cmp	r3, #1
 800134a:	d005      	beq.n	8001358 <HAL_GPIO_Init+0x40>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d130      	bne.n	80013ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800138e:	2201      	movs	r2, #1
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	f003 0201 	and.w	r2, r3, #1
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d017      	beq.n	80013f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	2203      	movs	r2, #3
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d123      	bne.n	800144a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	08da      	lsrs	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3208      	adds	r2, #8
 8001444:	6939      	ldr	r1, [r7, #16]
 8001446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0203 	and.w	r2, r3, #3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 809a 	beq.w	80015c0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148c:	4b55      	ldr	r3, [pc, #340]	; (80015e4 <HAL_GPIO_Init+0x2cc>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a54      	ldr	r2, [pc, #336]	; (80015e4 <HAL_GPIO_Init+0x2cc>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b52      	ldr	r3, [pc, #328]	; (80015e4 <HAL_GPIO_Init+0x2cc>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014a4:	4a50      	ldr	r2, [pc, #320]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	220f      	movs	r2, #15
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014ce:	d013      	beq.n	80014f8 <HAL_GPIO_Init+0x1e0>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a46      	ldr	r2, [pc, #280]	; (80015ec <HAL_GPIO_Init+0x2d4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d00d      	beq.n	80014f4 <HAL_GPIO_Init+0x1dc>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a45      	ldr	r2, [pc, #276]	; (80015f0 <HAL_GPIO_Init+0x2d8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d007      	beq.n	80014f0 <HAL_GPIO_Init+0x1d8>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a44      	ldr	r2, [pc, #272]	; (80015f4 <HAL_GPIO_Init+0x2dc>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d101      	bne.n	80014ec <HAL_GPIO_Init+0x1d4>
 80014e8:	2303      	movs	r3, #3
 80014ea:	e006      	b.n	80014fa <HAL_GPIO_Init+0x1e2>
 80014ec:	2305      	movs	r3, #5
 80014ee:	e004      	b.n	80014fa <HAL_GPIO_Init+0x1e2>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0x1e2>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_GPIO_Init+0x1e2>
 80014f8:	2300      	movs	r3, #0
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	f002 0203 	and.w	r2, r2, #3
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	4093      	lsls	r3, r2
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800150a:	4937      	ldr	r1, [pc, #220]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001518:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800153c:	4a2e      	ldr	r2, [pc, #184]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001542:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001566:	4a24      	ldr	r2, [pc, #144]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001590:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015ba:	4a0f      	ldr	r2, [pc, #60]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f47f aea9 	bne.w	8001328 <HAL_GPIO_Init+0x10>
  }
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010000 	.word	0x40010000
 80015ec:	48000400 	.word	0x48000400
 80015f0:	48000800 	.word	0x48000800
 80015f4:	48000c00 	.word	0x48000c00
 80015f8:	40010400 	.word	0x40010400

080015fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001618:	e002      	b.n	8001620 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001632:	af00      	add	r7, sp, #0
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	f000 bef4 	b.w	800242e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 816a 	beq.w	800192a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001656:	4bb3      	ldr	r3, [pc, #716]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b04      	cmp	r3, #4
 8001660:	d00c      	beq.n	800167c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001662:	4bb0      	ldr	r3, [pc, #704]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b08      	cmp	r3, #8
 800166c:	d159      	bne.n	8001722 <HAL_RCC_OscConfig+0xf6>
 800166e:	4bad      	ldr	r3, [pc, #692]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167a:	d152      	bne.n	8001722 <HAL_RCC_OscConfig+0xf6>
 800167c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001680:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001690:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	fab3 f383 	clz	r3, r3
 8001698:	b2db      	uxtb	r3, r3
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	b2db      	uxtb	r3, r3
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d102      	bne.n	80016ae <HAL_RCC_OscConfig+0x82>
 80016a8:	4b9e      	ldr	r3, [pc, #632]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	e015      	b.n	80016da <HAL_RCC_OscConfig+0xae>
 80016ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016b2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80016ba:	fa93 f3a3 	rbit	r3, r3
 80016be:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016ca:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80016d6:	4b93      	ldr	r3, [pc, #588]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016de:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80016e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016e6:	fa92 f2a2 	rbit	r2, r2
 80016ea:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80016ee:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80016f2:	fab2 f282 	clz	r2, r2
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	f042 0220 	orr.w	r2, r2, #32
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	f002 021f 	and.w	r2, r2, #31
 8001702:	2101      	movs	r1, #1
 8001704:	fa01 f202 	lsl.w	r2, r1, r2
 8001708:	4013      	ands	r3, r2
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 810c 	beq.w	8001928 <HAL_RCC_OscConfig+0x2fc>
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f040 8106 	bne.w	8001928 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	f000 be86 	b.w	800242e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172c:	d106      	bne.n	800173c <HAL_RCC_OscConfig+0x110>
 800172e:	4b7d      	ldr	r3, [pc, #500]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a7c      	ldr	r2, [pc, #496]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e030      	b.n	800179e <HAL_RCC_OscConfig+0x172>
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x134>
 8001746:	4b77      	ldr	r3, [pc, #476]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a76      	ldr	r2, [pc, #472]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 800174c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b74      	ldr	r3, [pc, #464]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a73      	ldr	r2, [pc, #460]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 8001758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e01e      	b.n	800179e <HAL_RCC_OscConfig+0x172>
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800176a:	d10c      	bne.n	8001786 <HAL_RCC_OscConfig+0x15a>
 800176c:	4b6d      	ldr	r3, [pc, #436]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a6c      	ldr	r2, [pc, #432]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 8001772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b6a      	ldr	r3, [pc, #424]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a69      	ldr	r2, [pc, #420]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 800177e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	e00b      	b.n	800179e <HAL_RCC_OscConfig+0x172>
 8001786:	4b67      	ldr	r3, [pc, #412]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a66      	ldr	r2, [pc, #408]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 800178c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b64      	ldr	r3, [pc, #400]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a63      	ldr	r2, [pc, #396]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 8001798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800179e:	4b61      	ldr	r3, [pc, #388]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	f023 020f 	bic.w	r2, r3, #15
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	495d      	ldr	r1, [pc, #372]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d059      	beq.n	8001870 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7fe fdb2 	bl	8000324 <HAL_GetTick>
 80017c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c4:	e00a      	b.n	80017dc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c6:	f7fe fdad 	bl	8000324 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d902      	bls.n	80017dc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	f000 be29 	b.w	800242e <HAL_RCC_OscConfig+0xe02>
 80017dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80017e8:	fa93 f3a3 	rbit	r3, r3
 80017ec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80017f0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f4:	fab3 f383 	clz	r3, r3
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b01      	cmp	r3, #1
 8001806:	d102      	bne.n	800180e <HAL_RCC_OscConfig+0x1e2>
 8001808:	4b46      	ldr	r3, [pc, #280]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	e015      	b.n	800183a <HAL_RCC_OscConfig+0x20e>
 800180e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001812:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001826:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800182a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001836:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800183e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001842:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001846:	fa92 f2a2 	rbit	r2, r2
 800184a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800184e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001852:	fab2 f282 	clz	r2, r2
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	f042 0220 	orr.w	r2, r2, #32
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	f002 021f 	and.w	r2, r2, #31
 8001862:	2101      	movs	r1, #1
 8001864:	fa01 f202 	lsl.w	r2, r1, r2
 8001868:	4013      	ands	r3, r2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0ab      	beq.n	80017c6 <HAL_RCC_OscConfig+0x19a>
 800186e:	e05c      	b.n	800192a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7fe fd58 	bl	8000324 <HAL_GetTick>
 8001874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187a:	f7fe fd53 	bl	8000324 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d902      	bls.n	8001890 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	f000 bdcf 	b.w	800242e <HAL_RCC_OscConfig+0xe02>
 8001890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001894:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80018a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d102      	bne.n	80018c2 <HAL_RCC_OscConfig+0x296>
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	e015      	b.n	80018ee <HAL_RCC_OscConfig+0x2c2>
 80018c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80018d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018da:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_RCC_OscConfig+0x2f8>)
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018f2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80018f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018fa:	fa92 f2a2 	rbit	r2, r2
 80018fe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001902:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001906:	fab2 f282 	clz	r2, r2
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	f042 0220 	orr.w	r2, r2, #32
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	f002 021f 	and.w	r2, r2, #31
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f202 	lsl.w	r2, r1, r2
 800191c:	4013      	ands	r3, r2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1ab      	bne.n	800187a <HAL_RCC_OscConfig+0x24e>
 8001922:	e002      	b.n	800192a <HAL_RCC_OscConfig+0x2fe>
 8001924:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 816f 	beq.w	8001c18 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800193a:	4bd0      	ldr	r3, [pc, #832]	; (8001c7c <HAL_RCC_OscConfig+0x650>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00b      	beq.n	800195e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001946:	4bcd      	ldr	r3, [pc, #820]	; (8001c7c <HAL_RCC_OscConfig+0x650>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b08      	cmp	r3, #8
 8001950:	d16c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x400>
 8001952:	4bca      	ldr	r3, [pc, #808]	; (8001c7c <HAL_RCC_OscConfig+0x650>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d166      	bne.n	8001a2c <HAL_RCC_OscConfig+0x400>
 800195e:	2302      	movs	r3, #2
 8001960:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001970:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d102      	bne.n	800198e <HAL_RCC_OscConfig+0x362>
 8001988:	4bbc      	ldr	r3, [pc, #752]	; (8001c7c <HAL_RCC_OscConfig+0x650>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	e013      	b.n	80019b6 <HAL_RCC_OscConfig+0x38a>
 800198e:	2302      	movs	r3, #2
 8001990:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80019a0:	2302      	movs	r3, #2
 80019a2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019aa:	fa93 f3a3 	rbit	r3, r3
 80019ae:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80019b2:	4bb2      	ldr	r3, [pc, #712]	; (8001c7c <HAL_RCC_OscConfig+0x650>)
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	2202      	movs	r2, #2
 80019b8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80019bc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019c0:	fa92 f2a2 	rbit	r2, r2
 80019c4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80019c8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80019cc:	fab2 f282 	clz	r2, r2
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	f042 0220 	orr.w	r2, r2, #32
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	f002 021f 	and.w	r2, r2, #31
 80019dc:	2101      	movs	r1, #1
 80019de:	fa01 f202 	lsl.w	r2, r1, r2
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d007      	beq.n	80019f8 <HAL_RCC_OscConfig+0x3cc>
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d002      	beq.n	80019f8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	f000 bd1b 	b.w	800242e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f8:	4ba0      	ldr	r3, [pc, #640]	; (8001c7c <HAL_RCC_OscConfig+0x650>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	21f8      	movs	r1, #248	; 0xf8
 8001a08:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a10:	fa91 f1a1 	rbit	r1, r1
 8001a14:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a18:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a1c:	fab1 f181 	clz	r1, r1
 8001a20:	b2c9      	uxtb	r1, r1
 8001a22:	408b      	lsls	r3, r1
 8001a24:	4995      	ldr	r1, [pc, #596]	; (8001c7c <HAL_RCC_OscConfig+0x650>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2a:	e0f5      	b.n	8001c18 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 8085 	beq.w	8001b42 <HAL_RCC_OscConfig+0x516>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2301      	movs	r3, #1
 8001a62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7fe fc5e 	bl	8000324 <HAL_GetTick>
 8001a68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6c:	e00a      	b.n	8001a84 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a6e:	f7fe fc59 	bl	8000324 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d902      	bls.n	8001a84 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	f000 bcd5 	b.w	800242e <HAL_RCC_OscConfig+0xe02>
 8001a84:	2302      	movs	r3, #2
 8001a86:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001a96:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	095b      	lsrs	r3, r3, #5
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d102      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x488>
 8001aae:	4b73      	ldr	r3, [pc, #460]	; (8001c7c <HAL_RCC_OscConfig+0x650>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	e013      	b.n	8001adc <HAL_RCC_OscConfig+0x4b0>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001acc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ad8:	4b68      	ldr	r3, [pc, #416]	; (8001c7c <HAL_RCC_OscConfig+0x650>)
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	2202      	movs	r2, #2
 8001ade:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001ae2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ae6:	fa92 f2a2 	rbit	r2, r2
 8001aea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001aee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001af2:	fab2 f282 	clz	r2, r2
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	f042 0220 	orr.w	r2, r2, #32
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	f002 021f 	and.w	r2, r2, #31
 8001b02:	2101      	movs	r1, #1
 8001b04:	fa01 f202 	lsl.w	r2, r1, r2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0af      	beq.n	8001a6e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0e:	4b5b      	ldr	r3, [pc, #364]	; (8001c7c <HAL_RCC_OscConfig+0x650>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	21f8      	movs	r1, #248	; 0xf8
 8001b1e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b26:	fa91 f1a1 	rbit	r1, r1
 8001b2a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b2e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b32:	fab1 f181 	clz	r1, r1
 8001b36:	b2c9      	uxtb	r1, r1
 8001b38:	408b      	lsls	r3, r1
 8001b3a:	4950      	ldr	r1, [pc, #320]	; (8001c7c <HAL_RCC_OscConfig+0x650>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	600b      	str	r3, [r1, #0]
 8001b40:	e06a      	b.n	8001c18 <HAL_RCC_OscConfig+0x5ec>
 8001b42:	2301      	movs	r3, #1
 8001b44:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7fe fbd9 	bl	8000324 <HAL_GetTick>
 8001b72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	e00a      	b.n	8001b8e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b78:	f7fe fbd4 	bl	8000324 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d902      	bls.n	8001b8e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	f000 bc50 	b.w	800242e <HAL_RCC_OscConfig+0xe02>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d102      	bne.n	8001bbe <HAL_RCC_OscConfig+0x592>
 8001bb8:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <HAL_RCC_OscConfig+0x650>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	e013      	b.n	8001be6 <HAL_RCC_OscConfig+0x5ba>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001bd6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_RCC_OscConfig+0x650>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	2202      	movs	r2, #2
 8001be8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001bec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001bf0:	fa92 f2a2 	rbit	r2, r2
 8001bf4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001bf8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001bfc:	fab2 f282 	clz	r2, r2
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	f042 0220 	orr.w	r2, r2, #32
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	f002 021f 	and.w	r2, r2, #31
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1af      	bne.n	8001b78 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80da 	beq.w	8001ddc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d069      	beq.n	8001d06 <HAL_RCC_OscConfig+0x6da>
 8001c32:	2301      	movs	r3, #1
 8001c34:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_OscConfig+0x654>)
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	461a      	mov	r2, r3
 8001c58:	2301      	movs	r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5c:	f7fe fb62 	bl	8000324 <HAL_GetTick>
 8001c60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c64:	e00e      	b.n	8001c84 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c66:	f7fe fb5d 	bl	8000324 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d906      	bls.n	8001c84 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e3d9      	b.n	800242e <HAL_RCC_OscConfig+0xe02>
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	10908120 	.word	0x10908120
 8001c84:	2302      	movs	r3, #2
 8001c86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	fa93 f2a3 	rbit	r2, r3
 8001ca8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	fa93 f2a3 	rbit	r2, r3
 8001cc0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001cc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc6:	4ba5      	ldr	r3, [pc, #660]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cce:	2102      	movs	r1, #2
 8001cd0:	6019      	str	r1, [r3, #0]
 8001cd2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	fa93 f1a3 	rbit	r1, r3
 8001cdc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ce0:	6019      	str	r1, [r3, #0]
  return result;
 8001ce2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0b0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x63a>
 8001d04:	e06a      	b.n	8001ddc <HAL_RCC_OscConfig+0x7b0>
 8001d06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	fa93 f2a3 	rbit	r2, r3
 8001d18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d1c:	601a      	str	r2, [r3, #0]
  return result;
 8001d1e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d22:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b8c      	ldr	r3, [pc, #560]	; (8001f60 <HAL_RCC_OscConfig+0x934>)
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	461a      	mov	r2, r3
 8001d34:	2300      	movs	r3, #0
 8001d36:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	f7fe faf4 	bl	8000324 <HAL_GetTick>
 8001d3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	e009      	b.n	8001d56 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d42:	f7fe faef 	bl	8000324 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e36b      	b.n	800242e <HAL_RCC_OscConfig+0xe02>
 8001d56:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d72:	2202      	movs	r2, #2
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	fa93 f2a3 	rbit	r2, r3
 8001d80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	fa93 f2a3 	rbit	r2, r3
 8001d98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9e:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001da2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001da6:	2102      	movs	r1, #2
 8001da8:	6019      	str	r1, [r3, #0]
 8001daa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	fa93 f1a3 	rbit	r1, r3
 8001db4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001db8:	6019      	str	r1, [r3, #0]
  return result;
 8001dba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1b2      	bne.n	8001d42 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8158 	beq.w	800209c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df2:	4b5a      	ldr	r3, [pc, #360]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d112      	bne.n	8001e24 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	4b57      	ldr	r3, [pc, #348]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	4a56      	ldr	r2, [pc, #344]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	61d3      	str	r3, [r2, #28]
 8001e0a:	4b54      	ldr	r3, [pc, #336]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f107 0308 	add.w	r3, r7, #8
 8001e1c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	4b4f      	ldr	r3, [pc, #316]	; (8001f64 <HAL_RCC_OscConfig+0x938>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d11a      	bne.n	8001e66 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e30:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_RCC_OscConfig+0x938>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a4b      	ldr	r2, [pc, #300]	; (8001f64 <HAL_RCC_OscConfig+0x938>)
 8001e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3c:	f7fe fa72 	bl	8000324 <HAL_GetTick>
 8001e40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	e009      	b.n	8001e5a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e46:	f7fe fa6d 	bl	8000324 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	; 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e2e9      	b.n	800242e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <HAL_RCC_OscConfig+0x938>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0ef      	beq.n	8001e46 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d106      	bne.n	8001e7e <HAL_RCC_OscConfig+0x852>
 8001e70:	4b3a      	ldr	r3, [pc, #232]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a39      	ldr	r2, [pc, #228]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6213      	str	r3, [r2, #32]
 8001e7c:	e02f      	b.n	8001ede <HAL_RCC_OscConfig+0x8b2>
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10c      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x876>
 8001e88:	4b34      	ldr	r3, [pc, #208]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4a33      	ldr	r2, [pc, #204]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	6213      	str	r3, [r2, #32]
 8001e94:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001e9a:	f023 0304 	bic.w	r3, r3, #4
 8001e9e:	6213      	str	r3, [r2, #32]
 8001ea0:	e01d      	b.n	8001ede <HAL_RCC_OscConfig+0x8b2>
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	d10c      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x89a>
 8001eac:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4a2a      	ldr	r2, [pc, #168]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	6213      	str	r3, [r2, #32]
 8001eb8:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a27      	ldr	r2, [pc, #156]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	e00b      	b.n	8001ede <HAL_RCC_OscConfig+0x8b2>
 8001ec6:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4a24      	ldr	r2, [pc, #144]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	6213      	str	r3, [r2, #32]
 8001ed2:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	4a21      	ldr	r2, [pc, #132]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001ed8:	f023 0304 	bic.w	r3, r3, #4
 8001edc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d06b      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee8:	f7fe fa1c 	bl	8000324 <HAL_GetTick>
 8001eec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7fe fa17 	bl	8000324 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e291      	b.n	800242e <HAL_RCC_OscConfig+0xe02>
 8001f0a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f0e:	2202      	movs	r2, #2
 8001f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	fa93 f2a3 	rbit	r2, r3
 8001f1c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f26:	2202      	movs	r2, #2
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	fa93 f2a3 	rbit	r2, r3
 8001f34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f38:	601a      	str	r2, [r3, #0]
  return result;
 8001f3a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	f043 0302 	orr.w	r3, r3, #2
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d109      	bne.n	8001f68 <HAL_RCC_OscConfig+0x93c>
 8001f54:	4b01      	ldr	r3, [pc, #4]	; (8001f5c <HAL_RCC_OscConfig+0x930>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	e014      	b.n	8001f84 <HAL_RCC_OscConfig+0x958>
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	10908120 	.word	0x10908120
 8001f64:	40007000 	.word	0x40007000
 8001f68:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	fa93 f2a3 	rbit	r2, r3
 8001f7a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	4bbb      	ldr	r3, [pc, #748]	; (8002270 <HAL_RCC_OscConfig+0xc44>)
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f88:	2102      	movs	r1, #2
 8001f8a:	6011      	str	r1, [r2, #0]
 8001f8c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	fa92 f1a2 	rbit	r1, r2
 8001f96:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001f9a:	6011      	str	r1, [r2, #0]
  return result;
 8001f9c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	fab2 f282 	clz	r2, r2
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	f002 021f 	and.w	r2, r2, #31
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d099      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x8c6>
 8001fbe:	e063      	b.n	8002088 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc0:	f7fe f9b0 	bl	8000324 <HAL_GetTick>
 8001fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	e00b      	b.n	8001fe2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7fe f9ab 	bl	8000324 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e225      	b.n	800242e <HAL_RCC_OscConfig+0xe02>
 8001fe2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fa93 f2a3 	rbit	r2, r3
 8001ff4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ffe:	2202      	movs	r2, #2
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	fa93 f2a3 	rbit	r2, r3
 800200c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002010:	601a      	str	r2, [r3, #0]
  return result;
 8002012:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002016:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d102      	bne.n	8002032 <HAL_RCC_OscConfig+0xa06>
 800202c:	4b90      	ldr	r3, [pc, #576]	; (8002270 <HAL_RCC_OscConfig+0xc44>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	e00d      	b.n	800204e <HAL_RCC_OscConfig+0xa22>
 8002032:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002036:	2202      	movs	r2, #2
 8002038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fa93 f2a3 	rbit	r2, r3
 8002044:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	4b89      	ldr	r3, [pc, #548]	; (8002270 <HAL_RCC_OscConfig+0xc44>)
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002052:	2102      	movs	r1, #2
 8002054:	6011      	str	r1, [r2, #0]
 8002056:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	fa92 f1a2 	rbit	r1, r2
 8002060:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002064:	6011      	str	r1, [r2, #0]
  return result;
 8002066:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	fab2 f282 	clz	r2, r2
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	f002 021f 	and.w	r2, r2, #31
 800207c:	2101      	movs	r1, #1
 800207e:	fa01 f202 	lsl.w	r2, r1, r2
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1a0      	bne.n	8001fca <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002088:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002090:	4b77      	ldr	r3, [pc, #476]	; (8002270 <HAL_RCC_OscConfig+0xc44>)
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	4a76      	ldr	r2, [pc, #472]	; (8002270 <HAL_RCC_OscConfig+0xc44>)
 8002096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800209a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 81c2 	beq.w	800242c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a8:	4b71      	ldr	r3, [pc, #452]	; (8002270 <HAL_RCC_OscConfig+0xc44>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	f000 819c 	beq.w	80023ee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	f040 8114 	bne.w	80022ea <HAL_RCC_OscConfig+0xcbe>
 80020c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020da:	601a      	str	r2, [r3, #0]
  return result;
 80020dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	461a      	mov	r2, r3
 80020f4:	2300      	movs	r3, #0
 80020f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7fe f914 	bl	8000324 <HAL_GetTick>
 80020fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002100:	e009      	b.n	8002116 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002102:	f7fe f90f 	bl	8000324 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e18b      	b.n	800242e <HAL_RCC_OscConfig+0xe02>
 8002116:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800211a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	fa93 f2a3 	rbit	r2, r3
 800212a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800212e:	601a      	str	r2, [r3, #0]
  return result;
 8002130:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002134:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	095b      	lsrs	r3, r3, #5
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d102      	bne.n	8002150 <HAL_RCC_OscConfig+0xb24>
 800214a:	4b49      	ldr	r3, [pc, #292]	; (8002270 <HAL_RCC_OscConfig+0xc44>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	e01b      	b.n	8002188 <HAL_RCC_OscConfig+0xb5c>
 8002150:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	fa93 f2a3 	rbit	r2, r3
 8002164:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800216e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	fa93 f2a3 	rbit	r2, r3
 800217e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <HAL_RCC_OscConfig+0xc44>)
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800218c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002190:	6011      	str	r1, [r2, #0]
 8002192:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	fa92 f1a2 	rbit	r1, r2
 800219c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80021a0:	6011      	str	r1, [r2, #0]
  return result;
 80021a2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	fab2 f282 	clz	r2, r2
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	f042 0220 	orr.w	r2, r2, #32
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	f002 021f 	and.w	r2, r2, #31
 80021b8:	2101      	movs	r1, #1
 80021ba:	fa01 f202 	lsl.w	r2, r1, r2
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d19e      	bne.n	8002102 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c4:	4b2a      	ldr	r3, [pc, #168]	; (8002270 <HAL_RCC_OscConfig+0xc44>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	430b      	orrs	r3, r1
 80021da:	4925      	ldr	r1, [pc, #148]	; (8002270 <HAL_RCC_OscConfig+0xc44>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
 80021e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	fa93 f2a3 	rbit	r2, r3
 80021f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021f8:	601a      	str	r2, [r3, #0]
  return result;
 80021fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021fe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800220a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	461a      	mov	r2, r3
 8002212:	2301      	movs	r3, #1
 8002214:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe f885 	bl	8000324 <HAL_GetTick>
 800221a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800221e:	e009      	b.n	8002234 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe f880 	bl	8000324 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e0fc      	b.n	800242e <HAL_RCC_OscConfig+0xe02>
 8002234:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002238:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800223c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fa93 f2a3 	rbit	r2, r3
 8002248:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800224c:	601a      	str	r2, [r3, #0]
  return result;
 800224e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002252:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_RCC_OscConfig+0xc48>
 8002268:	4b01      	ldr	r3, [pc, #4]	; (8002270 <HAL_RCC_OscConfig+0xc44>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	e01e      	b.n	80022ac <HAL_RCC_OscConfig+0xc80>
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002278:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800227c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	fa93 f2a3 	rbit	r2, r3
 8002288:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002292:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	fa93 f2a3 	rbit	r2, r3
 80022a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCC_OscConfig+0xe0c>)
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022b4:	6011      	str	r1, [r2, #0]
 80022b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	fa92 f1a2 	rbit	r1, r2
 80022c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80022c4:	6011      	str	r1, [r2, #0]
  return result;
 80022c6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	fab2 f282 	clz	r2, r2
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	f042 0220 	orr.w	r2, r2, #32
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	f002 021f 	and.w	r2, r2, #31
 80022dc:	2101      	movs	r1, #1
 80022de:	fa01 f202 	lsl.w	r2, r1, r2
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d09b      	beq.n	8002220 <HAL_RCC_OscConfig+0xbf4>
 80022e8:	e0a0      	b.n	800242c <HAL_RCC_OscConfig+0xe00>
 80022ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fa93 f2a3 	rbit	r2, r3
 80022fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002302:	601a      	str	r2, [r3, #0]
  return result;
 8002304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002308:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002314:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	461a      	mov	r2, r3
 800231c:	2300      	movs	r3, #0
 800231e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7fe f800 	bl	8000324 <HAL_GetTick>
 8002324:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002328:	e009      	b.n	800233e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800232a:	f7fd fffb 	bl	8000324 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e077      	b.n	800242e <HAL_RCC_OscConfig+0xe02>
 800233e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002342:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002346:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	fa93 f2a3 	rbit	r2, r3
 8002352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002356:	601a      	str	r2, [r3, #0]
  return result;
 8002358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d102      	bne.n	8002378 <HAL_RCC_OscConfig+0xd4c>
 8002372:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HAL_RCC_OscConfig+0xe0c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	e01b      	b.n	80023b0 <HAL_RCC_OscConfig+0xd84>
 8002378:	f107 0320 	add.w	r3, r7, #32
 800237c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	f107 0320 	add.w	r3, r7, #32
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	fa93 f2a3 	rbit	r2, r3
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	f107 0318 	add.w	r3, r7, #24
 8002396:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f107 0318 	add.w	r3, r7, #24
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	fa93 f2a3 	rbit	r2, r3
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_RCC_OscConfig+0xe0c>)
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	f107 0210 	add.w	r2, r7, #16
 80023b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023b8:	6011      	str	r1, [r2, #0]
 80023ba:	f107 0210 	add.w	r2, r7, #16
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	fa92 f1a2 	rbit	r1, r2
 80023c4:	f107 020c 	add.w	r2, r7, #12
 80023c8:	6011      	str	r1, [r2, #0]
  return result;
 80023ca:	f107 020c 	add.w	r2, r7, #12
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	fab2 f282 	clz	r2, r2
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	f042 0220 	orr.w	r2, r2, #32
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	f002 021f 	and.w	r2, r2, #31
 80023e0:	2101      	movs	r1, #1
 80023e2:	fa01 f202 	lsl.w	r2, r1, r2
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d19e      	bne.n	800232a <HAL_RCC_OscConfig+0xcfe>
 80023ec:	e01e      	b.n	800242c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e018      	b.n	800242e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_RCC_OscConfig+0xe0c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002404:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002408:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	429a      	cmp	r2, r3
 8002414:	d108      	bne.n	8002428 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002416:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800241a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000

0800243c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b09e      	sub	sp, #120	; 0x78
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e162      	b.n	800271a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b90      	ldr	r3, [pc, #576]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d910      	bls.n	8002484 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b8d      	ldr	r3, [pc, #564]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 0207 	bic.w	r2, r3, #7
 800246a:	498b      	ldr	r1, [pc, #556]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b89      	ldr	r3, [pc, #548]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e14a      	b.n	800271a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002490:	4b82      	ldr	r3, [pc, #520]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	497f      	ldr	r1, [pc, #508]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80dc 	beq.w	8002668 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d13c      	bne.n	8002532 <HAL_RCC_ClockConfig+0xf6>
 80024b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d102      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xa6>
 80024dc:	4b6f      	ldr	r3, [pc, #444]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	e00f      	b.n	8002502 <HAL_RCC_ClockConfig+0xc6>
 80024e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	667b      	str	r3, [r7, #100]	; 0x64
 80024f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f4:	663b      	str	r3, [r7, #96]	; 0x60
 80024f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024fe:	4b67      	ldr	r3, [pc, #412]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002506:	65ba      	str	r2, [r7, #88]	; 0x58
 8002508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800250a:	fa92 f2a2 	rbit	r2, r2
 800250e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002510:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002512:	fab2 f282 	clz	r2, r2
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f042 0220 	orr.w	r2, r2, #32
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f002 021f 	and.w	r2, r2, #31
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f202 	lsl.w	r2, r1, r2
 8002528:	4013      	ands	r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d17b      	bne.n	8002626 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0f3      	b.n	800271a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d13c      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x178>
 800253a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800253e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d102      	bne.n	8002564 <HAL_RCC_ClockConfig+0x128>
 800255e:	4b4f      	ldr	r3, [pc, #316]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	e00f      	b.n	8002584 <HAL_RCC_ClockConfig+0x148>
 8002564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002568:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	647b      	str	r3, [r7, #68]	; 0x44
 8002572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002576:	643b      	str	r3, [r7, #64]	; 0x40
 8002578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002580:	4b46      	ldr	r3, [pc, #280]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002588:	63ba      	str	r2, [r7, #56]	; 0x38
 800258a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800258c:	fa92 f2a2 	rbit	r2, r2
 8002590:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002594:	fab2 f282 	clz	r2, r2
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	f042 0220 	orr.w	r2, r2, #32
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	f002 021f 	and.w	r2, r2, #31
 80025a4:	2101      	movs	r1, #1
 80025a6:	fa01 f202 	lsl.w	r2, r1, r2
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d13a      	bne.n	8002626 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0b2      	b.n	800271a <HAL_RCC_ClockConfig+0x2de>
 80025b4:	2302      	movs	r3, #2
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d102      	bne.n	80025dc <HAL_RCC_ClockConfig+0x1a0>
 80025d6:	4b31      	ldr	r3, [pc, #196]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	e00d      	b.n	80025f8 <HAL_RCC_ClockConfig+0x1bc>
 80025dc:	2302      	movs	r3, #2
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
 80025e8:	2302      	movs	r3, #2
 80025ea:	623b      	str	r3, [r7, #32]
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	2202      	movs	r2, #2
 80025fa:	61ba      	str	r2, [r7, #24]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	fa92 f2a2 	rbit	r2, r2
 8002602:	617a      	str	r2, [r7, #20]
  return result;
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	fab2 f282 	clz	r2, r2
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	f042 0220 	orr.w	r2, r2, #32
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	f002 021f 	and.w	r2, r2, #31
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f202 	lsl.w	r2, r1, r2
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e079      	b.n	800271a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f023 0203 	bic.w	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	491a      	ldr	r1, [pc, #104]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002638:	f7fd fe74 	bl	8000324 <HAL_GetTick>
 800263c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	e00a      	b.n	8002656 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002640:	f7fd fe70 	bl	8000324 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e061      	b.n	800271a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 020c 	and.w	r2, r3, #12
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	429a      	cmp	r2, r3
 8002666:	d1eb      	bne.n	8002640 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d214      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 0207 	bic.w	r2, r3, #7
 800267e:	4906      	ldr	r1, [pc, #24]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b04      	ldr	r3, [pc, #16]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e040      	b.n	800271a <HAL_RCC_ClockConfig+0x2de>
 8002698:	40022000 	.word	0x40022000
 800269c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_RCC_ClockConfig+0x2e8>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	491a      	ldr	r1, [pc, #104]	; (8002724 <HAL_RCC_ClockConfig+0x2e8>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_RCC_ClockConfig+0x2e8>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4912      	ldr	r1, [pc, #72]	; (8002724 <HAL_RCC_ClockConfig+0x2e8>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026de:	f000 f829 	bl	8002734 <HAL_RCC_GetSysClockFreq>
 80026e2:	4601      	mov	r1, r0
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <HAL_RCC_ClockConfig+0x2e8>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ec:	22f0      	movs	r2, #240	; 0xf0
 80026ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	fa92 f2a2 	rbit	r2, r2
 80026f6:	60fa      	str	r2, [r7, #12]
  return result;
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	fab2 f282 	clz	r2, r2
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	40d3      	lsrs	r3, r2
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <HAL_RCC_ClockConfig+0x2ec>)
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	fa21 f303 	lsr.w	r3, r1, r3
 800270a:	4a08      	ldr	r2, [pc, #32]	; (800272c <HAL_RCC_ClockConfig+0x2f0>)
 800270c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_RCC_ClockConfig+0x2f4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd fdc2 	bl	800029c <HAL_InitTick>
  
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3778      	adds	r7, #120	; 0x78
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	08005eb4 	.word	0x08005eb4
 800272c:	2000001c 	.word	0x2000001c
 8002730:	20000000 	.word	0x20000000

08002734 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002734:	b480      	push	{r7}
 8002736:	b08b      	sub	sp, #44	; 0x2c
 8002738:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800274e:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b04      	cmp	r3, #4
 800275c:	d002      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x30>
 800275e:	2b08      	cmp	r3, #8
 8002760:	d003      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x36>
 8002762:	e03c      	b.n	80027de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002764:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002766:	623b      	str	r3, [r7, #32]
      break;
 8002768:	e03c      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002770:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002774:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	fa92 f2a2 	rbit	r2, r2
 800277c:	607a      	str	r2, [r7, #4]
  return result;
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	fab2 f282 	clz	r2, r2
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	40d3      	lsrs	r3, r2
 8002788:	4a1c      	ldr	r2, [pc, #112]	; (80027fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800278a:	5cd3      	ldrb	r3, [r2, r3]
 800278c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	220f      	movs	r2, #15
 8002798:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	fa92 f2a2 	rbit	r2, r2
 80027a0:	60fa      	str	r2, [r7, #12]
  return result;
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	fab2 f282 	clz	r2, r2
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	40d3      	lsrs	r3, r2
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027bc:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
 80027cc:	e004      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	4a0c      	ldr	r2, [pc, #48]	; (8002804 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	623b      	str	r3, [r7, #32]
      break;
 80027dc:	e002      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027e0:	623b      	str	r3, [r7, #32]
      break;
 80027e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e4:	6a3b      	ldr	r3, [r7, #32]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	372c      	adds	r7, #44	; 0x2c
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	007a1200 	.word	0x007a1200
 80027fc:	08005e94 	.word	0x08005e94
 8002800:	08005ea4 	.word	0x08005ea4
 8002804:	003d0900 	.word	0x003d0900

08002808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800280c:	4b03      	ldr	r3, [pc, #12]	; (800281c <HAL_RCC_GetHCLKFreq+0x14>)
 800280e:	681b      	ldr	r3, [r3, #0]
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	2000001c 	.word	0x2000001c

08002820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002826:	f7ff ffef 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 800282a:	4601      	mov	r1, r0
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002834:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002838:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	fa92 f2a2 	rbit	r2, r2
 8002840:	603a      	str	r2, [r7, #0]
  return result;
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	fab2 f282 	clz	r2, r2
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	40d3      	lsrs	r3, r2
 800284c:	4a04      	ldr	r2, [pc, #16]	; (8002860 <HAL_RCC_GetPCLK1Freq+0x40>)
 800284e:	5cd3      	ldrb	r3, [r2, r3]
 8002850:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	08005ec4 	.word	0x08005ec4

08002864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800286a:	f7ff ffcd 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 800286e:	4601      	mov	r1, r0
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002878:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800287c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	fa92 f2a2 	rbit	r2, r2
 8002884:	603a      	str	r2, [r7, #0]
  return result;
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	fab2 f282 	clz	r2, r2
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	40d3      	lsrs	r3, r2
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002892:	5cd3      	ldrb	r3, [r2, r3]
 8002894:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	08005ec4 	.word	0x08005ec4

080028a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e040      	b.n	800293c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f001 fee2 	bl	8004694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2224      	movs	r2, #36	; 0x24
 80028d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0201 	bic.w	r2, r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fc0c 	bl	8003104 <UART_SetConfig>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e022      	b.n	800293c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fd36 	bl	8003370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fdbd 	bl	80034b4 <UART_CheckIdleState>
 800293a:	4603      	mov	r3, r0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	4613      	mov	r3, r2
 8002952:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002958:	2b20      	cmp	r3, #32
 800295a:	f040 8082 	bne.w	8002a62 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <HAL_UART_Transmit+0x26>
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e07a      	b.n	8002a64 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_UART_Transmit+0x38>
 8002978:	2302      	movs	r3, #2
 800297a:	e073      	b.n	8002a64 <HAL_UART_Transmit+0x120>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2221      	movs	r2, #33	; 0x21
 8002990:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002992:	f7fd fcc7 	bl	8000324 <HAL_GetTick>
 8002996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	88fa      	ldrh	r2, [r7, #6]
 800299c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	88fa      	ldrh	r2, [r7, #6]
 80029a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b0:	d108      	bne.n	80029c4 <HAL_UART_Transmit+0x80>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d104      	bne.n	80029c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	e003      	b.n	80029cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80029d4:	e02d      	b.n	8002a32 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2200      	movs	r2, #0
 80029de:	2180      	movs	r1, #128	; 0x80
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fdb0 	bl	8003546 <UART_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e039      	b.n	8002a64 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10b      	bne.n	8002a0e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	881a      	ldrh	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a02:	b292      	uxth	r2, r2
 8002a04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	3302      	adds	r3, #2
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	e008      	b.n	8002a20 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	b292      	uxth	r2, r2
 8002a18:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1cb      	bne.n	80029d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2200      	movs	r2, #0
 8002a46:	2140      	movs	r1, #64	; 0x40
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fd7c 	bl	8003546 <UART_WaitOnFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e005      	b.n	8002a64 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e000      	b.n	8002a64 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
  }
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3720      	adds	r7, #32
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d13d      	bne.n	8002afe <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <HAL_UART_Receive_IT+0x22>
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e036      	b.n	8002b00 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_UART_Receive_IT+0x34>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e02f      	b.n	8002b00 <HAL_UART_Receive_IT+0x94>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d018      	beq.n	8002aee <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	e853 3f00 	ldrex	r3, [r3]
 8002ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	623b      	str	r3, [r7, #32]
 8002adc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ade:	69f9      	ldr	r1, [r7, #28]
 8002ae0:	6a3a      	ldr	r2, [r7, #32]
 8002ae2:	e841 2300 	strex	r3, r2, [r1]
 8002ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e6      	bne.n	8002abc <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	461a      	mov	r2, r3
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fdeb 	bl	80036d0 <UART_Start_Receive_IT>
 8002afa:	4603      	mov	r3, r0
 8002afc:	e000      	b.n	8002b00 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
  }
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3728      	adds	r7, #40	; 0x28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b0ba      	sub	sp, #232	; 0xe8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b32:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b36:	4013      	ands	r3, r2
 8002b38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002b3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d115      	bne.n	8002b70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00f      	beq.n	8002b70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d009      	beq.n	8002b70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 82a3 	beq.w	80030ac <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
      }
      return;
 8002b6e:	e29d      	b.n	80030ac <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8117 	beq.w	8002da8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b8a:	4b85      	ldr	r3, [pc, #532]	; (8002da0 <HAL_UART_IRQHandler+0x298>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 810a 	beq.w	8002da8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d011      	beq.n	8002bc4 <HAL_UART_IRQHandler+0xbc>
 8002ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00b      	beq.n	8002bc4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bba:	f043 0201 	orr.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d011      	beq.n	8002bf4 <HAL_UART_IRQHandler+0xec>
 8002bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00b      	beq.n	8002bf4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2202      	movs	r2, #2
 8002be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bea:	f043 0204 	orr.w	r2, r3, #4
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d011      	beq.n	8002c24 <HAL_UART_IRQHandler+0x11c>
 8002c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2204      	movs	r2, #4
 8002c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c1a:	f043 0202 	orr.w	r2, r3, #2
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d017      	beq.n	8002c60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c56:	f043 0208 	orr.w	r2, r3, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d012      	beq.n	8002c92 <HAL_UART_IRQHandler+0x18a>
 8002c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00c      	beq.n	8002c92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8209 	beq.w	80030b0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00d      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ccc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b40      	cmp	r3, #64	; 0x40
 8002cdc:	d005      	beq.n	8002cea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ce2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d04f      	beq.n	8002d8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fd9c 	bl	8003828 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b40      	cmp	r3, #64	; 0x40
 8002cfc:	d141      	bne.n	8002d82 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3308      	adds	r3, #8
 8002d04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3308      	adds	r3, #8
 8002d26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d3a:	e841 2300 	strex	r3, r2, [r1]
 8002d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1d9      	bne.n	8002cfe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d013      	beq.n	8002d7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <HAL_UART_IRQHandler+0x29c>)
 8002d58:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fa9c 	bl	800129c <HAL_DMA_Abort_IT>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d017      	beq.n	8002d9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002d74:	4610      	mov	r0, r2
 8002d76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d78:	e00f      	b.n	8002d9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f9ac 	bl	80030d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d80:	e00b      	b.n	8002d9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f9a8 	bl	80030d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d88:	e007      	b.n	8002d9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f9a4 	bl	80030d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002d98:	e18a      	b.n	80030b0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d9a:	bf00      	nop
    return;
 8002d9c:	e188      	b.n	80030b0 <HAL_UART_IRQHandler+0x5a8>
 8002d9e:	bf00      	nop
 8002da0:	04000120 	.word	0x04000120
 8002da4:	080038ef 	.word	0x080038ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	f040 8143 	bne.w	8003038 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 813c 	beq.w	8003038 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8135 	beq.w	8003038 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2210      	movs	r2, #16
 8002dd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de0:	2b40      	cmp	r3, #64	; 0x40
 8002de2:	f040 80b1 	bne.w	8002f48 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002df2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 815c 	beq.w	80030b4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e06:	429a      	cmp	r2, r3
 8002e08:	f080 8154 	bcs.w	80030b4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	f000 8085 	beq.w	8002f2c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e2e:	e853 3f00 	ldrex	r3, [r3]
 8002e32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e50:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e54:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e5c:	e841 2300 	strex	r3, r2, [r1]
 8002e60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1da      	bne.n	8002e22 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3308      	adds	r3, #8
 8002e72:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e76:	e853 3f00 	ldrex	r3, [r3]
 8002e7a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3308      	adds	r3, #8
 8002e8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e94:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e96:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e9c:	e841 2300 	strex	r3, r2, [r1]
 8002ea0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e1      	bne.n	8002e6c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3308      	adds	r3, #8
 8002eae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eb2:	e853 3f00 	ldrex	r3, [r3]
 8002eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ecc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ece:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ed2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ed4:	e841 2300 	strex	r3, r2, [r1]
 8002ed8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002eda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1e3      	bne.n	8002ea8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef4:	e853 3f00 	ldrex	r3, [r3]
 8002ef8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002efc:	f023 0310 	bic.w	r3, r3, #16
 8002f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1e4      	bne.n	8002eec <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe f97f 	bl	800122a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f8d3 	bl	80030ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f46:	e0b5      	b.n	80030b4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80a7 	beq.w	80030b8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002f6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80a2 	beq.w	80030b8 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7c:	e853 3f00 	ldrex	r3, [r3]
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f96:	647b      	str	r3, [r7, #68]	; 0x44
 8002f98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e4      	bne.n	8002f74 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3308      	adds	r3, #8
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	e853 3f00 	ldrex	r3, [r3]
 8002fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3308      	adds	r3, #8
 8002fca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002fce:	633a      	str	r2, [r7, #48]	; 0x30
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd6:	e841 2300 	strex	r3, r2, [r1]
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1e3      	bne.n	8002faa <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	e853 3f00 	ldrex	r3, [r3]
 8003000:	60fb      	str	r3, [r7, #12]
   return(result);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f023 0310 	bic.w	r3, r3, #16
 8003008:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	69b9      	ldr	r1, [r7, #24]
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	617b      	str	r3, [r7, #20]
   return(result);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e4      	bne.n	8002ff4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800302a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800302e:	4619      	mov	r1, r3
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f85b 	bl	80030ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003036:	e03f      	b.n	80030b8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00e      	beq.n	8003062 <HAL_UART_IRQHandler+0x55a>
 8003044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003058:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fde3 	bl	8003c26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003060:	e02d      	b.n	80030be <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00e      	beq.n	800308c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800306e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01c      	beq.n	80030bc <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4798      	blx	r3
    }
    return;
 800308a:	e017      	b.n	80030bc <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800308c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d012      	beq.n	80030be <HAL_UART_IRQHandler+0x5b6>
 8003098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800309c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00c      	beq.n	80030be <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fc38 	bl	800391a <UART_EndTransmit_IT>
    return;
 80030aa:	e008      	b.n	80030be <HAL_UART_IRQHandler+0x5b6>
      return;
 80030ac:	bf00      	nop
 80030ae:	e006      	b.n	80030be <HAL_UART_IRQHandler+0x5b6>
    return;
 80030b0:	bf00      	nop
 80030b2:	e004      	b.n	80030be <HAL_UART_IRQHandler+0x5b6>
      return;
 80030b4:	bf00      	nop
 80030b6:	e002      	b.n	80030be <HAL_UART_IRQHandler+0x5b6>
      return;
 80030b8:	bf00      	nop
 80030ba:	e000      	b.n	80030be <HAL_UART_IRQHandler+0x5b6>
    return;
 80030bc:	bf00      	nop
  }

}
 80030be:	37e8      	adds	r7, #232	; 0xe8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b8a      	ldr	r3, [pc, #552]	; (8003358 <UART_SetConfig+0x254>)
 8003130:	4013      	ands	r3, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	6979      	ldr	r1, [r7, #20]
 8003138:	430b      	orrs	r3, r1
 800313a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a78      	ldr	r2, [pc, #480]	; (800335c <UART_SetConfig+0x258>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d120      	bne.n	80031c2 <UART_SetConfig+0xbe>
 8003180:	4b77      	ldr	r3, [pc, #476]	; (8003360 <UART_SetConfig+0x25c>)
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b03      	cmp	r3, #3
 800318a:	d817      	bhi.n	80031bc <UART_SetConfig+0xb8>
 800318c:	a201      	add	r2, pc, #4	; (adr r2, 8003194 <UART_SetConfig+0x90>)
 800318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003192:	bf00      	nop
 8003194:	080031a5 	.word	0x080031a5
 8003198:	080031b1 	.word	0x080031b1
 800319c:	080031b7 	.word	0x080031b7
 80031a0:	080031ab 	.word	0x080031ab
 80031a4:	2300      	movs	r3, #0
 80031a6:	77fb      	strb	r3, [r7, #31]
 80031a8:	e01d      	b.n	80031e6 <UART_SetConfig+0xe2>
 80031aa:	2302      	movs	r3, #2
 80031ac:	77fb      	strb	r3, [r7, #31]
 80031ae:	e01a      	b.n	80031e6 <UART_SetConfig+0xe2>
 80031b0:	2304      	movs	r3, #4
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e017      	b.n	80031e6 <UART_SetConfig+0xe2>
 80031b6:	2308      	movs	r3, #8
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	e014      	b.n	80031e6 <UART_SetConfig+0xe2>
 80031bc:	2310      	movs	r3, #16
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e011      	b.n	80031e6 <UART_SetConfig+0xe2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a67      	ldr	r2, [pc, #412]	; (8003364 <UART_SetConfig+0x260>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d102      	bne.n	80031d2 <UART_SetConfig+0xce>
 80031cc:	2300      	movs	r3, #0
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e009      	b.n	80031e6 <UART_SetConfig+0xe2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a64      	ldr	r2, [pc, #400]	; (8003368 <UART_SetConfig+0x264>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d102      	bne.n	80031e2 <UART_SetConfig+0xde>
 80031dc:	2300      	movs	r3, #0
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	e001      	b.n	80031e6 <UART_SetConfig+0xe2>
 80031e2:	2310      	movs	r3, #16
 80031e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ee:	d15b      	bne.n	80032a8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80031f0:	7ffb      	ldrb	r3, [r7, #31]
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d827      	bhi.n	8003246 <UART_SetConfig+0x142>
 80031f6:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <UART_SetConfig+0xf8>)
 80031f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fc:	08003221 	.word	0x08003221
 8003200:	08003229 	.word	0x08003229
 8003204:	08003231 	.word	0x08003231
 8003208:	08003247 	.word	0x08003247
 800320c:	08003237 	.word	0x08003237
 8003210:	08003247 	.word	0x08003247
 8003214:	08003247 	.word	0x08003247
 8003218:	08003247 	.word	0x08003247
 800321c:	0800323f 	.word	0x0800323f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003220:	f7ff fafe 	bl	8002820 <HAL_RCC_GetPCLK1Freq>
 8003224:	61b8      	str	r0, [r7, #24]
        break;
 8003226:	e013      	b.n	8003250 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003228:	f7ff fb1c 	bl	8002864 <HAL_RCC_GetPCLK2Freq>
 800322c:	61b8      	str	r0, [r7, #24]
        break;
 800322e:	e00f      	b.n	8003250 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003230:	4b4e      	ldr	r3, [pc, #312]	; (800336c <UART_SetConfig+0x268>)
 8003232:	61bb      	str	r3, [r7, #24]
        break;
 8003234:	e00c      	b.n	8003250 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003236:	f7ff fa7d 	bl	8002734 <HAL_RCC_GetSysClockFreq>
 800323a:	61b8      	str	r0, [r7, #24]
        break;
 800323c:	e008      	b.n	8003250 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003242:	61bb      	str	r3, [r7, #24]
        break;
 8003244:	e004      	b.n	8003250 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	77bb      	strb	r3, [r7, #30]
        break;
 800324e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d074      	beq.n	8003340 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	005a      	lsls	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	085b      	lsrs	r3, r3, #1
 8003260:	441a      	add	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	b29b      	uxth	r3, r3
 800326c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b0f      	cmp	r3, #15
 8003272:	d916      	bls.n	80032a2 <UART_SetConfig+0x19e>
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327a:	d212      	bcs.n	80032a2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	b29b      	uxth	r3, r3
 8003280:	f023 030f 	bic.w	r3, r3, #15
 8003284:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	b29b      	uxth	r3, r3
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	b29a      	uxth	r2, r3
 8003292:	89fb      	ldrh	r3, [r7, #14]
 8003294:	4313      	orrs	r3, r2
 8003296:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	89fa      	ldrh	r2, [r7, #14]
 800329e:	60da      	str	r2, [r3, #12]
 80032a0:	e04e      	b.n	8003340 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	77bb      	strb	r3, [r7, #30]
 80032a6:	e04b      	b.n	8003340 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032a8:	7ffb      	ldrb	r3, [r7, #31]
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d827      	bhi.n	80032fe <UART_SetConfig+0x1fa>
 80032ae:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <UART_SetConfig+0x1b0>)
 80032b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b4:	080032d9 	.word	0x080032d9
 80032b8:	080032e1 	.word	0x080032e1
 80032bc:	080032e9 	.word	0x080032e9
 80032c0:	080032ff 	.word	0x080032ff
 80032c4:	080032ef 	.word	0x080032ef
 80032c8:	080032ff 	.word	0x080032ff
 80032cc:	080032ff 	.word	0x080032ff
 80032d0:	080032ff 	.word	0x080032ff
 80032d4:	080032f7 	.word	0x080032f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d8:	f7ff faa2 	bl	8002820 <HAL_RCC_GetPCLK1Freq>
 80032dc:	61b8      	str	r0, [r7, #24]
        break;
 80032de:	e013      	b.n	8003308 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e0:	f7ff fac0 	bl	8002864 <HAL_RCC_GetPCLK2Freq>
 80032e4:	61b8      	str	r0, [r7, #24]
        break;
 80032e6:	e00f      	b.n	8003308 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e8:	4b20      	ldr	r3, [pc, #128]	; (800336c <UART_SetConfig+0x268>)
 80032ea:	61bb      	str	r3, [r7, #24]
        break;
 80032ec:	e00c      	b.n	8003308 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ee:	f7ff fa21 	bl	8002734 <HAL_RCC_GetSysClockFreq>
 80032f2:	61b8      	str	r0, [r7, #24]
        break;
 80032f4:	e008      	b.n	8003308 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032fa:	61bb      	str	r3, [r7, #24]
        break;
 80032fc:	e004      	b.n	8003308 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	77bb      	strb	r3, [r7, #30]
        break;
 8003306:	bf00      	nop
    }

    if (pclk != 0U)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d018      	beq.n	8003340 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	085a      	lsrs	r2, r3, #1
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	441a      	add	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	b29b      	uxth	r3, r3
 8003322:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b0f      	cmp	r3, #15
 8003328:	d908      	bls.n	800333c <UART_SetConfig+0x238>
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003330:	d204      	bcs.n	800333c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	e001      	b.n	8003340 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800334c:	7fbb      	ldrb	r3, [r7, #30]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	efff69f3 	.word	0xefff69f3
 800335c:	40013800 	.word	0x40013800
 8003360:	40021000 	.word	0x40021000
 8003364:	40004400 	.word	0x40004400
 8003368:	40004800 	.word	0x40004800
 800336c:	007a1200 	.word	0x007a1200

08003370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01a      	beq.n	8003486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800346e:	d10a      	bne.n	8003486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	605a      	str	r2, [r3, #4]
  }
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034c4:	f7fc ff2e 	bl	8000324 <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d10e      	bne.n	80034f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f82d 	bl	8003546 <UART_WaitOnFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e023      	b.n	800353e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b04      	cmp	r3, #4
 8003502:	d10e      	bne.n	8003522 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f817 	bl	8003546 <UART_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e00d      	b.n	800353e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b09c      	sub	sp, #112	; 0x70
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	4613      	mov	r3, r2
 8003554:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003556:	e0a5      	b.n	80036a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800355a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355e:	f000 80a1 	beq.w	80036a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7fc fedf 	bl	8000324 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <UART_WaitOnFlagUntilTimeout+0x32>
 8003572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003574:	2b00      	cmp	r3, #0
 8003576:	d13e      	bne.n	80035f6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003580:	e853 3f00 	ldrex	r3, [r3]
 8003584:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003588:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800358c:	667b      	str	r3, [r7, #100]	; 0x64
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003598:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800359c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800359e:	e841 2300 	strex	r3, r2, [r1]
 80035a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80035a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e6      	bne.n	8003578 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3308      	adds	r3, #8
 80035b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b4:	e853 3f00 	ldrex	r3, [r3]
 80035b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	663b      	str	r3, [r7, #96]	; 0x60
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3308      	adds	r3, #8
 80035c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80035cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035d2:	e841 2300 	strex	r3, r2, [r1]
 80035d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1e5      	bne.n	80035aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e067      	b.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d04f      	beq.n	80036a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003612:	d147      	bne.n	80036a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800361c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003632:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363c:	637b      	str	r3, [r7, #52]	; 0x34
 800363e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800364a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e6      	bne.n	800361e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3308      	adds	r3, #8
 8003656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	613b      	str	r3, [r7, #16]
   return(result);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	66bb      	str	r3, [r7, #104]	; 0x68
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3308      	adds	r3, #8
 800366e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003670:	623a      	str	r2, [r7, #32]
 8003672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	69f9      	ldr	r1, [r7, #28]
 8003676:	6a3a      	ldr	r2, [r7, #32]
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	61bb      	str	r3, [r7, #24]
   return(result);
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e5      	bne.n	8003650 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e010      	b.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4013      	ands	r3, r2
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	bf0c      	ite	eq
 80036b4:	2301      	moveq	r3, #1
 80036b6:	2300      	movne	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	429a      	cmp	r2, r3
 80036c0:	f43f af4a 	beq.w	8003558 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3770      	adds	r7, #112	; 0x70
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b091      	sub	sp, #68	; 0x44
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	4613      	mov	r3, r2
 80036dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	88fa      	ldrh	r2, [r7, #6]
 80036e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	88fa      	ldrh	r2, [r7, #6]
 80036f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003702:	d10e      	bne.n	8003722 <UART_Start_Receive_IT+0x52>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d105      	bne.n	8003718 <UART_Start_Receive_IT+0x48>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003712:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003716:	e02d      	b.n	8003774 <UART_Start_Receive_IT+0xa4>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	22ff      	movs	r2, #255	; 0xff
 800371c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003720:	e028      	b.n	8003774 <UART_Start_Receive_IT+0xa4>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10d      	bne.n	8003746 <UART_Start_Receive_IT+0x76>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d104      	bne.n	800373c <UART_Start_Receive_IT+0x6c>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	22ff      	movs	r2, #255	; 0xff
 8003736:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800373a:	e01b      	b.n	8003774 <UART_Start_Receive_IT+0xa4>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	227f      	movs	r2, #127	; 0x7f
 8003740:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003744:	e016      	b.n	8003774 <UART_Start_Receive_IT+0xa4>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800374e:	d10d      	bne.n	800376c <UART_Start_Receive_IT+0x9c>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <UART_Start_Receive_IT+0x92>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	227f      	movs	r2, #127	; 0x7f
 800375c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003760:	e008      	b.n	8003774 <UART_Start_Receive_IT+0xa4>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	223f      	movs	r2, #63	; 0x3f
 8003766:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800376a:	e003      	b.n	8003774 <UART_Start_Receive_IT+0xa4>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2222      	movs	r2, #34	; 0x22
 8003780:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3308      	adds	r3, #8
 8003788:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	e853 3f00 	ldrex	r3, [r3]
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3308      	adds	r3, #8
 80037a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037a2:	637a      	str	r2, [r7, #52]	; 0x34
 80037a4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e5      	bne.n	8003782 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037be:	d107      	bne.n	80037d0 <UART_Start_Receive_IT+0x100>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d103      	bne.n	80037d0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a15      	ldr	r2, [pc, #84]	; (8003820 <UART_Start_Receive_IT+0x150>)
 80037cc:	665a      	str	r2, [r3, #100]	; 0x64
 80037ce:	e002      	b.n	80037d6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a14      	ldr	r2, [pc, #80]	; (8003824 <UART_Start_Receive_IT+0x154>)
 80037d4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	e853 3f00 	ldrex	r3, [r3]
 80037ea:	613b      	str	r3, [r7, #16]
   return(result);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80037f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fc:	623b      	str	r3, [r7, #32]
 80037fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	69f9      	ldr	r1, [r7, #28]
 8003802:	6a3a      	ldr	r2, [r7, #32]
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	61bb      	str	r3, [r7, #24]
   return(result);
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e6      	bne.n	80037de <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3744      	adds	r7, #68	; 0x44
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	08003acb 	.word	0x08003acb
 8003824:	0800396f 	.word	0x0800396f

08003828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003828:	b480      	push	{r7}
 800382a:	b095      	sub	sp, #84	; 0x54
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003844:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384e:	643b      	str	r3, [r7, #64]	; 0x40
 8003850:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003854:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003856:	e841 2300 	strex	r3, r2, [r1]
 800385a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e6      	bne.n	8003830 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3308      	adds	r3, #8
 8003868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	61fb      	str	r3, [r7, #28]
   return(result);
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	64bb      	str	r3, [r7, #72]	; 0x48
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3308      	adds	r3, #8
 8003880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003882:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e5      	bne.n	8003862 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389a:	2b01      	cmp	r3, #1
 800389c:	d118      	bne.n	80038d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f023 0310 	bic.w	r3, r3, #16
 80038b2:	647b      	str	r3, [r7, #68]	; 0x44
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6979      	ldr	r1, [r7, #20]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	613b      	str	r3, [r7, #16]
   return(result);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e6      	bne.n	800389e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80038e2:	bf00      	nop
 80038e4:	3754      	adds	r7, #84	; 0x54
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f7ff fbe3 	bl	80030d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003912:	bf00      	nop
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b088      	sub	sp, #32
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	e853 3f00 	ldrex	r3, [r3]
 800392e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6979      	ldr	r1, [r7, #20]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	613b      	str	r3, [r7, #16]
   return(result);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e6      	bne.n	8003922 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff fbaf 	bl	80030c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003966:	bf00      	nop
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b096      	sub	sp, #88	; 0x58
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800397c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003984:	2b22      	cmp	r3, #34	; 0x22
 8003986:	f040 8094 	bne.w	8003ab2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003990:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003994:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003998:	b2d9      	uxtb	r1, r3
 800399a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	400a      	ands	r2, r1
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d177      	bne.n	8003ac2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039e6:	653b      	str	r3, [r7, #80]	; 0x50
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f0:	647b      	str	r3, [r7, #68]	; 0x44
 80039f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039f8:	e841 2300 	strex	r3, r2, [r1]
 80039fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e6      	bne.n	80039d2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3308      	adds	r3, #8
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	e853 3f00 	ldrex	r3, [r3]
 8003a12:	623b      	str	r3, [r7, #32]
   return(result);
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3308      	adds	r3, #8
 8003a22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a24:	633a      	str	r2, [r7, #48]	; 0x30
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a2c:	e841 2300 	strex	r3, r2, [r1]
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1e5      	bne.n	8003a04 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d12e      	bne.n	8003aaa <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0310 	bic.w	r3, r3, #16
 8003a66:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	69b9      	ldr	r1, [r7, #24]
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e6      	bne.n	8003a52 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d103      	bne.n	8003a9a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2210      	movs	r2, #16
 8003a98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff fb22 	bl	80030ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003aa8:	e00b      	b.n	8003ac2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fcb8 	bl	8004420 <HAL_UART_RxCpltCallback>
}
 8003ab0:	e007      	b.n	8003ac2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699a      	ldr	r2, [r3, #24]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0208 	orr.w	r2, r2, #8
 8003ac0:	619a      	str	r2, [r3, #24]
}
 8003ac2:	bf00      	nop
 8003ac4:	3758      	adds	r7, #88	; 0x58
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b096      	sub	sp, #88	; 0x58
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ad8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae0:	2b22      	cmp	r3, #34	; 0x22
 8003ae2:	f040 8094 	bne.w	8003c0e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003aec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003af6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003afa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003afe:	4013      	ands	r3, r2
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	1c9a      	adds	r2, r3, #2
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d177      	bne.n	8003c1e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b36:	e853 3f00 	ldrex	r3, [r3]
 8003b3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b54:	e841 2300 	strex	r3, r2, [r1]
 8003b58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e6      	bne.n	8003b2e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3308      	adds	r3, #8
 8003b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b88:	e841 2300 	strex	r3, r2, [r1]
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e5      	bne.n	8003b60 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d12e      	bne.n	8003c06 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	e853 3f00 	ldrex	r3, [r3]
 8003bba:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f023 0310 	bic.w	r3, r3, #16
 8003bc2:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd0:	6979      	ldr	r1, [r7, #20]
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	e841 2300 	strex	r3, r2, [r1]
 8003bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e6      	bne.n	8003bae <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d103      	bne.n	8003bf6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2210      	movs	r2, #16
 8003bf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff fa74 	bl	80030ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c04:	e00b      	b.n	8003c1e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fc0a 	bl	8004420 <HAL_UART_RxCpltCallback>
}
 8003c0c:	e007      	b.n	8003c1e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0208 	orr.w	r2, r2, #8
 8003c1c:	619a      	str	r2, [r3, #24]
}
 8003c1e:	bf00      	nop
 8003c20:	3758      	adds	r7, #88	; 0x58
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
	...

08003c3c <encoder_read.8455>:
  TxHeader.IDE = CAN_ID_STD;
  TxHeader.DLC = 0x08;
  TxHeader.TransmitGlobalTime = DISABLE;


  void encoder_read(void){
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	f8c7 c004 	str.w	ip, [r7, #4]
	  control_mode = 0x00A;
 8003c46:	4b19      	ldr	r3, [pc, #100]	; (8003cac <encoder_read.8455+0x70>)
 8003c48:	220a      	movs	r2, #10
 8003c4a:	701a      	strb	r2, [r3, #0]
	  TxHeader.RTR = 2 ;//read data
 8003c4c:	4b18      	ldr	r3, [pc, #96]	; (8003cb0 <encoder_read.8455+0x74>)
 8003c4e:	2202      	movs	r2, #2
 8003c50:	60da      	str	r2, [r3, #12]
	  TxHeader.StdId=(motor_num << 5) + (control_mode);
 8003c52:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <encoder_read.8455+0x78>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	015b      	lsls	r3, r3, #5
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <encoder_read.8455+0x70>)
 8003c5a:	7812      	ldrb	r2, [r2, #0]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	461a      	mov	r2, r3
 8003c60:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <encoder_read.8455+0x74>)
 8003c62:	601a      	str	r2, [r3, #0]

	  TxHeader.DLC = 0x08;
 8003c64:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <encoder_read.8455+0x74>)
 8003c66:	2208      	movs	r2, #8
 8003c68:	611a      	str	r2, [r3, #16]

	  uint8_t TxData[8];
	  TxData[0] = 0x00;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	723b      	strb	r3, [r7, #8]
	  TxData[1] = 0x00;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	727b      	strb	r3, [r7, #9]
	  TxData[2] = 0x00;
 8003c72:	2300      	movs	r3, #0
 8003c74:	72bb      	strb	r3, [r7, #10]
	  TxData[3] = 0x00;
 8003c76:	2300      	movs	r3, #0
 8003c78:	72fb      	strb	r3, [r7, #11]
	  TxData[4] = 0x00;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	733b      	strb	r3, [r7, #12]
	  TxData[5] = 0x00;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	737b      	strb	r3, [r7, #13]
	  TxData[6] = 0x00;
 8003c82:	2300      	movs	r3, #0
 8003c84:	73bb      	strb	r3, [r7, #14]
	  TxData[7] = 0x00;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]

	  if (HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox) != HAL_OK)
 8003c8a:	f107 0208 	add.w	r2, r7, #8
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <encoder_read.8455+0x7c>)
 8003c90:	4907      	ldr	r1, [pc, #28]	; (8003cb0 <encoder_read.8455+0x74>)
 8003c92:	480a      	ldr	r0, [pc, #40]	; (8003cbc <encoder_read.8455+0x80>)
 8003c94:	f7fc fd7f 	bl	8000796 <HAL_CAN_AddTxMessage>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <encoder_read.8455+0x66>
	  {
	     Error_Handler ();
 8003c9e:	f000 fc5f 	bl	8004560 <Error_Handler>
	  }
  }
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000006 	.word	0x20000006
 8003cb0:	200002ac 	.word	0x200002ac
 8003cb4:	20000005 	.word	0x20000005
 8003cb8:	20000224 	.word	0x20000224
 8003cbc:	200000f0 	.word	0x200000f0

08003cc0 <main>:
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
int main(void)
 8003cc6:	f107 0318 	add.w	r3, r7, #24
 8003cca:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8003ccc:	f7fc fad0 	bl	8000270 <HAL_Init>
  SystemClock_Config();
 8003cd0:	f000 fab6 	bl	8004240 <SystemClock_Config>
  MX_GPIO_Init();
 8003cd4:	f000 fb5a 	bl	800438c <MX_GPIO_Init>
  MX_CAN_Init();
 8003cd8:	f000 faf2 	bl	80042c0 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8003cdc:	f000 fb26 	bl	800432c <MX_USART2_UART_Init>
  HAL_UART_Transmit(&huart2,tx_data,sizeof(tx_data),0xFFFF);
 8003ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ce4:	2210      	movs	r2, #16
 8003ce6:	4968      	ldr	r1, [pc, #416]	; (8003e88 <main+0x1c8>)
 8003ce8:	4868      	ldr	r0, [pc, #416]	; (8003e8c <main+0x1cc>)
 8003cea:	f7fe fe2b 	bl	8002944 <HAL_UART_Transmit>
  sFilterConfig.FilterBank = 0;
 8003cee:	4b68      	ldr	r3, [pc, #416]	; (8003e90 <main+0x1d0>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003cf4:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <main+0x1d0>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003cfa:	4b65      	ldr	r3, [pc, #404]	; (8003e90 <main+0x1d0>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8003d00:	4b63      	ldr	r3, [pc, #396]	; (8003e90 <main+0x1d0>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8003d06:	4b62      	ldr	r3, [pc, #392]	; (8003e90 <main+0x1d0>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8003d0c:	4b60      	ldr	r3, [pc, #384]	; (8003e90 <main+0x1d0>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8003d12:	4b5f      	ldr	r3, [pc, #380]	; (8003e90 <main+0x1d0>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003d18:	4b5d      	ldr	r3, [pc, #372]	; (8003e90 <main+0x1d0>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation=ENABLE;
 8003d1e:	4b5c      	ldr	r3, [pc, #368]	; (8003e90 <main+0x1d0>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 8003d24:	4b5a      	ldr	r3, [pc, #360]	; (8003e90 <main+0x1d0>)
 8003d26:	220e      	movs	r2, #14
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_CAN_ConfigFilter(&hcan,&sFilterConfig) != HAL_OK)
 8003d2a:	4959      	ldr	r1, [pc, #356]	; (8003e90 <main+0x1d0>)
 8003d2c:	4859      	ldr	r0, [pc, #356]	; (8003e94 <main+0x1d4>)
 8003d2e:	f7fc fc24 	bl	800057a <HAL_CAN_ConfigFilter>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <main+0x7c>
    Error_Handler();
 8003d38:	f000 fc12 	bl	8004560 <Error_Handler>
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 8003d3c:	4855      	ldr	r0, [pc, #340]	; (8003e94 <main+0x1d4>)
 8003d3e:	f7fc fce6 	bl	800070e <HAL_CAN_Start>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <main+0x8c>
    Error_Handler();
 8003d48:	f000 fc0a 	bl	8004560 <Error_Handler>
  if(HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8003d4c:	2103      	movs	r1, #3
 8003d4e:	4851      	ldr	r0, [pc, #324]	; (8003e94 <main+0x1d4>)
 8003d50:	f7fc ff0e 	bl	8000b70 <HAL_CAN_ActivateNotification>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <main+0x9e>
	Error_Handler();
 8003d5a:	f000 fc01 	bl	8004560 <Error_Handler>
  TxHeader.StdId=(motor_num << 5) + (control_mode);
 8003d5e:	4b4e      	ldr	r3, [pc, #312]	; (8003e98 <main+0x1d8>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	015b      	lsls	r3, r3, #5
 8003d64:	4a4d      	ldr	r2, [pc, #308]	; (8003e9c <main+0x1dc>)
 8003d66:	7812      	ldrb	r2, [r2, #0]
 8003d68:	4413      	add	r3, r2
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b4c      	ldr	r3, [pc, #304]	; (8003ea0 <main+0x1e0>)
 8003d6e:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = 1;//read data
 8003d70:	4b4b      	ldr	r3, [pc, #300]	; (8003ea0 <main+0x1e0>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8003d76:	4b4a      	ldr	r3, [pc, #296]	; (8003ea0 <main+0x1e0>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 0x08;
 8003d7c:	4b48      	ldr	r3, [pc, #288]	; (8003ea0 <main+0x1e0>)
 8003d7e:	2208      	movs	r2, #8
 8003d80:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8003d82:	4b47      	ldr	r3, [pc, #284]	; (8003ea0 <main+0x1e0>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	751a      	strb	r2, [r3, #20]
	  {
	     Error_Handler ();
	  }
  }

  HAL_UART_Receive_IT(&huart2, buffer,1);
 8003d88:	2201      	movs	r2, #1
 8003d8a:	4946      	ldr	r1, [pc, #280]	; (8003ea4 <main+0x1e4>)
 8003d8c:	483f      	ldr	r0, [pc, #252]	; (8003e8c <main+0x1cc>)
 8003d8e:	f7fe fe6d 	bl	8002a6c <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	printf("------mode select---------\r\n");
 8003d92:	4845      	ldr	r0, [pc, #276]	; (8003ea8 <main+0x1e8>)
 8003d94:	f000 fec0 	bl	8004b18 <puts>
	printf("encoder read: 1\r\n");
 8003d98:	4844      	ldr	r0, [pc, #272]	; (8003eac <main+0x1ec>)
 8003d9a:	f000 febd 	bl	8004b18 <puts>
	printf("CLOSED_LOOP : 2\r\n");
 8003d9e:	4844      	ldr	r0, [pc, #272]	; (8003eb0 <main+0x1f0>)
 8003da0:	f000 feba 	bl	8004b18 <puts>
	printf("IDLE        : 3\r\n");
 8003da4:	4843      	ldr	r0, [pc, #268]	; (8003eb4 <main+0x1f4>)
 8003da6:	f000 feb7 	bl	8004b18 <puts>
	printf("pos mode    : 4\r\n");
 8003daa:	4843      	ldr	r0, [pc, #268]	; (8003eb8 <main+0x1f8>)
 8003dac:	f000 feb4 	bl	8004b18 <puts>
	while(gUartReceived==0){
 8003db0:	bf00      	nop
 8003db2:	4b42      	ldr	r3, [pc, #264]	; (8003ebc <main+0x1fc>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0fb      	beq.n	8003db2 <main+0xf2>
	}

	int mode = buffer[0];
 8003dba:	4b3a      	ldr	r3, [pc, #232]	; (8003ea4 <main+0x1e4>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]
	gUartReceived=0;
 8003dc0:	4b3e      	ldr	r3, [pc, #248]	; (8003ebc <main+0x1fc>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3b31      	subs	r3, #49	; 0x31
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d856      	bhi.n	8003e7c <main+0x1bc>
 8003dce:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <main+0x114>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003e0b 	.word	0x08003e0b
 8003ddc:	08003e1d 	.word	0x08003e1d
 8003de0:	08003e2f 	.word	0x08003e2f

	switch(mode){
	case 49:
		printf("encoder reading... 1\r\n");
 8003de4:	4836      	ldr	r0, [pc, #216]	; (8003ec0 <main+0x200>)
 8003de6:	f000 fe97 	bl	8004b18 <puts>
		while(gUartReceived==0){
 8003dea:	e006      	b.n	8003dfa <main+0x13a>
			encoder_read();
 8003dec:	1d3b      	adds	r3, r7, #4
 8003dee:	469c      	mov	ip, r3
 8003df0:	f7ff ff24 	bl	8003c3c <encoder_read.8455>
			HAL_Delay(10);
 8003df4:	200a      	movs	r0, #10
 8003df6:	f7fc faa1 	bl	800033c <HAL_Delay>
		while(gUartReceived==0){
 8003dfa:	4b30      	ldr	r3, [pc, #192]	; (8003ebc <main+0x1fc>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f4      	beq.n	8003dec <main+0x12c>
		}
		gUartReceived=0;
 8003e02:	4b2e      	ldr	r3, [pc, #184]	; (8003ebc <main+0x1fc>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
		break;
 8003e08:	e03c      	b.n	8003e84 <main+0x1c4>


	case 50:
		printf("Closed loop\r\n");
 8003e0a:	482e      	ldr	r0, [pc, #184]	; (8003ec4 <main+0x204>)
 8003e0c:	f000 fe84 	bl	8004b18 <puts>
		axis_state_change(0x08);
 8003e10:	1d3b      	adds	r3, r7, #4
 8003e12:	469c      	mov	ip, r3
 8003e14:	2008      	movs	r0, #8
 8003e16:	f000 f861 	bl	8003edc <axis_state_change.8459>
		break;
 8003e1a:	e033      	b.n	8003e84 <main+0x1c4>

	case 51:
		printf("IDLE\r\n");
 8003e1c:	482a      	ldr	r0, [pc, #168]	; (8003ec8 <main+0x208>)
 8003e1e:	f000 fe7b 	bl	8004b18 <puts>
		axis_state_change(0x01);
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	469c      	mov	ip, r3
 8003e26:	2001      	movs	r0, #1
 8003e28:	f000 f858 	bl	8003edc <axis_state_change.8459>
		break;
 8003e2c:	e02a      	b.n	8003e84 <main+0x1c4>

	case 52:
		printf("pos select : 0 ~ 6\r\n");
 8003e2e:	4827      	ldr	r0, [pc, #156]	; (8003ecc <main+0x20c>)
 8003e30:	f000 fe72 	bl	8004b18 <puts>
		printf("quit : press q  \r\n");
 8003e34:	4826      	ldr	r0, [pc, #152]	; (8003ed0 <main+0x210>)
 8003e36:	f000 fe6f 	bl	8004b18 <puts>
//		set_controll_mode();

		while(1){
			while(gUartReceived==0){
 8003e3a:	bf00      	nop
 8003e3c:	4b1f      	ldr	r3, [pc, #124]	; (8003ebc <main+0x1fc>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0fb      	beq.n	8003e3c <main+0x17c>
//				pos_change(10000);
//				HAL_Delay(10);
			}
			int pos = buffer[0]-'0';
 8003e44:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <main+0x1e4>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	3b30      	subs	r3, #48	; 0x30
 8003e4a:	60bb      	str	r3, [r7, #8]
			printf("pos is : %d\r\n",pos);
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	4821      	ldr	r0, [pc, #132]	; (8003ed4 <main+0x214>)
 8003e50:	f000 fddc 	bl	8004a0c <iprintf>
			gUartReceived=0;
 8003e54:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <main+0x1fc>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]
			if(buffer[0]=='q') break;
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <main+0x1e4>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b71      	cmp	r3, #113	; 0x71
 8003e60:	d00b      	beq.n	8003e7a <main+0x1ba>

			pos_change(pos);
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e6c:	1d3b      	adds	r3, r7, #4
 8003e6e:	469c      	mov	ip, r3
 8003e70:	eeb0 0a67 	vmov.f32	s0, s15
 8003e74:	f000 f98e 	bl	8004194 <pos_change.8503>
		while(1){
 8003e78:	e7df      	b.n	8003e3a <main+0x17a>
			if(buffer[0]=='q') break;
 8003e7a:	bf00      	nop
		}

	default:
		printf("Err: this mode is not found : %d\r\n",mode);
 8003e7c:	68f9      	ldr	r1, [r7, #12]
 8003e7e:	4816      	ldr	r0, [pc, #88]	; (8003ed8 <main+0x218>)
 8003e80:	f000 fdc4 	bl	8004a0c <iprintf>
  {
 8003e84:	e785      	b.n	8003d92 <main+0xd2>
 8003e86:	bf00      	nop
 8003e88:	20000008 	.word	0x20000008
 8003e8c:	20000228 	.word	0x20000228
 8003e90:	200000c4 	.word	0x200000c4
 8003e94:	200000f0 	.word	0x200000f0
 8003e98:	20000005 	.word	0x20000005
 8003e9c:	20000006 	.word	0x20000006
 8003ea0:	200002ac 	.word	0x200002ac
 8003ea4:	2000011c 	.word	0x2000011c
 8003ea8:	08005d60 	.word	0x08005d60
 8003eac:	08005d7c 	.word	0x08005d7c
 8003eb0:	08005d90 	.word	0x08005d90
 8003eb4:	08005da4 	.word	0x08005da4
 8003eb8:	08005db8 	.word	0x08005db8
 8003ebc:	200000a8 	.word	0x200000a8
 8003ec0:	08005dcc 	.word	0x08005dcc
 8003ec4:	08005de4 	.word	0x08005de4
 8003ec8:	08005df4 	.word	0x08005df4
 8003ecc:	08005dfc 	.word	0x08005dfc
 8003ed0:	08005e10 	.word	0x08005e10
 8003ed4:	08005e24 	.word	0x08005e24
 8003ed8:	08005e34 	.word	0x08005e34

08003edc <axis_state_change.8459>:
  void axis_state_change(uint8_t data){
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
 8003ee6:	f8c7 c000 	str.w	ip, [r7]
	  control_mode = 0x007;
 8003eea:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <axis_state_change.8459+0x74>)
 8003eec:	2207      	movs	r2, #7
 8003eee:	701a      	strb	r2, [r3, #0]
	  TxHeader.StdId=(motor_num << 5) + (control_mode);
 8003ef0:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <axis_state_change.8459+0x78>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	015b      	lsls	r3, r3, #5
 8003ef6:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <axis_state_change.8459+0x74>)
 8003ef8:	7812      	ldrb	r2, [r2, #0]
 8003efa:	4413      	add	r3, r2
 8003efc:	461a      	mov	r2, r3
 8003efe:	4b16      	ldr	r3, [pc, #88]	; (8003f58 <axis_state_change.8459+0x7c>)
 8003f00:	601a      	str	r2, [r3, #0]
	  TxHeader.RTR = 0;//read data
 8003f02:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <axis_state_change.8459+0x7c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	60da      	str	r2, [r3, #12]
	  TxHeader.DLC = 0x04;
 8003f08:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <axis_state_change.8459+0x7c>)
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	611a      	str	r2, [r3, #16]
	  TxData[0] = data;
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	723b      	strb	r3, [r7, #8]
	  TxData[1] = 0x00;
 8003f12:	2300      	movs	r3, #0
 8003f14:	727b      	strb	r3, [r7, #9]
	  TxData[2] = 0x00;
 8003f16:	2300      	movs	r3, #0
 8003f18:	72bb      	strb	r3, [r7, #10]
	  TxData[3] = 0x00;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	72fb      	strb	r3, [r7, #11]
	  TxData[4] = 0x00;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	733b      	strb	r3, [r7, #12]
	  TxData[5] = 0x00;
 8003f22:	2300      	movs	r3, #0
 8003f24:	737b      	strb	r3, [r7, #13]
	  TxData[6] = 0x00;
 8003f26:	2300      	movs	r3, #0
 8003f28:	73bb      	strb	r3, [r7, #14]
	  TxData[7] = 0x00;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73fb      	strb	r3, [r7, #15]
	  if (HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox) != HAL_OK)
 8003f2e:	f107 0208 	add.w	r2, r7, #8
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <axis_state_change.8459+0x80>)
 8003f34:	4908      	ldr	r1, [pc, #32]	; (8003f58 <axis_state_change.8459+0x7c>)
 8003f36:	480a      	ldr	r0, [pc, #40]	; (8003f60 <axis_state_change.8459+0x84>)
 8003f38:	f7fc fc2d 	bl	8000796 <HAL_CAN_AddTxMessage>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <axis_state_change.8459+0x6a>
	     Error_Handler ();
 8003f42:	f000 fb0d 	bl	8004560 <Error_Handler>
  }
 8003f46:	bf00      	nop
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000006 	.word	0x20000006
 8003f54:	20000005 	.word	0x20000005
 8003f58:	200002ac 	.word	0x200002ac
 8003f5c:	20000224 	.word	0x20000224
 8003f60:	200000f0 	.word	0x200000f0

08003f64 <ctoi.8472>:
  int ctoi(char c) {
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	71fb      	strb	r3, [r7, #7]
 8003f6e:	f8c7 c000 	str.w	ip, [r7]
  	switch (c) {
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	3b30      	subs	r3, #48	; 0x30
 8003f76:	2b36      	cmp	r3, #54	; 0x36
 8003f78:	f200 8092 	bhi.w	80040a0 <ctoi.8472+0x13c>
 8003f7c:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <ctoi.8472+0x20>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08004061 	.word	0x08004061
 8003f88:	08004065 	.word	0x08004065
 8003f8c:	08004069 	.word	0x08004069
 8003f90:	0800406d 	.word	0x0800406d
 8003f94:	08004071 	.word	0x08004071
 8003f98:	08004075 	.word	0x08004075
 8003f9c:	08004079 	.word	0x08004079
 8003fa0:	0800407d 	.word	0x0800407d
 8003fa4:	08004081 	.word	0x08004081
 8003fa8:	08004085 	.word	0x08004085
 8003fac:	080040a1 	.word	0x080040a1
 8003fb0:	080040a1 	.word	0x080040a1
 8003fb4:	080040a1 	.word	0x080040a1
 8003fb8:	080040a1 	.word	0x080040a1
 8003fbc:	080040a1 	.word	0x080040a1
 8003fc0:	080040a1 	.word	0x080040a1
 8003fc4:	080040a1 	.word	0x080040a1
 8003fc8:	080040a1 	.word	0x080040a1
 8003fcc:	080040a1 	.word	0x080040a1
 8003fd0:	080040a1 	.word	0x080040a1
 8003fd4:	080040a1 	.word	0x080040a1
 8003fd8:	080040a1 	.word	0x080040a1
 8003fdc:	080040a1 	.word	0x080040a1
 8003fe0:	080040a1 	.word	0x080040a1
 8003fe4:	080040a1 	.word	0x080040a1
 8003fe8:	080040a1 	.word	0x080040a1
 8003fec:	080040a1 	.word	0x080040a1
 8003ff0:	080040a1 	.word	0x080040a1
 8003ff4:	080040a1 	.word	0x080040a1
 8003ff8:	080040a1 	.word	0x080040a1
 8003ffc:	080040a1 	.word	0x080040a1
 8004000:	080040a1 	.word	0x080040a1
 8004004:	080040a1 	.word	0x080040a1
 8004008:	080040a1 	.word	0x080040a1
 800400c:	080040a1 	.word	0x080040a1
 8004010:	080040a1 	.word	0x080040a1
 8004014:	080040a1 	.word	0x080040a1
 8004018:	080040a1 	.word	0x080040a1
 800401c:	080040a1 	.word	0x080040a1
 8004020:	080040a1 	.word	0x080040a1
 8004024:	080040a1 	.word	0x080040a1
 8004028:	080040a1 	.word	0x080040a1
 800402c:	080040a1 	.word	0x080040a1
 8004030:	080040a1 	.word	0x080040a1
 8004034:	080040a1 	.word	0x080040a1
 8004038:	080040a1 	.word	0x080040a1
 800403c:	080040a1 	.word	0x080040a1
 8004040:	080040a1 	.word	0x080040a1
 8004044:	080040a1 	.word	0x080040a1
 8004048:	08004089 	.word	0x08004089
 800404c:	0800408d 	.word	0x0800408d
 8004050:	08004091 	.word	0x08004091
 8004054:	08004095 	.word	0x08004095
 8004058:	08004099 	.word	0x08004099
 800405c:	0800409d 	.word	0x0800409d
  		case '0': return 0;
 8004060:	2300      	movs	r3, #0
 8004062:	e01e      	b.n	80040a2 <ctoi.8472+0x13e>
  		case '1': return 1;
 8004064:	2301      	movs	r3, #1
 8004066:	e01c      	b.n	80040a2 <ctoi.8472+0x13e>
  		case '2': return 2;
 8004068:	2302      	movs	r3, #2
 800406a:	e01a      	b.n	80040a2 <ctoi.8472+0x13e>
  		case '3': return 3;
 800406c:	2303      	movs	r3, #3
 800406e:	e018      	b.n	80040a2 <ctoi.8472+0x13e>
  		case '4': return 4;
 8004070:	2304      	movs	r3, #4
 8004072:	e016      	b.n	80040a2 <ctoi.8472+0x13e>
  		case '5': return 5;
 8004074:	2305      	movs	r3, #5
 8004076:	e014      	b.n	80040a2 <ctoi.8472+0x13e>
  		case '6': return 6;
 8004078:	2306      	movs	r3, #6
 800407a:	e012      	b.n	80040a2 <ctoi.8472+0x13e>
  		case '7': return 7;
 800407c:	2307      	movs	r3, #7
 800407e:	e010      	b.n	80040a2 <ctoi.8472+0x13e>
  		case '8': return 8;
 8004080:	2308      	movs	r3, #8
 8004082:	e00e      	b.n	80040a2 <ctoi.8472+0x13e>
  		case '9': return 9;
 8004084:	2309      	movs	r3, #9
 8004086:	e00c      	b.n	80040a2 <ctoi.8472+0x13e>
  		case 'a': return 0xf;
 8004088:	230f      	movs	r3, #15
 800408a:	e00a      	b.n	80040a2 <ctoi.8472+0x13e>
  		case 'b': return 0xb;
 800408c:	230b      	movs	r3, #11
 800408e:	e008      	b.n	80040a2 <ctoi.8472+0x13e>
  		case 'c': return 0xc;
 8004090:	230c      	movs	r3, #12
 8004092:	e006      	b.n	80040a2 <ctoi.8472+0x13e>
  		case 'd': return 0xd;
 8004094:	230d      	movs	r3, #13
 8004096:	e004      	b.n	80040a2 <ctoi.8472+0x13e>
  		case 'e': return 0xe;
 8004098:	230e      	movs	r3, #14
 800409a:	e002      	b.n	80040a2 <ctoi.8472+0x13e>
  		case 'f': return 0xf;
 800409c:	230f      	movs	r3, #15
 800409e:	e000      	b.n	80040a2 <ctoi.8472+0x13e>
  		default: return 0;
 80040a0:	2300      	movs	r3, #0
  }
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop

080040b0 <ftox.8492>:
  int ftox(float angle){
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	b08d      	sub	sp, #52	; 0x34
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80040ba:	4664      	mov	r4, ip
 80040bc:	f8c7 c000 	str.w	ip, [r7]
	  a.x = angle;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
	  sprintf(test,"0x%08x\n", a.i);
 80040c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c6:	f107 0308 	add.w	r3, r7, #8
 80040ca:	492f      	ldr	r1, [pc, #188]	; (8004188 <ftox.8492+0xd8>)
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fd2b 	bl	8004b28 <siprintf>
	  printf("test %s\r\n",test);
 80040d2:	f107 0308 	add.w	r3, r7, #8
 80040d6:	4619      	mov	r1, r3
 80040d8:	482c      	ldr	r0, [pc, #176]	; (800418c <ftox.8492+0xdc>)
 80040da:	f000 fc97 	bl	8004a0c <iprintf>
	  int data =0;
 80040de:	2300      	movs	r3, #0
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  data=test[9]-'0';
 80040e2:	7c7b      	ldrb	r3, [r7, #17]
 80040e4:	3b30      	subs	r3, #48	; 0x30
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  data+=ctoi(test[8])<<4;
 80040e8:	7c3b      	ldrb	r3, [r7, #16]
 80040ea:	46a4      	mov	ip, r4
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff39 	bl	8003f64 <ctoi.8472>
 80040f2:	4603      	mov	r3, r0
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f8:	4413      	add	r3, r2
 80040fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  data+=ctoi(test[7])<<8;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	46a4      	mov	ip, r4
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ff2f 	bl	8003f64 <ctoi.8472>
 8004106:	4603      	mov	r3, r0
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800410c:	4413      	add	r3, r2
 800410e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  data+=ctoi(test[6])<<12;
 8004110:	7bbb      	ldrb	r3, [r7, #14]
 8004112:	46a4      	mov	ip, r4
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff ff25 	bl	8003f64 <ctoi.8472>
 800411a:	4603      	mov	r3, r0
 800411c:	031b      	lsls	r3, r3, #12
 800411e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004120:	4413      	add	r3, r2
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
	  data+=ctoi(test[5])<<16;
 8004124:	7b7b      	ldrb	r3, [r7, #13]
 8004126:	46a4      	mov	ip, r4
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff ff1b 	bl	8003f64 <ctoi.8472>
 800412e:	4603      	mov	r3, r0
 8004130:	041b      	lsls	r3, r3, #16
 8004132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004134:	4413      	add	r3, r2
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
	  data+=ctoi(test[4])<<20;
 8004138:	7b3b      	ldrb	r3, [r7, #12]
 800413a:	46a4      	mov	ip, r4
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff ff11 	bl	8003f64 <ctoi.8472>
 8004142:	4603      	mov	r3, r0
 8004144:	051b      	lsls	r3, r3, #20
 8004146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004148:	4413      	add	r3, r2
 800414a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  data+=ctoi(test[3])<<24;
 800414c:	7afb      	ldrb	r3, [r7, #11]
 800414e:	46a4      	mov	ip, r4
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff ff07 	bl	8003f64 <ctoi.8472>
 8004156:	4603      	mov	r3, r0
 8004158:	061b      	lsls	r3, r3, #24
 800415a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800415c:	4413      	add	r3, r2
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  data+=ctoi(test[2])<<28;
 8004160:	7abb      	ldrb	r3, [r7, #10]
 8004162:	46a4      	mov	ip, r4
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff fefd 	bl	8003f64 <ctoi.8472>
 800416a:	4603      	mov	r3, r0
 800416c:	071b      	lsls	r3, r3, #28
 800416e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004170:	4413      	add	r3, r2
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
	  printf("data %08x\r\n",data);
 8004174:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004176:	4806      	ldr	r0, [pc, #24]	; (8004190 <ftox.8492+0xe0>)
 8004178:	f000 fc48 	bl	8004a0c <iprintf>
	  return data;
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  }
 800417e:	4618      	mov	r0, r3
 8004180:	3734      	adds	r7, #52	; 0x34
 8004182:	46bd      	mov	sp, r7
 8004184:	bd90      	pop	{r4, r7, pc}
 8004186:	bf00      	nop
 8004188:	08005e58 	.word	0x08005e58
 800418c:	08005e60 	.word	0x08005e60
 8004190:	08005e6c 	.word	0x08005e6c

08004194 <pos_change.8503>:
  void pos_change(float data){
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	ed87 0a01 	vstr	s0, [r7, #4]
 800419e:	4662      	mov	r2, ip
 80041a0:	f8c7 c000 	str.w	ip, [r7]
	  control_mode = 0x00C;
 80041a4:	4b21      	ldr	r3, [pc, #132]	; (800422c <pos_change.8503+0x98>)
 80041a6:	210c      	movs	r1, #12
 80041a8:	7019      	strb	r1, [r3, #0]
	  TxHeader.StdId=(motor_num << 5) + (control_mode);
 80041aa:	4b21      	ldr	r3, [pc, #132]	; (8004230 <pos_change.8503+0x9c>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	015b      	lsls	r3, r3, #5
 80041b0:	491e      	ldr	r1, [pc, #120]	; (800422c <pos_change.8503+0x98>)
 80041b2:	7809      	ldrb	r1, [r1, #0]
 80041b4:	440b      	add	r3, r1
 80041b6:	4619      	mov	r1, r3
 80041b8:	4b1e      	ldr	r3, [pc, #120]	; (8004234 <pos_change.8503+0xa0>)
 80041ba:	6019      	str	r1, [r3, #0]
	  TxHeader.RTR = 0;//read data
 80041bc:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <pos_change.8503+0xa0>)
 80041be:	2100      	movs	r1, #0
 80041c0:	60d9      	str	r1, [r3, #12]
	  TxHeader.DLC = 0x08;
 80041c2:	4b1c      	ldr	r3, [pc, #112]	; (8004234 <pos_change.8503+0xa0>)
 80041c4:	2108      	movs	r1, #8
 80041c6:	6119      	str	r1, [r3, #16]
	  int set_pos = ftox(data);
 80041c8:	4694      	mov	ip, r2
 80041ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80041ce:	f7ff ff6f 	bl	80040b0 <ftox.8492>
 80041d2:	6178      	str	r0, [r7, #20]
	  uint8_t TxData[8] = {0};
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	2300      	movs	r3, #0
 80041da:	613b      	str	r3, [r7, #16]
	  TxData[0] = set_pos & 0xFF;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	733b      	strb	r3, [r7, #12]
	  TxData[1] = (set_pos>>8)&0xFF ;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	121b      	asrs	r3, r3, #8
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	737b      	strb	r3, [r7, #13]
	  TxData[2] = (set_pos>>16)&0xFF;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	141b      	asrs	r3, r3, #16
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	73bb      	strb	r3, [r7, #14]
	  TxData[3] = (set_pos>>24)&0xFF;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	0e1b      	lsrs	r3, r3, #24
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	73fb      	strb	r3, [r7, #15]
	  TxData[4] = 0xFF;
 80041fa:	23ff      	movs	r3, #255	; 0xff
 80041fc:	743b      	strb	r3, [r7, #16]
	  TxData[5] = 0xFF;
 80041fe:	23ff      	movs	r3, #255	; 0xff
 8004200:	747b      	strb	r3, [r7, #17]
	  TxData[6] = 0xFF;
 8004202:	23ff      	movs	r3, #255	; 0xff
 8004204:	74bb      	strb	r3, [r7, #18]
	  TxData[7] = 0xFF;
 8004206:	23ff      	movs	r3, #255	; 0xff
 8004208:	74fb      	strb	r3, [r7, #19]
	  if (HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox) != HAL_OK)
 800420a:	f107 020c 	add.w	r2, r7, #12
 800420e:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <pos_change.8503+0xa4>)
 8004210:	4908      	ldr	r1, [pc, #32]	; (8004234 <pos_change.8503+0xa0>)
 8004212:	480a      	ldr	r0, [pc, #40]	; (800423c <pos_change.8503+0xa8>)
 8004214:	f7fc fabf 	bl	8000796 <HAL_CAN_AddTxMessage>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <pos_change.8503+0x8e>
	     Error_Handler ();
 800421e:	f000 f99f 	bl	8004560 <Error_Handler>
  }
 8004222:	bf00      	nop
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000006 	.word	0x20000006
 8004230:	20000005 	.word	0x20000005
 8004234:	200002ac 	.word	0x200002ac
 8004238:	20000224 	.word	0x20000224
 800423c:	200000f0 	.word	0x200000f0

08004240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b090      	sub	sp, #64	; 0x40
 8004244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004246:	f107 0318 	add.w	r3, r7, #24
 800424a:	2228      	movs	r2, #40	; 0x28
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fbd4 	bl	80049fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004254:	1d3b      	adds	r3, r7, #4
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	605a      	str	r2, [r3, #4]
 800425c:	609a      	str	r2, [r3, #8]
 800425e:	60da      	str	r2, [r3, #12]
 8004260:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004262:	2302      	movs	r3, #2
 8004264:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004266:	2301      	movs	r3, #1
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800426a:	2310      	movs	r3, #16
 800426c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800426e:	2302      	movs	r3, #2
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004272:	2300      	movs	r3, #0
 8004274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004276:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800427a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800427c:	f107 0318 	add.w	r3, r7, #24
 8004280:	4618      	mov	r0, r3
 8004282:	f7fd f9d3 	bl	800162c <HAL_RCC_OscConfig>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800428c:	f000 f968 	bl	8004560 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004290:	230f      	movs	r3, #15
 8004292:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004294:	2302      	movs	r3, #2
 8004296:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80042a4:	1d3b      	adds	r3, r7, #4
 80042a6:	2101      	movs	r1, #1
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fe f8c7 	bl	800243c <HAL_RCC_ClockConfig>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80042b4:	f000 f954 	bl	8004560 <Error_Handler>
  }
}
 80042b8:	bf00      	nop
 80042ba:	3740      	adds	r7, #64	; 0x40
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80042c4:	4b17      	ldr	r3, [pc, #92]	; (8004324 <MX_CAN_Init+0x64>)
 80042c6:	4a18      	ldr	r2, [pc, #96]	; (8004328 <MX_CAN_Init+0x68>)
 80042c8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 80042ca:	4b16      	ldr	r3, [pc, #88]	; (8004324 <MX_CAN_Init+0x64>)
 80042cc:	2206      	movs	r2, #6
 80042ce:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <MX_CAN_Init+0x64>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80042d6:	4b13      	ldr	r3, [pc, #76]	; (8004324 <MX_CAN_Init+0x64>)
 80042d8:	2200      	movs	r2, #0
 80042da:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 80042dc:	4b11      	ldr	r3, [pc, #68]	; (8004324 <MX_CAN_Init+0x64>)
 80042de:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80042e2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80042e4:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <MX_CAN_Init+0x64>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <MX_CAN_Init+0x64>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80042f0:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <MX_CAN_Init+0x64>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80042f6:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <MX_CAN_Init+0x64>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80042fc:	4b09      	ldr	r3, [pc, #36]	; (8004324 <MX_CAN_Init+0x64>)
 80042fe:	2200      	movs	r2, #0
 8004300:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8004302:	4b08      	ldr	r3, [pc, #32]	; (8004324 <MX_CAN_Init+0x64>)
 8004304:	2200      	movs	r2, #0
 8004306:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8004308:	4b06      	ldr	r3, [pc, #24]	; (8004324 <MX_CAN_Init+0x64>)
 800430a:	2200      	movs	r2, #0
 800430c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800430e:	4805      	ldr	r0, [pc, #20]	; (8004324 <MX_CAN_Init+0x64>)
 8004310:	f7fc f838 	bl	8000384 <HAL_CAN_Init>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800431a:	f000 f921 	bl	8004560 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800431e:	bf00      	nop
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	200000f0 	.word	0x200000f0
 8004328:	40006400 	.word	0x40006400

0800432c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004330:	4b14      	ldr	r3, [pc, #80]	; (8004384 <MX_USART2_UART_Init+0x58>)
 8004332:	4a15      	ldr	r2, [pc, #84]	; (8004388 <MX_USART2_UART_Init+0x5c>)
 8004334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004336:	4b13      	ldr	r3, [pc, #76]	; (8004384 <MX_USART2_UART_Init+0x58>)
 8004338:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800433c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <MX_USART2_UART_Init+0x58>)
 8004340:	2200      	movs	r2, #0
 8004342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <MX_USART2_UART_Init+0x58>)
 8004346:	2200      	movs	r2, #0
 8004348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800434a:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <MX_USART2_UART_Init+0x58>)
 800434c:	2200      	movs	r2, #0
 800434e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <MX_USART2_UART_Init+0x58>)
 8004352:	220c      	movs	r2, #12
 8004354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004356:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <MX_USART2_UART_Init+0x58>)
 8004358:	2200      	movs	r2, #0
 800435a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800435c:	4b09      	ldr	r3, [pc, #36]	; (8004384 <MX_USART2_UART_Init+0x58>)
 800435e:	2200      	movs	r2, #0
 8004360:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004362:	4b08      	ldr	r3, [pc, #32]	; (8004384 <MX_USART2_UART_Init+0x58>)
 8004364:	2200      	movs	r2, #0
 8004366:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <MX_USART2_UART_Init+0x58>)
 800436a:	2200      	movs	r2, #0
 800436c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800436e:	4805      	ldr	r0, [pc, #20]	; (8004384 <MX_USART2_UART_Init+0x58>)
 8004370:	f7fe fa9a 	bl	80028a8 <HAL_UART_Init>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800437a:	f000 f8f1 	bl	8004560 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800437e:	bf00      	nop
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000228 	.word	0x20000228
 8004388:	40004400 	.word	0x40004400

0800438c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004392:	f107 030c 	add.w	r3, r7, #12
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	605a      	str	r2, [r3, #4]
 800439c:	609a      	str	r2, [r3, #8]
 800439e:	60da      	str	r2, [r3, #12]
 80043a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043a2:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <MX_GPIO_Init+0x8c>)
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	4a1c      	ldr	r2, [pc, #112]	; (8004418 <MX_GPIO_Init+0x8c>)
 80043a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043ac:	6153      	str	r3, [r2, #20]
 80043ae:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <MX_GPIO_Init+0x8c>)
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b6:	60bb      	str	r3, [r7, #8]
 80043b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ba:	4b17      	ldr	r3, [pc, #92]	; (8004418 <MX_GPIO_Init+0x8c>)
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	4a16      	ldr	r2, [pc, #88]	; (8004418 <MX_GPIO_Init+0x8c>)
 80043c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c4:	6153      	str	r3, [r2, #20]
 80043c6:	4b14      	ldr	r3, [pc, #80]	; (8004418 <MX_GPIO_Init+0x8c>)
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <MX_GPIO_Init+0x8c>)
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	4a10      	ldr	r2, [pc, #64]	; (8004418 <MX_GPIO_Init+0x8c>)
 80043d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043dc:	6153      	str	r3, [r2, #20]
 80043de:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <MX_GPIO_Init+0x8c>)
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80043ea:	2200      	movs	r2, #0
 80043ec:	2108      	movs	r1, #8
 80043ee:	480b      	ldr	r0, [pc, #44]	; (800441c <MX_GPIO_Init+0x90>)
 80043f0:	f7fd f904 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80043f4:	2308      	movs	r3, #8
 80043f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043f8:	2301      	movs	r3, #1
 80043fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004400:	2300      	movs	r3, #0
 8004402:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8004404:	f107 030c 	add.w	r3, r7, #12
 8004408:	4619      	mov	r1, r3
 800440a:	4804      	ldr	r0, [pc, #16]	; (800441c <MX_GPIO_Init+0x90>)
 800440c:	f7fc ff84 	bl	8001318 <HAL_GPIO_Init>

}
 8004410:	bf00      	nop
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	48000400 	.word	0x48000400

08004420 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
	gUartReceived = 1;
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_UART_RxCpltCallback+0x20>)
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, buffer,1);
 800442e:	2201      	movs	r2, #1
 8004430:	4904      	ldr	r1, [pc, #16]	; (8004444 <HAL_UART_RxCpltCallback+0x24>)
 8004432:	4805      	ldr	r0, [pc, #20]	; (8004448 <HAL_UART_RxCpltCallback+0x28>)
 8004434:	f7fe fb1a 	bl	8002a6c <HAL_UART_Receive_IT>
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	200000a8 	.word	0x200000a8
 8004444:	2000011c 	.word	0x2000011c
 8004448:	20000228 	.word	0x20000228

0800444c <_write>:

int _write(int file, char *ptr, int len)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,50);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	b29a      	uxth	r2, r3
 800445c:	2332      	movs	r3, #50	; 0x32
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	4803      	ldr	r0, [pc, #12]	; (8004470 <_write+0x24>)
 8004462:	f7fe fa6f 	bl	8002944 <HAL_UART_Transmit>
  return len;
 8004466:	687b      	ldr	r3, [r7, #4]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000228 	.word	0x20000228

08004474 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
	canTxHandler = 1;
 800447c:	4b07      	ldr	r3, [pc, #28]	; (800449c <HAL_CAN_TxMailbox0CompleteCallback+0x28>)
 800447e:	2201      	movs	r2, #1
 8004480:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
 8004482:	2201      	movs	r2, #1
 8004484:	2108      	movs	r1, #8
 8004486:	4806      	ldr	r0, [pc, #24]	; (80044a0 <HAL_CAN_TxMailbox0CompleteCallback+0x2c>)
 8004488:	f7fd f8b8 	bl	80015fc <HAL_GPIO_WritePin>
	printf("tx done \r\n");
 800448c:	4805      	ldr	r0, [pc, #20]	; (80044a4 <HAL_CAN_TxMailbox0CompleteCallback+0x30>)
 800448e:	f000 fb43 	bl	8004b18 <puts>
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	200000b0 	.word	0x200000b0
 80044a0:	48000400 	.word	0x48000400
 80044a4:	08005e78 	.word	0x08005e78

080044a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08a      	sub	sp, #40	; 0x28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef RxHeader;
  canReceived = 1;
 80044b0:	4b24      	ldr	r3, [pc, #144]	; (8004544 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80044b6:	f107 020c 	add.w	r2, r7, #12
 80044ba:	4b23      	ldr	r3, [pc, #140]	; (8004548 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80044bc:	2100      	movs	r1, #0
 80044be:	4823      	ldr	r0, [pc, #140]	; (800454c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80044c0:	f7fc fa44 	bl	800094c <HAL_CAN_GetRxMessage>
  if (RxData[0]!=0){
 80044c4:	4b20      	ldr	r3, [pc, #128]	; (8004548 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d022      	beq.n	8004512 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
	enc_data=RxData[4] & 0xFF;
 80044cc:	4b1e      	ldr	r3, [pc, #120]	; (8004548 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80044ce:	791b      	ldrb	r3, [r3, #4]
 80044d0:	461a      	mov	r2, r3
 80044d2:	4b1f      	ldr	r3, [pc, #124]	; (8004550 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80044d4:	601a      	str	r2, [r3, #0]
	enc_data+=(RxData[5] & 0xFF) <<8;
 80044d6:	4b1c      	ldr	r3, [pc, #112]	; (8004548 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80044d8:	795b      	ldrb	r3, [r3, #5]
 80044da:	021a      	lsls	r2, r3, #8
 80044dc:	4b1c      	ldr	r3, [pc, #112]	; (8004550 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4413      	add	r3, r2
 80044e2:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80044e4:	6013      	str	r3, [r2, #0]
	enc_data+=(RxData[6] & 0xFF)<<16;
 80044e6:	4b18      	ldr	r3, [pc, #96]	; (8004548 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80044e8:	799b      	ldrb	r3, [r3, #6]
 80044ea:	041a      	lsls	r2, r3, #16
 80044ec:	4b18      	ldr	r3, [pc, #96]	; (8004550 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4413      	add	r3, r2
 80044f2:	4a17      	ldr	r2, [pc, #92]	; (8004550 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80044f4:	6013      	str	r3, [r2, #0]
	enc_data+=(RxData[7] & 0xFF)<<24;
 80044f6:	4b14      	ldr	r3, [pc, #80]	; (8004548 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80044f8:	79db      	ldrb	r3, [r3, #7]
 80044fa:	061a      	lsls	r2, r3, #24
 80044fc:	4b14      	ldr	r3, [pc, #80]	; (8004550 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4413      	add	r3, r2
 8004502:	4a13      	ldr	r2, [pc, #76]	; (8004550 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8004504:	6013      	str	r3, [r2, #0]
	printf("enc_data : %d\r\n",enc_data);
 8004506:	4b12      	ldr	r3, [pc, #72]	; (8004550 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4619      	mov	r1, r3
 800450c:	4811      	ldr	r0, [pc, #68]	; (8004554 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800450e:	f000 fa7d 	bl	8004a0c <iprintf>
//  {
//	Error_Handler();
//  }


  flag *= -1;
 8004512:	4b11      	ldr	r3, [pc, #68]	; (8004558 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	425b      	negs	r3, r3
 8004518:	4a0f      	ldr	r2, [pc, #60]	; (8004558 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800451a:	6013      	str	r3, [r2, #0]
  if(flag >0){
 800451c:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	dd05      	ble.n	8004530 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
 8004524:	2201      	movs	r2, #1
 8004526:	2108      	movs	r1, #8
 8004528:	480c      	ldr	r0, [pc, #48]	; (800455c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800452a:	f7fd f867 	bl	80015fc <HAL_GPIO_WritePin>
  }else{
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
  }

}
 800452e:	e004      	b.n	800453a <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
 8004530:	2200      	movs	r2, #0
 8004532:	2108      	movs	r1, #8
 8004534:	4809      	ldr	r0, [pc, #36]	; (800455c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8004536:	f7fd f861 	bl	80015fc <HAL_GPIO_WritePin>
}
 800453a:	bf00      	nop
 800453c:	3728      	adds	r7, #40	; 0x28
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	200000ac 	.word	0x200000ac
 8004548:	200000a0 	.word	0x200000a0
 800454c:	200000f0 	.word	0x200000f0
 8004550:	200000ec 	.word	0x200000ec
 8004554:	08005e84 	.word	0x08005e84
 8004558:	20000018 	.word	0x20000018
 800455c:	48000400 	.word	0x48000400

08004560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004564:	b672      	cpsid	i
}
 8004566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	  while (1)
	  {
		  HAL_UART_Transmit(&huart2,tx_data,sizeof(tx_data),0xFFFF);
 8004568:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800456c:	2210      	movs	r2, #16
 800456e:	4902      	ldr	r1, [pc, #8]	; (8004578 <Error_Handler+0x18>)
 8004570:	4802      	ldr	r0, [pc, #8]	; (800457c <Error_Handler+0x1c>)
 8004572:	f7fe f9e7 	bl	8002944 <HAL_UART_Transmit>
 8004576:	e7f7      	b.n	8004568 <Error_Handler+0x8>
 8004578:	20000008 	.word	0x20000008
 800457c:	20000228 	.word	0x20000228

08004580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004586:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <HAL_MspInit+0x44>)
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	4a0e      	ldr	r2, [pc, #56]	; (80045c4 <HAL_MspInit+0x44>)
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	6193      	str	r3, [r2, #24]
 8004592:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <HAL_MspInit+0x44>)
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	607b      	str	r3, [r7, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800459e:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_MspInit+0x44>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	4a08      	ldr	r2, [pc, #32]	; (80045c4 <HAL_MspInit+0x44>)
 80045a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a8:	61d3      	str	r3, [r2, #28]
 80045aa:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_MspInit+0x44>)
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000

080045c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	; 0x28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d0:	f107 0314 	add.w	r3, r7, #20
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	605a      	str	r2, [r3, #4]
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a29      	ldr	r2, [pc, #164]	; (800468c <HAL_CAN_MspInit+0xc4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d14b      	bne.n	8004682 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80045ea:	4b29      	ldr	r3, [pc, #164]	; (8004690 <HAL_CAN_MspInit+0xc8>)
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	4a28      	ldr	r2, [pc, #160]	; (8004690 <HAL_CAN_MspInit+0xc8>)
 80045f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045f4:	61d3      	str	r3, [r2, #28]
 80045f6:	4b26      	ldr	r3, [pc, #152]	; (8004690 <HAL_CAN_MspInit+0xc8>)
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004602:	4b23      	ldr	r3, [pc, #140]	; (8004690 <HAL_CAN_MspInit+0xc8>)
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	4a22      	ldr	r2, [pc, #136]	; (8004690 <HAL_CAN_MspInit+0xc8>)
 8004608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460c:	6153      	str	r3, [r2, #20]
 800460e:	4b20      	ldr	r3, [pc, #128]	; (8004690 <HAL_CAN_MspInit+0xc8>)
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800461a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800461e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004620:	2302      	movs	r3, #2
 8004622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004624:	2300      	movs	r3, #0
 8004626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004628:	2303      	movs	r3, #3
 800462a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800462c:	2309      	movs	r3, #9
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004630:	f107 0314 	add.w	r3, r7, #20
 8004634:	4619      	mov	r1, r3
 8004636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800463a:	f7fc fe6d 	bl	8001318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800463e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004644:	2302      	movs	r3, #2
 8004646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004648:	2301      	movs	r3, #1
 800464a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800464c:	2303      	movs	r3, #3
 800464e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8004650:	2309      	movs	r3, #9
 8004652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004654:	f107 0314 	add.w	r3, r7, #20
 8004658:	4619      	mov	r1, r3
 800465a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800465e:	f7fc fe5b 	bl	8001318 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8004662:	2200      	movs	r2, #0
 8004664:	2100      	movs	r1, #0
 8004666:	2013      	movs	r0, #19
 8004668:	f7fc fda9 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 800466c:	2013      	movs	r0, #19
 800466e:	f7fc fdc2 	bl	80011f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8004672:	2200      	movs	r2, #0
 8004674:	2100      	movs	r1, #0
 8004676:	2014      	movs	r0, #20
 8004678:	f7fc fda1 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 800467c:	2014      	movs	r0, #20
 800467e:	f7fc fdba 	bl	80011f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8004682:	bf00      	nop
 8004684:	3728      	adds	r7, #40	; 0x28
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40006400 	.word	0x40006400
 8004690:	40021000 	.word	0x40021000

08004694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	; 0x28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800469c:	f107 0314 	add.w	r3, r7, #20
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	609a      	str	r2, [r3, #8]
 80046a8:	60da      	str	r2, [r3, #12]
 80046aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <HAL_UART_MspInit+0x90>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d131      	bne.n	800471a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80046b6:	4b1c      	ldr	r3, [pc, #112]	; (8004728 <HAL_UART_MspInit+0x94>)
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <HAL_UART_MspInit+0x94>)
 80046bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c0:	61d3      	str	r3, [r2, #28]
 80046c2:	4b19      	ldr	r3, [pc, #100]	; (8004728 <HAL_UART_MspInit+0x94>)
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ce:	4b16      	ldr	r3, [pc, #88]	; (8004728 <HAL_UART_MspInit+0x94>)
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	4a15      	ldr	r2, [pc, #84]	; (8004728 <HAL_UART_MspInit+0x94>)
 80046d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046d8:	6153      	str	r3, [r2, #20]
 80046da:	4b13      	ldr	r3, [pc, #76]	; (8004728 <HAL_UART_MspInit+0x94>)
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80046e6:	f248 0304 	movw	r3, #32772	; 0x8004
 80046ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ec:	2302      	movs	r3, #2
 80046ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046f4:	2303      	movs	r3, #3
 80046f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046f8:	2307      	movs	r3, #7
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046fc:	f107 0314 	add.w	r3, r7, #20
 8004700:	4619      	mov	r1, r3
 8004702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004706:	f7fc fe07 	bl	8001318 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800470a:	2200      	movs	r2, #0
 800470c:	2101      	movs	r1, #1
 800470e:	2026      	movs	r0, #38	; 0x26
 8004710:	f7fc fd55 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004714:	2026      	movs	r0, #38	; 0x26
 8004716:	f7fc fd6e 	bl	80011f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800471a:	bf00      	nop
 800471c:	3728      	adds	r7, #40	; 0x28
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40004400 	.word	0x40004400
 8004728:	40021000 	.word	0x40021000

0800472c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004730:	bf00      	nop
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800473a:	b480      	push	{r7}
 800473c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800473e:	e7fe      	b.n	800473e <HardFault_Handler+0x4>

08004740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004744:	e7fe      	b.n	8004744 <MemManage_Handler+0x4>

08004746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004746:	b480      	push	{r7}
 8004748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800474a:	e7fe      	b.n	800474a <BusFault_Handler+0x4>

0800474c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004750:	e7fe      	b.n	8004750 <UsageFault_Handler+0x4>

08004752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004752:	b480      	push	{r7}
 8004754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004756:	bf00      	nop
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800476e:	b480      	push	{r7}
 8004770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004772:	bf00      	nop
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004780:	f7fb fdbc 	bl	80002fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004784:	bf00      	nop
 8004786:	bd80      	pop	{r7, pc}

08004788 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800478c:	4802      	ldr	r0, [pc, #8]	; (8004798 <CAN_TX_IRQHandler+0x10>)
 800478e:	f7fc fa15 	bl	8000bbc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 8004792:	bf00      	nop
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	200000f0 	.word	0x200000f0

0800479c <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80047a0:	4802      	ldr	r0, [pc, #8]	; (80047ac <CAN_RX0_IRQHandler+0x10>)
 80047a2:	f7fc fa0b 	bl	8000bbc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80047a6:	bf00      	nop
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	200000f0 	.word	0x200000f0

080047b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80047b4:	4802      	ldr	r0, [pc, #8]	; (80047c0 <USART2_IRQHandler+0x10>)
 80047b6:	f7fe f9a7 	bl	8002b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80047ba:	bf00      	nop
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20000228 	.word	0x20000228

080047c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	e00a      	b.n	80047ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80047d6:	f3af 8000 	nop.w
 80047da:	4601      	mov	r1, r0
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	60ba      	str	r2, [r7, #8]
 80047e2:	b2ca      	uxtb	r2, r1
 80047e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	3301      	adds	r3, #1
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	dbf0      	blt.n	80047d6 <_read+0x12>
	}

return len;
 80047f4:	687b      	ldr	r3, [r7, #4]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <_close>:
	}
	return len;
}

int _close(int file)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
	return -1;
 8004806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004826:	605a      	str	r2, [r3, #4]
	return 0;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <_isatty>:

int _isatty(int file)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
	return 1;
 800483e:	2301      	movs	r3, #1
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
	return 0;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004870:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <_sbrk+0x50>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d102      	bne.n	800487e <_sbrk+0x16>
		heap_end = &end;
 8004878:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <_sbrk+0x50>)
 800487a:	4a10      	ldr	r2, [pc, #64]	; (80048bc <_sbrk+0x54>)
 800487c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800487e:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <_sbrk+0x50>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004884:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <_sbrk+0x50>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4413      	add	r3, r2
 800488c:	466a      	mov	r2, sp
 800488e:	4293      	cmp	r3, r2
 8004890:	d907      	bls.n	80048a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004892:	f000 f889 	bl	80049a8 <__errno>
 8004896:	4603      	mov	r3, r0
 8004898:	220c      	movs	r2, #12
 800489a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800489c:	f04f 33ff 	mov.w	r3, #4294967295
 80048a0:	e006      	b.n	80048b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <_sbrk+0x50>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4413      	add	r3, r2
 80048aa:	4a03      	ldr	r2, [pc, #12]	; (80048b8 <_sbrk+0x50>)
 80048ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80048ae:	68fb      	ldr	r3, [r7, #12]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	200000b4 	.word	0x200000b4
 80048bc:	200002d8 	.word	0x200002d8

080048c0 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048c4:	4b1f      	ldr	r3, [pc, #124]	; (8004944 <SystemInit+0x84>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ca:	4a1e      	ldr	r2, [pc, #120]	; (8004944 <SystemInit+0x84>)
 80048cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80048d4:	4b1c      	ldr	r3, [pc, #112]	; (8004948 <SystemInit+0x88>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1b      	ldr	r2, [pc, #108]	; (8004948 <SystemInit+0x88>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80048e0:	4b19      	ldr	r3, [pc, #100]	; (8004948 <SystemInit+0x88>)
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	4918      	ldr	r1, [pc, #96]	; (8004948 <SystemInit+0x88>)
 80048e6:	4b19      	ldr	r3, [pc, #100]	; (800494c <SystemInit+0x8c>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80048ec:	4b16      	ldr	r3, [pc, #88]	; (8004948 <SystemInit+0x88>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a15      	ldr	r2, [pc, #84]	; (8004948 <SystemInit+0x88>)
 80048f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80048f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80048fc:	4b12      	ldr	r3, [pc, #72]	; (8004948 <SystemInit+0x88>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a11      	ldr	r2, [pc, #68]	; (8004948 <SystemInit+0x88>)
 8004902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004906:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004908:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <SystemInit+0x88>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4a0e      	ldr	r2, [pc, #56]	; (8004948 <SystemInit+0x88>)
 800490e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004912:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <SystemInit+0x88>)
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	4a0b      	ldr	r2, [pc, #44]	; (8004948 <SystemInit+0x88>)
 800491a:	f023 030f 	bic.w	r3, r3, #15
 800491e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004920:	4b09      	ldr	r3, [pc, #36]	; (8004948 <SystemInit+0x88>)
 8004922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004924:	4908      	ldr	r1, [pc, #32]	; (8004948 <SystemInit+0x88>)
 8004926:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <SystemInit+0x90>)
 8004928:	4013      	ands	r3, r2
 800492a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <SystemInit+0x88>)
 800492e:	2200      	movs	r2, #0
 8004930:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004932:	4b04      	ldr	r3, [pc, #16]	; (8004944 <SystemInit+0x84>)
 8004934:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004938:	609a      	str	r2, [r3, #8]
#endif
}
 800493a:	bf00      	nop
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	e000ed00 	.word	0xe000ed00
 8004948:	40021000 	.word	0x40021000
 800494c:	f87fc00c 	.word	0xf87fc00c
 8004950:	ff00fccc 	.word	0xff00fccc

08004954 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800498c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004958:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800495a:	e003      	b.n	8004964 <LoopCopyDataInit>

0800495c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800495c:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800495e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004960:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004962:	3104      	adds	r1, #4

08004964 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004964:	480b      	ldr	r0, [pc, #44]	; (8004994 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004966:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004968:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800496a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800496c:	d3f6      	bcc.n	800495c <CopyDataInit>
	ldr	r2, =_sbss
 800496e:	4a0b      	ldr	r2, [pc, #44]	; (800499c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004970:	e002      	b.n	8004978 <LoopFillZerobss>

08004972 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004972:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004974:	f842 3b04 	str.w	r3, [r2], #4

08004978 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <LoopForever+0x16>)
	cmp	r2, r3
 800497a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800497c:	d3f9      	bcc.n	8004972 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800497e:	f7ff ff9f 	bl	80048c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004982:	f000 f817 	bl	80049b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004986:	f7ff f99b 	bl	8003cc0 <main>

0800498a <LoopForever>:

LoopForever:
    b LoopForever
 800498a:	e7fe      	b.n	800498a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800498c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004990:	08005f6c 	.word	0x08005f6c
	ldr	r0, =_sdata
 8004994:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004998:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 800499c:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 80049a0:	200002d4 	.word	0x200002d4

080049a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80049a4:	e7fe      	b.n	80049a4 <ADC1_2_IRQHandler>
	...

080049a8 <__errno>:
 80049a8:	4b01      	ldr	r3, [pc, #4]	; (80049b0 <__errno+0x8>)
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20000020 	.word	0x20000020

080049b4 <__libc_init_array>:
 80049b4:	b570      	push	{r4, r5, r6, lr}
 80049b6:	4d0d      	ldr	r5, [pc, #52]	; (80049ec <__libc_init_array+0x38>)
 80049b8:	4c0d      	ldr	r4, [pc, #52]	; (80049f0 <__libc_init_array+0x3c>)
 80049ba:	1b64      	subs	r4, r4, r5
 80049bc:	10a4      	asrs	r4, r4, #2
 80049be:	2600      	movs	r6, #0
 80049c0:	42a6      	cmp	r6, r4
 80049c2:	d109      	bne.n	80049d8 <__libc_init_array+0x24>
 80049c4:	4d0b      	ldr	r5, [pc, #44]	; (80049f4 <__libc_init_array+0x40>)
 80049c6:	4c0c      	ldr	r4, [pc, #48]	; (80049f8 <__libc_init_array+0x44>)
 80049c8:	f001 f9be 	bl	8005d48 <_init>
 80049cc:	1b64      	subs	r4, r4, r5
 80049ce:	10a4      	asrs	r4, r4, #2
 80049d0:	2600      	movs	r6, #0
 80049d2:	42a6      	cmp	r6, r4
 80049d4:	d105      	bne.n	80049e2 <__libc_init_array+0x2e>
 80049d6:	bd70      	pop	{r4, r5, r6, pc}
 80049d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049dc:	4798      	blx	r3
 80049de:	3601      	adds	r6, #1
 80049e0:	e7ee      	b.n	80049c0 <__libc_init_array+0xc>
 80049e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e6:	4798      	blx	r3
 80049e8:	3601      	adds	r6, #1
 80049ea:	e7f2      	b.n	80049d2 <__libc_init_array+0x1e>
 80049ec:	08005f64 	.word	0x08005f64
 80049f0:	08005f64 	.word	0x08005f64
 80049f4:	08005f64 	.word	0x08005f64
 80049f8:	08005f68 	.word	0x08005f68

080049fc <memset>:
 80049fc:	4402      	add	r2, r0
 80049fe:	4603      	mov	r3, r0
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d100      	bne.n	8004a06 <memset+0xa>
 8004a04:	4770      	bx	lr
 8004a06:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0a:	e7f9      	b.n	8004a00 <memset+0x4>

08004a0c <iprintf>:
 8004a0c:	b40f      	push	{r0, r1, r2, r3}
 8004a0e:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <iprintf+0x2c>)
 8004a10:	b513      	push	{r0, r1, r4, lr}
 8004a12:	681c      	ldr	r4, [r3, #0]
 8004a14:	b124      	cbz	r4, 8004a20 <iprintf+0x14>
 8004a16:	69a3      	ldr	r3, [r4, #24]
 8004a18:	b913      	cbnz	r3, 8004a20 <iprintf+0x14>
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f000 fa7e 	bl	8004f1c <__sinit>
 8004a20:	ab05      	add	r3, sp, #20
 8004a22:	9a04      	ldr	r2, [sp, #16]
 8004a24:	68a1      	ldr	r1, [r4, #8]
 8004a26:	9301      	str	r3, [sp, #4]
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f000 fdab 	bl	8005584 <_vfiprintf_r>
 8004a2e:	b002      	add	sp, #8
 8004a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a34:	b004      	add	sp, #16
 8004a36:	4770      	bx	lr
 8004a38:	20000020 	.word	0x20000020

08004a3c <_puts_r>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	460e      	mov	r6, r1
 8004a40:	4605      	mov	r5, r0
 8004a42:	b118      	cbz	r0, 8004a4c <_puts_r+0x10>
 8004a44:	6983      	ldr	r3, [r0, #24]
 8004a46:	b90b      	cbnz	r3, 8004a4c <_puts_r+0x10>
 8004a48:	f000 fa68 	bl	8004f1c <__sinit>
 8004a4c:	69ab      	ldr	r3, [r5, #24]
 8004a4e:	68ac      	ldr	r4, [r5, #8]
 8004a50:	b913      	cbnz	r3, 8004a58 <_puts_r+0x1c>
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 fa62 	bl	8004f1c <__sinit>
 8004a58:	4b2c      	ldr	r3, [pc, #176]	; (8004b0c <_puts_r+0xd0>)
 8004a5a:	429c      	cmp	r4, r3
 8004a5c:	d120      	bne.n	8004aa0 <_puts_r+0x64>
 8004a5e:	686c      	ldr	r4, [r5, #4]
 8004a60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a62:	07db      	lsls	r3, r3, #31
 8004a64:	d405      	bmi.n	8004a72 <_puts_r+0x36>
 8004a66:	89a3      	ldrh	r3, [r4, #12]
 8004a68:	0598      	lsls	r0, r3, #22
 8004a6a:	d402      	bmi.n	8004a72 <_puts_r+0x36>
 8004a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a6e:	f000 faf3 	bl	8005058 <__retarget_lock_acquire_recursive>
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	0719      	lsls	r1, r3, #28
 8004a76:	d51d      	bpl.n	8004ab4 <_puts_r+0x78>
 8004a78:	6923      	ldr	r3, [r4, #16]
 8004a7a:	b1db      	cbz	r3, 8004ab4 <_puts_r+0x78>
 8004a7c:	3e01      	subs	r6, #1
 8004a7e:	68a3      	ldr	r3, [r4, #8]
 8004a80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a84:	3b01      	subs	r3, #1
 8004a86:	60a3      	str	r3, [r4, #8]
 8004a88:	bb39      	cbnz	r1, 8004ada <_puts_r+0x9e>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	da38      	bge.n	8004b00 <_puts_r+0xc4>
 8004a8e:	4622      	mov	r2, r4
 8004a90:	210a      	movs	r1, #10
 8004a92:	4628      	mov	r0, r5
 8004a94:	f000 f868 	bl	8004b68 <__swbuf_r>
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d011      	beq.n	8004ac0 <_puts_r+0x84>
 8004a9c:	250a      	movs	r5, #10
 8004a9e:	e011      	b.n	8004ac4 <_puts_r+0x88>
 8004aa0:	4b1b      	ldr	r3, [pc, #108]	; (8004b10 <_puts_r+0xd4>)
 8004aa2:	429c      	cmp	r4, r3
 8004aa4:	d101      	bne.n	8004aaa <_puts_r+0x6e>
 8004aa6:	68ac      	ldr	r4, [r5, #8]
 8004aa8:	e7da      	b.n	8004a60 <_puts_r+0x24>
 8004aaa:	4b1a      	ldr	r3, [pc, #104]	; (8004b14 <_puts_r+0xd8>)
 8004aac:	429c      	cmp	r4, r3
 8004aae:	bf08      	it	eq
 8004ab0:	68ec      	ldreq	r4, [r5, #12]
 8004ab2:	e7d5      	b.n	8004a60 <_puts_r+0x24>
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f000 f8a8 	bl	8004c0c <__swsetup_r>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d0dd      	beq.n	8004a7c <_puts_r+0x40>
 8004ac0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ac6:	07da      	lsls	r2, r3, #31
 8004ac8:	d405      	bmi.n	8004ad6 <_puts_r+0x9a>
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	059b      	lsls	r3, r3, #22
 8004ace:	d402      	bmi.n	8004ad6 <_puts_r+0x9a>
 8004ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ad2:	f000 fac2 	bl	800505a <__retarget_lock_release_recursive>
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	bd70      	pop	{r4, r5, r6, pc}
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	da04      	bge.n	8004ae8 <_puts_r+0xac>
 8004ade:	69a2      	ldr	r2, [r4, #24]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	dc06      	bgt.n	8004af2 <_puts_r+0xb6>
 8004ae4:	290a      	cmp	r1, #10
 8004ae6:	d004      	beq.n	8004af2 <_puts_r+0xb6>
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	6022      	str	r2, [r4, #0]
 8004aee:	7019      	strb	r1, [r3, #0]
 8004af0:	e7c5      	b.n	8004a7e <_puts_r+0x42>
 8004af2:	4622      	mov	r2, r4
 8004af4:	4628      	mov	r0, r5
 8004af6:	f000 f837 	bl	8004b68 <__swbuf_r>
 8004afa:	3001      	adds	r0, #1
 8004afc:	d1bf      	bne.n	8004a7e <_puts_r+0x42>
 8004afe:	e7df      	b.n	8004ac0 <_puts_r+0x84>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	250a      	movs	r5, #10
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	6022      	str	r2, [r4, #0]
 8004b08:	701d      	strb	r5, [r3, #0]
 8004b0a:	e7db      	b.n	8004ac4 <_puts_r+0x88>
 8004b0c:	08005ef0 	.word	0x08005ef0
 8004b10:	08005f10 	.word	0x08005f10
 8004b14:	08005ed0 	.word	0x08005ed0

08004b18 <puts>:
 8004b18:	4b02      	ldr	r3, [pc, #8]	; (8004b24 <puts+0xc>)
 8004b1a:	4601      	mov	r1, r0
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	f7ff bf8d 	b.w	8004a3c <_puts_r>
 8004b22:	bf00      	nop
 8004b24:	20000020 	.word	0x20000020

08004b28 <siprintf>:
 8004b28:	b40e      	push	{r1, r2, r3}
 8004b2a:	b500      	push	{lr}
 8004b2c:	b09c      	sub	sp, #112	; 0x70
 8004b2e:	ab1d      	add	r3, sp, #116	; 0x74
 8004b30:	9002      	str	r0, [sp, #8]
 8004b32:	9006      	str	r0, [sp, #24]
 8004b34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b38:	4809      	ldr	r0, [pc, #36]	; (8004b60 <siprintf+0x38>)
 8004b3a:	9107      	str	r1, [sp, #28]
 8004b3c:	9104      	str	r1, [sp, #16]
 8004b3e:	4909      	ldr	r1, [pc, #36]	; (8004b64 <siprintf+0x3c>)
 8004b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b44:	9105      	str	r1, [sp, #20]
 8004b46:	6800      	ldr	r0, [r0, #0]
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	a902      	add	r1, sp, #8
 8004b4c:	f000 fbf0 	bl	8005330 <_svfiprintf_r>
 8004b50:	9b02      	ldr	r3, [sp, #8]
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	b01c      	add	sp, #112	; 0x70
 8004b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b5c:	b003      	add	sp, #12
 8004b5e:	4770      	bx	lr
 8004b60:	20000020 	.word	0x20000020
 8004b64:	ffff0208 	.word	0xffff0208

08004b68 <__swbuf_r>:
 8004b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6a:	460e      	mov	r6, r1
 8004b6c:	4614      	mov	r4, r2
 8004b6e:	4605      	mov	r5, r0
 8004b70:	b118      	cbz	r0, 8004b7a <__swbuf_r+0x12>
 8004b72:	6983      	ldr	r3, [r0, #24]
 8004b74:	b90b      	cbnz	r3, 8004b7a <__swbuf_r+0x12>
 8004b76:	f000 f9d1 	bl	8004f1c <__sinit>
 8004b7a:	4b21      	ldr	r3, [pc, #132]	; (8004c00 <__swbuf_r+0x98>)
 8004b7c:	429c      	cmp	r4, r3
 8004b7e:	d12b      	bne.n	8004bd8 <__swbuf_r+0x70>
 8004b80:	686c      	ldr	r4, [r5, #4]
 8004b82:	69a3      	ldr	r3, [r4, #24]
 8004b84:	60a3      	str	r3, [r4, #8]
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	071a      	lsls	r2, r3, #28
 8004b8a:	d52f      	bpl.n	8004bec <__swbuf_r+0x84>
 8004b8c:	6923      	ldr	r3, [r4, #16]
 8004b8e:	b36b      	cbz	r3, 8004bec <__swbuf_r+0x84>
 8004b90:	6923      	ldr	r3, [r4, #16]
 8004b92:	6820      	ldr	r0, [r4, #0]
 8004b94:	1ac0      	subs	r0, r0, r3
 8004b96:	6963      	ldr	r3, [r4, #20]
 8004b98:	b2f6      	uxtb	r6, r6
 8004b9a:	4283      	cmp	r3, r0
 8004b9c:	4637      	mov	r7, r6
 8004b9e:	dc04      	bgt.n	8004baa <__swbuf_r+0x42>
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	f000 f926 	bl	8004df4 <_fflush_r>
 8004ba8:	bb30      	cbnz	r0, 8004bf8 <__swbuf_r+0x90>
 8004baa:	68a3      	ldr	r3, [r4, #8]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	60a3      	str	r3, [r4, #8]
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	6022      	str	r2, [r4, #0]
 8004bb6:	701e      	strb	r6, [r3, #0]
 8004bb8:	6963      	ldr	r3, [r4, #20]
 8004bba:	3001      	adds	r0, #1
 8004bbc:	4283      	cmp	r3, r0
 8004bbe:	d004      	beq.n	8004bca <__swbuf_r+0x62>
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	07db      	lsls	r3, r3, #31
 8004bc4:	d506      	bpl.n	8004bd4 <__swbuf_r+0x6c>
 8004bc6:	2e0a      	cmp	r6, #10
 8004bc8:	d104      	bne.n	8004bd4 <__swbuf_r+0x6c>
 8004bca:	4621      	mov	r1, r4
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f000 f911 	bl	8004df4 <_fflush_r>
 8004bd2:	b988      	cbnz	r0, 8004bf8 <__swbuf_r+0x90>
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <__swbuf_r+0x9c>)
 8004bda:	429c      	cmp	r4, r3
 8004bdc:	d101      	bne.n	8004be2 <__swbuf_r+0x7a>
 8004bde:	68ac      	ldr	r4, [r5, #8]
 8004be0:	e7cf      	b.n	8004b82 <__swbuf_r+0x1a>
 8004be2:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <__swbuf_r+0xa0>)
 8004be4:	429c      	cmp	r4, r3
 8004be6:	bf08      	it	eq
 8004be8:	68ec      	ldreq	r4, [r5, #12]
 8004bea:	e7ca      	b.n	8004b82 <__swbuf_r+0x1a>
 8004bec:	4621      	mov	r1, r4
 8004bee:	4628      	mov	r0, r5
 8004bf0:	f000 f80c 	bl	8004c0c <__swsetup_r>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	d0cb      	beq.n	8004b90 <__swbuf_r+0x28>
 8004bf8:	f04f 37ff 	mov.w	r7, #4294967295
 8004bfc:	e7ea      	b.n	8004bd4 <__swbuf_r+0x6c>
 8004bfe:	bf00      	nop
 8004c00:	08005ef0 	.word	0x08005ef0
 8004c04:	08005f10 	.word	0x08005f10
 8004c08:	08005ed0 	.word	0x08005ed0

08004c0c <__swsetup_r>:
 8004c0c:	4b32      	ldr	r3, [pc, #200]	; (8004cd8 <__swsetup_r+0xcc>)
 8004c0e:	b570      	push	{r4, r5, r6, lr}
 8004c10:	681d      	ldr	r5, [r3, #0]
 8004c12:	4606      	mov	r6, r0
 8004c14:	460c      	mov	r4, r1
 8004c16:	b125      	cbz	r5, 8004c22 <__swsetup_r+0x16>
 8004c18:	69ab      	ldr	r3, [r5, #24]
 8004c1a:	b913      	cbnz	r3, 8004c22 <__swsetup_r+0x16>
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f000 f97d 	bl	8004f1c <__sinit>
 8004c22:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <__swsetup_r+0xd0>)
 8004c24:	429c      	cmp	r4, r3
 8004c26:	d10f      	bne.n	8004c48 <__swsetup_r+0x3c>
 8004c28:	686c      	ldr	r4, [r5, #4]
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c30:	0719      	lsls	r1, r3, #28
 8004c32:	d42c      	bmi.n	8004c8e <__swsetup_r+0x82>
 8004c34:	06dd      	lsls	r5, r3, #27
 8004c36:	d411      	bmi.n	8004c5c <__swsetup_r+0x50>
 8004c38:	2309      	movs	r3, #9
 8004c3a:	6033      	str	r3, [r6, #0]
 8004c3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	f04f 30ff 	mov.w	r0, #4294967295
 8004c46:	e03e      	b.n	8004cc6 <__swsetup_r+0xba>
 8004c48:	4b25      	ldr	r3, [pc, #148]	; (8004ce0 <__swsetup_r+0xd4>)
 8004c4a:	429c      	cmp	r4, r3
 8004c4c:	d101      	bne.n	8004c52 <__swsetup_r+0x46>
 8004c4e:	68ac      	ldr	r4, [r5, #8]
 8004c50:	e7eb      	b.n	8004c2a <__swsetup_r+0x1e>
 8004c52:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <__swsetup_r+0xd8>)
 8004c54:	429c      	cmp	r4, r3
 8004c56:	bf08      	it	eq
 8004c58:	68ec      	ldreq	r4, [r5, #12]
 8004c5a:	e7e6      	b.n	8004c2a <__swsetup_r+0x1e>
 8004c5c:	0758      	lsls	r0, r3, #29
 8004c5e:	d512      	bpl.n	8004c86 <__swsetup_r+0x7a>
 8004c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c62:	b141      	cbz	r1, 8004c76 <__swsetup_r+0x6a>
 8004c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c68:	4299      	cmp	r1, r3
 8004c6a:	d002      	beq.n	8004c72 <__swsetup_r+0x66>
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	f000 fa59 	bl	8005124 <_free_r>
 8004c72:	2300      	movs	r3, #0
 8004c74:	6363      	str	r3, [r4, #52]	; 0x34
 8004c76:	89a3      	ldrh	r3, [r4, #12]
 8004c78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c7c:	81a3      	strh	r3, [r4, #12]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	6063      	str	r3, [r4, #4]
 8004c82:	6923      	ldr	r3, [r4, #16]
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	f043 0308 	orr.w	r3, r3, #8
 8004c8c:	81a3      	strh	r3, [r4, #12]
 8004c8e:	6923      	ldr	r3, [r4, #16]
 8004c90:	b94b      	cbnz	r3, 8004ca6 <__swsetup_r+0x9a>
 8004c92:	89a3      	ldrh	r3, [r4, #12]
 8004c94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c9c:	d003      	beq.n	8004ca6 <__swsetup_r+0x9a>
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	f000 f9ff 	bl	80050a4 <__smakebuf_r>
 8004ca6:	89a0      	ldrh	r0, [r4, #12]
 8004ca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cac:	f010 0301 	ands.w	r3, r0, #1
 8004cb0:	d00a      	beq.n	8004cc8 <__swsetup_r+0xbc>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60a3      	str	r3, [r4, #8]
 8004cb6:	6963      	ldr	r3, [r4, #20]
 8004cb8:	425b      	negs	r3, r3
 8004cba:	61a3      	str	r3, [r4, #24]
 8004cbc:	6923      	ldr	r3, [r4, #16]
 8004cbe:	b943      	cbnz	r3, 8004cd2 <__swsetup_r+0xc6>
 8004cc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004cc4:	d1ba      	bne.n	8004c3c <__swsetup_r+0x30>
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
 8004cc8:	0781      	lsls	r1, r0, #30
 8004cca:	bf58      	it	pl
 8004ccc:	6963      	ldrpl	r3, [r4, #20]
 8004cce:	60a3      	str	r3, [r4, #8]
 8004cd0:	e7f4      	b.n	8004cbc <__swsetup_r+0xb0>
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	e7f7      	b.n	8004cc6 <__swsetup_r+0xba>
 8004cd6:	bf00      	nop
 8004cd8:	20000020 	.word	0x20000020
 8004cdc:	08005ef0 	.word	0x08005ef0
 8004ce0:	08005f10 	.word	0x08005f10
 8004ce4:	08005ed0 	.word	0x08005ed0

08004ce8 <__sflush_r>:
 8004ce8:	898a      	ldrh	r2, [r1, #12]
 8004cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cee:	4605      	mov	r5, r0
 8004cf0:	0710      	lsls	r0, r2, #28
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	d458      	bmi.n	8004da8 <__sflush_r+0xc0>
 8004cf6:	684b      	ldr	r3, [r1, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	dc05      	bgt.n	8004d08 <__sflush_r+0x20>
 8004cfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	dc02      	bgt.n	8004d08 <__sflush_r+0x20>
 8004d02:	2000      	movs	r0, #0
 8004d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d0a:	2e00      	cmp	r6, #0
 8004d0c:	d0f9      	beq.n	8004d02 <__sflush_r+0x1a>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d14:	682f      	ldr	r7, [r5, #0]
 8004d16:	602b      	str	r3, [r5, #0]
 8004d18:	d032      	beq.n	8004d80 <__sflush_r+0x98>
 8004d1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d1c:	89a3      	ldrh	r3, [r4, #12]
 8004d1e:	075a      	lsls	r2, r3, #29
 8004d20:	d505      	bpl.n	8004d2e <__sflush_r+0x46>
 8004d22:	6863      	ldr	r3, [r4, #4]
 8004d24:	1ac0      	subs	r0, r0, r3
 8004d26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d28:	b10b      	cbz	r3, 8004d2e <__sflush_r+0x46>
 8004d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d2c:	1ac0      	subs	r0, r0, r3
 8004d2e:	2300      	movs	r3, #0
 8004d30:	4602      	mov	r2, r0
 8004d32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d34:	6a21      	ldr	r1, [r4, #32]
 8004d36:	4628      	mov	r0, r5
 8004d38:	47b0      	blx	r6
 8004d3a:	1c43      	adds	r3, r0, #1
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	d106      	bne.n	8004d4e <__sflush_r+0x66>
 8004d40:	6829      	ldr	r1, [r5, #0]
 8004d42:	291d      	cmp	r1, #29
 8004d44:	d82c      	bhi.n	8004da0 <__sflush_r+0xb8>
 8004d46:	4a2a      	ldr	r2, [pc, #168]	; (8004df0 <__sflush_r+0x108>)
 8004d48:	40ca      	lsrs	r2, r1
 8004d4a:	07d6      	lsls	r6, r2, #31
 8004d4c:	d528      	bpl.n	8004da0 <__sflush_r+0xb8>
 8004d4e:	2200      	movs	r2, #0
 8004d50:	6062      	str	r2, [r4, #4]
 8004d52:	04d9      	lsls	r1, r3, #19
 8004d54:	6922      	ldr	r2, [r4, #16]
 8004d56:	6022      	str	r2, [r4, #0]
 8004d58:	d504      	bpl.n	8004d64 <__sflush_r+0x7c>
 8004d5a:	1c42      	adds	r2, r0, #1
 8004d5c:	d101      	bne.n	8004d62 <__sflush_r+0x7a>
 8004d5e:	682b      	ldr	r3, [r5, #0]
 8004d60:	b903      	cbnz	r3, 8004d64 <__sflush_r+0x7c>
 8004d62:	6560      	str	r0, [r4, #84]	; 0x54
 8004d64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d66:	602f      	str	r7, [r5, #0]
 8004d68:	2900      	cmp	r1, #0
 8004d6a:	d0ca      	beq.n	8004d02 <__sflush_r+0x1a>
 8004d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d70:	4299      	cmp	r1, r3
 8004d72:	d002      	beq.n	8004d7a <__sflush_r+0x92>
 8004d74:	4628      	mov	r0, r5
 8004d76:	f000 f9d5 	bl	8005124 <_free_r>
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	6360      	str	r0, [r4, #52]	; 0x34
 8004d7e:	e7c1      	b.n	8004d04 <__sflush_r+0x1c>
 8004d80:	6a21      	ldr	r1, [r4, #32]
 8004d82:	2301      	movs	r3, #1
 8004d84:	4628      	mov	r0, r5
 8004d86:	47b0      	blx	r6
 8004d88:	1c41      	adds	r1, r0, #1
 8004d8a:	d1c7      	bne.n	8004d1c <__sflush_r+0x34>
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0c4      	beq.n	8004d1c <__sflush_r+0x34>
 8004d92:	2b1d      	cmp	r3, #29
 8004d94:	d001      	beq.n	8004d9a <__sflush_r+0xb2>
 8004d96:	2b16      	cmp	r3, #22
 8004d98:	d101      	bne.n	8004d9e <__sflush_r+0xb6>
 8004d9a:	602f      	str	r7, [r5, #0]
 8004d9c:	e7b1      	b.n	8004d02 <__sflush_r+0x1a>
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004da4:	81a3      	strh	r3, [r4, #12]
 8004da6:	e7ad      	b.n	8004d04 <__sflush_r+0x1c>
 8004da8:	690f      	ldr	r7, [r1, #16]
 8004daa:	2f00      	cmp	r7, #0
 8004dac:	d0a9      	beq.n	8004d02 <__sflush_r+0x1a>
 8004dae:	0793      	lsls	r3, r2, #30
 8004db0:	680e      	ldr	r6, [r1, #0]
 8004db2:	bf08      	it	eq
 8004db4:	694b      	ldreq	r3, [r1, #20]
 8004db6:	600f      	str	r7, [r1, #0]
 8004db8:	bf18      	it	ne
 8004dba:	2300      	movne	r3, #0
 8004dbc:	eba6 0807 	sub.w	r8, r6, r7
 8004dc0:	608b      	str	r3, [r1, #8]
 8004dc2:	f1b8 0f00 	cmp.w	r8, #0
 8004dc6:	dd9c      	ble.n	8004d02 <__sflush_r+0x1a>
 8004dc8:	6a21      	ldr	r1, [r4, #32]
 8004dca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004dcc:	4643      	mov	r3, r8
 8004dce:	463a      	mov	r2, r7
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	47b0      	blx	r6
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	dc06      	bgt.n	8004de6 <__sflush_r+0xfe>
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dde:	81a3      	strh	r3, [r4, #12]
 8004de0:	f04f 30ff 	mov.w	r0, #4294967295
 8004de4:	e78e      	b.n	8004d04 <__sflush_r+0x1c>
 8004de6:	4407      	add	r7, r0
 8004de8:	eba8 0800 	sub.w	r8, r8, r0
 8004dec:	e7e9      	b.n	8004dc2 <__sflush_r+0xda>
 8004dee:	bf00      	nop
 8004df0:	20400001 	.word	0x20400001

08004df4 <_fflush_r>:
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	690b      	ldr	r3, [r1, #16]
 8004df8:	4605      	mov	r5, r0
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	b913      	cbnz	r3, 8004e04 <_fflush_r+0x10>
 8004dfe:	2500      	movs	r5, #0
 8004e00:	4628      	mov	r0, r5
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	b118      	cbz	r0, 8004e0e <_fflush_r+0x1a>
 8004e06:	6983      	ldr	r3, [r0, #24]
 8004e08:	b90b      	cbnz	r3, 8004e0e <_fflush_r+0x1a>
 8004e0a:	f000 f887 	bl	8004f1c <__sinit>
 8004e0e:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <_fflush_r+0x6c>)
 8004e10:	429c      	cmp	r4, r3
 8004e12:	d11b      	bne.n	8004e4c <_fflush_r+0x58>
 8004e14:	686c      	ldr	r4, [r5, #4]
 8004e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0ef      	beq.n	8004dfe <_fflush_r+0xa>
 8004e1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e20:	07d0      	lsls	r0, r2, #31
 8004e22:	d404      	bmi.n	8004e2e <_fflush_r+0x3a>
 8004e24:	0599      	lsls	r1, r3, #22
 8004e26:	d402      	bmi.n	8004e2e <_fflush_r+0x3a>
 8004e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e2a:	f000 f915 	bl	8005058 <__retarget_lock_acquire_recursive>
 8004e2e:	4628      	mov	r0, r5
 8004e30:	4621      	mov	r1, r4
 8004e32:	f7ff ff59 	bl	8004ce8 <__sflush_r>
 8004e36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e38:	07da      	lsls	r2, r3, #31
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	d4e0      	bmi.n	8004e00 <_fflush_r+0xc>
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	059b      	lsls	r3, r3, #22
 8004e42:	d4dd      	bmi.n	8004e00 <_fflush_r+0xc>
 8004e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e46:	f000 f908 	bl	800505a <__retarget_lock_release_recursive>
 8004e4a:	e7d9      	b.n	8004e00 <_fflush_r+0xc>
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <_fflush_r+0x70>)
 8004e4e:	429c      	cmp	r4, r3
 8004e50:	d101      	bne.n	8004e56 <_fflush_r+0x62>
 8004e52:	68ac      	ldr	r4, [r5, #8]
 8004e54:	e7df      	b.n	8004e16 <_fflush_r+0x22>
 8004e56:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <_fflush_r+0x74>)
 8004e58:	429c      	cmp	r4, r3
 8004e5a:	bf08      	it	eq
 8004e5c:	68ec      	ldreq	r4, [r5, #12]
 8004e5e:	e7da      	b.n	8004e16 <_fflush_r+0x22>
 8004e60:	08005ef0 	.word	0x08005ef0
 8004e64:	08005f10 	.word	0x08005f10
 8004e68:	08005ed0 	.word	0x08005ed0

08004e6c <std>:
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	b510      	push	{r4, lr}
 8004e70:	4604      	mov	r4, r0
 8004e72:	e9c0 3300 	strd	r3, r3, [r0]
 8004e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e7a:	6083      	str	r3, [r0, #8]
 8004e7c:	8181      	strh	r1, [r0, #12]
 8004e7e:	6643      	str	r3, [r0, #100]	; 0x64
 8004e80:	81c2      	strh	r2, [r0, #14]
 8004e82:	6183      	str	r3, [r0, #24]
 8004e84:	4619      	mov	r1, r3
 8004e86:	2208      	movs	r2, #8
 8004e88:	305c      	adds	r0, #92	; 0x5c
 8004e8a:	f7ff fdb7 	bl	80049fc <memset>
 8004e8e:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <std+0x38>)
 8004e90:	6263      	str	r3, [r4, #36]	; 0x24
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <std+0x3c>)
 8004e94:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e96:	4b05      	ldr	r3, [pc, #20]	; (8004eac <std+0x40>)
 8004e98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e9a:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <std+0x44>)
 8004e9c:	6224      	str	r4, [r4, #32]
 8004e9e:	6323      	str	r3, [r4, #48]	; 0x30
 8004ea0:	bd10      	pop	{r4, pc}
 8004ea2:	bf00      	nop
 8004ea4:	08005b2d 	.word	0x08005b2d
 8004ea8:	08005b4f 	.word	0x08005b4f
 8004eac:	08005b87 	.word	0x08005b87
 8004eb0:	08005bab 	.word	0x08005bab

08004eb4 <_cleanup_r>:
 8004eb4:	4901      	ldr	r1, [pc, #4]	; (8004ebc <_cleanup_r+0x8>)
 8004eb6:	f000 b8af 	b.w	8005018 <_fwalk_reent>
 8004eba:	bf00      	nop
 8004ebc:	08004df5 	.word	0x08004df5

08004ec0 <__sfmoreglue>:
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	1e4a      	subs	r2, r1, #1
 8004ec4:	2568      	movs	r5, #104	; 0x68
 8004ec6:	4355      	muls	r5, r2
 8004ec8:	460e      	mov	r6, r1
 8004eca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ece:	f000 f979 	bl	80051c4 <_malloc_r>
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	b140      	cbz	r0, 8004ee8 <__sfmoreglue+0x28>
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	e9c0 1600 	strd	r1, r6, [r0]
 8004edc:	300c      	adds	r0, #12
 8004ede:	60a0      	str	r0, [r4, #8]
 8004ee0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ee4:	f7ff fd8a 	bl	80049fc <memset>
 8004ee8:	4620      	mov	r0, r4
 8004eea:	bd70      	pop	{r4, r5, r6, pc}

08004eec <__sfp_lock_acquire>:
 8004eec:	4801      	ldr	r0, [pc, #4]	; (8004ef4 <__sfp_lock_acquire+0x8>)
 8004eee:	f000 b8b3 	b.w	8005058 <__retarget_lock_acquire_recursive>
 8004ef2:	bf00      	nop
 8004ef4:	200002cc 	.word	0x200002cc

08004ef8 <__sfp_lock_release>:
 8004ef8:	4801      	ldr	r0, [pc, #4]	; (8004f00 <__sfp_lock_release+0x8>)
 8004efa:	f000 b8ae 	b.w	800505a <__retarget_lock_release_recursive>
 8004efe:	bf00      	nop
 8004f00:	200002cc 	.word	0x200002cc

08004f04 <__sinit_lock_acquire>:
 8004f04:	4801      	ldr	r0, [pc, #4]	; (8004f0c <__sinit_lock_acquire+0x8>)
 8004f06:	f000 b8a7 	b.w	8005058 <__retarget_lock_acquire_recursive>
 8004f0a:	bf00      	nop
 8004f0c:	200002c7 	.word	0x200002c7

08004f10 <__sinit_lock_release>:
 8004f10:	4801      	ldr	r0, [pc, #4]	; (8004f18 <__sinit_lock_release+0x8>)
 8004f12:	f000 b8a2 	b.w	800505a <__retarget_lock_release_recursive>
 8004f16:	bf00      	nop
 8004f18:	200002c7 	.word	0x200002c7

08004f1c <__sinit>:
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	4604      	mov	r4, r0
 8004f20:	f7ff fff0 	bl	8004f04 <__sinit_lock_acquire>
 8004f24:	69a3      	ldr	r3, [r4, #24]
 8004f26:	b11b      	cbz	r3, 8004f30 <__sinit+0x14>
 8004f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f2c:	f7ff bff0 	b.w	8004f10 <__sinit_lock_release>
 8004f30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f34:	6523      	str	r3, [r4, #80]	; 0x50
 8004f36:	4b13      	ldr	r3, [pc, #76]	; (8004f84 <__sinit+0x68>)
 8004f38:	4a13      	ldr	r2, [pc, #76]	; (8004f88 <__sinit+0x6c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f3e:	42a3      	cmp	r3, r4
 8004f40:	bf04      	itt	eq
 8004f42:	2301      	moveq	r3, #1
 8004f44:	61a3      	streq	r3, [r4, #24]
 8004f46:	4620      	mov	r0, r4
 8004f48:	f000 f820 	bl	8004f8c <__sfp>
 8004f4c:	6060      	str	r0, [r4, #4]
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f000 f81c 	bl	8004f8c <__sfp>
 8004f54:	60a0      	str	r0, [r4, #8]
 8004f56:	4620      	mov	r0, r4
 8004f58:	f000 f818 	bl	8004f8c <__sfp>
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	60e0      	str	r0, [r4, #12]
 8004f60:	2104      	movs	r1, #4
 8004f62:	6860      	ldr	r0, [r4, #4]
 8004f64:	f7ff ff82 	bl	8004e6c <std>
 8004f68:	68a0      	ldr	r0, [r4, #8]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	2109      	movs	r1, #9
 8004f6e:	f7ff ff7d 	bl	8004e6c <std>
 8004f72:	68e0      	ldr	r0, [r4, #12]
 8004f74:	2202      	movs	r2, #2
 8004f76:	2112      	movs	r1, #18
 8004f78:	f7ff ff78 	bl	8004e6c <std>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	61a3      	str	r3, [r4, #24]
 8004f80:	e7d2      	b.n	8004f28 <__sinit+0xc>
 8004f82:	bf00      	nop
 8004f84:	08005ecc 	.word	0x08005ecc
 8004f88:	08004eb5 	.word	0x08004eb5

08004f8c <__sfp>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	4607      	mov	r7, r0
 8004f90:	f7ff ffac 	bl	8004eec <__sfp_lock_acquire>
 8004f94:	4b1e      	ldr	r3, [pc, #120]	; (8005010 <__sfp+0x84>)
 8004f96:	681e      	ldr	r6, [r3, #0]
 8004f98:	69b3      	ldr	r3, [r6, #24]
 8004f9a:	b913      	cbnz	r3, 8004fa2 <__sfp+0x16>
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	f7ff ffbd 	bl	8004f1c <__sinit>
 8004fa2:	3648      	adds	r6, #72	; 0x48
 8004fa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	d503      	bpl.n	8004fb4 <__sfp+0x28>
 8004fac:	6833      	ldr	r3, [r6, #0]
 8004fae:	b30b      	cbz	r3, 8004ff4 <__sfp+0x68>
 8004fb0:	6836      	ldr	r6, [r6, #0]
 8004fb2:	e7f7      	b.n	8004fa4 <__sfp+0x18>
 8004fb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fb8:	b9d5      	cbnz	r5, 8004ff0 <__sfp+0x64>
 8004fba:	4b16      	ldr	r3, [pc, #88]	; (8005014 <__sfp+0x88>)
 8004fbc:	60e3      	str	r3, [r4, #12]
 8004fbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004fc2:	6665      	str	r5, [r4, #100]	; 0x64
 8004fc4:	f000 f847 	bl	8005056 <__retarget_lock_init_recursive>
 8004fc8:	f7ff ff96 	bl	8004ef8 <__sfp_lock_release>
 8004fcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004fd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fd4:	6025      	str	r5, [r4, #0]
 8004fd6:	61a5      	str	r5, [r4, #24]
 8004fd8:	2208      	movs	r2, #8
 8004fda:	4629      	mov	r1, r5
 8004fdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fe0:	f7ff fd0c 	bl	80049fc <memset>
 8004fe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fec:	4620      	mov	r0, r4
 8004fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ff0:	3468      	adds	r4, #104	; 0x68
 8004ff2:	e7d9      	b.n	8004fa8 <__sfp+0x1c>
 8004ff4:	2104      	movs	r1, #4
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	f7ff ff62 	bl	8004ec0 <__sfmoreglue>
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	6030      	str	r0, [r6, #0]
 8005000:	2800      	cmp	r0, #0
 8005002:	d1d5      	bne.n	8004fb0 <__sfp+0x24>
 8005004:	f7ff ff78 	bl	8004ef8 <__sfp_lock_release>
 8005008:	230c      	movs	r3, #12
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	e7ee      	b.n	8004fec <__sfp+0x60>
 800500e:	bf00      	nop
 8005010:	08005ecc 	.word	0x08005ecc
 8005014:	ffff0001 	.word	0xffff0001

08005018 <_fwalk_reent>:
 8005018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800501c:	4606      	mov	r6, r0
 800501e:	4688      	mov	r8, r1
 8005020:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005024:	2700      	movs	r7, #0
 8005026:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800502a:	f1b9 0901 	subs.w	r9, r9, #1
 800502e:	d505      	bpl.n	800503c <_fwalk_reent+0x24>
 8005030:	6824      	ldr	r4, [r4, #0]
 8005032:	2c00      	cmp	r4, #0
 8005034:	d1f7      	bne.n	8005026 <_fwalk_reent+0xe>
 8005036:	4638      	mov	r0, r7
 8005038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800503c:	89ab      	ldrh	r3, [r5, #12]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d907      	bls.n	8005052 <_fwalk_reent+0x3a>
 8005042:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005046:	3301      	adds	r3, #1
 8005048:	d003      	beq.n	8005052 <_fwalk_reent+0x3a>
 800504a:	4629      	mov	r1, r5
 800504c:	4630      	mov	r0, r6
 800504e:	47c0      	blx	r8
 8005050:	4307      	orrs	r7, r0
 8005052:	3568      	adds	r5, #104	; 0x68
 8005054:	e7e9      	b.n	800502a <_fwalk_reent+0x12>

08005056 <__retarget_lock_init_recursive>:
 8005056:	4770      	bx	lr

08005058 <__retarget_lock_acquire_recursive>:
 8005058:	4770      	bx	lr

0800505a <__retarget_lock_release_recursive>:
 800505a:	4770      	bx	lr

0800505c <__swhatbuf_r>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	460e      	mov	r6, r1
 8005060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005064:	2900      	cmp	r1, #0
 8005066:	b096      	sub	sp, #88	; 0x58
 8005068:	4614      	mov	r4, r2
 800506a:	461d      	mov	r5, r3
 800506c:	da07      	bge.n	800507e <__swhatbuf_r+0x22>
 800506e:	2300      	movs	r3, #0
 8005070:	602b      	str	r3, [r5, #0]
 8005072:	89b3      	ldrh	r3, [r6, #12]
 8005074:	061a      	lsls	r2, r3, #24
 8005076:	d410      	bmi.n	800509a <__swhatbuf_r+0x3e>
 8005078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800507c:	e00e      	b.n	800509c <__swhatbuf_r+0x40>
 800507e:	466a      	mov	r2, sp
 8005080:	f000 fdba 	bl	8005bf8 <_fstat_r>
 8005084:	2800      	cmp	r0, #0
 8005086:	dbf2      	blt.n	800506e <__swhatbuf_r+0x12>
 8005088:	9a01      	ldr	r2, [sp, #4]
 800508a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800508e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005092:	425a      	negs	r2, r3
 8005094:	415a      	adcs	r2, r3
 8005096:	602a      	str	r2, [r5, #0]
 8005098:	e7ee      	b.n	8005078 <__swhatbuf_r+0x1c>
 800509a:	2340      	movs	r3, #64	; 0x40
 800509c:	2000      	movs	r0, #0
 800509e:	6023      	str	r3, [r4, #0]
 80050a0:	b016      	add	sp, #88	; 0x58
 80050a2:	bd70      	pop	{r4, r5, r6, pc}

080050a4 <__smakebuf_r>:
 80050a4:	898b      	ldrh	r3, [r1, #12]
 80050a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050a8:	079d      	lsls	r5, r3, #30
 80050aa:	4606      	mov	r6, r0
 80050ac:	460c      	mov	r4, r1
 80050ae:	d507      	bpl.n	80050c0 <__smakebuf_r+0x1c>
 80050b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	6123      	str	r3, [r4, #16]
 80050b8:	2301      	movs	r3, #1
 80050ba:	6163      	str	r3, [r4, #20]
 80050bc:	b002      	add	sp, #8
 80050be:	bd70      	pop	{r4, r5, r6, pc}
 80050c0:	ab01      	add	r3, sp, #4
 80050c2:	466a      	mov	r2, sp
 80050c4:	f7ff ffca 	bl	800505c <__swhatbuf_r>
 80050c8:	9900      	ldr	r1, [sp, #0]
 80050ca:	4605      	mov	r5, r0
 80050cc:	4630      	mov	r0, r6
 80050ce:	f000 f879 	bl	80051c4 <_malloc_r>
 80050d2:	b948      	cbnz	r0, 80050e8 <__smakebuf_r+0x44>
 80050d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050d8:	059a      	lsls	r2, r3, #22
 80050da:	d4ef      	bmi.n	80050bc <__smakebuf_r+0x18>
 80050dc:	f023 0303 	bic.w	r3, r3, #3
 80050e0:	f043 0302 	orr.w	r3, r3, #2
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	e7e3      	b.n	80050b0 <__smakebuf_r+0xc>
 80050e8:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <__smakebuf_r+0x7c>)
 80050ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80050ec:	89a3      	ldrh	r3, [r4, #12]
 80050ee:	6020      	str	r0, [r4, #0]
 80050f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f4:	81a3      	strh	r3, [r4, #12]
 80050f6:	9b00      	ldr	r3, [sp, #0]
 80050f8:	6163      	str	r3, [r4, #20]
 80050fa:	9b01      	ldr	r3, [sp, #4]
 80050fc:	6120      	str	r0, [r4, #16]
 80050fe:	b15b      	cbz	r3, 8005118 <__smakebuf_r+0x74>
 8005100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005104:	4630      	mov	r0, r6
 8005106:	f000 fd89 	bl	8005c1c <_isatty_r>
 800510a:	b128      	cbz	r0, 8005118 <__smakebuf_r+0x74>
 800510c:	89a3      	ldrh	r3, [r4, #12]
 800510e:	f023 0303 	bic.w	r3, r3, #3
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	81a3      	strh	r3, [r4, #12]
 8005118:	89a0      	ldrh	r0, [r4, #12]
 800511a:	4305      	orrs	r5, r0
 800511c:	81a5      	strh	r5, [r4, #12]
 800511e:	e7cd      	b.n	80050bc <__smakebuf_r+0x18>
 8005120:	08004eb5 	.word	0x08004eb5

08005124 <_free_r>:
 8005124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005126:	2900      	cmp	r1, #0
 8005128:	d048      	beq.n	80051bc <_free_r+0x98>
 800512a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800512e:	9001      	str	r0, [sp, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	f1a1 0404 	sub.w	r4, r1, #4
 8005136:	bfb8      	it	lt
 8005138:	18e4      	addlt	r4, r4, r3
 800513a:	f000 fdb9 	bl	8005cb0 <__malloc_lock>
 800513e:	4a20      	ldr	r2, [pc, #128]	; (80051c0 <_free_r+0x9c>)
 8005140:	9801      	ldr	r0, [sp, #4]
 8005142:	6813      	ldr	r3, [r2, #0]
 8005144:	4615      	mov	r5, r2
 8005146:	b933      	cbnz	r3, 8005156 <_free_r+0x32>
 8005148:	6063      	str	r3, [r4, #4]
 800514a:	6014      	str	r4, [r2, #0]
 800514c:	b003      	add	sp, #12
 800514e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005152:	f000 bdb3 	b.w	8005cbc <__malloc_unlock>
 8005156:	42a3      	cmp	r3, r4
 8005158:	d90b      	bls.n	8005172 <_free_r+0x4e>
 800515a:	6821      	ldr	r1, [r4, #0]
 800515c:	1862      	adds	r2, r4, r1
 800515e:	4293      	cmp	r3, r2
 8005160:	bf04      	itt	eq
 8005162:	681a      	ldreq	r2, [r3, #0]
 8005164:	685b      	ldreq	r3, [r3, #4]
 8005166:	6063      	str	r3, [r4, #4]
 8005168:	bf04      	itt	eq
 800516a:	1852      	addeq	r2, r2, r1
 800516c:	6022      	streq	r2, [r4, #0]
 800516e:	602c      	str	r4, [r5, #0]
 8005170:	e7ec      	b.n	800514c <_free_r+0x28>
 8005172:	461a      	mov	r2, r3
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	b10b      	cbz	r3, 800517c <_free_r+0x58>
 8005178:	42a3      	cmp	r3, r4
 800517a:	d9fa      	bls.n	8005172 <_free_r+0x4e>
 800517c:	6811      	ldr	r1, [r2, #0]
 800517e:	1855      	adds	r5, r2, r1
 8005180:	42a5      	cmp	r5, r4
 8005182:	d10b      	bne.n	800519c <_free_r+0x78>
 8005184:	6824      	ldr	r4, [r4, #0]
 8005186:	4421      	add	r1, r4
 8005188:	1854      	adds	r4, r2, r1
 800518a:	42a3      	cmp	r3, r4
 800518c:	6011      	str	r1, [r2, #0]
 800518e:	d1dd      	bne.n	800514c <_free_r+0x28>
 8005190:	681c      	ldr	r4, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	6053      	str	r3, [r2, #4]
 8005196:	4421      	add	r1, r4
 8005198:	6011      	str	r1, [r2, #0]
 800519a:	e7d7      	b.n	800514c <_free_r+0x28>
 800519c:	d902      	bls.n	80051a4 <_free_r+0x80>
 800519e:	230c      	movs	r3, #12
 80051a0:	6003      	str	r3, [r0, #0]
 80051a2:	e7d3      	b.n	800514c <_free_r+0x28>
 80051a4:	6825      	ldr	r5, [r4, #0]
 80051a6:	1961      	adds	r1, r4, r5
 80051a8:	428b      	cmp	r3, r1
 80051aa:	bf04      	itt	eq
 80051ac:	6819      	ldreq	r1, [r3, #0]
 80051ae:	685b      	ldreq	r3, [r3, #4]
 80051b0:	6063      	str	r3, [r4, #4]
 80051b2:	bf04      	itt	eq
 80051b4:	1949      	addeq	r1, r1, r5
 80051b6:	6021      	streq	r1, [r4, #0]
 80051b8:	6054      	str	r4, [r2, #4]
 80051ba:	e7c7      	b.n	800514c <_free_r+0x28>
 80051bc:	b003      	add	sp, #12
 80051be:	bd30      	pop	{r4, r5, pc}
 80051c0:	200000b8 	.word	0x200000b8

080051c4 <_malloc_r>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	1ccd      	adds	r5, r1, #3
 80051c8:	f025 0503 	bic.w	r5, r5, #3
 80051cc:	3508      	adds	r5, #8
 80051ce:	2d0c      	cmp	r5, #12
 80051d0:	bf38      	it	cc
 80051d2:	250c      	movcc	r5, #12
 80051d4:	2d00      	cmp	r5, #0
 80051d6:	4606      	mov	r6, r0
 80051d8:	db01      	blt.n	80051de <_malloc_r+0x1a>
 80051da:	42a9      	cmp	r1, r5
 80051dc:	d903      	bls.n	80051e6 <_malloc_r+0x22>
 80051de:	230c      	movs	r3, #12
 80051e0:	6033      	str	r3, [r6, #0]
 80051e2:	2000      	movs	r0, #0
 80051e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051e6:	f000 fd63 	bl	8005cb0 <__malloc_lock>
 80051ea:	4921      	ldr	r1, [pc, #132]	; (8005270 <_malloc_r+0xac>)
 80051ec:	680a      	ldr	r2, [r1, #0]
 80051ee:	4614      	mov	r4, r2
 80051f0:	b99c      	cbnz	r4, 800521a <_malloc_r+0x56>
 80051f2:	4f20      	ldr	r7, [pc, #128]	; (8005274 <_malloc_r+0xb0>)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	b923      	cbnz	r3, 8005202 <_malloc_r+0x3e>
 80051f8:	4621      	mov	r1, r4
 80051fa:	4630      	mov	r0, r6
 80051fc:	f000 fc86 	bl	8005b0c <_sbrk_r>
 8005200:	6038      	str	r0, [r7, #0]
 8005202:	4629      	mov	r1, r5
 8005204:	4630      	mov	r0, r6
 8005206:	f000 fc81 	bl	8005b0c <_sbrk_r>
 800520a:	1c43      	adds	r3, r0, #1
 800520c:	d123      	bne.n	8005256 <_malloc_r+0x92>
 800520e:	230c      	movs	r3, #12
 8005210:	6033      	str	r3, [r6, #0]
 8005212:	4630      	mov	r0, r6
 8005214:	f000 fd52 	bl	8005cbc <__malloc_unlock>
 8005218:	e7e3      	b.n	80051e2 <_malloc_r+0x1e>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	1b5b      	subs	r3, r3, r5
 800521e:	d417      	bmi.n	8005250 <_malloc_r+0x8c>
 8005220:	2b0b      	cmp	r3, #11
 8005222:	d903      	bls.n	800522c <_malloc_r+0x68>
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	441c      	add	r4, r3
 8005228:	6025      	str	r5, [r4, #0]
 800522a:	e004      	b.n	8005236 <_malloc_r+0x72>
 800522c:	6863      	ldr	r3, [r4, #4]
 800522e:	42a2      	cmp	r2, r4
 8005230:	bf0c      	ite	eq
 8005232:	600b      	streq	r3, [r1, #0]
 8005234:	6053      	strne	r3, [r2, #4]
 8005236:	4630      	mov	r0, r6
 8005238:	f000 fd40 	bl	8005cbc <__malloc_unlock>
 800523c:	f104 000b 	add.w	r0, r4, #11
 8005240:	1d23      	adds	r3, r4, #4
 8005242:	f020 0007 	bic.w	r0, r0, #7
 8005246:	1ac2      	subs	r2, r0, r3
 8005248:	d0cc      	beq.n	80051e4 <_malloc_r+0x20>
 800524a:	1a1b      	subs	r3, r3, r0
 800524c:	50a3      	str	r3, [r4, r2]
 800524e:	e7c9      	b.n	80051e4 <_malloc_r+0x20>
 8005250:	4622      	mov	r2, r4
 8005252:	6864      	ldr	r4, [r4, #4]
 8005254:	e7cc      	b.n	80051f0 <_malloc_r+0x2c>
 8005256:	1cc4      	adds	r4, r0, #3
 8005258:	f024 0403 	bic.w	r4, r4, #3
 800525c:	42a0      	cmp	r0, r4
 800525e:	d0e3      	beq.n	8005228 <_malloc_r+0x64>
 8005260:	1a21      	subs	r1, r4, r0
 8005262:	4630      	mov	r0, r6
 8005264:	f000 fc52 	bl	8005b0c <_sbrk_r>
 8005268:	3001      	adds	r0, #1
 800526a:	d1dd      	bne.n	8005228 <_malloc_r+0x64>
 800526c:	e7cf      	b.n	800520e <_malloc_r+0x4a>
 800526e:	bf00      	nop
 8005270:	200000b8 	.word	0x200000b8
 8005274:	200000bc 	.word	0x200000bc

08005278 <__ssputs_r>:
 8005278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800527c:	688e      	ldr	r6, [r1, #8]
 800527e:	429e      	cmp	r6, r3
 8005280:	4682      	mov	sl, r0
 8005282:	460c      	mov	r4, r1
 8005284:	4690      	mov	r8, r2
 8005286:	461f      	mov	r7, r3
 8005288:	d838      	bhi.n	80052fc <__ssputs_r+0x84>
 800528a:	898a      	ldrh	r2, [r1, #12]
 800528c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005290:	d032      	beq.n	80052f8 <__ssputs_r+0x80>
 8005292:	6825      	ldr	r5, [r4, #0]
 8005294:	6909      	ldr	r1, [r1, #16]
 8005296:	eba5 0901 	sub.w	r9, r5, r1
 800529a:	6965      	ldr	r5, [r4, #20]
 800529c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052a4:	3301      	adds	r3, #1
 80052a6:	444b      	add	r3, r9
 80052a8:	106d      	asrs	r5, r5, #1
 80052aa:	429d      	cmp	r5, r3
 80052ac:	bf38      	it	cc
 80052ae:	461d      	movcc	r5, r3
 80052b0:	0553      	lsls	r3, r2, #21
 80052b2:	d531      	bpl.n	8005318 <__ssputs_r+0xa0>
 80052b4:	4629      	mov	r1, r5
 80052b6:	f7ff ff85 	bl	80051c4 <_malloc_r>
 80052ba:	4606      	mov	r6, r0
 80052bc:	b950      	cbnz	r0, 80052d4 <__ssputs_r+0x5c>
 80052be:	230c      	movs	r3, #12
 80052c0:	f8ca 3000 	str.w	r3, [sl]
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ca:	81a3      	strh	r3, [r4, #12]
 80052cc:	f04f 30ff 	mov.w	r0, #4294967295
 80052d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d4:	6921      	ldr	r1, [r4, #16]
 80052d6:	464a      	mov	r2, r9
 80052d8:	f000 fcc2 	bl	8005c60 <memcpy>
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e6:	81a3      	strh	r3, [r4, #12]
 80052e8:	6126      	str	r6, [r4, #16]
 80052ea:	6165      	str	r5, [r4, #20]
 80052ec:	444e      	add	r6, r9
 80052ee:	eba5 0509 	sub.w	r5, r5, r9
 80052f2:	6026      	str	r6, [r4, #0]
 80052f4:	60a5      	str	r5, [r4, #8]
 80052f6:	463e      	mov	r6, r7
 80052f8:	42be      	cmp	r6, r7
 80052fa:	d900      	bls.n	80052fe <__ssputs_r+0x86>
 80052fc:	463e      	mov	r6, r7
 80052fe:	4632      	mov	r2, r6
 8005300:	6820      	ldr	r0, [r4, #0]
 8005302:	4641      	mov	r1, r8
 8005304:	f000 fcba 	bl	8005c7c <memmove>
 8005308:	68a3      	ldr	r3, [r4, #8]
 800530a:	6822      	ldr	r2, [r4, #0]
 800530c:	1b9b      	subs	r3, r3, r6
 800530e:	4432      	add	r2, r6
 8005310:	60a3      	str	r3, [r4, #8]
 8005312:	6022      	str	r2, [r4, #0]
 8005314:	2000      	movs	r0, #0
 8005316:	e7db      	b.n	80052d0 <__ssputs_r+0x58>
 8005318:	462a      	mov	r2, r5
 800531a:	f000 fcd5 	bl	8005cc8 <_realloc_r>
 800531e:	4606      	mov	r6, r0
 8005320:	2800      	cmp	r0, #0
 8005322:	d1e1      	bne.n	80052e8 <__ssputs_r+0x70>
 8005324:	6921      	ldr	r1, [r4, #16]
 8005326:	4650      	mov	r0, sl
 8005328:	f7ff fefc 	bl	8005124 <_free_r>
 800532c:	e7c7      	b.n	80052be <__ssputs_r+0x46>
	...

08005330 <_svfiprintf_r>:
 8005330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005334:	4698      	mov	r8, r3
 8005336:	898b      	ldrh	r3, [r1, #12]
 8005338:	061b      	lsls	r3, r3, #24
 800533a:	b09d      	sub	sp, #116	; 0x74
 800533c:	4607      	mov	r7, r0
 800533e:	460d      	mov	r5, r1
 8005340:	4614      	mov	r4, r2
 8005342:	d50e      	bpl.n	8005362 <_svfiprintf_r+0x32>
 8005344:	690b      	ldr	r3, [r1, #16]
 8005346:	b963      	cbnz	r3, 8005362 <_svfiprintf_r+0x32>
 8005348:	2140      	movs	r1, #64	; 0x40
 800534a:	f7ff ff3b 	bl	80051c4 <_malloc_r>
 800534e:	6028      	str	r0, [r5, #0]
 8005350:	6128      	str	r0, [r5, #16]
 8005352:	b920      	cbnz	r0, 800535e <_svfiprintf_r+0x2e>
 8005354:	230c      	movs	r3, #12
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	f04f 30ff 	mov.w	r0, #4294967295
 800535c:	e0d1      	b.n	8005502 <_svfiprintf_r+0x1d2>
 800535e:	2340      	movs	r3, #64	; 0x40
 8005360:	616b      	str	r3, [r5, #20]
 8005362:	2300      	movs	r3, #0
 8005364:	9309      	str	r3, [sp, #36]	; 0x24
 8005366:	2320      	movs	r3, #32
 8005368:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800536c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005370:	2330      	movs	r3, #48	; 0x30
 8005372:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800551c <_svfiprintf_r+0x1ec>
 8005376:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800537a:	f04f 0901 	mov.w	r9, #1
 800537e:	4623      	mov	r3, r4
 8005380:	469a      	mov	sl, r3
 8005382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005386:	b10a      	cbz	r2, 800538c <_svfiprintf_r+0x5c>
 8005388:	2a25      	cmp	r2, #37	; 0x25
 800538a:	d1f9      	bne.n	8005380 <_svfiprintf_r+0x50>
 800538c:	ebba 0b04 	subs.w	fp, sl, r4
 8005390:	d00b      	beq.n	80053aa <_svfiprintf_r+0x7a>
 8005392:	465b      	mov	r3, fp
 8005394:	4622      	mov	r2, r4
 8005396:	4629      	mov	r1, r5
 8005398:	4638      	mov	r0, r7
 800539a:	f7ff ff6d 	bl	8005278 <__ssputs_r>
 800539e:	3001      	adds	r0, #1
 80053a0:	f000 80aa 	beq.w	80054f8 <_svfiprintf_r+0x1c8>
 80053a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053a6:	445a      	add	r2, fp
 80053a8:	9209      	str	r2, [sp, #36]	; 0x24
 80053aa:	f89a 3000 	ldrb.w	r3, [sl]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 80a2 	beq.w	80054f8 <_svfiprintf_r+0x1c8>
 80053b4:	2300      	movs	r3, #0
 80053b6:	f04f 32ff 	mov.w	r2, #4294967295
 80053ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053be:	f10a 0a01 	add.w	sl, sl, #1
 80053c2:	9304      	str	r3, [sp, #16]
 80053c4:	9307      	str	r3, [sp, #28]
 80053c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053ca:	931a      	str	r3, [sp, #104]	; 0x68
 80053cc:	4654      	mov	r4, sl
 80053ce:	2205      	movs	r2, #5
 80053d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053d4:	4851      	ldr	r0, [pc, #324]	; (800551c <_svfiprintf_r+0x1ec>)
 80053d6:	f7fa fefb 	bl	80001d0 <memchr>
 80053da:	9a04      	ldr	r2, [sp, #16]
 80053dc:	b9d8      	cbnz	r0, 8005416 <_svfiprintf_r+0xe6>
 80053de:	06d0      	lsls	r0, r2, #27
 80053e0:	bf44      	itt	mi
 80053e2:	2320      	movmi	r3, #32
 80053e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053e8:	0711      	lsls	r1, r2, #28
 80053ea:	bf44      	itt	mi
 80053ec:	232b      	movmi	r3, #43	; 0x2b
 80053ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f2:	f89a 3000 	ldrb.w	r3, [sl]
 80053f6:	2b2a      	cmp	r3, #42	; 0x2a
 80053f8:	d015      	beq.n	8005426 <_svfiprintf_r+0xf6>
 80053fa:	9a07      	ldr	r2, [sp, #28]
 80053fc:	4654      	mov	r4, sl
 80053fe:	2000      	movs	r0, #0
 8005400:	f04f 0c0a 	mov.w	ip, #10
 8005404:	4621      	mov	r1, r4
 8005406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800540a:	3b30      	subs	r3, #48	; 0x30
 800540c:	2b09      	cmp	r3, #9
 800540e:	d94e      	bls.n	80054ae <_svfiprintf_r+0x17e>
 8005410:	b1b0      	cbz	r0, 8005440 <_svfiprintf_r+0x110>
 8005412:	9207      	str	r2, [sp, #28]
 8005414:	e014      	b.n	8005440 <_svfiprintf_r+0x110>
 8005416:	eba0 0308 	sub.w	r3, r0, r8
 800541a:	fa09 f303 	lsl.w	r3, r9, r3
 800541e:	4313      	orrs	r3, r2
 8005420:	9304      	str	r3, [sp, #16]
 8005422:	46a2      	mov	sl, r4
 8005424:	e7d2      	b.n	80053cc <_svfiprintf_r+0x9c>
 8005426:	9b03      	ldr	r3, [sp, #12]
 8005428:	1d19      	adds	r1, r3, #4
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	9103      	str	r1, [sp, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	bfbb      	ittet	lt
 8005432:	425b      	neglt	r3, r3
 8005434:	f042 0202 	orrlt.w	r2, r2, #2
 8005438:	9307      	strge	r3, [sp, #28]
 800543a:	9307      	strlt	r3, [sp, #28]
 800543c:	bfb8      	it	lt
 800543e:	9204      	strlt	r2, [sp, #16]
 8005440:	7823      	ldrb	r3, [r4, #0]
 8005442:	2b2e      	cmp	r3, #46	; 0x2e
 8005444:	d10c      	bne.n	8005460 <_svfiprintf_r+0x130>
 8005446:	7863      	ldrb	r3, [r4, #1]
 8005448:	2b2a      	cmp	r3, #42	; 0x2a
 800544a:	d135      	bne.n	80054b8 <_svfiprintf_r+0x188>
 800544c:	9b03      	ldr	r3, [sp, #12]
 800544e:	1d1a      	adds	r2, r3, #4
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	9203      	str	r2, [sp, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	bfb8      	it	lt
 8005458:	f04f 33ff 	movlt.w	r3, #4294967295
 800545c:	3402      	adds	r4, #2
 800545e:	9305      	str	r3, [sp, #20]
 8005460:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800552c <_svfiprintf_r+0x1fc>
 8005464:	7821      	ldrb	r1, [r4, #0]
 8005466:	2203      	movs	r2, #3
 8005468:	4650      	mov	r0, sl
 800546a:	f7fa feb1 	bl	80001d0 <memchr>
 800546e:	b140      	cbz	r0, 8005482 <_svfiprintf_r+0x152>
 8005470:	2340      	movs	r3, #64	; 0x40
 8005472:	eba0 000a 	sub.w	r0, r0, sl
 8005476:	fa03 f000 	lsl.w	r0, r3, r0
 800547a:	9b04      	ldr	r3, [sp, #16]
 800547c:	4303      	orrs	r3, r0
 800547e:	3401      	adds	r4, #1
 8005480:	9304      	str	r3, [sp, #16]
 8005482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005486:	4826      	ldr	r0, [pc, #152]	; (8005520 <_svfiprintf_r+0x1f0>)
 8005488:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800548c:	2206      	movs	r2, #6
 800548e:	f7fa fe9f 	bl	80001d0 <memchr>
 8005492:	2800      	cmp	r0, #0
 8005494:	d038      	beq.n	8005508 <_svfiprintf_r+0x1d8>
 8005496:	4b23      	ldr	r3, [pc, #140]	; (8005524 <_svfiprintf_r+0x1f4>)
 8005498:	bb1b      	cbnz	r3, 80054e2 <_svfiprintf_r+0x1b2>
 800549a:	9b03      	ldr	r3, [sp, #12]
 800549c:	3307      	adds	r3, #7
 800549e:	f023 0307 	bic.w	r3, r3, #7
 80054a2:	3308      	adds	r3, #8
 80054a4:	9303      	str	r3, [sp, #12]
 80054a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a8:	4433      	add	r3, r6
 80054aa:	9309      	str	r3, [sp, #36]	; 0x24
 80054ac:	e767      	b.n	800537e <_svfiprintf_r+0x4e>
 80054ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80054b2:	460c      	mov	r4, r1
 80054b4:	2001      	movs	r0, #1
 80054b6:	e7a5      	b.n	8005404 <_svfiprintf_r+0xd4>
 80054b8:	2300      	movs	r3, #0
 80054ba:	3401      	adds	r4, #1
 80054bc:	9305      	str	r3, [sp, #20]
 80054be:	4619      	mov	r1, r3
 80054c0:	f04f 0c0a 	mov.w	ip, #10
 80054c4:	4620      	mov	r0, r4
 80054c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ca:	3a30      	subs	r2, #48	; 0x30
 80054cc:	2a09      	cmp	r2, #9
 80054ce:	d903      	bls.n	80054d8 <_svfiprintf_r+0x1a8>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0c5      	beq.n	8005460 <_svfiprintf_r+0x130>
 80054d4:	9105      	str	r1, [sp, #20]
 80054d6:	e7c3      	b.n	8005460 <_svfiprintf_r+0x130>
 80054d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80054dc:	4604      	mov	r4, r0
 80054de:	2301      	movs	r3, #1
 80054e0:	e7f0      	b.n	80054c4 <_svfiprintf_r+0x194>
 80054e2:	ab03      	add	r3, sp, #12
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	462a      	mov	r2, r5
 80054e8:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <_svfiprintf_r+0x1f8>)
 80054ea:	a904      	add	r1, sp, #16
 80054ec:	4638      	mov	r0, r7
 80054ee:	f3af 8000 	nop.w
 80054f2:	1c42      	adds	r2, r0, #1
 80054f4:	4606      	mov	r6, r0
 80054f6:	d1d6      	bne.n	80054a6 <_svfiprintf_r+0x176>
 80054f8:	89ab      	ldrh	r3, [r5, #12]
 80054fa:	065b      	lsls	r3, r3, #25
 80054fc:	f53f af2c 	bmi.w	8005358 <_svfiprintf_r+0x28>
 8005500:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005502:	b01d      	add	sp, #116	; 0x74
 8005504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005508:	ab03      	add	r3, sp, #12
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	462a      	mov	r2, r5
 800550e:	4b06      	ldr	r3, [pc, #24]	; (8005528 <_svfiprintf_r+0x1f8>)
 8005510:	a904      	add	r1, sp, #16
 8005512:	4638      	mov	r0, r7
 8005514:	f000 f9d4 	bl	80058c0 <_printf_i>
 8005518:	e7eb      	b.n	80054f2 <_svfiprintf_r+0x1c2>
 800551a:	bf00      	nop
 800551c:	08005f30 	.word	0x08005f30
 8005520:	08005f3a 	.word	0x08005f3a
 8005524:	00000000 	.word	0x00000000
 8005528:	08005279 	.word	0x08005279
 800552c:	08005f36 	.word	0x08005f36

08005530 <__sfputc_r>:
 8005530:	6893      	ldr	r3, [r2, #8]
 8005532:	3b01      	subs	r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	b410      	push	{r4}
 8005538:	6093      	str	r3, [r2, #8]
 800553a:	da08      	bge.n	800554e <__sfputc_r+0x1e>
 800553c:	6994      	ldr	r4, [r2, #24]
 800553e:	42a3      	cmp	r3, r4
 8005540:	db01      	blt.n	8005546 <__sfputc_r+0x16>
 8005542:	290a      	cmp	r1, #10
 8005544:	d103      	bne.n	800554e <__sfputc_r+0x1e>
 8005546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800554a:	f7ff bb0d 	b.w	8004b68 <__swbuf_r>
 800554e:	6813      	ldr	r3, [r2, #0]
 8005550:	1c58      	adds	r0, r3, #1
 8005552:	6010      	str	r0, [r2, #0]
 8005554:	7019      	strb	r1, [r3, #0]
 8005556:	4608      	mov	r0, r1
 8005558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800555c:	4770      	bx	lr

0800555e <__sfputs_r>:
 800555e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005560:	4606      	mov	r6, r0
 8005562:	460f      	mov	r7, r1
 8005564:	4614      	mov	r4, r2
 8005566:	18d5      	adds	r5, r2, r3
 8005568:	42ac      	cmp	r4, r5
 800556a:	d101      	bne.n	8005570 <__sfputs_r+0x12>
 800556c:	2000      	movs	r0, #0
 800556e:	e007      	b.n	8005580 <__sfputs_r+0x22>
 8005570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005574:	463a      	mov	r2, r7
 8005576:	4630      	mov	r0, r6
 8005578:	f7ff ffda 	bl	8005530 <__sfputc_r>
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	d1f3      	bne.n	8005568 <__sfputs_r+0xa>
 8005580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005584 <_vfiprintf_r>:
 8005584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005588:	460d      	mov	r5, r1
 800558a:	b09d      	sub	sp, #116	; 0x74
 800558c:	4614      	mov	r4, r2
 800558e:	4698      	mov	r8, r3
 8005590:	4606      	mov	r6, r0
 8005592:	b118      	cbz	r0, 800559c <_vfiprintf_r+0x18>
 8005594:	6983      	ldr	r3, [r0, #24]
 8005596:	b90b      	cbnz	r3, 800559c <_vfiprintf_r+0x18>
 8005598:	f7ff fcc0 	bl	8004f1c <__sinit>
 800559c:	4b89      	ldr	r3, [pc, #548]	; (80057c4 <_vfiprintf_r+0x240>)
 800559e:	429d      	cmp	r5, r3
 80055a0:	d11b      	bne.n	80055da <_vfiprintf_r+0x56>
 80055a2:	6875      	ldr	r5, [r6, #4]
 80055a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055a6:	07d9      	lsls	r1, r3, #31
 80055a8:	d405      	bmi.n	80055b6 <_vfiprintf_r+0x32>
 80055aa:	89ab      	ldrh	r3, [r5, #12]
 80055ac:	059a      	lsls	r2, r3, #22
 80055ae:	d402      	bmi.n	80055b6 <_vfiprintf_r+0x32>
 80055b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055b2:	f7ff fd51 	bl	8005058 <__retarget_lock_acquire_recursive>
 80055b6:	89ab      	ldrh	r3, [r5, #12]
 80055b8:	071b      	lsls	r3, r3, #28
 80055ba:	d501      	bpl.n	80055c0 <_vfiprintf_r+0x3c>
 80055bc:	692b      	ldr	r3, [r5, #16]
 80055be:	b9eb      	cbnz	r3, 80055fc <_vfiprintf_r+0x78>
 80055c0:	4629      	mov	r1, r5
 80055c2:	4630      	mov	r0, r6
 80055c4:	f7ff fb22 	bl	8004c0c <__swsetup_r>
 80055c8:	b1c0      	cbz	r0, 80055fc <_vfiprintf_r+0x78>
 80055ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055cc:	07dc      	lsls	r4, r3, #31
 80055ce:	d50e      	bpl.n	80055ee <_vfiprintf_r+0x6a>
 80055d0:	f04f 30ff 	mov.w	r0, #4294967295
 80055d4:	b01d      	add	sp, #116	; 0x74
 80055d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055da:	4b7b      	ldr	r3, [pc, #492]	; (80057c8 <_vfiprintf_r+0x244>)
 80055dc:	429d      	cmp	r5, r3
 80055de:	d101      	bne.n	80055e4 <_vfiprintf_r+0x60>
 80055e0:	68b5      	ldr	r5, [r6, #8]
 80055e2:	e7df      	b.n	80055a4 <_vfiprintf_r+0x20>
 80055e4:	4b79      	ldr	r3, [pc, #484]	; (80057cc <_vfiprintf_r+0x248>)
 80055e6:	429d      	cmp	r5, r3
 80055e8:	bf08      	it	eq
 80055ea:	68f5      	ldreq	r5, [r6, #12]
 80055ec:	e7da      	b.n	80055a4 <_vfiprintf_r+0x20>
 80055ee:	89ab      	ldrh	r3, [r5, #12]
 80055f0:	0598      	lsls	r0, r3, #22
 80055f2:	d4ed      	bmi.n	80055d0 <_vfiprintf_r+0x4c>
 80055f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055f6:	f7ff fd30 	bl	800505a <__retarget_lock_release_recursive>
 80055fa:	e7e9      	b.n	80055d0 <_vfiprintf_r+0x4c>
 80055fc:	2300      	movs	r3, #0
 80055fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005600:	2320      	movs	r3, #32
 8005602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005606:	f8cd 800c 	str.w	r8, [sp, #12]
 800560a:	2330      	movs	r3, #48	; 0x30
 800560c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80057d0 <_vfiprintf_r+0x24c>
 8005610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005614:	f04f 0901 	mov.w	r9, #1
 8005618:	4623      	mov	r3, r4
 800561a:	469a      	mov	sl, r3
 800561c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005620:	b10a      	cbz	r2, 8005626 <_vfiprintf_r+0xa2>
 8005622:	2a25      	cmp	r2, #37	; 0x25
 8005624:	d1f9      	bne.n	800561a <_vfiprintf_r+0x96>
 8005626:	ebba 0b04 	subs.w	fp, sl, r4
 800562a:	d00b      	beq.n	8005644 <_vfiprintf_r+0xc0>
 800562c:	465b      	mov	r3, fp
 800562e:	4622      	mov	r2, r4
 8005630:	4629      	mov	r1, r5
 8005632:	4630      	mov	r0, r6
 8005634:	f7ff ff93 	bl	800555e <__sfputs_r>
 8005638:	3001      	adds	r0, #1
 800563a:	f000 80aa 	beq.w	8005792 <_vfiprintf_r+0x20e>
 800563e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005640:	445a      	add	r2, fp
 8005642:	9209      	str	r2, [sp, #36]	; 0x24
 8005644:	f89a 3000 	ldrb.w	r3, [sl]
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 80a2 	beq.w	8005792 <_vfiprintf_r+0x20e>
 800564e:	2300      	movs	r3, #0
 8005650:	f04f 32ff 	mov.w	r2, #4294967295
 8005654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005658:	f10a 0a01 	add.w	sl, sl, #1
 800565c:	9304      	str	r3, [sp, #16]
 800565e:	9307      	str	r3, [sp, #28]
 8005660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005664:	931a      	str	r3, [sp, #104]	; 0x68
 8005666:	4654      	mov	r4, sl
 8005668:	2205      	movs	r2, #5
 800566a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800566e:	4858      	ldr	r0, [pc, #352]	; (80057d0 <_vfiprintf_r+0x24c>)
 8005670:	f7fa fdae 	bl	80001d0 <memchr>
 8005674:	9a04      	ldr	r2, [sp, #16]
 8005676:	b9d8      	cbnz	r0, 80056b0 <_vfiprintf_r+0x12c>
 8005678:	06d1      	lsls	r1, r2, #27
 800567a:	bf44      	itt	mi
 800567c:	2320      	movmi	r3, #32
 800567e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005682:	0713      	lsls	r3, r2, #28
 8005684:	bf44      	itt	mi
 8005686:	232b      	movmi	r3, #43	; 0x2b
 8005688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800568c:	f89a 3000 	ldrb.w	r3, [sl]
 8005690:	2b2a      	cmp	r3, #42	; 0x2a
 8005692:	d015      	beq.n	80056c0 <_vfiprintf_r+0x13c>
 8005694:	9a07      	ldr	r2, [sp, #28]
 8005696:	4654      	mov	r4, sl
 8005698:	2000      	movs	r0, #0
 800569a:	f04f 0c0a 	mov.w	ip, #10
 800569e:	4621      	mov	r1, r4
 80056a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056a4:	3b30      	subs	r3, #48	; 0x30
 80056a6:	2b09      	cmp	r3, #9
 80056a8:	d94e      	bls.n	8005748 <_vfiprintf_r+0x1c4>
 80056aa:	b1b0      	cbz	r0, 80056da <_vfiprintf_r+0x156>
 80056ac:	9207      	str	r2, [sp, #28]
 80056ae:	e014      	b.n	80056da <_vfiprintf_r+0x156>
 80056b0:	eba0 0308 	sub.w	r3, r0, r8
 80056b4:	fa09 f303 	lsl.w	r3, r9, r3
 80056b8:	4313      	orrs	r3, r2
 80056ba:	9304      	str	r3, [sp, #16]
 80056bc:	46a2      	mov	sl, r4
 80056be:	e7d2      	b.n	8005666 <_vfiprintf_r+0xe2>
 80056c0:	9b03      	ldr	r3, [sp, #12]
 80056c2:	1d19      	adds	r1, r3, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	9103      	str	r1, [sp, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	bfbb      	ittet	lt
 80056cc:	425b      	neglt	r3, r3
 80056ce:	f042 0202 	orrlt.w	r2, r2, #2
 80056d2:	9307      	strge	r3, [sp, #28]
 80056d4:	9307      	strlt	r3, [sp, #28]
 80056d6:	bfb8      	it	lt
 80056d8:	9204      	strlt	r2, [sp, #16]
 80056da:	7823      	ldrb	r3, [r4, #0]
 80056dc:	2b2e      	cmp	r3, #46	; 0x2e
 80056de:	d10c      	bne.n	80056fa <_vfiprintf_r+0x176>
 80056e0:	7863      	ldrb	r3, [r4, #1]
 80056e2:	2b2a      	cmp	r3, #42	; 0x2a
 80056e4:	d135      	bne.n	8005752 <_vfiprintf_r+0x1ce>
 80056e6:	9b03      	ldr	r3, [sp, #12]
 80056e8:	1d1a      	adds	r2, r3, #4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	9203      	str	r2, [sp, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bfb8      	it	lt
 80056f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80056f6:	3402      	adds	r4, #2
 80056f8:	9305      	str	r3, [sp, #20]
 80056fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80057e0 <_vfiprintf_r+0x25c>
 80056fe:	7821      	ldrb	r1, [r4, #0]
 8005700:	2203      	movs	r2, #3
 8005702:	4650      	mov	r0, sl
 8005704:	f7fa fd64 	bl	80001d0 <memchr>
 8005708:	b140      	cbz	r0, 800571c <_vfiprintf_r+0x198>
 800570a:	2340      	movs	r3, #64	; 0x40
 800570c:	eba0 000a 	sub.w	r0, r0, sl
 8005710:	fa03 f000 	lsl.w	r0, r3, r0
 8005714:	9b04      	ldr	r3, [sp, #16]
 8005716:	4303      	orrs	r3, r0
 8005718:	3401      	adds	r4, #1
 800571a:	9304      	str	r3, [sp, #16]
 800571c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005720:	482c      	ldr	r0, [pc, #176]	; (80057d4 <_vfiprintf_r+0x250>)
 8005722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005726:	2206      	movs	r2, #6
 8005728:	f7fa fd52 	bl	80001d0 <memchr>
 800572c:	2800      	cmp	r0, #0
 800572e:	d03f      	beq.n	80057b0 <_vfiprintf_r+0x22c>
 8005730:	4b29      	ldr	r3, [pc, #164]	; (80057d8 <_vfiprintf_r+0x254>)
 8005732:	bb1b      	cbnz	r3, 800577c <_vfiprintf_r+0x1f8>
 8005734:	9b03      	ldr	r3, [sp, #12]
 8005736:	3307      	adds	r3, #7
 8005738:	f023 0307 	bic.w	r3, r3, #7
 800573c:	3308      	adds	r3, #8
 800573e:	9303      	str	r3, [sp, #12]
 8005740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005742:	443b      	add	r3, r7
 8005744:	9309      	str	r3, [sp, #36]	; 0x24
 8005746:	e767      	b.n	8005618 <_vfiprintf_r+0x94>
 8005748:	fb0c 3202 	mla	r2, ip, r2, r3
 800574c:	460c      	mov	r4, r1
 800574e:	2001      	movs	r0, #1
 8005750:	e7a5      	b.n	800569e <_vfiprintf_r+0x11a>
 8005752:	2300      	movs	r3, #0
 8005754:	3401      	adds	r4, #1
 8005756:	9305      	str	r3, [sp, #20]
 8005758:	4619      	mov	r1, r3
 800575a:	f04f 0c0a 	mov.w	ip, #10
 800575e:	4620      	mov	r0, r4
 8005760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005764:	3a30      	subs	r2, #48	; 0x30
 8005766:	2a09      	cmp	r2, #9
 8005768:	d903      	bls.n	8005772 <_vfiprintf_r+0x1ee>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0c5      	beq.n	80056fa <_vfiprintf_r+0x176>
 800576e:	9105      	str	r1, [sp, #20]
 8005770:	e7c3      	b.n	80056fa <_vfiprintf_r+0x176>
 8005772:	fb0c 2101 	mla	r1, ip, r1, r2
 8005776:	4604      	mov	r4, r0
 8005778:	2301      	movs	r3, #1
 800577a:	e7f0      	b.n	800575e <_vfiprintf_r+0x1da>
 800577c:	ab03      	add	r3, sp, #12
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	462a      	mov	r2, r5
 8005782:	4b16      	ldr	r3, [pc, #88]	; (80057dc <_vfiprintf_r+0x258>)
 8005784:	a904      	add	r1, sp, #16
 8005786:	4630      	mov	r0, r6
 8005788:	f3af 8000 	nop.w
 800578c:	4607      	mov	r7, r0
 800578e:	1c78      	adds	r0, r7, #1
 8005790:	d1d6      	bne.n	8005740 <_vfiprintf_r+0x1bc>
 8005792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005794:	07d9      	lsls	r1, r3, #31
 8005796:	d405      	bmi.n	80057a4 <_vfiprintf_r+0x220>
 8005798:	89ab      	ldrh	r3, [r5, #12]
 800579a:	059a      	lsls	r2, r3, #22
 800579c:	d402      	bmi.n	80057a4 <_vfiprintf_r+0x220>
 800579e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057a0:	f7ff fc5b 	bl	800505a <__retarget_lock_release_recursive>
 80057a4:	89ab      	ldrh	r3, [r5, #12]
 80057a6:	065b      	lsls	r3, r3, #25
 80057a8:	f53f af12 	bmi.w	80055d0 <_vfiprintf_r+0x4c>
 80057ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057ae:	e711      	b.n	80055d4 <_vfiprintf_r+0x50>
 80057b0:	ab03      	add	r3, sp, #12
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	462a      	mov	r2, r5
 80057b6:	4b09      	ldr	r3, [pc, #36]	; (80057dc <_vfiprintf_r+0x258>)
 80057b8:	a904      	add	r1, sp, #16
 80057ba:	4630      	mov	r0, r6
 80057bc:	f000 f880 	bl	80058c0 <_printf_i>
 80057c0:	e7e4      	b.n	800578c <_vfiprintf_r+0x208>
 80057c2:	bf00      	nop
 80057c4:	08005ef0 	.word	0x08005ef0
 80057c8:	08005f10 	.word	0x08005f10
 80057cc:	08005ed0 	.word	0x08005ed0
 80057d0:	08005f30 	.word	0x08005f30
 80057d4:	08005f3a 	.word	0x08005f3a
 80057d8:	00000000 	.word	0x00000000
 80057dc:	0800555f 	.word	0x0800555f
 80057e0:	08005f36 	.word	0x08005f36

080057e4 <_printf_common>:
 80057e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e8:	4616      	mov	r6, r2
 80057ea:	4699      	mov	r9, r3
 80057ec:	688a      	ldr	r2, [r1, #8]
 80057ee:	690b      	ldr	r3, [r1, #16]
 80057f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057f4:	4293      	cmp	r3, r2
 80057f6:	bfb8      	it	lt
 80057f8:	4613      	movlt	r3, r2
 80057fa:	6033      	str	r3, [r6, #0]
 80057fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005800:	4607      	mov	r7, r0
 8005802:	460c      	mov	r4, r1
 8005804:	b10a      	cbz	r2, 800580a <_printf_common+0x26>
 8005806:	3301      	adds	r3, #1
 8005808:	6033      	str	r3, [r6, #0]
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	0699      	lsls	r1, r3, #26
 800580e:	bf42      	ittt	mi
 8005810:	6833      	ldrmi	r3, [r6, #0]
 8005812:	3302      	addmi	r3, #2
 8005814:	6033      	strmi	r3, [r6, #0]
 8005816:	6825      	ldr	r5, [r4, #0]
 8005818:	f015 0506 	ands.w	r5, r5, #6
 800581c:	d106      	bne.n	800582c <_printf_common+0x48>
 800581e:	f104 0a19 	add.w	sl, r4, #25
 8005822:	68e3      	ldr	r3, [r4, #12]
 8005824:	6832      	ldr	r2, [r6, #0]
 8005826:	1a9b      	subs	r3, r3, r2
 8005828:	42ab      	cmp	r3, r5
 800582a:	dc26      	bgt.n	800587a <_printf_common+0x96>
 800582c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005830:	1e13      	subs	r3, r2, #0
 8005832:	6822      	ldr	r2, [r4, #0]
 8005834:	bf18      	it	ne
 8005836:	2301      	movne	r3, #1
 8005838:	0692      	lsls	r2, r2, #26
 800583a:	d42b      	bmi.n	8005894 <_printf_common+0xb0>
 800583c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005840:	4649      	mov	r1, r9
 8005842:	4638      	mov	r0, r7
 8005844:	47c0      	blx	r8
 8005846:	3001      	adds	r0, #1
 8005848:	d01e      	beq.n	8005888 <_printf_common+0xa4>
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	68e5      	ldr	r5, [r4, #12]
 800584e:	6832      	ldr	r2, [r6, #0]
 8005850:	f003 0306 	and.w	r3, r3, #6
 8005854:	2b04      	cmp	r3, #4
 8005856:	bf08      	it	eq
 8005858:	1aad      	subeq	r5, r5, r2
 800585a:	68a3      	ldr	r3, [r4, #8]
 800585c:	6922      	ldr	r2, [r4, #16]
 800585e:	bf0c      	ite	eq
 8005860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005864:	2500      	movne	r5, #0
 8005866:	4293      	cmp	r3, r2
 8005868:	bfc4      	itt	gt
 800586a:	1a9b      	subgt	r3, r3, r2
 800586c:	18ed      	addgt	r5, r5, r3
 800586e:	2600      	movs	r6, #0
 8005870:	341a      	adds	r4, #26
 8005872:	42b5      	cmp	r5, r6
 8005874:	d11a      	bne.n	80058ac <_printf_common+0xc8>
 8005876:	2000      	movs	r0, #0
 8005878:	e008      	b.n	800588c <_printf_common+0xa8>
 800587a:	2301      	movs	r3, #1
 800587c:	4652      	mov	r2, sl
 800587e:	4649      	mov	r1, r9
 8005880:	4638      	mov	r0, r7
 8005882:	47c0      	blx	r8
 8005884:	3001      	adds	r0, #1
 8005886:	d103      	bne.n	8005890 <_printf_common+0xac>
 8005888:	f04f 30ff 	mov.w	r0, #4294967295
 800588c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005890:	3501      	adds	r5, #1
 8005892:	e7c6      	b.n	8005822 <_printf_common+0x3e>
 8005894:	18e1      	adds	r1, r4, r3
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	2030      	movs	r0, #48	; 0x30
 800589a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800589e:	4422      	add	r2, r4
 80058a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058a8:	3302      	adds	r3, #2
 80058aa:	e7c7      	b.n	800583c <_printf_common+0x58>
 80058ac:	2301      	movs	r3, #1
 80058ae:	4622      	mov	r2, r4
 80058b0:	4649      	mov	r1, r9
 80058b2:	4638      	mov	r0, r7
 80058b4:	47c0      	blx	r8
 80058b6:	3001      	adds	r0, #1
 80058b8:	d0e6      	beq.n	8005888 <_printf_common+0xa4>
 80058ba:	3601      	adds	r6, #1
 80058bc:	e7d9      	b.n	8005872 <_printf_common+0x8e>
	...

080058c0 <_printf_i>:
 80058c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c4:	460c      	mov	r4, r1
 80058c6:	4691      	mov	r9, r2
 80058c8:	7e27      	ldrb	r7, [r4, #24]
 80058ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058cc:	2f78      	cmp	r7, #120	; 0x78
 80058ce:	4680      	mov	r8, r0
 80058d0:	469a      	mov	sl, r3
 80058d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d6:	d807      	bhi.n	80058e8 <_printf_i+0x28>
 80058d8:	2f62      	cmp	r7, #98	; 0x62
 80058da:	d80a      	bhi.n	80058f2 <_printf_i+0x32>
 80058dc:	2f00      	cmp	r7, #0
 80058de:	f000 80d8 	beq.w	8005a92 <_printf_i+0x1d2>
 80058e2:	2f58      	cmp	r7, #88	; 0x58
 80058e4:	f000 80a3 	beq.w	8005a2e <_printf_i+0x16e>
 80058e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058f0:	e03a      	b.n	8005968 <_printf_i+0xa8>
 80058f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058f6:	2b15      	cmp	r3, #21
 80058f8:	d8f6      	bhi.n	80058e8 <_printf_i+0x28>
 80058fa:	a001      	add	r0, pc, #4	; (adr r0, 8005900 <_printf_i+0x40>)
 80058fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005900:	08005959 	.word	0x08005959
 8005904:	0800596d 	.word	0x0800596d
 8005908:	080058e9 	.word	0x080058e9
 800590c:	080058e9 	.word	0x080058e9
 8005910:	080058e9 	.word	0x080058e9
 8005914:	080058e9 	.word	0x080058e9
 8005918:	0800596d 	.word	0x0800596d
 800591c:	080058e9 	.word	0x080058e9
 8005920:	080058e9 	.word	0x080058e9
 8005924:	080058e9 	.word	0x080058e9
 8005928:	080058e9 	.word	0x080058e9
 800592c:	08005a79 	.word	0x08005a79
 8005930:	0800599d 	.word	0x0800599d
 8005934:	08005a5b 	.word	0x08005a5b
 8005938:	080058e9 	.word	0x080058e9
 800593c:	080058e9 	.word	0x080058e9
 8005940:	08005a9b 	.word	0x08005a9b
 8005944:	080058e9 	.word	0x080058e9
 8005948:	0800599d 	.word	0x0800599d
 800594c:	080058e9 	.word	0x080058e9
 8005950:	080058e9 	.word	0x080058e9
 8005954:	08005a63 	.word	0x08005a63
 8005958:	680b      	ldr	r3, [r1, #0]
 800595a:	1d1a      	adds	r2, r3, #4
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	600a      	str	r2, [r1, #0]
 8005960:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005968:	2301      	movs	r3, #1
 800596a:	e0a3      	b.n	8005ab4 <_printf_i+0x1f4>
 800596c:	6825      	ldr	r5, [r4, #0]
 800596e:	6808      	ldr	r0, [r1, #0]
 8005970:	062e      	lsls	r6, r5, #24
 8005972:	f100 0304 	add.w	r3, r0, #4
 8005976:	d50a      	bpl.n	800598e <_printf_i+0xce>
 8005978:	6805      	ldr	r5, [r0, #0]
 800597a:	600b      	str	r3, [r1, #0]
 800597c:	2d00      	cmp	r5, #0
 800597e:	da03      	bge.n	8005988 <_printf_i+0xc8>
 8005980:	232d      	movs	r3, #45	; 0x2d
 8005982:	426d      	negs	r5, r5
 8005984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005988:	485e      	ldr	r0, [pc, #376]	; (8005b04 <_printf_i+0x244>)
 800598a:	230a      	movs	r3, #10
 800598c:	e019      	b.n	80059c2 <_printf_i+0x102>
 800598e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005992:	6805      	ldr	r5, [r0, #0]
 8005994:	600b      	str	r3, [r1, #0]
 8005996:	bf18      	it	ne
 8005998:	b22d      	sxthne	r5, r5
 800599a:	e7ef      	b.n	800597c <_printf_i+0xbc>
 800599c:	680b      	ldr	r3, [r1, #0]
 800599e:	6825      	ldr	r5, [r4, #0]
 80059a0:	1d18      	adds	r0, r3, #4
 80059a2:	6008      	str	r0, [r1, #0]
 80059a4:	0628      	lsls	r0, r5, #24
 80059a6:	d501      	bpl.n	80059ac <_printf_i+0xec>
 80059a8:	681d      	ldr	r5, [r3, #0]
 80059aa:	e002      	b.n	80059b2 <_printf_i+0xf2>
 80059ac:	0669      	lsls	r1, r5, #25
 80059ae:	d5fb      	bpl.n	80059a8 <_printf_i+0xe8>
 80059b0:	881d      	ldrh	r5, [r3, #0]
 80059b2:	4854      	ldr	r0, [pc, #336]	; (8005b04 <_printf_i+0x244>)
 80059b4:	2f6f      	cmp	r7, #111	; 0x6f
 80059b6:	bf0c      	ite	eq
 80059b8:	2308      	moveq	r3, #8
 80059ba:	230a      	movne	r3, #10
 80059bc:	2100      	movs	r1, #0
 80059be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059c2:	6866      	ldr	r6, [r4, #4]
 80059c4:	60a6      	str	r6, [r4, #8]
 80059c6:	2e00      	cmp	r6, #0
 80059c8:	bfa2      	ittt	ge
 80059ca:	6821      	ldrge	r1, [r4, #0]
 80059cc:	f021 0104 	bicge.w	r1, r1, #4
 80059d0:	6021      	strge	r1, [r4, #0]
 80059d2:	b90d      	cbnz	r5, 80059d8 <_printf_i+0x118>
 80059d4:	2e00      	cmp	r6, #0
 80059d6:	d04d      	beq.n	8005a74 <_printf_i+0x1b4>
 80059d8:	4616      	mov	r6, r2
 80059da:	fbb5 f1f3 	udiv	r1, r5, r3
 80059de:	fb03 5711 	mls	r7, r3, r1, r5
 80059e2:	5dc7      	ldrb	r7, [r0, r7]
 80059e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059e8:	462f      	mov	r7, r5
 80059ea:	42bb      	cmp	r3, r7
 80059ec:	460d      	mov	r5, r1
 80059ee:	d9f4      	bls.n	80059da <_printf_i+0x11a>
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d10b      	bne.n	8005a0c <_printf_i+0x14c>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	07df      	lsls	r7, r3, #31
 80059f8:	d508      	bpl.n	8005a0c <_printf_i+0x14c>
 80059fa:	6923      	ldr	r3, [r4, #16]
 80059fc:	6861      	ldr	r1, [r4, #4]
 80059fe:	4299      	cmp	r1, r3
 8005a00:	bfde      	ittt	le
 8005a02:	2330      	movle	r3, #48	; 0x30
 8005a04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a0c:	1b92      	subs	r2, r2, r6
 8005a0e:	6122      	str	r2, [r4, #16]
 8005a10:	f8cd a000 	str.w	sl, [sp]
 8005a14:	464b      	mov	r3, r9
 8005a16:	aa03      	add	r2, sp, #12
 8005a18:	4621      	mov	r1, r4
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	f7ff fee2 	bl	80057e4 <_printf_common>
 8005a20:	3001      	adds	r0, #1
 8005a22:	d14c      	bne.n	8005abe <_printf_i+0x1fe>
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295
 8005a28:	b004      	add	sp, #16
 8005a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2e:	4835      	ldr	r0, [pc, #212]	; (8005b04 <_printf_i+0x244>)
 8005a30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	680e      	ldr	r6, [r1, #0]
 8005a38:	061f      	lsls	r7, r3, #24
 8005a3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a3e:	600e      	str	r6, [r1, #0]
 8005a40:	d514      	bpl.n	8005a6c <_printf_i+0x1ac>
 8005a42:	07d9      	lsls	r1, r3, #31
 8005a44:	bf44      	itt	mi
 8005a46:	f043 0320 	orrmi.w	r3, r3, #32
 8005a4a:	6023      	strmi	r3, [r4, #0]
 8005a4c:	b91d      	cbnz	r5, 8005a56 <_printf_i+0x196>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	f023 0320 	bic.w	r3, r3, #32
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	2310      	movs	r3, #16
 8005a58:	e7b0      	b.n	80059bc <_printf_i+0xfc>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	f043 0320 	orr.w	r3, r3, #32
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	2378      	movs	r3, #120	; 0x78
 8005a64:	4828      	ldr	r0, [pc, #160]	; (8005b08 <_printf_i+0x248>)
 8005a66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a6a:	e7e3      	b.n	8005a34 <_printf_i+0x174>
 8005a6c:	065e      	lsls	r6, r3, #25
 8005a6e:	bf48      	it	mi
 8005a70:	b2ad      	uxthmi	r5, r5
 8005a72:	e7e6      	b.n	8005a42 <_printf_i+0x182>
 8005a74:	4616      	mov	r6, r2
 8005a76:	e7bb      	b.n	80059f0 <_printf_i+0x130>
 8005a78:	680b      	ldr	r3, [r1, #0]
 8005a7a:	6826      	ldr	r6, [r4, #0]
 8005a7c:	6960      	ldr	r0, [r4, #20]
 8005a7e:	1d1d      	adds	r5, r3, #4
 8005a80:	600d      	str	r5, [r1, #0]
 8005a82:	0635      	lsls	r5, r6, #24
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	d501      	bpl.n	8005a8c <_printf_i+0x1cc>
 8005a88:	6018      	str	r0, [r3, #0]
 8005a8a:	e002      	b.n	8005a92 <_printf_i+0x1d2>
 8005a8c:	0671      	lsls	r1, r6, #25
 8005a8e:	d5fb      	bpl.n	8005a88 <_printf_i+0x1c8>
 8005a90:	8018      	strh	r0, [r3, #0]
 8005a92:	2300      	movs	r3, #0
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	4616      	mov	r6, r2
 8005a98:	e7ba      	b.n	8005a10 <_printf_i+0x150>
 8005a9a:	680b      	ldr	r3, [r1, #0]
 8005a9c:	1d1a      	adds	r2, r3, #4
 8005a9e:	600a      	str	r2, [r1, #0]
 8005aa0:	681e      	ldr	r6, [r3, #0]
 8005aa2:	6862      	ldr	r2, [r4, #4]
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	f7fa fb92 	bl	80001d0 <memchr>
 8005aac:	b108      	cbz	r0, 8005ab2 <_printf_i+0x1f2>
 8005aae:	1b80      	subs	r0, r0, r6
 8005ab0:	6060      	str	r0, [r4, #4]
 8005ab2:	6863      	ldr	r3, [r4, #4]
 8005ab4:	6123      	str	r3, [r4, #16]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005abc:	e7a8      	b.n	8005a10 <_printf_i+0x150>
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	47d0      	blx	sl
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d0ab      	beq.n	8005a24 <_printf_i+0x164>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	079b      	lsls	r3, r3, #30
 8005ad0:	d413      	bmi.n	8005afa <_printf_i+0x23a>
 8005ad2:	68e0      	ldr	r0, [r4, #12]
 8005ad4:	9b03      	ldr	r3, [sp, #12]
 8005ad6:	4298      	cmp	r0, r3
 8005ad8:	bfb8      	it	lt
 8005ada:	4618      	movlt	r0, r3
 8005adc:	e7a4      	b.n	8005a28 <_printf_i+0x168>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	47d0      	blx	sl
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d09b      	beq.n	8005a24 <_printf_i+0x164>
 8005aec:	3501      	adds	r5, #1
 8005aee:	68e3      	ldr	r3, [r4, #12]
 8005af0:	9903      	ldr	r1, [sp, #12]
 8005af2:	1a5b      	subs	r3, r3, r1
 8005af4:	42ab      	cmp	r3, r5
 8005af6:	dcf2      	bgt.n	8005ade <_printf_i+0x21e>
 8005af8:	e7eb      	b.n	8005ad2 <_printf_i+0x212>
 8005afa:	2500      	movs	r5, #0
 8005afc:	f104 0619 	add.w	r6, r4, #25
 8005b00:	e7f5      	b.n	8005aee <_printf_i+0x22e>
 8005b02:	bf00      	nop
 8005b04:	08005f41 	.word	0x08005f41
 8005b08:	08005f52 	.word	0x08005f52

08005b0c <_sbrk_r>:
 8005b0c:	b538      	push	{r3, r4, r5, lr}
 8005b0e:	4d06      	ldr	r5, [pc, #24]	; (8005b28 <_sbrk_r+0x1c>)
 8005b10:	2300      	movs	r3, #0
 8005b12:	4604      	mov	r4, r0
 8005b14:	4608      	mov	r0, r1
 8005b16:	602b      	str	r3, [r5, #0]
 8005b18:	f7fe fea6 	bl	8004868 <_sbrk>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_sbrk_r+0x1a>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_sbrk_r+0x1a>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	200002d0 	.word	0x200002d0

08005b2c <__sread>:
 8005b2c:	b510      	push	{r4, lr}
 8005b2e:	460c      	mov	r4, r1
 8005b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b34:	f000 f8ee 	bl	8005d14 <_read_r>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	bfab      	itete	ge
 8005b3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b40:	181b      	addge	r3, r3, r0
 8005b42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b46:	bfac      	ite	ge
 8005b48:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b4a:	81a3      	strhlt	r3, [r4, #12]
 8005b4c:	bd10      	pop	{r4, pc}

08005b4e <__swrite>:
 8005b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b52:	461f      	mov	r7, r3
 8005b54:	898b      	ldrh	r3, [r1, #12]
 8005b56:	05db      	lsls	r3, r3, #23
 8005b58:	4605      	mov	r5, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	4616      	mov	r6, r2
 8005b5e:	d505      	bpl.n	8005b6c <__swrite+0x1e>
 8005b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b64:	2302      	movs	r3, #2
 8005b66:	2200      	movs	r2, #0
 8005b68:	f000 f868 	bl	8005c3c <_lseek_r>
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b76:	81a3      	strh	r3, [r4, #12]
 8005b78:	4632      	mov	r2, r6
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b82:	f000 b817 	b.w	8005bb4 <_write_r>

08005b86 <__sseek>:
 8005b86:	b510      	push	{r4, lr}
 8005b88:	460c      	mov	r4, r1
 8005b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b8e:	f000 f855 	bl	8005c3c <_lseek_r>
 8005b92:	1c43      	adds	r3, r0, #1
 8005b94:	89a3      	ldrh	r3, [r4, #12]
 8005b96:	bf15      	itete	ne
 8005b98:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ba2:	81a3      	strheq	r3, [r4, #12]
 8005ba4:	bf18      	it	ne
 8005ba6:	81a3      	strhne	r3, [r4, #12]
 8005ba8:	bd10      	pop	{r4, pc}

08005baa <__sclose>:
 8005baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bae:	f000 b813 	b.w	8005bd8 <_close_r>
	...

08005bb4 <_write_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4d07      	ldr	r5, [pc, #28]	; (8005bd4 <_write_r+0x20>)
 8005bb8:	4604      	mov	r4, r0
 8005bba:	4608      	mov	r0, r1
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	602a      	str	r2, [r5, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f7fe fc42 	bl	800444c <_write>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_write_r+0x1e>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_write_r+0x1e>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	200002d0 	.word	0x200002d0

08005bd8 <_close_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4d06      	ldr	r5, [pc, #24]	; (8005bf4 <_close_r+0x1c>)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	4604      	mov	r4, r0
 8005be0:	4608      	mov	r0, r1
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	f7fe fe0b 	bl	80047fe <_close>
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d102      	bne.n	8005bf2 <_close_r+0x1a>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	b103      	cbz	r3, 8005bf2 <_close_r+0x1a>
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	200002d0 	.word	0x200002d0

08005bf8 <_fstat_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4d07      	ldr	r5, [pc, #28]	; (8005c18 <_fstat_r+0x20>)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4604      	mov	r4, r0
 8005c00:	4608      	mov	r0, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	602b      	str	r3, [r5, #0]
 8005c06:	f7fe fe06 	bl	8004816 <_fstat>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	d102      	bne.n	8005c14 <_fstat_r+0x1c>
 8005c0e:	682b      	ldr	r3, [r5, #0]
 8005c10:	b103      	cbz	r3, 8005c14 <_fstat_r+0x1c>
 8005c12:	6023      	str	r3, [r4, #0]
 8005c14:	bd38      	pop	{r3, r4, r5, pc}
 8005c16:	bf00      	nop
 8005c18:	200002d0 	.word	0x200002d0

08005c1c <_isatty_r>:
 8005c1c:	b538      	push	{r3, r4, r5, lr}
 8005c1e:	4d06      	ldr	r5, [pc, #24]	; (8005c38 <_isatty_r+0x1c>)
 8005c20:	2300      	movs	r3, #0
 8005c22:	4604      	mov	r4, r0
 8005c24:	4608      	mov	r0, r1
 8005c26:	602b      	str	r3, [r5, #0]
 8005c28:	f7fe fe05 	bl	8004836 <_isatty>
 8005c2c:	1c43      	adds	r3, r0, #1
 8005c2e:	d102      	bne.n	8005c36 <_isatty_r+0x1a>
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	b103      	cbz	r3, 8005c36 <_isatty_r+0x1a>
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	bd38      	pop	{r3, r4, r5, pc}
 8005c38:	200002d0 	.word	0x200002d0

08005c3c <_lseek_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	4d07      	ldr	r5, [pc, #28]	; (8005c5c <_lseek_r+0x20>)
 8005c40:	4604      	mov	r4, r0
 8005c42:	4608      	mov	r0, r1
 8005c44:	4611      	mov	r1, r2
 8005c46:	2200      	movs	r2, #0
 8005c48:	602a      	str	r2, [r5, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f7fe fdfe 	bl	800484c <_lseek>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_lseek_r+0x1e>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_lseek_r+0x1e>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	200002d0 	.word	0x200002d0

08005c60 <memcpy>:
 8005c60:	440a      	add	r2, r1
 8005c62:	4291      	cmp	r1, r2
 8005c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c68:	d100      	bne.n	8005c6c <memcpy+0xc>
 8005c6a:	4770      	bx	lr
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c76:	4291      	cmp	r1, r2
 8005c78:	d1f9      	bne.n	8005c6e <memcpy+0xe>
 8005c7a:	bd10      	pop	{r4, pc}

08005c7c <memmove>:
 8005c7c:	4288      	cmp	r0, r1
 8005c7e:	b510      	push	{r4, lr}
 8005c80:	eb01 0402 	add.w	r4, r1, r2
 8005c84:	d902      	bls.n	8005c8c <memmove+0x10>
 8005c86:	4284      	cmp	r4, r0
 8005c88:	4623      	mov	r3, r4
 8005c8a:	d807      	bhi.n	8005c9c <memmove+0x20>
 8005c8c:	1e43      	subs	r3, r0, #1
 8005c8e:	42a1      	cmp	r1, r4
 8005c90:	d008      	beq.n	8005ca4 <memmove+0x28>
 8005c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c9a:	e7f8      	b.n	8005c8e <memmove+0x12>
 8005c9c:	4402      	add	r2, r0
 8005c9e:	4601      	mov	r1, r0
 8005ca0:	428a      	cmp	r2, r1
 8005ca2:	d100      	bne.n	8005ca6 <memmove+0x2a>
 8005ca4:	bd10      	pop	{r4, pc}
 8005ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cae:	e7f7      	b.n	8005ca0 <memmove+0x24>

08005cb0 <__malloc_lock>:
 8005cb0:	4801      	ldr	r0, [pc, #4]	; (8005cb8 <__malloc_lock+0x8>)
 8005cb2:	f7ff b9d1 	b.w	8005058 <__retarget_lock_acquire_recursive>
 8005cb6:	bf00      	nop
 8005cb8:	200002c8 	.word	0x200002c8

08005cbc <__malloc_unlock>:
 8005cbc:	4801      	ldr	r0, [pc, #4]	; (8005cc4 <__malloc_unlock+0x8>)
 8005cbe:	f7ff b9cc 	b.w	800505a <__retarget_lock_release_recursive>
 8005cc2:	bf00      	nop
 8005cc4:	200002c8 	.word	0x200002c8

08005cc8 <_realloc_r>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	4607      	mov	r7, r0
 8005ccc:	4614      	mov	r4, r2
 8005cce:	460e      	mov	r6, r1
 8005cd0:	b921      	cbnz	r1, 8005cdc <_realloc_r+0x14>
 8005cd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	f7ff ba74 	b.w	80051c4 <_malloc_r>
 8005cdc:	b922      	cbnz	r2, 8005ce8 <_realloc_r+0x20>
 8005cde:	f7ff fa21 	bl	8005124 <_free_r>
 8005ce2:	4625      	mov	r5, r4
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce8:	f000 f826 	bl	8005d38 <_malloc_usable_size_r>
 8005cec:	42a0      	cmp	r0, r4
 8005cee:	d20f      	bcs.n	8005d10 <_realloc_r+0x48>
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	f7ff fa66 	bl	80051c4 <_malloc_r>
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d0f2      	beq.n	8005ce4 <_realloc_r+0x1c>
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4622      	mov	r2, r4
 8005d02:	f7ff ffad 	bl	8005c60 <memcpy>
 8005d06:	4631      	mov	r1, r6
 8005d08:	4638      	mov	r0, r7
 8005d0a:	f7ff fa0b 	bl	8005124 <_free_r>
 8005d0e:	e7e9      	b.n	8005ce4 <_realloc_r+0x1c>
 8005d10:	4635      	mov	r5, r6
 8005d12:	e7e7      	b.n	8005ce4 <_realloc_r+0x1c>

08005d14 <_read_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	4d07      	ldr	r5, [pc, #28]	; (8005d34 <_read_r+0x20>)
 8005d18:	4604      	mov	r4, r0
 8005d1a:	4608      	mov	r0, r1
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	2200      	movs	r2, #0
 8005d20:	602a      	str	r2, [r5, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	f7fe fd4e 	bl	80047c4 <_read>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d102      	bne.n	8005d32 <_read_r+0x1e>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	b103      	cbz	r3, 8005d32 <_read_r+0x1e>
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
 8005d34:	200002d0 	.word	0x200002d0

08005d38 <_malloc_usable_size_r>:
 8005d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d3c:	1f18      	subs	r0, r3, #4
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	bfbc      	itt	lt
 8005d42:	580b      	ldrlt	r3, [r1, r0]
 8005d44:	18c0      	addlt	r0, r0, r3
 8005d46:	4770      	bx	lr

08005d48 <_init>:
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4a:	bf00      	nop
 8005d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4e:	bc08      	pop	{r3}
 8005d50:	469e      	mov	lr, r3
 8005d52:	4770      	bx	lr

08005d54 <_fini>:
 8005d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d56:	bf00      	nop
 8005d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5a:	bc08      	pop	{r3}
 8005d5c:	469e      	mov	lr, r3
 8005d5e:	4770      	bx	lr
