
f404_B3M_torque.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004014  08004014  00014014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e8  080040e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040f0  080040f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000070  08004168  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08004168  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a773  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac9  00000000  00000000  0002a813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0002c2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  0002ca80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001605d  00000000  00000000  0002d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009266  00000000  00000000  000431e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086818  00000000  00000000  0004c44b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2c63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f0  00000000  00000000  000d2cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003ffc 	.word	0x08003ffc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003ffc 	.word	0x08003ffc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <pos2enc_tg.7514>:
  printf("start read test\r\n");
  uint8_t txdata[9] = {0};
  uint8_t rxdata[20] = {0};
  short torque_val=0, enc_data,dis;

  float pos2enc_tg(int pos){
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	f8c7 c000 	str.w	ip, [r7]
	  if (pos<0)pos=36000+pos;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b00      	cmp	r3, #0
 8000588:	da04      	bge.n	8000594 <pos2enc_tg.7514+0x1c>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8000590:	33a0      	adds	r3, #160	; 0xa0
 8000592:	607b      	str	r3, [r7, #4]
	  float deg = pos/100;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <pos2enc_tg.7514+0x50>)
 8000598:	fb82 1203 	smull	r1, r2, r2, r3
 800059c:	1152      	asrs	r2, r2, #5
 800059e:	17db      	asrs	r3, r3, #31
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	ee07 3a90 	vmov	s15, r3
 80005a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005aa:	edc7 7a03 	vstr	s15, [r7, #12]
	  return 11.375*deg;
 80005ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80005b2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80005cc <pos2enc_tg.7514+0x54>
 80005b6:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
 80005ba:	eeb0 0a67 	vmov.f32	s0, s15
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	51eb851f 	.word	0x51eb851f
 80005cc:	41360000 	.word	0x41360000

080005d0 <main>:
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	; 0x30
 80005d4:	af00      	add	r7, sp, #0
int main(void)
 80005d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005da:	623b      	str	r3, [r7, #32]
  HAL_Init();
 80005dc:	f000 fc5a 	bl	8000e94 <HAL_Init>
  SystemClock_Config();
 80005e0:	f000 f940 	bl	8000864 <SystemClock_Config>
  MX_GPIO_Init();
 80005e4:	f000 f9fe 	bl	80009e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f9a8 	bl	800093c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005ec:	f000 f9d0 	bl	8000990 <MX_USART6_UART_Init>
  printf("start read test\r\n");
 80005f0:	4833      	ldr	r0, [pc, #204]	; (80006c0 <main+0xf0>)
 80005f2:	f002 fdbd 	bl	8003170 <puts>
  uint8_t txdata[9] = {0};
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	711a      	strb	r2, [r3, #4]
  uint8_t rxdata[20] = {0};
 8000604:	2300      	movs	r3, #0
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
  short torque_val=0, enc_data,dis;
 8000614:	2300      	movs	r3, #0
 8000616:	85fb      	strh	r3, [r7, #46]	; 0x2e
      HAL_UART_Transmit(&huart6, txdata, 7, 0xFFFF);
//      HAL_Delay(0.03);
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
      //wait(0.001);
  }
  float enc_tg=pos2enc_tg(0);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	469c      	mov	ip, r3
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff ffaa 	bl	8000578 <pos2enc_tg.7514>
 8000624:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28

//  printf("target encoder is %5.2f\r\n",enc_tg);

  HAL_Delay(5000);
 8000628:	f241 3088 	movw	r0, #5000	; 0x1388
 800062c:	f000 fca4 	bl	8000f78 <HAL_Delay>
  write(0xFF,0x0A,0x28);
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	469c      	mov	ip, r3
 8000636:	2228      	movs	r2, #40	; 0x28
 8000638:	210a      	movs	r1, #10
 800063a:	20ff      	movs	r0, #255	; 0xff
 800063c:	f000 f894 	bl	8000768 <write.7544>
  write(0xFF,0x02,0x5C);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	469c      	mov	ip, r3
 8000646:	225c      	movs	r2, #92	; 0x5c
 8000648:	2102      	movs	r1, #2
 800064a:	20ff      	movs	r0, #255	; 0xff
 800064c:	f000 f88c 	bl	8000768 <write.7544>
  write(0xFF,0x08,0x28);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	469c      	mov	ip, r3
 8000656:	2228      	movs	r2, #40	; 0x28
 8000658:	2108      	movs	r1, #8
 800065a:	20ff      	movs	r0, #255	; 0xff
 800065c:	f000 f884 	bl	8000768 <write.7544>

  HAL_UART_Receive_IT(&huart2, buffer,6);
 8000660:	2206      	movs	r2, #6
 8000662:	4918      	ldr	r1, [pc, #96]	; (80006c4 <main+0xf4>)
 8000664:	4818      	ldr	r0, [pc, #96]	; (80006c8 <main+0xf8>)
 8000666:	f001 fde2 	bl	800222e <HAL_UART_Receive_IT>

  torque(0x01,80);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	469c      	mov	ip, r3
 8000670:	2150      	movs	r1, #80	; 0x50
 8000672:	2001      	movs	r0, #1
 8000674:	f000 f82e 	bl	80006d4 <torque.7536>
//	  torque(0x01,torque_val);
//	  printf("torque :%3d encoder :%d\r\n",torque_val,enc_data);
//

//-------read-------------------------
	  	  read(0x01,0x50,0x02);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	469c      	mov	ip, r3
 800067e:	2202      	movs	r2, #2
 8000680:	2150      	movs	r1, #80	; 0x50
 8000682:	2001      	movs	r0, #1
 8000684:	f000 f8b2 	bl	80007ec <read.7550>
      HAL_UART_Receive(&huart6,rxdata,10,10);
 8000688:	4639      	mov	r1, r7
 800068a:	230a      	movs	r3, #10
 800068c:	220a      	movs	r2, #10
 800068e:	480f      	ldr	r0, [pc, #60]	; (80006cc <main+0xfc>)
 8000690:	f001 fd2b 	bl	80020ea <HAL_UART_Receive>

	  if(rxdata[1]!=0){
 8000694:	787b      	ldrb	r3, [r7, #1]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0ee      	beq.n	8000678 <main+0xa8>
	  	  enc_data=rxdata[4];
 800069a:	793b      	ldrb	r3, [r7, #4]
 800069c:	84fb      	strh	r3, [r7, #38]	; 0x26
	  	  enc_data+=rxdata[5]<<8;
 800069e:	797b      	ldrb	r3, [r7, #5]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006a8:	4413      	add	r3, r2
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	84fb      	strh	r3, [r7, #38]	; 0x26
	  	  printf("encoder : %d\r\n",enc_data);
 80006ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80006b2:	4619      	mov	r1, r3
 80006b4:	4806      	ldr	r0, [pc, #24]	; (80006d0 <main+0x100>)
 80006b6:	f002 fcd5 	bl	8003064 <iprintf>

	  	  rxdata[0] = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	703b      	strb	r3, [r7, #0]
	  	  read(0x01,0x50,0x02);
 80006be:	e7db      	b.n	8000678 <main+0xa8>
 80006c0:	08004014 	.word	0x08004014
 80006c4:	2000009c 	.word	0x2000009c
 80006c8:	200001e0 	.word	0x200001e0
 80006cc:	2000019c 	.word	0x2000019c
 80006d0:	08004028 	.word	0x08004028

080006d4 <torque.7536>:
  {
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	80bb      	strh	r3, [r7, #4]
 80006e4:	4664      	mov	r4, ip
 80006e6:	f8c7 c000 	str.w	ip, [r7]
      unsigned char torque_l = (unsigned char)(torque)&0x00FF;
 80006ea:	88bb      	ldrh	r3, [r7, #4]
 80006ec:	73fb      	strb	r3, [r7, #15]
      unsigned char torque_h = (unsigned char)(torque>>8)&0x00FF;
 80006ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006f2:	121b      	asrs	r3, r3, #8
 80006f4:	b21b      	sxth	r3, r3
 80006f6:	73bb      	strb	r3, [r7, #14]
      unsigned char sum = (0x09+0x04+0x00+id+torque_l+torque_h+0x3C+0x01)&0x00FF;
 80006f8:	79fa      	ldrb	r2, [r7, #7]
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	4413      	add	r3, r2
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	4413      	add	r3, r2
 8000704:	b2db      	uxtb	r3, r3
 8000706:	334a      	adds	r3, #74	; 0x4a
 8000708:	737b      	strb	r3, [r7, #13]
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800070a:	2201      	movs	r2, #1
 800070c:	2104      	movs	r1, #4
 800070e:	4814      	ldr	r0, [pc, #80]	; (8000760 <torque.7536+0x8c>)
 8000710:	f000 ff7e 	bl	8001610 <HAL_GPIO_WritePin>
      txdata[0]=0x09;//SIZE
 8000714:	2309      	movs	r3, #9
 8000716:	7023      	strb	r3, [r4, #0]
      txdata[1]=0x04;//COMMAND
 8000718:	2304      	movs	r3, #4
 800071a:	7063      	strb	r3, [r4, #1]
      txdata[2]=0x00;//OPTION
 800071c:	2300      	movs	r3, #0
 800071e:	70a3      	strb	r3, [r4, #2]
      txdata[3]=id;//ID
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	70e3      	strb	r3, [r4, #3]
      txdata[4]=torque_l;//TORQUE_LOWBYTE
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	7123      	strb	r3, [r4, #4]
      txdata[5]=torque_h;//TORQUE_HIGHBYTE
 8000728:	7bbb      	ldrb	r3, [r7, #14]
 800072a:	7163      	strb	r3, [r4, #5]
      txdata[6]=0x3C;//ADRESS(TORQUE 0x03)
 800072c:	233c      	movs	r3, #60	; 0x3c
 800072e:	71a3      	strb	r3, [r4, #6]
      txdata[7]=0x01;//COUNT
 8000730:	2301      	movs	r3, #1
 8000732:	71e3      	strb	r3, [r4, #7]
      txdata[8]=sum;//SUM
 8000734:	7b7b      	ldrb	r3, [r7, #13]
 8000736:	7223      	strb	r3, [r4, #8]
      HAL_UART_Transmit(&huart6, txdata, 9, 0xFFFF);
 8000738:	4621      	mov	r1, r4
 800073a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073e:	2209      	movs	r2, #9
 8000740:	4808      	ldr	r0, [pc, #32]	; (8000764 <torque.7536+0x90>)
 8000742:	f001 fc40 	bl	8001fc6 <HAL_UART_Transmit>
      HAL_Delay(0.03);
 8000746:	2000      	movs	r0, #0
 8000748:	f000 fc16 	bl	8000f78 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2104      	movs	r1, #4
 8000750:	4803      	ldr	r0, [pc, #12]	; (8000760 <torque.7536+0x8c>)
 8000752:	f000 ff5d 	bl	8001610 <HAL_GPIO_WritePin>
  }
 8000756:	bf00      	nop
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	bd90      	pop	{r4, r7, pc}
 800075e:	bf00      	nop
 8000760:	40020400 	.word	0x40020400
 8000764:	2000019c 	.word	0x2000019c

08000768 <write.7544>:
  {
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
 8000772:	460b      	mov	r3, r1
 8000774:	71bb      	strb	r3, [r7, #6]
 8000776:	4613      	mov	r3, r2
 8000778:	717b      	strb	r3, [r7, #5]
 800077a:	4664      	mov	r4, ip
 800077c:	f8c7 c000 	str.w	ip, [r7]
      unsigned char sum = (0x08+0x04+0x00+id+data+adress+0x01)&0x00FF;
 8000780:	79fa      	ldrb	r2, [r7, #7]
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4413      	add	r3, r2
 8000786:	b2da      	uxtb	r2, r3
 8000788:	797b      	ldrb	r3, [r7, #5]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	330d      	adds	r3, #13
 8000790:	73fb      	strb	r3, [r7, #15]
     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000792:	2201      	movs	r2, #1
 8000794:	2104      	movs	r1, #4
 8000796:	4813      	ldr	r0, [pc, #76]	; (80007e4 <write.7544+0x7c>)
 8000798:	f000 ff3a 	bl	8001610 <HAL_GPIO_WritePin>
     txdata[0]=0x08;   //1 SIZE
 800079c:	2308      	movs	r3, #8
 800079e:	7023      	strb	r3, [r4, #0]
     txdata[1]=0x04;   //2 COMMAND
 80007a0:	2304      	movs	r3, #4
 80007a2:	7063      	strb	r3, [r4, #1]
     txdata[2]=0x00;   //3 OPTION
 80007a4:	2300      	movs	r3, #0
 80007a6:	70a3      	strb	r3, [r4, #2]
     txdata[3]=id;     //4 ID
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	70e3      	strb	r3, [r4, #3]
     txdata[4]=data;  //DATA
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	7123      	strb	r3, [r4, #4]
     txdata[5]=adress;  //ADRESS
 80007b0:	797b      	ldrb	r3, [r7, #5]
 80007b2:	7163      	strb	r3, [r4, #5]
     txdata[6]=0x01; //COUNT
 80007b4:	2301      	movs	r3, #1
 80007b6:	71a3      	strb	r3, [r4, #6]
     txdata[7]=sum;    //9 SUM
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	71e3      	strb	r3, [r4, #7]
     HAL_UART_Transmit(&huart6, txdata, 8, 0xFFFF);
 80007bc:	4621      	mov	r1, r4
 80007be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c2:	2208      	movs	r2, #8
 80007c4:	4808      	ldr	r0, [pc, #32]	; (80007e8 <write.7544+0x80>)
 80007c6:	f001 fbfe 	bl	8001fc6 <HAL_UART_Transmit>
     HAL_Delay(0.03);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 fbd4 	bl	8000f78 <HAL_Delay>
     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2104      	movs	r1, #4
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <write.7544+0x7c>)
 80007d6:	f000 ff1b 	bl	8001610 <HAL_GPIO_WritePin>
  }
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd90      	pop	{r4, r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40020400 	.word	0x40020400
 80007e8:	2000019c 	.word	0x2000019c

080007ec <read.7550>:
  {
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
 80007f6:	460b      	mov	r3, r1
 80007f8:	71bb      	strb	r3, [r7, #6]
 80007fa:	4613      	mov	r3, r2
 80007fc:	717b      	strb	r3, [r7, #5]
 80007fe:	4664      	mov	r4, ip
 8000800:	f8c7 c000 	str.w	ip, [r7]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000804:	2201      	movs	r2, #1
 8000806:	2104      	movs	r1, #4
 8000808:	4814      	ldr	r0, [pc, #80]	; (800085c <read.7550+0x70>)
 800080a:	f000 ff01 	bl	8001610 <HAL_GPIO_WritePin>
      unsigned char sum = (0x07+0x03+0x00+id+address+length)&0x00FF;
 800080e:	79fa      	ldrb	r2, [r7, #7]
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	4413      	add	r3, r2
 8000814:	b2da      	uxtb	r2, r3
 8000816:	797b      	ldrb	r3, [r7, #5]
 8000818:	4413      	add	r3, r2
 800081a:	b2db      	uxtb	r3, r3
 800081c:	330a      	adds	r3, #10
 800081e:	73fb      	strb	r3, [r7, #15]
      txdata[0]=0x07;       //SIZE
 8000820:	2307      	movs	r3, #7
 8000822:	7023      	strb	r3, [r4, #0]
      txdata[1]=0x03;       //COMMAND
 8000824:	2303      	movs	r3, #3
 8000826:	7063      	strb	r3, [r4, #1]
      txdata[2]=0x00;       //OPTION
 8000828:	2300      	movs	r3, #0
 800082a:	70a3      	strb	r3, [r4, #2]
      txdata[3]=id;         //ID
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	70e3      	strb	r3, [r4, #3]
      txdata[4]=address;    //ADDRESS(Current 0x48,MotorTemperature 0x46)
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	7123      	strb	r3, [r4, #4]
      txdata[5]=length;     //LENGTH byte
 8000834:	797b      	ldrb	r3, [r7, #5]
 8000836:	7163      	strb	r3, [r4, #5]
      txdata[6]=sum;        //SUM
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	71a3      	strb	r3, [r4, #6]
      HAL_UART_Transmit(&huart6, txdata, 7, 0xFFFF);
 800083c:	4621      	mov	r1, r4
 800083e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000842:	2207      	movs	r2, #7
 8000844:	4806      	ldr	r0, [pc, #24]	; (8000860 <read.7550+0x74>)
 8000846:	f001 fbbe 	bl	8001fc6 <HAL_UART_Transmit>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2104      	movs	r1, #4
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <read.7550+0x70>)
 8000850:	f000 fede 	bl	8001610 <HAL_GPIO_WritePin>
  }
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	bd90      	pop	{r4, r7, pc}
 800085c:	40020400 	.word	0x40020400
 8000860:	2000019c 	.word	0x2000019c

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2230      	movs	r2, #48	; 0x30
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fbee 	bl	8003054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <SystemClock_Config+0xd0>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a28      	ldr	r2, [pc, #160]	; (8000934 <SystemClock_Config+0xd0>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <SystemClock_Config+0xd0>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <SystemClock_Config+0xd4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <SystemClock_Config+0xd4>)
 80008b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <SystemClock_Config+0xd4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2310      	movs	r3, #16
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008d8:	2310      	movs	r3, #16
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008e2:	2304      	movs	r3, #4
 80008e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008e6:	2307      	movs	r3, #7
 80008e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fea8 	bl	8001644 <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008fa:	f000 f921 	bl	8000b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2302      	movs	r3, #2
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f001 f90a 	bl	8001b34 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000926:	f000 f90b 	bl	8000b40 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	; 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <MX_USART2_UART_Init+0x50>)
 8000944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000948:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800094c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000974:	f001 fada 	bl	8001f2c <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800097e:	f000 f8df 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200001e0 	.word	0x200001e0
 800098c:	40004400 	.word	0x40004400

08000990 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_USART6_UART_Init+0x48>)
 8000996:	4a11      	ldr	r2, [pc, #68]	; (80009dc <MX_USART6_UART_Init+0x4c>)
 8000998:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 1500000;
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_USART6_UART_Init+0x48>)
 800099c:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <MX_USART6_UART_Init+0x50>)
 800099e:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <MX_USART6_UART_Init+0x48>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USART6_UART_Init+0x48>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_USART6_UART_Init+0x48>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USART6_UART_Init+0x48>)
 80009b4:	220c      	movs	r2, #12
 80009b6:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_USART6_UART_Init+0x48>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USART6_UART_Init+0x48>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_USART6_UART_Init+0x48>)
 80009c6:	f001 fab1 	bl	8001f2c <HAL_UART_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 80009d0:	f000 f8b6 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2000019c 	.word	0x2000019c
 80009dc:	40011400 	.word	0x40011400
 80009e0:	0016e360 	.word	0x0016e360

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b37      	ldr	r3, [pc, #220]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a36      	ldr	r2, [pc, #216]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b34      	ldr	r3, [pc, #208]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b30      	ldr	r3, [pc, #192]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a28      	ldr	r2, [pc, #160]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b22      	ldr	r3, [pc, #136]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a21      	ldr	r2, [pc, #132]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2120      	movs	r1, #32
 8000a6e:	481c      	ldr	r0, [pc, #112]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000a70:	f000 fdce 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2104      	movs	r1, #4
 8000a78:	481a      	ldr	r0, [pc, #104]	; (8000ae4 <MX_GPIO_Init+0x100>)
 8000a7a:	f000 fdc9 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <MX_GPIO_Init+0x104>)
 8000a96:	f000 fc37 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000ab2:	f000 fc29 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_GPIO_Init+0x100>)
 8000ace:	f000 fc1b 	bl	8001308 <HAL_GPIO_Init>

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	40020800 	.word	0x40020800

08000aec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	gUartReceived = 1;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_UART_RxCpltCallback+0x20>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, buffer,6);
 8000afa:	2206      	movs	r2, #6
 8000afc:	4904      	ldr	r1, [pc, #16]	; (8000b10 <HAL_UART_RxCpltCallback+0x24>)
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <HAL_UART_RxCpltCallback+0x28>)
 8000b00:	f001 fb95 	bl	800222e <HAL_UART_Receive_IT>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000008c 	.word	0x2000008c
 8000b10:	2000009c 	.word	0x2000009c
 8000b14:	200001e0 	.word	0x200001e0

08000b18 <_write>:
int _write(int file, char *ptr, int len)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,50);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	2332      	movs	r3, #50	; 0x32
 8000b2a:	68b9      	ldr	r1, [r7, #8]
 8000b2c:	4803      	ldr	r0, [pc, #12]	; (8000b3c <_write+0x24>)
 8000b2e:	f001 fa4a 	bl	8001fc6 <HAL_UART_Transmit>
  return len;
 8000b32:	687b      	ldr	r3, [r7, #4]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200001e0 	.word	0x200001e0

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b8a:	2007      	movs	r0, #7
 8000b8c:	f000 fae8 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40023800 	.word	0x40023800

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08c      	sub	sp, #48	; 0x30
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a36      	ldr	r2, [pc, #216]	; (8000c94 <HAL_UART_MspInit+0xf8>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d134      	bne.n	8000c28 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <HAL_UART_MspInit+0xfc>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a34      	ldr	r2, [pc, #208]	; (8000c98 <HAL_UART_MspInit+0xfc>)
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <HAL_UART_MspInit+0xfc>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd6:	61bb      	str	r3, [r7, #24]
 8000bd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	4b2e      	ldr	r3, [pc, #184]	; (8000c98 <HAL_UART_MspInit+0xfc>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a2d      	ldr	r2, [pc, #180]	; (8000c98 <HAL_UART_MspInit+0xfc>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <HAL_UART_MspInit+0xfc>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c06:	2307      	movs	r3, #7
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4822      	ldr	r0, [pc, #136]	; (8000c9c <HAL_UART_MspInit+0x100>)
 8000c12:	f000 fb79 	bl	8001308 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2026      	movs	r0, #38	; 0x26
 8000c1c:	f000 faab 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c20:	2026      	movs	r0, #38	; 0x26
 8000c22:	f000 fac4 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c26:	e031      	b.n	8000c8c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <HAL_UART_MspInit+0x104>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12c      	bne.n	8000c8c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_UART_MspInit+0xfc>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <HAL_UART_MspInit+0xfc>)
 8000c3c:	f043 0320 	orr.w	r3, r3, #32
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_UART_MspInit+0xfc>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f003 0320 	and.w	r3, r3, #32
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_UART_MspInit+0xfc>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_UART_MspInit+0xfc>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_UART_MspInit+0xfc>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_UART_MspInit+0x100>)
 8000c88:	f000 fb3e 	bl	8001308 <HAL_GPIO_Init>
}
 8000c8c:	bf00      	nop
 8000c8e:	3730      	adds	r7, #48	; 0x30
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40004400 	.word	0x40004400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40011400 	.word	0x40011400

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf0:	f000 f922 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <USART2_IRQHandler+0x10>)
 8000cfe:	f001 fac7 	bl	8002290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200001e0 	.word	0x200001e0

08000d0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	e00a      	b.n	8000d34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d1e:	f3af 8000 	nop.w
 8000d22:	4601      	mov	r1, r0
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60ba      	str	r2, [r7, #8]
 8000d2a:	b2ca      	uxtb	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3301      	adds	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dbf0      	blt.n	8000d1e <_read+0x12>
	}

return len;
 8000d3c:	687b      	ldr	r3, [r7, #4]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d6e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <_isatty>:

int _isatty(int file)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
	return 1;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
	return 0;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f002 f90e 	bl	8003000 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20018000 	.word	0x20018000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	20000090 	.word	0x20000090
 8000e18:	20000238 	.word	0x20000238

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e46:	490e      	ldr	r1, [pc, #56]	; (8000e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e5c:	4c0b      	ldr	r4, [pc, #44]	; (8000e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e6a:	f7ff ffd7 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f002 f8cd 	bl	800300c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fbad 	bl	80005d0 <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e84:	080040f8 	.word	0x080040f8
  ldr r2, =_sbss
 8000e88:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e8c:	20000238 	.word	0x20000238

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f94f 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 f808 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fe40 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_InitTick+0x54>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x58>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f967 	bl	80011ca <HAL_SYSTICK_Config>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00e      	b.n	8000f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d80a      	bhi.n	8000f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f000 f92f 	bl	8001176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f18:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <HAL_InitTick+0x5c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000224 	.word	0x20000224

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000224 	.word	0x20000224

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff ffee 	bl	8000f60 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f90:	d005      	beq.n	8000f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_Delay+0x44>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9e:	bf00      	nop
 8000fa0:	f7ff ffde 	bl	8000f60 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8f7      	bhi.n	8000fa0 <HAL_Delay+0x28>
  {
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff8e 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff29 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff3e 	bl	8001008 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff8e 	bl	80010b4 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5d 	bl	8001060 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff31 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff feb6 	bl	8000f60 <HAL_GetTick>
 80011f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d008      	beq.n	8001214 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e052      	b.n	80012ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0216 	bic.w	r2, r2, #22
 8001222:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	695a      	ldr	r2, [r3, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001232:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	2b00      	cmp	r3, #0
 800123a:	d103      	bne.n	8001244 <HAL_DMA_Abort+0x62>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001240:	2b00      	cmp	r3, #0
 8001242:	d007      	beq.n	8001254 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0208 	bic.w	r2, r2, #8
 8001252:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0201 	bic.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001264:	e013      	b.n	800128e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001266:	f7ff fe7b 	bl	8000f60 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b05      	cmp	r3, #5
 8001272:	d90c      	bls.n	800128e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2220      	movs	r2, #32
 8001278:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2203      	movs	r2, #3
 800127e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e015      	b.n	80012ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1e4      	bne.n	8001266 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a0:	223f      	movs	r2, #63	; 0x3f
 80012a2:	409a      	lsls	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d004      	beq.n	80012e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e00c      	b.n	80012fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2205      	movs	r2, #5
 80012e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0201 	bic.w	r2, r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	e159      	b.n	80015d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001324:	2201      	movs	r2, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	429a      	cmp	r2, r3
 800133e:	f040 8148 	bne.w	80015d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d005      	beq.n	800135a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001356:	2b02      	cmp	r3, #2
 8001358:	d130      	bne.n	80013bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001390:	2201      	movs	r2, #1
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	f003 0201 	and.w	r2, r3, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d017      	beq.n	80013f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d123      	bne.n	800144c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	08da      	lsrs	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3208      	adds	r2, #8
 800140c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	220f      	movs	r2, #15
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	08da      	lsrs	r2, r3, #3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3208      	adds	r2, #8
 8001446:	69b9      	ldr	r1, [r7, #24]
 8001448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0203 	and.w	r2, r3, #3
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80a2 	beq.w	80015d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b57      	ldr	r3, [pc, #348]	; (80015f0 <HAL_GPIO_Init+0x2e8>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a56      	ldr	r2, [pc, #344]	; (80015f0 <HAL_GPIO_Init+0x2e8>)
 8001498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b54      	ldr	r3, [pc, #336]	; (80015f0 <HAL_GPIO_Init+0x2e8>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014aa:	4a52      	ldr	r2, [pc, #328]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a49      	ldr	r2, [pc, #292]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0x202>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a48      	ldr	r2, [pc, #288]	; (80015fc <HAL_GPIO_Init+0x2f4>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0x1fe>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a47      	ldr	r2, [pc, #284]	; (8001600 <HAL_GPIO_Init+0x2f8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00d      	beq.n	8001502 <HAL_GPIO_Init+0x1fa>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a46      	ldr	r2, [pc, #280]	; (8001604 <HAL_GPIO_Init+0x2fc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x1f6>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a45      	ldr	r2, [pc, #276]	; (8001608 <HAL_GPIO_Init+0x300>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_GPIO_Init+0x1f2>
 80014f6:	2304      	movs	r3, #4
 80014f8:	e008      	b.n	800150c <HAL_GPIO_Init+0x204>
 80014fa:	2307      	movs	r3, #7
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x204>
 80014fe:	2303      	movs	r3, #3
 8001500:	e004      	b.n	800150c <HAL_GPIO_Init+0x204>
 8001502:	2302      	movs	r3, #2
 8001504:	e002      	b.n	800150c <HAL_GPIO_Init+0x204>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x204>
 800150a:	2300      	movs	r3, #0
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	f002 0203 	and.w	r2, r2, #3
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	4093      	lsls	r3, r2
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800151c:	4935      	ldr	r1, [pc, #212]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800152a:	4b38      	ldr	r3, [pc, #224]	; (800160c <HAL_GPIO_Init+0x304>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800154e:	4a2f      	ldr	r2, [pc, #188]	; (800160c <HAL_GPIO_Init+0x304>)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <HAL_GPIO_Init+0x304>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001578:	4a24      	ldr	r2, [pc, #144]	; (800160c <HAL_GPIO_Init+0x304>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_GPIO_Init+0x304>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015a2:	4a1a      	ldr	r2, [pc, #104]	; (800160c <HAL_GPIO_Init+0x304>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_GPIO_Init+0x304>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015cc:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_GPIO_Init+0x304>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b0f      	cmp	r3, #15
 80015dc:	f67f aea2 	bls.w	8001324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40013800 	.word	0x40013800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400
 8001600:	40020800 	.word	0x40020800
 8001604:	40020c00 	.word	0x40020c00
 8001608:	40021000 	.word	0x40021000
 800160c:	40013c00 	.word	0x40013c00

08001610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800162c:	e003      	b.n	8001636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	041a      	lsls	r2, r3, #16
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e264      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d075      	beq.n	800174e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001662:	4ba3      	ldr	r3, [pc, #652]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b04      	cmp	r3, #4
 800166c:	d00c      	beq.n	8001688 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166e:	4ba0      	ldr	r3, [pc, #640]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001676:	2b08      	cmp	r3, #8
 8001678:	d112      	bne.n	80016a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800167a:	4b9d      	ldr	r3, [pc, #628]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001686:	d10b      	bne.n	80016a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	4b99      	ldr	r3, [pc, #612]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d05b      	beq.n	800174c <HAL_RCC_OscConfig+0x108>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d157      	bne.n	800174c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e23f      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a8:	d106      	bne.n	80016b8 <HAL_RCC_OscConfig+0x74>
 80016aa:	4b91      	ldr	r3, [pc, #580]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a90      	ldr	r2, [pc, #576]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e01d      	b.n	80016f4 <HAL_RCC_OscConfig+0xb0>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x98>
 80016c2:	4b8b      	ldr	r3, [pc, #556]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a8a      	ldr	r2, [pc, #552]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a87      	ldr	r2, [pc, #540]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0xb0>
 80016dc:	4b84      	ldr	r3, [pc, #528]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a83      	ldr	r2, [pc, #524]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b81      	ldr	r3, [pc, #516]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a80      	ldr	r2, [pc, #512]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d013      	beq.n	8001724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fc30 	bl	8000f60 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fc2c 	bl	8000f60 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e204      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b76      	ldr	r3, [pc, #472]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0xc0>
 8001722:	e014      	b.n	800174e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fc1c 	bl	8000f60 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fc18 	bl	8000f60 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e1f0      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	4b6c      	ldr	r3, [pc, #432]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0xe8>
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d063      	beq.n	8001822 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800175a:	4b65      	ldr	r3, [pc, #404]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001766:	4b62      	ldr	r3, [pc, #392]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800176e:	2b08      	cmp	r3, #8
 8001770:	d11c      	bne.n	80017ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001772:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d116      	bne.n	80017ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177e:	4b5c      	ldr	r3, [pc, #368]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_RCC_OscConfig+0x152>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e1c4      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001796:	4b56      	ldr	r3, [pc, #344]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4952      	ldr	r1, [pc, #328]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	e03a      	b.n	8001822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b4:	4b4f      	ldr	r3, [pc, #316]	; (80018f4 <HAL_RCC_OscConfig+0x2b0>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff fbd1 	bl	8000f60 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff fbcd 	bl	8000f60 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1a5      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d4:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e0:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4940      	ldr	r1, [pc, #256]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
 80017f4:	e015      	b.n	8001822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f6:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <HAL_RCC_OscConfig+0x2b0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff fbb0 	bl	8000f60 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001804:	f7ff fbac 	bl	8000f60 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e184      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001816:	4b36      	ldr	r3, [pc, #216]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d030      	beq.n	8001890 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d016      	beq.n	8001864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <HAL_RCC_OscConfig+0x2b4>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff fb90 	bl	8000f60 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001844:	f7ff fb8c 	bl	8000f60 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e164      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x200>
 8001862:	e015      	b.n	8001890 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_RCC_OscConfig+0x2b4>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186a:	f7ff fb79 	bl	8000f60 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001872:	f7ff fb75 	bl	8000f60 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e14d      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80a0 	beq.w	80019de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10f      	bne.n	80018ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ca:	2301      	movs	r3, #1
 80018cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_RCC_OscConfig+0x2b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d121      	bne.n	800191e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_RCC_OscConfig+0x2b8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a07      	ldr	r2, [pc, #28]	; (80018fc <HAL_RCC_OscConfig+0x2b8>)
 80018e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e6:	f7ff fb3b 	bl	8000f60 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	e011      	b.n	8001912 <HAL_RCC_OscConfig+0x2ce>
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	42470000 	.word	0x42470000
 80018f8:	42470e80 	.word	0x42470e80
 80018fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001900:	f7ff fb2e 	bl	8000f60 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e106      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001912:	4b85      	ldr	r3, [pc, #532]	; (8001b28 <HAL_RCC_OscConfig+0x4e4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d106      	bne.n	8001934 <HAL_RCC_OscConfig+0x2f0>
 8001926:	4b81      	ldr	r3, [pc, #516]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	4a80      	ldr	r2, [pc, #512]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6713      	str	r3, [r2, #112]	; 0x70
 8001932:	e01c      	b.n	800196e <HAL_RCC_OscConfig+0x32a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b05      	cmp	r3, #5
 800193a:	d10c      	bne.n	8001956 <HAL_RCC_OscConfig+0x312>
 800193c:	4b7b      	ldr	r3, [pc, #492]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001940:	4a7a      	ldr	r2, [pc, #488]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001942:	f043 0304 	orr.w	r3, r3, #4
 8001946:	6713      	str	r3, [r2, #112]	; 0x70
 8001948:	4b78      	ldr	r3, [pc, #480]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194c:	4a77      	ldr	r2, [pc, #476]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6713      	str	r3, [r2, #112]	; 0x70
 8001954:	e00b      	b.n	800196e <HAL_RCC_OscConfig+0x32a>
 8001956:	4b75      	ldr	r3, [pc, #468]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195a:	4a74      	ldr	r2, [pc, #464]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 800195c:	f023 0301 	bic.w	r3, r3, #1
 8001960:	6713      	str	r3, [r2, #112]	; 0x70
 8001962:	4b72      	ldr	r3, [pc, #456]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001966:	4a71      	ldr	r2, [pc, #452]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001968:	f023 0304 	bic.w	r3, r3, #4
 800196c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d015      	beq.n	80019a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001976:	f7ff faf3 	bl	8000f60 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197c:	e00a      	b.n	8001994 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197e:	f7ff faef 	bl	8000f60 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f241 3288 	movw	r2, #5000	; 0x1388
 800198c:	4293      	cmp	r3, r2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e0c5      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001994:	4b65      	ldr	r3, [pc, #404]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0ee      	beq.n	800197e <HAL_RCC_OscConfig+0x33a>
 80019a0:	e014      	b.n	80019cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a2:	f7ff fadd 	bl	8000f60 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019aa:	f7ff fad9 	bl	8000f60 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e0af      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c0:	4b5a      	ldr	r3, [pc, #360]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1ee      	bne.n	80019aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d105      	bne.n	80019de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d2:	4b56      	ldr	r3, [pc, #344]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a55      	ldr	r2, [pc, #340]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 80019d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 809b 	beq.w	8001b1e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019e8:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d05c      	beq.n	8001aae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d141      	bne.n	8001a80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fc:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <HAL_RCC_OscConfig+0x4ec>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff faad 	bl	8000f60 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7ff faa9 	bl	8000f60 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e081      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1c:	4b43      	ldr	r3, [pc, #268]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f0      	bne.n	8001a0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69da      	ldr	r2, [r3, #28]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	019b      	lsls	r3, r3, #6
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	3b01      	subs	r3, #1
 8001a42:	041b      	lsls	r3, r3, #16
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	061b      	lsls	r3, r3, #24
 8001a4c:	4937      	ldr	r1, [pc, #220]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <HAL_RCC_OscConfig+0x4ec>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fa82 	bl	8000f60 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff fa7e 	bl	8000f60 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e056      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x41c>
 8001a7e:	e04e      	b.n	8001b1e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a80:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <HAL_RCC_OscConfig+0x4ec>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff fa6b 	bl	8000f60 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff fa67 	bl	8000f60 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e03f      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa0:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x44a>
 8001aac:	e037      	b.n	8001b1e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e032      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d028      	beq.n	8001b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d121      	bne.n	8001b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d11a      	bne.n	8001b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aea:	4013      	ands	r3, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001af0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d111      	bne.n	8001b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	3b01      	subs	r3, #1
 8001b04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	42470060 	.word	0x42470060

08001b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0cc      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d90c      	bls.n	8001b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b65      	ldr	r3, [pc, #404]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b63      	ldr	r3, [pc, #396]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0b8      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b88:	4b59      	ldr	r3, [pc, #356]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4a52      	ldr	r2, [pc, #328]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bac:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	494d      	ldr	r1, [pc, #308]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d044      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d119      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e07f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d003      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf2:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e06f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c02:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e067      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f023 0203 	bic.w	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4934      	ldr	r1, [pc, #208]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c24:	f7ff f99c 	bl	8000f60 <HAL_GetTick>
 8001c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2c:	f7ff f998 	bl	8000f60 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e04f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 020c 	and.w	r2, r3, #12
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1eb      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d20c      	bcs.n	8001c7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e032      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c88:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4916      	ldr	r1, [pc, #88]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d009      	beq.n	8001cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cba:	f000 f821 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	490a      	ldr	r1, [pc, #40]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	5ccb      	ldrb	r3, [r1, r3]
 8001cce:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_RCC_ClockConfig+0x1c8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff f8fc 	bl	8000ed8 <HAL_InitTick>

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023c00 	.word	0x40023c00
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	08004038 	.word	0x08004038
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	2300      	movs	r3, #0
 8001d12:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d18:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d00d      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x40>
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	f200 80bd 	bhi.w	8001ea4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x34>
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d003      	beq.n	8001d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d32:	e0b7      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d34:	4b61      	ldr	r3, [pc, #388]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d36:	60bb      	str	r3, [r7, #8]
       break;
 8001d38:	e0b7      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d3a:	4b61      	ldr	r3, [pc, #388]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001d3c:	60bb      	str	r3, [r7, #8]
      break;
 8001d3e:	e0b4      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d40:	4b5d      	ldr	r3, [pc, #372]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d4a:	4b5b      	ldr	r3, [pc, #364]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d04d      	beq.n	8001df2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d56:	4b58      	ldr	r3, [pc, #352]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	099b      	lsrs	r3, r3, #6
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d66:	f04f 0100 	mov.w	r1, #0
 8001d6a:	ea02 0800 	and.w	r8, r2, r0
 8001d6e:	ea03 0901 	and.w	r9, r3, r1
 8001d72:	4640      	mov	r0, r8
 8001d74:	4649      	mov	r1, r9
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	014b      	lsls	r3, r1, #5
 8001d80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d84:	0142      	lsls	r2, r0, #5
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	ebb0 0008 	subs.w	r0, r0, r8
 8001d8e:	eb61 0109 	sbc.w	r1, r1, r9
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	018b      	lsls	r3, r1, #6
 8001d9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001da0:	0182      	lsls	r2, r0, #6
 8001da2:	1a12      	subs	r2, r2, r0
 8001da4:	eb63 0301 	sbc.w	r3, r3, r1
 8001da8:	f04f 0000 	mov.w	r0, #0
 8001dac:	f04f 0100 	mov.w	r1, #0
 8001db0:	00d9      	lsls	r1, r3, #3
 8001db2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001db6:	00d0      	lsls	r0, r2, #3
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	eb12 0208 	adds.w	r2, r2, r8
 8001dc0:	eb43 0309 	adc.w	r3, r3, r9
 8001dc4:	f04f 0000 	mov.w	r0, #0
 8001dc8:	f04f 0100 	mov.w	r1, #0
 8001dcc:	0259      	lsls	r1, r3, #9
 8001dce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001dd2:	0250      	lsls	r0, r2, #9
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	461a      	mov	r2, r3
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	f7fe fa4c 	bl	8000280 <__aeabi_uldivmod>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4613      	mov	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	e04a      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df2:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	099b      	lsrs	r3, r3, #6
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e02:	f04f 0100 	mov.w	r1, #0
 8001e06:	ea02 0400 	and.w	r4, r2, r0
 8001e0a:	ea03 0501 	and.w	r5, r3, r1
 8001e0e:	4620      	mov	r0, r4
 8001e10:	4629      	mov	r1, r5
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	014b      	lsls	r3, r1, #5
 8001e1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e20:	0142      	lsls	r2, r0, #5
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	1b00      	subs	r0, r0, r4
 8001e28:	eb61 0105 	sbc.w	r1, r1, r5
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	018b      	lsls	r3, r1, #6
 8001e36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e3a:	0182      	lsls	r2, r0, #6
 8001e3c:	1a12      	subs	r2, r2, r0
 8001e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e42:	f04f 0000 	mov.w	r0, #0
 8001e46:	f04f 0100 	mov.w	r1, #0
 8001e4a:	00d9      	lsls	r1, r3, #3
 8001e4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e50:	00d0      	lsls	r0, r2, #3
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	1912      	adds	r2, r2, r4
 8001e58:	eb45 0303 	adc.w	r3, r5, r3
 8001e5c:	f04f 0000 	mov.w	r0, #0
 8001e60:	f04f 0100 	mov.w	r1, #0
 8001e64:	0299      	lsls	r1, r3, #10
 8001e66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e6a:	0290      	lsls	r0, r2, #10
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	f7fe fa00 	bl	8000280 <__aeabi_uldivmod>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4613      	mov	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	0c1b      	lsrs	r3, r3, #16
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	3301      	adds	r3, #1
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea0:	60bb      	str	r3, [r7, #8]
      break;
 8001ea2:	e002      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ea6:	60bb      	str	r3, [r7, #8]
      break;
 8001ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	00f42400 	.word	0x00f42400
 8001ec0:	007a1200 	.word	0x007a1200

08001ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000000 	.word	0x20000000

08001edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ee0:	f7ff fff0 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	0a9b      	lsrs	r3, r3, #10
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4903      	ldr	r1, [pc, #12]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40023800 	.word	0x40023800
 8001f00:	08004048 	.word	0x08004048

08001f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f08:	f7ff ffdc 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	0b5b      	lsrs	r3, r3, #13
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	4903      	ldr	r1, [pc, #12]	; (8001f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f1a:	5ccb      	ldrb	r3, [r1, r3]
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	08004048 	.word	0x08004048

08001f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e03f      	b.n	8001fbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d106      	bne.n	8001f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe fe22 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2224      	movs	r2, #36	; 0x24
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fe7d 	bl	8002c70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b08a      	sub	sp, #40	; 0x28
 8001fca:	af02      	add	r7, sp, #8
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	603b      	str	r3, [r7, #0]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	d17c      	bne.n	80020e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_UART_Transmit+0x2c>
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e075      	b.n	80020e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_UART_Transmit+0x3e>
 8002000:	2302      	movs	r3, #2
 8002002:	e06e      	b.n	80020e2 <HAL_UART_Transmit+0x11c>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2221      	movs	r2, #33	; 0x21
 8002016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800201a:	f7fe ffa1 	bl	8000f60 <HAL_GetTick>
 800201e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	88fa      	ldrh	r2, [r7, #6]
 8002024:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	88fa      	ldrh	r2, [r7, #6]
 800202a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002034:	d108      	bne.n	8002048 <HAL_UART_Transmit+0x82>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d104      	bne.n	8002048 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	e003      	b.n	8002050 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002058:	e02a      	b.n	80020b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2200      	movs	r2, #0
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 fbc1 	bl	80027ec <UART_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e036      	b.n	80020e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10b      	bne.n	8002092 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002088:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	3302      	adds	r3, #2
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	e007      	b.n	80020a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	3301      	adds	r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1cf      	bne.n	800205a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2200      	movs	r2, #0
 80020c2:	2140      	movs	r1, #64	; 0x40
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 fb91 	bl	80027ec <UART_WaitOnFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e006      	b.n	80020e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	e000      	b.n	80020e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020e0:	2302      	movs	r3, #2
  }
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b08a      	sub	sp, #40	; 0x28
 80020ee:	af02      	add	r7, sp, #8
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	4613      	mov	r3, r2
 80020f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b20      	cmp	r3, #32
 8002108:	f040 808c 	bne.w	8002224 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <HAL_UART_Receive+0x2e>
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e084      	b.n	8002226 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_UART_Receive+0x40>
 8002126:	2302      	movs	r3, #2
 8002128:	e07d      	b.n	8002226 <HAL_UART_Receive+0x13c>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2222      	movs	r2, #34	; 0x22
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002146:	f7fe ff0b 	bl	8000f60 <HAL_GetTick>
 800214a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	88fa      	ldrh	r2, [r7, #6]
 8002150:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	88fa      	ldrh	r2, [r7, #6]
 8002156:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002160:	d108      	bne.n	8002174 <HAL_UART_Receive+0x8a>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d104      	bne.n	8002174 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	e003      	b.n	800217c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002184:	e043      	b.n	800220e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2200      	movs	r2, #0
 800218e:	2120      	movs	r1, #32
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 fb2b 	bl	80027ec <UART_WaitOnFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e042      	b.n	8002226 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10c      	bne.n	80021c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	3302      	adds	r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	e01f      	b.n	8002200 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c8:	d007      	beq.n	80021da <HAL_UART_Receive+0xf0>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10a      	bne.n	80021e8 <HAL_UART_Receive+0xfe>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	e008      	b.n	80021fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3301      	adds	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1b6      	bne.n	8002186 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	e000      	b.n	8002226 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002224:	2302      	movs	r3, #2
  }
}
 8002226:	4618      	mov	r0, r3
 8002228:	3720      	adds	r7, #32
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	4613      	mov	r3, r2
 800223a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b20      	cmp	r3, #32
 8002246:	d11d      	bne.n	8002284 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_UART_Receive_IT+0x26>
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e016      	b.n	8002286 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_UART_Receive_IT+0x38>
 8002262:	2302      	movs	r3, #2
 8002264:	e00f      	b.n	8002286 <HAL_UART_Receive_IT+0x58>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	461a      	mov	r2, r3
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fb24 	bl	80028c8 <UART_Start_Receive_IT>
 8002280:	4603      	mov	r3, r0
 8002282:	e000      	b.n	8002286 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002284:	2302      	movs	r3, #2
  }
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b0ba      	sub	sp, #232	; 0xe8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10f      	bne.n	80022f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d009      	beq.n	80022f6 <HAL_UART_IRQHandler+0x66>
 80022e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fc03 	bl	8002afa <UART_Receive_IT>
      return;
 80022f4:	e256      	b.n	80027a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80de 	beq.w	80024bc <HAL_UART_IRQHandler+0x22c>
 8002300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d106      	bne.n	800231a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800230c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002310:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80d1 	beq.w	80024bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800231a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_UART_IRQHandler+0xae>
 8002326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800232a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f043 0201 	orr.w	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800233e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_UART_IRQHandler+0xd2>
 800234a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f043 0202 	orr.w	r2, r3, #2
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00b      	beq.n	8002386 <HAL_UART_IRQHandler+0xf6>
 800236e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f043 0204 	orr.w	r2, r3, #4
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d011      	beq.n	80023b6 <HAL_UART_IRQHandler+0x126>
 8002392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d105      	bne.n	80023aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800239e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f043 0208 	orr.w	r2, r3, #8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 81ed 	beq.w	800279a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <HAL_UART_IRQHandler+0x14e>
 80023cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fb8e 	bl	8002afa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d103      	bne.n	800240a <HAL_UART_IRQHandler+0x17a>
 8002402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d04f      	beq.n	80024aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fa96 	bl	800293c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241a:	2b40      	cmp	r3, #64	; 0x40
 800241c:	d141      	bne.n	80024a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3314      	adds	r3, #20
 8002424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002428:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800242c:	e853 3f00 	ldrex	r3, [r3]
 8002430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800243c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3314      	adds	r3, #20
 8002446:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800244a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800244e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002452:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002456:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800245a:	e841 2300 	strex	r3, r2, [r1]
 800245e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1d9      	bne.n	800241e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	2b00      	cmp	r3, #0
 8002470:	d013      	beq.n	800249a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002476:	4a7d      	ldr	r2, [pc, #500]	; (800266c <HAL_UART_IRQHandler+0x3dc>)
 8002478:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe ff1f 	bl	80012c2 <HAL_DMA_Abort_IT>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d016      	beq.n	80024b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002494:	4610      	mov	r0, r2
 8002496:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002498:	e00e      	b.n	80024b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f990 	bl	80027c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a0:	e00a      	b.n	80024b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f98c 	bl	80027c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a8:	e006      	b.n	80024b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f988 	bl	80027c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80024b6:	e170      	b.n	800279a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b8:	bf00      	nop
    return;
 80024ba:	e16e      	b.n	800279a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	f040 814a 	bne.w	800275a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8143 	beq.w	800275a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 813c 	beq.w	800275a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b40      	cmp	r3, #64	; 0x40
 8002504:	f040 80b4 	bne.w	8002670 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8140 	beq.w	800279e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002526:	429a      	cmp	r2, r3
 8002528:	f080 8139 	bcs.w	800279e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002532:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800253e:	f000 8088 	beq.w	8002652 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	330c      	adds	r3, #12
 8002548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002550:	e853 3f00 	ldrex	r3, [r3]
 8002554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800255c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	330c      	adds	r3, #12
 800256a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800256e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002576:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800257a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800257e:	e841 2300 	strex	r3, r2, [r1]
 8002582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1d9      	bne.n	8002542 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3314      	adds	r3, #20
 8002594:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002598:	e853 3f00 	ldrex	r3, [r3]
 800259c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800259e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3314      	adds	r3, #20
 80025ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025be:	e841 2300 	strex	r3, r2, [r1]
 80025c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1e1      	bne.n	800258e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3314      	adds	r3, #20
 80025d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025d4:	e853 3f00 	ldrex	r3, [r3]
 80025d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80025da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	3314      	adds	r3, #20
 80025ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025f6:	e841 2300 	strex	r3, r2, [r1]
 80025fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80025fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1e3      	bne.n	80025ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	330c      	adds	r3, #12
 8002616:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800261a:	e853 3f00 	ldrex	r3, [r3]
 800261e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002622:	f023 0310 	bic.w	r3, r3, #16
 8002626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	330c      	adds	r3, #12
 8002630:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002634:	65ba      	str	r2, [r7, #88]	; 0x58
 8002636:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002638:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800263a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800263c:	e841 2300 	strex	r3, r2, [r1]
 8002640:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1e3      	bne.n	8002610 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fdc8 	bl	80011e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800265a:	b29b      	uxth	r3, r3
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	b29b      	uxth	r3, r3
 8002660:	4619      	mov	r1, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f8b6 	bl	80027d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002668:	e099      	b.n	800279e <HAL_UART_IRQHandler+0x50e>
 800266a:	bf00      	nop
 800266c:	08002a03 	.word	0x08002a03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002678:	b29b      	uxth	r3, r3
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 808b 	beq.w	80027a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800268c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8086 	beq.w	80027a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	330c      	adds	r3, #12
 800269c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	e853 3f00 	ldrex	r3, [r3]
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	330c      	adds	r3, #12
 80026b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026ba:	647a      	str	r2, [r7, #68]	; 0x44
 80026bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026c2:	e841 2300 	strex	r3, r2, [r1]
 80026c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1e3      	bne.n	8002696 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3314      	adds	r3, #20
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	e853 3f00 	ldrex	r3, [r3]
 80026dc:	623b      	str	r3, [r7, #32]
   return(result);
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3314      	adds	r3, #20
 80026ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80026f2:	633a      	str	r2, [r7, #48]	; 0x30
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026fa:	e841 2300 	strex	r3, r2, [r1]
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1e3      	bne.n	80026ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	330c      	adds	r3, #12
 800271a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	e853 3f00 	ldrex	r3, [r3]
 8002722:	60fb      	str	r3, [r7, #12]
   return(result);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0310 	bic.w	r3, r3, #16
 800272a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	330c      	adds	r3, #12
 8002734:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002738:	61fa      	str	r2, [r7, #28]
 800273a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273c:	69b9      	ldr	r1, [r7, #24]
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	e841 2300 	strex	r3, r2, [r1]
 8002744:	617b      	str	r3, [r7, #20]
   return(result);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e3      	bne.n	8002714 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800274c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002750:	4619      	mov	r1, r3
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f83e 	bl	80027d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002758:	e023      	b.n	80027a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800275a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_UART_IRQHandler+0x4ea>
 8002766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f959 	bl	8002a2a <UART_Transmit_IT>
    return;
 8002778:	e014      	b.n	80027a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800277a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00e      	beq.n	80027a4 <HAL_UART_IRQHandler+0x514>
 8002786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800278a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f999 	bl	8002aca <UART_EndTransmit_IT>
    return;
 8002798:	e004      	b.n	80027a4 <HAL_UART_IRQHandler+0x514>
    return;
 800279a:	bf00      	nop
 800279c:	e002      	b.n	80027a4 <HAL_UART_IRQHandler+0x514>
      return;
 800279e:	bf00      	nop
 80027a0:	e000      	b.n	80027a4 <HAL_UART_IRQHandler+0x514>
      return;
 80027a2:	bf00      	nop
  }
}
 80027a4:	37e8      	adds	r7, #232	; 0xe8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop

080027ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b090      	sub	sp, #64	; 0x40
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027fc:	e050      	b.n	80028a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d04c      	beq.n	80028a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <UART_WaitOnFlagUntilTimeout+0x30>
 800280c:	f7fe fba8 	bl	8000f60 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002818:	429a      	cmp	r2, r3
 800281a:	d241      	bcs.n	80028a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	330c      	adds	r3, #12
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002826:	e853 3f00 	ldrex	r3, [r3]
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	330c      	adds	r3, #12
 800283a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800283c:	637a      	str	r2, [r7, #52]	; 0x34
 800283e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002840:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002844:	e841 2300 	strex	r3, r2, [r1]
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1e5      	bne.n	800281c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3314      	adds	r3, #20
 8002856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	e853 3f00 	ldrex	r3, [r3]
 800285e:	613b      	str	r3, [r7, #16]
   return(result);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	63bb      	str	r3, [r7, #56]	; 0x38
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	3314      	adds	r3, #20
 800286e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002870:	623a      	str	r2, [r7, #32]
 8002872:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002874:	69f9      	ldr	r1, [r7, #28]
 8002876:	6a3a      	ldr	r2, [r7, #32]
 8002878:	e841 2300 	strex	r3, r2, [r1]
 800287c:	61bb      	str	r3, [r7, #24]
   return(result);
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e5      	bne.n	8002850 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e00f      	b.n	80028c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4013      	ands	r3, r2
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d09f      	beq.n	80027fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3740      	adds	r7, #64	; 0x40
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	4613      	mov	r3, r2
 80028d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	88fa      	ldrh	r2, [r7, #6]
 80028e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2222      	movs	r2, #34	; 0x22
 80028f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800290c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0201 	orr.w	r2, r2, #1
 800291c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0220 	orr.w	r2, r2, #32
 800292c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800293c:	b480      	push	{r7}
 800293e:	b095      	sub	sp, #84	; 0x54
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294e:	e853 3f00 	ldrex	r3, [r3]
 8002952:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002956:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800295a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	330c      	adds	r3, #12
 8002962:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002964:	643a      	str	r2, [r7, #64]	; 0x40
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002968:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800296a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800296c:	e841 2300 	strex	r3, r2, [r1]
 8002970:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e5      	bne.n	8002944 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3314      	adds	r3, #20
 800297e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	e853 3f00 	ldrex	r3, [r3]
 8002986:	61fb      	str	r3, [r7, #28]
   return(result);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3314      	adds	r3, #20
 8002996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002998:	62fa      	str	r2, [r7, #44]	; 0x2c
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800299e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a0:	e841 2300 	strex	r3, r2, [r1]
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e5      	bne.n	8002978 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d119      	bne.n	80029e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	e853 3f00 	ldrex	r3, [r3]
 80029c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f023 0310 	bic.w	r3, r3, #16
 80029ca:	647b      	str	r3, [r7, #68]	; 0x44
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	330c      	adds	r3, #12
 80029d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029d4:	61ba      	str	r2, [r7, #24]
 80029d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d8:	6979      	ldr	r1, [r7, #20]
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	e841 2300 	strex	r3, r2, [r1]
 80029e0:	613b      	str	r3, [r7, #16]
   return(result);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e5      	bne.n	80029b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029f6:	bf00      	nop
 80029f8:	3754      	adds	r7, #84	; 0x54
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f7ff fecf 	bl	80027c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b085      	sub	sp, #20
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b21      	cmp	r3, #33	; 0x21
 8002a3c:	d13e      	bne.n	8002abc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a46:	d114      	bne.n	8002a72 <UART_Transmit_IT+0x48>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d110      	bne.n	8002a72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	1c9a      	adds	r2, r3, #2
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	621a      	str	r2, [r3, #32]
 8002a70:	e008      	b.n	8002a84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	1c59      	adds	r1, r3, #1
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6211      	str	r1, [r2, #32]
 8002a7c:	781a      	ldrb	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4619      	mov	r1, r3
 8002a92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10f      	bne.n	8002ab8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aa6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ab6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	e000      	b.n	8002abe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002abc:	2302      	movs	r3, #2
  }
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ae0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff fe5e 	bl	80027ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b08c      	sub	sp, #48	; 0x30
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b22      	cmp	r3, #34	; 0x22
 8002b0c:	f040 80ab 	bne.w	8002c66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b18:	d117      	bne.n	8002b4a <UART_Receive_IT+0x50>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d113      	bne.n	8002b4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	1c9a      	adds	r2, r3, #2
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28
 8002b48:	e026      	b.n	8002b98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b5c:	d007      	beq.n	8002b6e <UART_Receive_IT+0x74>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10a      	bne.n	8002b7c <UART_Receive_IT+0x82>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	e008      	b.n	8002b8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d15a      	bne.n	8002c62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0220 	bic.w	r2, r2, #32
 8002bba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d135      	bne.n	8002c58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	330c      	adds	r3, #12
 8002bf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	e853 3f00 	ldrex	r3, [r3]
 8002c00:	613b      	str	r3, [r7, #16]
   return(result);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f023 0310 	bic.w	r3, r3, #16
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	330c      	adds	r3, #12
 8002c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c12:	623a      	str	r2, [r7, #32]
 8002c14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c16:	69f9      	ldr	r1, [r7, #28]
 8002c18:	6a3a      	ldr	r2, [r7, #32]
 8002c1a:	e841 2300 	strex	r3, r2, [r1]
 8002c1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1e5      	bne.n	8002bf2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	2b10      	cmp	r3, #16
 8002c32:	d10a      	bne.n	8002c4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff fdbf 	bl	80027d4 <HAL_UARTEx_RxEventCallback>
 8002c56:	e002      	b.n	8002c5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fd ff47 	bl	8000aec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e002      	b.n	8002c68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e000      	b.n	8002c68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
  }
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3730      	adds	r7, #48	; 0x30
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c74:	b09f      	sub	sp, #124	; 0x7c
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c86:	68d9      	ldr	r1, [r3, #12]
 8002c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	ea40 0301 	orr.w	r3, r0, r1
 8002c90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002cb4:	f021 010c 	bic.w	r1, r1, #12
 8002cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cbe:	430b      	orrs	r3, r1
 8002cc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cce:	6999      	ldr	r1, [r3, #24]
 8002cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	ea40 0301 	orr.w	r3, r0, r1
 8002cd8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4bc5      	ldr	r3, [pc, #788]	; (8002ff4 <UART_SetConfig+0x384>)
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d004      	beq.n	8002cee <UART_SetConfig+0x7e>
 8002ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4bc3      	ldr	r3, [pc, #780]	; (8002ff8 <UART_SetConfig+0x388>)
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d103      	bne.n	8002cf6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cee:	f7ff f909 	bl	8001f04 <HAL_RCC_GetPCLK2Freq>
 8002cf2:	6778      	str	r0, [r7, #116]	; 0x74
 8002cf4:	e002      	b.n	8002cfc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cf6:	f7ff f8f1 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 8002cfa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d04:	f040 80b6 	bne.w	8002e74 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d0a:	461c      	mov	r4, r3
 8002d0c:	f04f 0500 	mov.w	r5, #0
 8002d10:	4622      	mov	r2, r4
 8002d12:	462b      	mov	r3, r5
 8002d14:	1891      	adds	r1, r2, r2
 8002d16:	6439      	str	r1, [r7, #64]	; 0x40
 8002d18:	415b      	adcs	r3, r3
 8002d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d20:	1912      	adds	r2, r2, r4
 8002d22:	eb45 0303 	adc.w	r3, r5, r3
 8002d26:	f04f 0000 	mov.w	r0, #0
 8002d2a:	f04f 0100 	mov.w	r1, #0
 8002d2e:	00d9      	lsls	r1, r3, #3
 8002d30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d34:	00d0      	lsls	r0, r2, #3
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	1911      	adds	r1, r2, r4
 8002d3c:	6639      	str	r1, [r7, #96]	; 0x60
 8002d3e:	416b      	adcs	r3, r5
 8002d40:	667b      	str	r3, [r7, #100]	; 0x64
 8002d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	461a      	mov	r2, r3
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	1891      	adds	r1, r2, r2
 8002d4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d50:	415b      	adcs	r3, r3
 8002d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d5c:	f7fd fa90 	bl	8000280 <__aeabi_uldivmod>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4ba5      	ldr	r3, [pc, #660]	; (8002ffc <UART_SetConfig+0x38c>)
 8002d66:	fba3 2302 	umull	r2, r3, r3, r2
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	011e      	lsls	r6, r3, #4
 8002d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d70:	461c      	mov	r4, r3
 8002d72:	f04f 0500 	mov.w	r5, #0
 8002d76:	4622      	mov	r2, r4
 8002d78:	462b      	mov	r3, r5
 8002d7a:	1891      	adds	r1, r2, r2
 8002d7c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d7e:	415b      	adcs	r3, r3
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
 8002d82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d86:	1912      	adds	r2, r2, r4
 8002d88:	eb45 0303 	adc.w	r3, r5, r3
 8002d8c:	f04f 0000 	mov.w	r0, #0
 8002d90:	f04f 0100 	mov.w	r1, #0
 8002d94:	00d9      	lsls	r1, r3, #3
 8002d96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d9a:	00d0      	lsls	r0, r2, #3
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	1911      	adds	r1, r2, r4
 8002da2:	65b9      	str	r1, [r7, #88]	; 0x58
 8002da4:	416b      	adcs	r3, r5
 8002da6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	1891      	adds	r1, r2, r2
 8002db4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002db6:	415b      	adcs	r3, r3
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dbe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002dc2:	f7fd fa5d 	bl	8000280 <__aeabi_uldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4b8c      	ldr	r3, [pc, #560]	; (8002ffc <UART_SetConfig+0x38c>)
 8002dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	2164      	movs	r1, #100	; 0x64
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	3332      	adds	r3, #50	; 0x32
 8002dde:	4a87      	ldr	r2, [pc, #540]	; (8002ffc <UART_SetConfig+0x38c>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dec:	441e      	add	r6, r3
 8002dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df0:	4618      	mov	r0, r3
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	1894      	adds	r4, r2, r2
 8002dfc:	623c      	str	r4, [r7, #32]
 8002dfe:	415b      	adcs	r3, r3
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
 8002e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e06:	1812      	adds	r2, r2, r0
 8002e08:	eb41 0303 	adc.w	r3, r1, r3
 8002e0c:	f04f 0400 	mov.w	r4, #0
 8002e10:	f04f 0500 	mov.w	r5, #0
 8002e14:	00dd      	lsls	r5, r3, #3
 8002e16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e1a:	00d4      	lsls	r4, r2, #3
 8002e1c:	4622      	mov	r2, r4
 8002e1e:	462b      	mov	r3, r5
 8002e20:	1814      	adds	r4, r2, r0
 8002e22:	653c      	str	r4, [r7, #80]	; 0x50
 8002e24:	414b      	adcs	r3, r1
 8002e26:	657b      	str	r3, [r7, #84]	; 0x54
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	1891      	adds	r1, r2, r2
 8002e34:	61b9      	str	r1, [r7, #24]
 8002e36:	415b      	adcs	r3, r3
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e42:	f7fd fa1d 	bl	8000280 <__aeabi_uldivmod>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4b6c      	ldr	r3, [pc, #432]	; (8002ffc <UART_SetConfig+0x38c>)
 8002e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	2164      	movs	r1, #100	; 0x64
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	3332      	adds	r3, #50	; 0x32
 8002e5e:	4a67      	ldr	r2, [pc, #412]	; (8002ffc <UART_SetConfig+0x38c>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	f003 0207 	and.w	r2, r3, #7
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4432      	add	r2, r6
 8002e70:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e72:	e0b9      	b.n	8002fe8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e76:	461c      	mov	r4, r3
 8002e78:	f04f 0500 	mov.w	r5, #0
 8002e7c:	4622      	mov	r2, r4
 8002e7e:	462b      	mov	r3, r5
 8002e80:	1891      	adds	r1, r2, r2
 8002e82:	6139      	str	r1, [r7, #16]
 8002e84:	415b      	adcs	r3, r3
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e8c:	1912      	adds	r2, r2, r4
 8002e8e:	eb45 0303 	adc.w	r3, r5, r3
 8002e92:	f04f 0000 	mov.w	r0, #0
 8002e96:	f04f 0100 	mov.w	r1, #0
 8002e9a:	00d9      	lsls	r1, r3, #3
 8002e9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ea0:	00d0      	lsls	r0, r2, #3
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	eb12 0804 	adds.w	r8, r2, r4
 8002eaa:	eb43 0905 	adc.w	r9, r3, r5
 8002eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f04f 0100 	mov.w	r1, #0
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	008b      	lsls	r3, r1, #2
 8002ec2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ec6:	0082      	lsls	r2, r0, #2
 8002ec8:	4640      	mov	r0, r8
 8002eca:	4649      	mov	r1, r9
 8002ecc:	f7fd f9d8 	bl	8000280 <__aeabi_uldivmod>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4b49      	ldr	r3, [pc, #292]	; (8002ffc <UART_SetConfig+0x38c>)
 8002ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	011e      	lsls	r6, r3, #4
 8002ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f04f 0100 	mov.w	r1, #0
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	1894      	adds	r4, r2, r2
 8002eec:	60bc      	str	r4, [r7, #8]
 8002eee:	415b      	adcs	r3, r3
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ef6:	1812      	adds	r2, r2, r0
 8002ef8:	eb41 0303 	adc.w	r3, r1, r3
 8002efc:	f04f 0400 	mov.w	r4, #0
 8002f00:	f04f 0500 	mov.w	r5, #0
 8002f04:	00dd      	lsls	r5, r3, #3
 8002f06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f0a:	00d4      	lsls	r4, r2, #3
 8002f0c:	4622      	mov	r2, r4
 8002f0e:	462b      	mov	r3, r5
 8002f10:	1814      	adds	r4, r2, r0
 8002f12:	64bc      	str	r4, [r7, #72]	; 0x48
 8002f14:	414b      	adcs	r3, r1
 8002f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	008b      	lsls	r3, r1, #2
 8002f2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f30:	0082      	lsls	r2, r0, #2
 8002f32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f36:	f7fd f9a3 	bl	8000280 <__aeabi_uldivmod>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <UART_SetConfig+0x38c>)
 8002f40:	fba3 1302 	umull	r1, r3, r3, r2
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	2164      	movs	r1, #100	; 0x64
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	3332      	adds	r3, #50	; 0x32
 8002f52:	4a2a      	ldr	r2, [pc, #168]	; (8002ffc <UART_SetConfig+0x38c>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f5e:	441e      	add	r6, r3
 8002f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f62:	4618      	mov	r0, r3
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	1894      	adds	r4, r2, r2
 8002f6e:	603c      	str	r4, [r7, #0]
 8002f70:	415b      	adcs	r3, r3
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f78:	1812      	adds	r2, r2, r0
 8002f7a:	eb41 0303 	adc.w	r3, r1, r3
 8002f7e:	f04f 0400 	mov.w	r4, #0
 8002f82:	f04f 0500 	mov.w	r5, #0
 8002f86:	00dd      	lsls	r5, r3, #3
 8002f88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f8c:	00d4      	lsls	r4, r2, #3
 8002f8e:	4622      	mov	r2, r4
 8002f90:	462b      	mov	r3, r5
 8002f92:	eb12 0a00 	adds.w	sl, r2, r0
 8002f96:	eb43 0b01 	adc.w	fp, r3, r1
 8002f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f04f 0100 	mov.w	r1, #0
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	008b      	lsls	r3, r1, #2
 8002fae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002fb2:	0082      	lsls	r2, r0, #2
 8002fb4:	4650      	mov	r0, sl
 8002fb6:	4659      	mov	r1, fp
 8002fb8:	f7fd f962 	bl	8000280 <__aeabi_uldivmod>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <UART_SetConfig+0x38c>)
 8002fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2164      	movs	r1, #100	; 0x64
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	3332      	adds	r3, #50	; 0x32
 8002fd4:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <UART_SetConfig+0x38c>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	f003 020f 	and.w	r2, r3, #15
 8002fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4432      	add	r2, r6
 8002fe6:	609a      	str	r2, [r3, #8]
}
 8002fe8:	bf00      	nop
 8002fea:	377c      	adds	r7, #124	; 0x7c
 8002fec:	46bd      	mov	sp, r7
 8002fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40011000 	.word	0x40011000
 8002ff8:	40011400 	.word	0x40011400
 8002ffc:	51eb851f 	.word	0x51eb851f

08003000 <__errno>:
 8003000:	4b01      	ldr	r3, [pc, #4]	; (8003008 <__errno+0x8>)
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	2000000c 	.word	0x2000000c

0800300c <__libc_init_array>:
 800300c:	b570      	push	{r4, r5, r6, lr}
 800300e:	4d0d      	ldr	r5, [pc, #52]	; (8003044 <__libc_init_array+0x38>)
 8003010:	4c0d      	ldr	r4, [pc, #52]	; (8003048 <__libc_init_array+0x3c>)
 8003012:	1b64      	subs	r4, r4, r5
 8003014:	10a4      	asrs	r4, r4, #2
 8003016:	2600      	movs	r6, #0
 8003018:	42a6      	cmp	r6, r4
 800301a:	d109      	bne.n	8003030 <__libc_init_array+0x24>
 800301c:	4d0b      	ldr	r5, [pc, #44]	; (800304c <__libc_init_array+0x40>)
 800301e:	4c0c      	ldr	r4, [pc, #48]	; (8003050 <__libc_init_array+0x44>)
 8003020:	f000 ffec 	bl	8003ffc <_init>
 8003024:	1b64      	subs	r4, r4, r5
 8003026:	10a4      	asrs	r4, r4, #2
 8003028:	2600      	movs	r6, #0
 800302a:	42a6      	cmp	r6, r4
 800302c:	d105      	bne.n	800303a <__libc_init_array+0x2e>
 800302e:	bd70      	pop	{r4, r5, r6, pc}
 8003030:	f855 3b04 	ldr.w	r3, [r5], #4
 8003034:	4798      	blx	r3
 8003036:	3601      	adds	r6, #1
 8003038:	e7ee      	b.n	8003018 <__libc_init_array+0xc>
 800303a:	f855 3b04 	ldr.w	r3, [r5], #4
 800303e:	4798      	blx	r3
 8003040:	3601      	adds	r6, #1
 8003042:	e7f2      	b.n	800302a <__libc_init_array+0x1e>
 8003044:	080040f0 	.word	0x080040f0
 8003048:	080040f0 	.word	0x080040f0
 800304c:	080040f0 	.word	0x080040f0
 8003050:	080040f4 	.word	0x080040f4

08003054 <memset>:
 8003054:	4402      	add	r2, r0
 8003056:	4603      	mov	r3, r0
 8003058:	4293      	cmp	r3, r2
 800305a:	d100      	bne.n	800305e <memset+0xa>
 800305c:	4770      	bx	lr
 800305e:	f803 1b01 	strb.w	r1, [r3], #1
 8003062:	e7f9      	b.n	8003058 <memset+0x4>

08003064 <iprintf>:
 8003064:	b40f      	push	{r0, r1, r2, r3}
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <iprintf+0x2c>)
 8003068:	b513      	push	{r0, r1, r4, lr}
 800306a:	681c      	ldr	r4, [r3, #0]
 800306c:	b124      	cbz	r4, 8003078 <iprintf+0x14>
 800306e:	69a3      	ldr	r3, [r4, #24]
 8003070:	b913      	cbnz	r3, 8003078 <iprintf+0x14>
 8003072:	4620      	mov	r0, r4
 8003074:	f000 fa5e 	bl	8003534 <__sinit>
 8003078:	ab05      	add	r3, sp, #20
 800307a:	9a04      	ldr	r2, [sp, #16]
 800307c:	68a1      	ldr	r1, [r4, #8]
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	4620      	mov	r0, r4
 8003082:	f000 fc2f 	bl	80038e4 <_vfiprintf_r>
 8003086:	b002      	add	sp, #8
 8003088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800308c:	b004      	add	sp, #16
 800308e:	4770      	bx	lr
 8003090:	2000000c 	.word	0x2000000c

08003094 <_puts_r>:
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	460e      	mov	r6, r1
 8003098:	4605      	mov	r5, r0
 800309a:	b118      	cbz	r0, 80030a4 <_puts_r+0x10>
 800309c:	6983      	ldr	r3, [r0, #24]
 800309e:	b90b      	cbnz	r3, 80030a4 <_puts_r+0x10>
 80030a0:	f000 fa48 	bl	8003534 <__sinit>
 80030a4:	69ab      	ldr	r3, [r5, #24]
 80030a6:	68ac      	ldr	r4, [r5, #8]
 80030a8:	b913      	cbnz	r3, 80030b0 <_puts_r+0x1c>
 80030aa:	4628      	mov	r0, r5
 80030ac:	f000 fa42 	bl	8003534 <__sinit>
 80030b0:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <_puts_r+0xd0>)
 80030b2:	429c      	cmp	r4, r3
 80030b4:	d120      	bne.n	80030f8 <_puts_r+0x64>
 80030b6:	686c      	ldr	r4, [r5, #4]
 80030b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030ba:	07db      	lsls	r3, r3, #31
 80030bc:	d405      	bmi.n	80030ca <_puts_r+0x36>
 80030be:	89a3      	ldrh	r3, [r4, #12]
 80030c0:	0598      	lsls	r0, r3, #22
 80030c2:	d402      	bmi.n	80030ca <_puts_r+0x36>
 80030c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030c6:	f000 fad3 	bl	8003670 <__retarget_lock_acquire_recursive>
 80030ca:	89a3      	ldrh	r3, [r4, #12]
 80030cc:	0719      	lsls	r1, r3, #28
 80030ce:	d51d      	bpl.n	800310c <_puts_r+0x78>
 80030d0:	6923      	ldr	r3, [r4, #16]
 80030d2:	b1db      	cbz	r3, 800310c <_puts_r+0x78>
 80030d4:	3e01      	subs	r6, #1
 80030d6:	68a3      	ldr	r3, [r4, #8]
 80030d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030dc:	3b01      	subs	r3, #1
 80030de:	60a3      	str	r3, [r4, #8]
 80030e0:	bb39      	cbnz	r1, 8003132 <_puts_r+0x9e>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	da38      	bge.n	8003158 <_puts_r+0xc4>
 80030e6:	4622      	mov	r2, r4
 80030e8:	210a      	movs	r1, #10
 80030ea:	4628      	mov	r0, r5
 80030ec:	f000 f848 	bl	8003180 <__swbuf_r>
 80030f0:	3001      	adds	r0, #1
 80030f2:	d011      	beq.n	8003118 <_puts_r+0x84>
 80030f4:	250a      	movs	r5, #10
 80030f6:	e011      	b.n	800311c <_puts_r+0x88>
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <_puts_r+0xd4>)
 80030fa:	429c      	cmp	r4, r3
 80030fc:	d101      	bne.n	8003102 <_puts_r+0x6e>
 80030fe:	68ac      	ldr	r4, [r5, #8]
 8003100:	e7da      	b.n	80030b8 <_puts_r+0x24>
 8003102:	4b1a      	ldr	r3, [pc, #104]	; (800316c <_puts_r+0xd8>)
 8003104:	429c      	cmp	r4, r3
 8003106:	bf08      	it	eq
 8003108:	68ec      	ldreq	r4, [r5, #12]
 800310a:	e7d5      	b.n	80030b8 <_puts_r+0x24>
 800310c:	4621      	mov	r1, r4
 800310e:	4628      	mov	r0, r5
 8003110:	f000 f888 	bl	8003224 <__swsetup_r>
 8003114:	2800      	cmp	r0, #0
 8003116:	d0dd      	beq.n	80030d4 <_puts_r+0x40>
 8003118:	f04f 35ff 	mov.w	r5, #4294967295
 800311c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800311e:	07da      	lsls	r2, r3, #31
 8003120:	d405      	bmi.n	800312e <_puts_r+0x9a>
 8003122:	89a3      	ldrh	r3, [r4, #12]
 8003124:	059b      	lsls	r3, r3, #22
 8003126:	d402      	bmi.n	800312e <_puts_r+0x9a>
 8003128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800312a:	f000 faa2 	bl	8003672 <__retarget_lock_release_recursive>
 800312e:	4628      	mov	r0, r5
 8003130:	bd70      	pop	{r4, r5, r6, pc}
 8003132:	2b00      	cmp	r3, #0
 8003134:	da04      	bge.n	8003140 <_puts_r+0xac>
 8003136:	69a2      	ldr	r2, [r4, #24]
 8003138:	429a      	cmp	r2, r3
 800313a:	dc06      	bgt.n	800314a <_puts_r+0xb6>
 800313c:	290a      	cmp	r1, #10
 800313e:	d004      	beq.n	800314a <_puts_r+0xb6>
 8003140:	6823      	ldr	r3, [r4, #0]
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	6022      	str	r2, [r4, #0]
 8003146:	7019      	strb	r1, [r3, #0]
 8003148:	e7c5      	b.n	80030d6 <_puts_r+0x42>
 800314a:	4622      	mov	r2, r4
 800314c:	4628      	mov	r0, r5
 800314e:	f000 f817 	bl	8003180 <__swbuf_r>
 8003152:	3001      	adds	r0, #1
 8003154:	d1bf      	bne.n	80030d6 <_puts_r+0x42>
 8003156:	e7df      	b.n	8003118 <_puts_r+0x84>
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	250a      	movs	r5, #10
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	6022      	str	r2, [r4, #0]
 8003160:	701d      	strb	r5, [r3, #0]
 8003162:	e7db      	b.n	800311c <_puts_r+0x88>
 8003164:	08004074 	.word	0x08004074
 8003168:	08004094 	.word	0x08004094
 800316c:	08004054 	.word	0x08004054

08003170 <puts>:
 8003170:	4b02      	ldr	r3, [pc, #8]	; (800317c <puts+0xc>)
 8003172:	4601      	mov	r1, r0
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	f7ff bf8d 	b.w	8003094 <_puts_r>
 800317a:	bf00      	nop
 800317c:	2000000c 	.word	0x2000000c

08003180 <__swbuf_r>:
 8003180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003182:	460e      	mov	r6, r1
 8003184:	4614      	mov	r4, r2
 8003186:	4605      	mov	r5, r0
 8003188:	b118      	cbz	r0, 8003192 <__swbuf_r+0x12>
 800318a:	6983      	ldr	r3, [r0, #24]
 800318c:	b90b      	cbnz	r3, 8003192 <__swbuf_r+0x12>
 800318e:	f000 f9d1 	bl	8003534 <__sinit>
 8003192:	4b21      	ldr	r3, [pc, #132]	; (8003218 <__swbuf_r+0x98>)
 8003194:	429c      	cmp	r4, r3
 8003196:	d12b      	bne.n	80031f0 <__swbuf_r+0x70>
 8003198:	686c      	ldr	r4, [r5, #4]
 800319a:	69a3      	ldr	r3, [r4, #24]
 800319c:	60a3      	str	r3, [r4, #8]
 800319e:	89a3      	ldrh	r3, [r4, #12]
 80031a0:	071a      	lsls	r2, r3, #28
 80031a2:	d52f      	bpl.n	8003204 <__swbuf_r+0x84>
 80031a4:	6923      	ldr	r3, [r4, #16]
 80031a6:	b36b      	cbz	r3, 8003204 <__swbuf_r+0x84>
 80031a8:	6923      	ldr	r3, [r4, #16]
 80031aa:	6820      	ldr	r0, [r4, #0]
 80031ac:	1ac0      	subs	r0, r0, r3
 80031ae:	6963      	ldr	r3, [r4, #20]
 80031b0:	b2f6      	uxtb	r6, r6
 80031b2:	4283      	cmp	r3, r0
 80031b4:	4637      	mov	r7, r6
 80031b6:	dc04      	bgt.n	80031c2 <__swbuf_r+0x42>
 80031b8:	4621      	mov	r1, r4
 80031ba:	4628      	mov	r0, r5
 80031bc:	f000 f926 	bl	800340c <_fflush_r>
 80031c0:	bb30      	cbnz	r0, 8003210 <__swbuf_r+0x90>
 80031c2:	68a3      	ldr	r3, [r4, #8]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	60a3      	str	r3, [r4, #8]
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	6022      	str	r2, [r4, #0]
 80031ce:	701e      	strb	r6, [r3, #0]
 80031d0:	6963      	ldr	r3, [r4, #20]
 80031d2:	3001      	adds	r0, #1
 80031d4:	4283      	cmp	r3, r0
 80031d6:	d004      	beq.n	80031e2 <__swbuf_r+0x62>
 80031d8:	89a3      	ldrh	r3, [r4, #12]
 80031da:	07db      	lsls	r3, r3, #31
 80031dc:	d506      	bpl.n	80031ec <__swbuf_r+0x6c>
 80031de:	2e0a      	cmp	r6, #10
 80031e0:	d104      	bne.n	80031ec <__swbuf_r+0x6c>
 80031e2:	4621      	mov	r1, r4
 80031e4:	4628      	mov	r0, r5
 80031e6:	f000 f911 	bl	800340c <_fflush_r>
 80031ea:	b988      	cbnz	r0, 8003210 <__swbuf_r+0x90>
 80031ec:	4638      	mov	r0, r7
 80031ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <__swbuf_r+0x9c>)
 80031f2:	429c      	cmp	r4, r3
 80031f4:	d101      	bne.n	80031fa <__swbuf_r+0x7a>
 80031f6:	68ac      	ldr	r4, [r5, #8]
 80031f8:	e7cf      	b.n	800319a <__swbuf_r+0x1a>
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <__swbuf_r+0xa0>)
 80031fc:	429c      	cmp	r4, r3
 80031fe:	bf08      	it	eq
 8003200:	68ec      	ldreq	r4, [r5, #12]
 8003202:	e7ca      	b.n	800319a <__swbuf_r+0x1a>
 8003204:	4621      	mov	r1, r4
 8003206:	4628      	mov	r0, r5
 8003208:	f000 f80c 	bl	8003224 <__swsetup_r>
 800320c:	2800      	cmp	r0, #0
 800320e:	d0cb      	beq.n	80031a8 <__swbuf_r+0x28>
 8003210:	f04f 37ff 	mov.w	r7, #4294967295
 8003214:	e7ea      	b.n	80031ec <__swbuf_r+0x6c>
 8003216:	bf00      	nop
 8003218:	08004074 	.word	0x08004074
 800321c:	08004094 	.word	0x08004094
 8003220:	08004054 	.word	0x08004054

08003224 <__swsetup_r>:
 8003224:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <__swsetup_r+0xcc>)
 8003226:	b570      	push	{r4, r5, r6, lr}
 8003228:	681d      	ldr	r5, [r3, #0]
 800322a:	4606      	mov	r6, r0
 800322c:	460c      	mov	r4, r1
 800322e:	b125      	cbz	r5, 800323a <__swsetup_r+0x16>
 8003230:	69ab      	ldr	r3, [r5, #24]
 8003232:	b913      	cbnz	r3, 800323a <__swsetup_r+0x16>
 8003234:	4628      	mov	r0, r5
 8003236:	f000 f97d 	bl	8003534 <__sinit>
 800323a:	4b2e      	ldr	r3, [pc, #184]	; (80032f4 <__swsetup_r+0xd0>)
 800323c:	429c      	cmp	r4, r3
 800323e:	d10f      	bne.n	8003260 <__swsetup_r+0x3c>
 8003240:	686c      	ldr	r4, [r5, #4]
 8003242:	89a3      	ldrh	r3, [r4, #12]
 8003244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003248:	0719      	lsls	r1, r3, #28
 800324a:	d42c      	bmi.n	80032a6 <__swsetup_r+0x82>
 800324c:	06dd      	lsls	r5, r3, #27
 800324e:	d411      	bmi.n	8003274 <__swsetup_r+0x50>
 8003250:	2309      	movs	r3, #9
 8003252:	6033      	str	r3, [r6, #0]
 8003254:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003258:	81a3      	strh	r3, [r4, #12]
 800325a:	f04f 30ff 	mov.w	r0, #4294967295
 800325e:	e03e      	b.n	80032de <__swsetup_r+0xba>
 8003260:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <__swsetup_r+0xd4>)
 8003262:	429c      	cmp	r4, r3
 8003264:	d101      	bne.n	800326a <__swsetup_r+0x46>
 8003266:	68ac      	ldr	r4, [r5, #8]
 8003268:	e7eb      	b.n	8003242 <__swsetup_r+0x1e>
 800326a:	4b24      	ldr	r3, [pc, #144]	; (80032fc <__swsetup_r+0xd8>)
 800326c:	429c      	cmp	r4, r3
 800326e:	bf08      	it	eq
 8003270:	68ec      	ldreq	r4, [r5, #12]
 8003272:	e7e6      	b.n	8003242 <__swsetup_r+0x1e>
 8003274:	0758      	lsls	r0, r3, #29
 8003276:	d512      	bpl.n	800329e <__swsetup_r+0x7a>
 8003278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800327a:	b141      	cbz	r1, 800328e <__swsetup_r+0x6a>
 800327c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003280:	4299      	cmp	r1, r3
 8003282:	d002      	beq.n	800328a <__swsetup_r+0x66>
 8003284:	4630      	mov	r0, r6
 8003286:	f000 fa59 	bl	800373c <_free_r>
 800328a:	2300      	movs	r3, #0
 800328c:	6363      	str	r3, [r4, #52]	; 0x34
 800328e:	89a3      	ldrh	r3, [r4, #12]
 8003290:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003294:	81a3      	strh	r3, [r4, #12]
 8003296:	2300      	movs	r3, #0
 8003298:	6063      	str	r3, [r4, #4]
 800329a:	6923      	ldr	r3, [r4, #16]
 800329c:	6023      	str	r3, [r4, #0]
 800329e:	89a3      	ldrh	r3, [r4, #12]
 80032a0:	f043 0308 	orr.w	r3, r3, #8
 80032a4:	81a3      	strh	r3, [r4, #12]
 80032a6:	6923      	ldr	r3, [r4, #16]
 80032a8:	b94b      	cbnz	r3, 80032be <__swsetup_r+0x9a>
 80032aa:	89a3      	ldrh	r3, [r4, #12]
 80032ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b4:	d003      	beq.n	80032be <__swsetup_r+0x9a>
 80032b6:	4621      	mov	r1, r4
 80032b8:	4630      	mov	r0, r6
 80032ba:	f000 f9ff 	bl	80036bc <__smakebuf_r>
 80032be:	89a0      	ldrh	r0, [r4, #12]
 80032c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032c4:	f010 0301 	ands.w	r3, r0, #1
 80032c8:	d00a      	beq.n	80032e0 <__swsetup_r+0xbc>
 80032ca:	2300      	movs	r3, #0
 80032cc:	60a3      	str	r3, [r4, #8]
 80032ce:	6963      	ldr	r3, [r4, #20]
 80032d0:	425b      	negs	r3, r3
 80032d2:	61a3      	str	r3, [r4, #24]
 80032d4:	6923      	ldr	r3, [r4, #16]
 80032d6:	b943      	cbnz	r3, 80032ea <__swsetup_r+0xc6>
 80032d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032dc:	d1ba      	bne.n	8003254 <__swsetup_r+0x30>
 80032de:	bd70      	pop	{r4, r5, r6, pc}
 80032e0:	0781      	lsls	r1, r0, #30
 80032e2:	bf58      	it	pl
 80032e4:	6963      	ldrpl	r3, [r4, #20]
 80032e6:	60a3      	str	r3, [r4, #8]
 80032e8:	e7f4      	b.n	80032d4 <__swsetup_r+0xb0>
 80032ea:	2000      	movs	r0, #0
 80032ec:	e7f7      	b.n	80032de <__swsetup_r+0xba>
 80032ee:	bf00      	nop
 80032f0:	2000000c 	.word	0x2000000c
 80032f4:	08004074 	.word	0x08004074
 80032f8:	08004094 	.word	0x08004094
 80032fc:	08004054 	.word	0x08004054

08003300 <__sflush_r>:
 8003300:	898a      	ldrh	r2, [r1, #12]
 8003302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003306:	4605      	mov	r5, r0
 8003308:	0710      	lsls	r0, r2, #28
 800330a:	460c      	mov	r4, r1
 800330c:	d458      	bmi.n	80033c0 <__sflush_r+0xc0>
 800330e:	684b      	ldr	r3, [r1, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	dc05      	bgt.n	8003320 <__sflush_r+0x20>
 8003314:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	dc02      	bgt.n	8003320 <__sflush_r+0x20>
 800331a:	2000      	movs	r0, #0
 800331c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003322:	2e00      	cmp	r6, #0
 8003324:	d0f9      	beq.n	800331a <__sflush_r+0x1a>
 8003326:	2300      	movs	r3, #0
 8003328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800332c:	682f      	ldr	r7, [r5, #0]
 800332e:	602b      	str	r3, [r5, #0]
 8003330:	d032      	beq.n	8003398 <__sflush_r+0x98>
 8003332:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003334:	89a3      	ldrh	r3, [r4, #12]
 8003336:	075a      	lsls	r2, r3, #29
 8003338:	d505      	bpl.n	8003346 <__sflush_r+0x46>
 800333a:	6863      	ldr	r3, [r4, #4]
 800333c:	1ac0      	subs	r0, r0, r3
 800333e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003340:	b10b      	cbz	r3, 8003346 <__sflush_r+0x46>
 8003342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003344:	1ac0      	subs	r0, r0, r3
 8003346:	2300      	movs	r3, #0
 8003348:	4602      	mov	r2, r0
 800334a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800334c:	6a21      	ldr	r1, [r4, #32]
 800334e:	4628      	mov	r0, r5
 8003350:	47b0      	blx	r6
 8003352:	1c43      	adds	r3, r0, #1
 8003354:	89a3      	ldrh	r3, [r4, #12]
 8003356:	d106      	bne.n	8003366 <__sflush_r+0x66>
 8003358:	6829      	ldr	r1, [r5, #0]
 800335a:	291d      	cmp	r1, #29
 800335c:	d82c      	bhi.n	80033b8 <__sflush_r+0xb8>
 800335e:	4a2a      	ldr	r2, [pc, #168]	; (8003408 <__sflush_r+0x108>)
 8003360:	40ca      	lsrs	r2, r1
 8003362:	07d6      	lsls	r6, r2, #31
 8003364:	d528      	bpl.n	80033b8 <__sflush_r+0xb8>
 8003366:	2200      	movs	r2, #0
 8003368:	6062      	str	r2, [r4, #4]
 800336a:	04d9      	lsls	r1, r3, #19
 800336c:	6922      	ldr	r2, [r4, #16]
 800336e:	6022      	str	r2, [r4, #0]
 8003370:	d504      	bpl.n	800337c <__sflush_r+0x7c>
 8003372:	1c42      	adds	r2, r0, #1
 8003374:	d101      	bne.n	800337a <__sflush_r+0x7a>
 8003376:	682b      	ldr	r3, [r5, #0]
 8003378:	b903      	cbnz	r3, 800337c <__sflush_r+0x7c>
 800337a:	6560      	str	r0, [r4, #84]	; 0x54
 800337c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800337e:	602f      	str	r7, [r5, #0]
 8003380:	2900      	cmp	r1, #0
 8003382:	d0ca      	beq.n	800331a <__sflush_r+0x1a>
 8003384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003388:	4299      	cmp	r1, r3
 800338a:	d002      	beq.n	8003392 <__sflush_r+0x92>
 800338c:	4628      	mov	r0, r5
 800338e:	f000 f9d5 	bl	800373c <_free_r>
 8003392:	2000      	movs	r0, #0
 8003394:	6360      	str	r0, [r4, #52]	; 0x34
 8003396:	e7c1      	b.n	800331c <__sflush_r+0x1c>
 8003398:	6a21      	ldr	r1, [r4, #32]
 800339a:	2301      	movs	r3, #1
 800339c:	4628      	mov	r0, r5
 800339e:	47b0      	blx	r6
 80033a0:	1c41      	adds	r1, r0, #1
 80033a2:	d1c7      	bne.n	8003334 <__sflush_r+0x34>
 80033a4:	682b      	ldr	r3, [r5, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0c4      	beq.n	8003334 <__sflush_r+0x34>
 80033aa:	2b1d      	cmp	r3, #29
 80033ac:	d001      	beq.n	80033b2 <__sflush_r+0xb2>
 80033ae:	2b16      	cmp	r3, #22
 80033b0:	d101      	bne.n	80033b6 <__sflush_r+0xb6>
 80033b2:	602f      	str	r7, [r5, #0]
 80033b4:	e7b1      	b.n	800331a <__sflush_r+0x1a>
 80033b6:	89a3      	ldrh	r3, [r4, #12]
 80033b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033bc:	81a3      	strh	r3, [r4, #12]
 80033be:	e7ad      	b.n	800331c <__sflush_r+0x1c>
 80033c0:	690f      	ldr	r7, [r1, #16]
 80033c2:	2f00      	cmp	r7, #0
 80033c4:	d0a9      	beq.n	800331a <__sflush_r+0x1a>
 80033c6:	0793      	lsls	r3, r2, #30
 80033c8:	680e      	ldr	r6, [r1, #0]
 80033ca:	bf08      	it	eq
 80033cc:	694b      	ldreq	r3, [r1, #20]
 80033ce:	600f      	str	r7, [r1, #0]
 80033d0:	bf18      	it	ne
 80033d2:	2300      	movne	r3, #0
 80033d4:	eba6 0807 	sub.w	r8, r6, r7
 80033d8:	608b      	str	r3, [r1, #8]
 80033da:	f1b8 0f00 	cmp.w	r8, #0
 80033de:	dd9c      	ble.n	800331a <__sflush_r+0x1a>
 80033e0:	6a21      	ldr	r1, [r4, #32]
 80033e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80033e4:	4643      	mov	r3, r8
 80033e6:	463a      	mov	r2, r7
 80033e8:	4628      	mov	r0, r5
 80033ea:	47b0      	blx	r6
 80033ec:	2800      	cmp	r0, #0
 80033ee:	dc06      	bgt.n	80033fe <__sflush_r+0xfe>
 80033f0:	89a3      	ldrh	r3, [r4, #12]
 80033f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f6:	81a3      	strh	r3, [r4, #12]
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295
 80033fc:	e78e      	b.n	800331c <__sflush_r+0x1c>
 80033fe:	4407      	add	r7, r0
 8003400:	eba8 0800 	sub.w	r8, r8, r0
 8003404:	e7e9      	b.n	80033da <__sflush_r+0xda>
 8003406:	bf00      	nop
 8003408:	20400001 	.word	0x20400001

0800340c <_fflush_r>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	690b      	ldr	r3, [r1, #16]
 8003410:	4605      	mov	r5, r0
 8003412:	460c      	mov	r4, r1
 8003414:	b913      	cbnz	r3, 800341c <_fflush_r+0x10>
 8003416:	2500      	movs	r5, #0
 8003418:	4628      	mov	r0, r5
 800341a:	bd38      	pop	{r3, r4, r5, pc}
 800341c:	b118      	cbz	r0, 8003426 <_fflush_r+0x1a>
 800341e:	6983      	ldr	r3, [r0, #24]
 8003420:	b90b      	cbnz	r3, 8003426 <_fflush_r+0x1a>
 8003422:	f000 f887 	bl	8003534 <__sinit>
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <_fflush_r+0x6c>)
 8003428:	429c      	cmp	r4, r3
 800342a:	d11b      	bne.n	8003464 <_fflush_r+0x58>
 800342c:	686c      	ldr	r4, [r5, #4]
 800342e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0ef      	beq.n	8003416 <_fflush_r+0xa>
 8003436:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003438:	07d0      	lsls	r0, r2, #31
 800343a:	d404      	bmi.n	8003446 <_fflush_r+0x3a>
 800343c:	0599      	lsls	r1, r3, #22
 800343e:	d402      	bmi.n	8003446 <_fflush_r+0x3a>
 8003440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003442:	f000 f915 	bl	8003670 <__retarget_lock_acquire_recursive>
 8003446:	4628      	mov	r0, r5
 8003448:	4621      	mov	r1, r4
 800344a:	f7ff ff59 	bl	8003300 <__sflush_r>
 800344e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003450:	07da      	lsls	r2, r3, #31
 8003452:	4605      	mov	r5, r0
 8003454:	d4e0      	bmi.n	8003418 <_fflush_r+0xc>
 8003456:	89a3      	ldrh	r3, [r4, #12]
 8003458:	059b      	lsls	r3, r3, #22
 800345a:	d4dd      	bmi.n	8003418 <_fflush_r+0xc>
 800345c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800345e:	f000 f908 	bl	8003672 <__retarget_lock_release_recursive>
 8003462:	e7d9      	b.n	8003418 <_fflush_r+0xc>
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <_fflush_r+0x70>)
 8003466:	429c      	cmp	r4, r3
 8003468:	d101      	bne.n	800346e <_fflush_r+0x62>
 800346a:	68ac      	ldr	r4, [r5, #8]
 800346c:	e7df      	b.n	800342e <_fflush_r+0x22>
 800346e:	4b04      	ldr	r3, [pc, #16]	; (8003480 <_fflush_r+0x74>)
 8003470:	429c      	cmp	r4, r3
 8003472:	bf08      	it	eq
 8003474:	68ec      	ldreq	r4, [r5, #12]
 8003476:	e7da      	b.n	800342e <_fflush_r+0x22>
 8003478:	08004074 	.word	0x08004074
 800347c:	08004094 	.word	0x08004094
 8003480:	08004054 	.word	0x08004054

08003484 <std>:
 8003484:	2300      	movs	r3, #0
 8003486:	b510      	push	{r4, lr}
 8003488:	4604      	mov	r4, r0
 800348a:	e9c0 3300 	strd	r3, r3, [r0]
 800348e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003492:	6083      	str	r3, [r0, #8]
 8003494:	8181      	strh	r1, [r0, #12]
 8003496:	6643      	str	r3, [r0, #100]	; 0x64
 8003498:	81c2      	strh	r2, [r0, #14]
 800349a:	6183      	str	r3, [r0, #24]
 800349c:	4619      	mov	r1, r3
 800349e:	2208      	movs	r2, #8
 80034a0:	305c      	adds	r0, #92	; 0x5c
 80034a2:	f7ff fdd7 	bl	8003054 <memset>
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <std+0x38>)
 80034a8:	6263      	str	r3, [r4, #36]	; 0x24
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <std+0x3c>)
 80034ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <std+0x40>)
 80034b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <std+0x44>)
 80034b4:	6224      	str	r4, [r4, #32]
 80034b6:	6323      	str	r3, [r4, #48]	; 0x30
 80034b8:	bd10      	pop	{r4, pc}
 80034ba:	bf00      	nop
 80034bc:	08003e8d 	.word	0x08003e8d
 80034c0:	08003eaf 	.word	0x08003eaf
 80034c4:	08003ee7 	.word	0x08003ee7
 80034c8:	08003f0b 	.word	0x08003f0b

080034cc <_cleanup_r>:
 80034cc:	4901      	ldr	r1, [pc, #4]	; (80034d4 <_cleanup_r+0x8>)
 80034ce:	f000 b8af 	b.w	8003630 <_fwalk_reent>
 80034d2:	bf00      	nop
 80034d4:	0800340d 	.word	0x0800340d

080034d8 <__sfmoreglue>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	1e4a      	subs	r2, r1, #1
 80034dc:	2568      	movs	r5, #104	; 0x68
 80034de:	4355      	muls	r5, r2
 80034e0:	460e      	mov	r6, r1
 80034e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034e6:	f000 f979 	bl	80037dc <_malloc_r>
 80034ea:	4604      	mov	r4, r0
 80034ec:	b140      	cbz	r0, 8003500 <__sfmoreglue+0x28>
 80034ee:	2100      	movs	r1, #0
 80034f0:	e9c0 1600 	strd	r1, r6, [r0]
 80034f4:	300c      	adds	r0, #12
 80034f6:	60a0      	str	r0, [r4, #8]
 80034f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034fc:	f7ff fdaa 	bl	8003054 <memset>
 8003500:	4620      	mov	r0, r4
 8003502:	bd70      	pop	{r4, r5, r6, pc}

08003504 <__sfp_lock_acquire>:
 8003504:	4801      	ldr	r0, [pc, #4]	; (800350c <__sfp_lock_acquire+0x8>)
 8003506:	f000 b8b3 	b.w	8003670 <__retarget_lock_acquire_recursive>
 800350a:	bf00      	nop
 800350c:	20000230 	.word	0x20000230

08003510 <__sfp_lock_release>:
 8003510:	4801      	ldr	r0, [pc, #4]	; (8003518 <__sfp_lock_release+0x8>)
 8003512:	f000 b8ae 	b.w	8003672 <__retarget_lock_release_recursive>
 8003516:	bf00      	nop
 8003518:	20000230 	.word	0x20000230

0800351c <__sinit_lock_acquire>:
 800351c:	4801      	ldr	r0, [pc, #4]	; (8003524 <__sinit_lock_acquire+0x8>)
 800351e:	f000 b8a7 	b.w	8003670 <__retarget_lock_acquire_recursive>
 8003522:	bf00      	nop
 8003524:	2000022b 	.word	0x2000022b

08003528 <__sinit_lock_release>:
 8003528:	4801      	ldr	r0, [pc, #4]	; (8003530 <__sinit_lock_release+0x8>)
 800352a:	f000 b8a2 	b.w	8003672 <__retarget_lock_release_recursive>
 800352e:	bf00      	nop
 8003530:	2000022b 	.word	0x2000022b

08003534 <__sinit>:
 8003534:	b510      	push	{r4, lr}
 8003536:	4604      	mov	r4, r0
 8003538:	f7ff fff0 	bl	800351c <__sinit_lock_acquire>
 800353c:	69a3      	ldr	r3, [r4, #24]
 800353e:	b11b      	cbz	r3, 8003548 <__sinit+0x14>
 8003540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003544:	f7ff bff0 	b.w	8003528 <__sinit_lock_release>
 8003548:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800354c:	6523      	str	r3, [r4, #80]	; 0x50
 800354e:	4b13      	ldr	r3, [pc, #76]	; (800359c <__sinit+0x68>)
 8003550:	4a13      	ldr	r2, [pc, #76]	; (80035a0 <__sinit+0x6c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	62a2      	str	r2, [r4, #40]	; 0x28
 8003556:	42a3      	cmp	r3, r4
 8003558:	bf04      	itt	eq
 800355a:	2301      	moveq	r3, #1
 800355c:	61a3      	streq	r3, [r4, #24]
 800355e:	4620      	mov	r0, r4
 8003560:	f000 f820 	bl	80035a4 <__sfp>
 8003564:	6060      	str	r0, [r4, #4]
 8003566:	4620      	mov	r0, r4
 8003568:	f000 f81c 	bl	80035a4 <__sfp>
 800356c:	60a0      	str	r0, [r4, #8]
 800356e:	4620      	mov	r0, r4
 8003570:	f000 f818 	bl	80035a4 <__sfp>
 8003574:	2200      	movs	r2, #0
 8003576:	60e0      	str	r0, [r4, #12]
 8003578:	2104      	movs	r1, #4
 800357a:	6860      	ldr	r0, [r4, #4]
 800357c:	f7ff ff82 	bl	8003484 <std>
 8003580:	68a0      	ldr	r0, [r4, #8]
 8003582:	2201      	movs	r2, #1
 8003584:	2109      	movs	r1, #9
 8003586:	f7ff ff7d 	bl	8003484 <std>
 800358a:	68e0      	ldr	r0, [r4, #12]
 800358c:	2202      	movs	r2, #2
 800358e:	2112      	movs	r1, #18
 8003590:	f7ff ff78 	bl	8003484 <std>
 8003594:	2301      	movs	r3, #1
 8003596:	61a3      	str	r3, [r4, #24]
 8003598:	e7d2      	b.n	8003540 <__sinit+0xc>
 800359a:	bf00      	nop
 800359c:	08004050 	.word	0x08004050
 80035a0:	080034cd 	.word	0x080034cd

080035a4 <__sfp>:
 80035a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a6:	4607      	mov	r7, r0
 80035a8:	f7ff ffac 	bl	8003504 <__sfp_lock_acquire>
 80035ac:	4b1e      	ldr	r3, [pc, #120]	; (8003628 <__sfp+0x84>)
 80035ae:	681e      	ldr	r6, [r3, #0]
 80035b0:	69b3      	ldr	r3, [r6, #24]
 80035b2:	b913      	cbnz	r3, 80035ba <__sfp+0x16>
 80035b4:	4630      	mov	r0, r6
 80035b6:	f7ff ffbd 	bl	8003534 <__sinit>
 80035ba:	3648      	adds	r6, #72	; 0x48
 80035bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	d503      	bpl.n	80035cc <__sfp+0x28>
 80035c4:	6833      	ldr	r3, [r6, #0]
 80035c6:	b30b      	cbz	r3, 800360c <__sfp+0x68>
 80035c8:	6836      	ldr	r6, [r6, #0]
 80035ca:	e7f7      	b.n	80035bc <__sfp+0x18>
 80035cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035d0:	b9d5      	cbnz	r5, 8003608 <__sfp+0x64>
 80035d2:	4b16      	ldr	r3, [pc, #88]	; (800362c <__sfp+0x88>)
 80035d4:	60e3      	str	r3, [r4, #12]
 80035d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035da:	6665      	str	r5, [r4, #100]	; 0x64
 80035dc:	f000 f847 	bl	800366e <__retarget_lock_init_recursive>
 80035e0:	f7ff ff96 	bl	8003510 <__sfp_lock_release>
 80035e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035ec:	6025      	str	r5, [r4, #0]
 80035ee:	61a5      	str	r5, [r4, #24]
 80035f0:	2208      	movs	r2, #8
 80035f2:	4629      	mov	r1, r5
 80035f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035f8:	f7ff fd2c 	bl	8003054 <memset>
 80035fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003600:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003604:	4620      	mov	r0, r4
 8003606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003608:	3468      	adds	r4, #104	; 0x68
 800360a:	e7d9      	b.n	80035c0 <__sfp+0x1c>
 800360c:	2104      	movs	r1, #4
 800360e:	4638      	mov	r0, r7
 8003610:	f7ff ff62 	bl	80034d8 <__sfmoreglue>
 8003614:	4604      	mov	r4, r0
 8003616:	6030      	str	r0, [r6, #0]
 8003618:	2800      	cmp	r0, #0
 800361a:	d1d5      	bne.n	80035c8 <__sfp+0x24>
 800361c:	f7ff ff78 	bl	8003510 <__sfp_lock_release>
 8003620:	230c      	movs	r3, #12
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	e7ee      	b.n	8003604 <__sfp+0x60>
 8003626:	bf00      	nop
 8003628:	08004050 	.word	0x08004050
 800362c:	ffff0001 	.word	0xffff0001

08003630 <_fwalk_reent>:
 8003630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003634:	4606      	mov	r6, r0
 8003636:	4688      	mov	r8, r1
 8003638:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800363c:	2700      	movs	r7, #0
 800363e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003642:	f1b9 0901 	subs.w	r9, r9, #1
 8003646:	d505      	bpl.n	8003654 <_fwalk_reent+0x24>
 8003648:	6824      	ldr	r4, [r4, #0]
 800364a:	2c00      	cmp	r4, #0
 800364c:	d1f7      	bne.n	800363e <_fwalk_reent+0xe>
 800364e:	4638      	mov	r0, r7
 8003650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003654:	89ab      	ldrh	r3, [r5, #12]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d907      	bls.n	800366a <_fwalk_reent+0x3a>
 800365a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800365e:	3301      	adds	r3, #1
 8003660:	d003      	beq.n	800366a <_fwalk_reent+0x3a>
 8003662:	4629      	mov	r1, r5
 8003664:	4630      	mov	r0, r6
 8003666:	47c0      	blx	r8
 8003668:	4307      	orrs	r7, r0
 800366a:	3568      	adds	r5, #104	; 0x68
 800366c:	e7e9      	b.n	8003642 <_fwalk_reent+0x12>

0800366e <__retarget_lock_init_recursive>:
 800366e:	4770      	bx	lr

08003670 <__retarget_lock_acquire_recursive>:
 8003670:	4770      	bx	lr

08003672 <__retarget_lock_release_recursive>:
 8003672:	4770      	bx	lr

08003674 <__swhatbuf_r>:
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	460e      	mov	r6, r1
 8003678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800367c:	2900      	cmp	r1, #0
 800367e:	b096      	sub	sp, #88	; 0x58
 8003680:	4614      	mov	r4, r2
 8003682:	461d      	mov	r5, r3
 8003684:	da07      	bge.n	8003696 <__swhatbuf_r+0x22>
 8003686:	2300      	movs	r3, #0
 8003688:	602b      	str	r3, [r5, #0]
 800368a:	89b3      	ldrh	r3, [r6, #12]
 800368c:	061a      	lsls	r2, r3, #24
 800368e:	d410      	bmi.n	80036b2 <__swhatbuf_r+0x3e>
 8003690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003694:	e00e      	b.n	80036b4 <__swhatbuf_r+0x40>
 8003696:	466a      	mov	r2, sp
 8003698:	f000 fc5e 	bl	8003f58 <_fstat_r>
 800369c:	2800      	cmp	r0, #0
 800369e:	dbf2      	blt.n	8003686 <__swhatbuf_r+0x12>
 80036a0:	9a01      	ldr	r2, [sp, #4]
 80036a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036aa:	425a      	negs	r2, r3
 80036ac:	415a      	adcs	r2, r3
 80036ae:	602a      	str	r2, [r5, #0]
 80036b0:	e7ee      	b.n	8003690 <__swhatbuf_r+0x1c>
 80036b2:	2340      	movs	r3, #64	; 0x40
 80036b4:	2000      	movs	r0, #0
 80036b6:	6023      	str	r3, [r4, #0]
 80036b8:	b016      	add	sp, #88	; 0x58
 80036ba:	bd70      	pop	{r4, r5, r6, pc}

080036bc <__smakebuf_r>:
 80036bc:	898b      	ldrh	r3, [r1, #12]
 80036be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036c0:	079d      	lsls	r5, r3, #30
 80036c2:	4606      	mov	r6, r0
 80036c4:	460c      	mov	r4, r1
 80036c6:	d507      	bpl.n	80036d8 <__smakebuf_r+0x1c>
 80036c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036cc:	6023      	str	r3, [r4, #0]
 80036ce:	6123      	str	r3, [r4, #16]
 80036d0:	2301      	movs	r3, #1
 80036d2:	6163      	str	r3, [r4, #20]
 80036d4:	b002      	add	sp, #8
 80036d6:	bd70      	pop	{r4, r5, r6, pc}
 80036d8:	ab01      	add	r3, sp, #4
 80036da:	466a      	mov	r2, sp
 80036dc:	f7ff ffca 	bl	8003674 <__swhatbuf_r>
 80036e0:	9900      	ldr	r1, [sp, #0]
 80036e2:	4605      	mov	r5, r0
 80036e4:	4630      	mov	r0, r6
 80036e6:	f000 f879 	bl	80037dc <_malloc_r>
 80036ea:	b948      	cbnz	r0, 8003700 <__smakebuf_r+0x44>
 80036ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036f0:	059a      	lsls	r2, r3, #22
 80036f2:	d4ef      	bmi.n	80036d4 <__smakebuf_r+0x18>
 80036f4:	f023 0303 	bic.w	r3, r3, #3
 80036f8:	f043 0302 	orr.w	r3, r3, #2
 80036fc:	81a3      	strh	r3, [r4, #12]
 80036fe:	e7e3      	b.n	80036c8 <__smakebuf_r+0xc>
 8003700:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <__smakebuf_r+0x7c>)
 8003702:	62b3      	str	r3, [r6, #40]	; 0x28
 8003704:	89a3      	ldrh	r3, [r4, #12]
 8003706:	6020      	str	r0, [r4, #0]
 8003708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370c:	81a3      	strh	r3, [r4, #12]
 800370e:	9b00      	ldr	r3, [sp, #0]
 8003710:	6163      	str	r3, [r4, #20]
 8003712:	9b01      	ldr	r3, [sp, #4]
 8003714:	6120      	str	r0, [r4, #16]
 8003716:	b15b      	cbz	r3, 8003730 <__smakebuf_r+0x74>
 8003718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800371c:	4630      	mov	r0, r6
 800371e:	f000 fc2d 	bl	8003f7c <_isatty_r>
 8003722:	b128      	cbz	r0, 8003730 <__smakebuf_r+0x74>
 8003724:	89a3      	ldrh	r3, [r4, #12]
 8003726:	f023 0303 	bic.w	r3, r3, #3
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	81a3      	strh	r3, [r4, #12]
 8003730:	89a0      	ldrh	r0, [r4, #12]
 8003732:	4305      	orrs	r5, r0
 8003734:	81a5      	strh	r5, [r4, #12]
 8003736:	e7cd      	b.n	80036d4 <__smakebuf_r+0x18>
 8003738:	080034cd 	.word	0x080034cd

0800373c <_free_r>:
 800373c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800373e:	2900      	cmp	r1, #0
 8003740:	d048      	beq.n	80037d4 <_free_r+0x98>
 8003742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003746:	9001      	str	r0, [sp, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	f1a1 0404 	sub.w	r4, r1, #4
 800374e:	bfb8      	it	lt
 8003750:	18e4      	addlt	r4, r4, r3
 8003752:	f000 fc35 	bl	8003fc0 <__malloc_lock>
 8003756:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <_free_r+0x9c>)
 8003758:	9801      	ldr	r0, [sp, #4]
 800375a:	6813      	ldr	r3, [r2, #0]
 800375c:	4615      	mov	r5, r2
 800375e:	b933      	cbnz	r3, 800376e <_free_r+0x32>
 8003760:	6063      	str	r3, [r4, #4]
 8003762:	6014      	str	r4, [r2, #0]
 8003764:	b003      	add	sp, #12
 8003766:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800376a:	f000 bc2f 	b.w	8003fcc <__malloc_unlock>
 800376e:	42a3      	cmp	r3, r4
 8003770:	d90b      	bls.n	800378a <_free_r+0x4e>
 8003772:	6821      	ldr	r1, [r4, #0]
 8003774:	1862      	adds	r2, r4, r1
 8003776:	4293      	cmp	r3, r2
 8003778:	bf04      	itt	eq
 800377a:	681a      	ldreq	r2, [r3, #0]
 800377c:	685b      	ldreq	r3, [r3, #4]
 800377e:	6063      	str	r3, [r4, #4]
 8003780:	bf04      	itt	eq
 8003782:	1852      	addeq	r2, r2, r1
 8003784:	6022      	streq	r2, [r4, #0]
 8003786:	602c      	str	r4, [r5, #0]
 8003788:	e7ec      	b.n	8003764 <_free_r+0x28>
 800378a:	461a      	mov	r2, r3
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	b10b      	cbz	r3, 8003794 <_free_r+0x58>
 8003790:	42a3      	cmp	r3, r4
 8003792:	d9fa      	bls.n	800378a <_free_r+0x4e>
 8003794:	6811      	ldr	r1, [r2, #0]
 8003796:	1855      	adds	r5, r2, r1
 8003798:	42a5      	cmp	r5, r4
 800379a:	d10b      	bne.n	80037b4 <_free_r+0x78>
 800379c:	6824      	ldr	r4, [r4, #0]
 800379e:	4421      	add	r1, r4
 80037a0:	1854      	adds	r4, r2, r1
 80037a2:	42a3      	cmp	r3, r4
 80037a4:	6011      	str	r1, [r2, #0]
 80037a6:	d1dd      	bne.n	8003764 <_free_r+0x28>
 80037a8:	681c      	ldr	r4, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	6053      	str	r3, [r2, #4]
 80037ae:	4421      	add	r1, r4
 80037b0:	6011      	str	r1, [r2, #0]
 80037b2:	e7d7      	b.n	8003764 <_free_r+0x28>
 80037b4:	d902      	bls.n	80037bc <_free_r+0x80>
 80037b6:	230c      	movs	r3, #12
 80037b8:	6003      	str	r3, [r0, #0]
 80037ba:	e7d3      	b.n	8003764 <_free_r+0x28>
 80037bc:	6825      	ldr	r5, [r4, #0]
 80037be:	1961      	adds	r1, r4, r5
 80037c0:	428b      	cmp	r3, r1
 80037c2:	bf04      	itt	eq
 80037c4:	6819      	ldreq	r1, [r3, #0]
 80037c6:	685b      	ldreq	r3, [r3, #4]
 80037c8:	6063      	str	r3, [r4, #4]
 80037ca:	bf04      	itt	eq
 80037cc:	1949      	addeq	r1, r1, r5
 80037ce:	6021      	streq	r1, [r4, #0]
 80037d0:	6054      	str	r4, [r2, #4]
 80037d2:	e7c7      	b.n	8003764 <_free_r+0x28>
 80037d4:	b003      	add	sp, #12
 80037d6:	bd30      	pop	{r4, r5, pc}
 80037d8:	20000094 	.word	0x20000094

080037dc <_malloc_r>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	1ccd      	adds	r5, r1, #3
 80037e0:	f025 0503 	bic.w	r5, r5, #3
 80037e4:	3508      	adds	r5, #8
 80037e6:	2d0c      	cmp	r5, #12
 80037e8:	bf38      	it	cc
 80037ea:	250c      	movcc	r5, #12
 80037ec:	2d00      	cmp	r5, #0
 80037ee:	4606      	mov	r6, r0
 80037f0:	db01      	blt.n	80037f6 <_malloc_r+0x1a>
 80037f2:	42a9      	cmp	r1, r5
 80037f4:	d903      	bls.n	80037fe <_malloc_r+0x22>
 80037f6:	230c      	movs	r3, #12
 80037f8:	6033      	str	r3, [r6, #0]
 80037fa:	2000      	movs	r0, #0
 80037fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037fe:	f000 fbdf 	bl	8003fc0 <__malloc_lock>
 8003802:	4921      	ldr	r1, [pc, #132]	; (8003888 <_malloc_r+0xac>)
 8003804:	680a      	ldr	r2, [r1, #0]
 8003806:	4614      	mov	r4, r2
 8003808:	b99c      	cbnz	r4, 8003832 <_malloc_r+0x56>
 800380a:	4f20      	ldr	r7, [pc, #128]	; (800388c <_malloc_r+0xb0>)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	b923      	cbnz	r3, 800381a <_malloc_r+0x3e>
 8003810:	4621      	mov	r1, r4
 8003812:	4630      	mov	r0, r6
 8003814:	f000 fb2a 	bl	8003e6c <_sbrk_r>
 8003818:	6038      	str	r0, [r7, #0]
 800381a:	4629      	mov	r1, r5
 800381c:	4630      	mov	r0, r6
 800381e:	f000 fb25 	bl	8003e6c <_sbrk_r>
 8003822:	1c43      	adds	r3, r0, #1
 8003824:	d123      	bne.n	800386e <_malloc_r+0x92>
 8003826:	230c      	movs	r3, #12
 8003828:	6033      	str	r3, [r6, #0]
 800382a:	4630      	mov	r0, r6
 800382c:	f000 fbce 	bl	8003fcc <__malloc_unlock>
 8003830:	e7e3      	b.n	80037fa <_malloc_r+0x1e>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	1b5b      	subs	r3, r3, r5
 8003836:	d417      	bmi.n	8003868 <_malloc_r+0x8c>
 8003838:	2b0b      	cmp	r3, #11
 800383a:	d903      	bls.n	8003844 <_malloc_r+0x68>
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	441c      	add	r4, r3
 8003840:	6025      	str	r5, [r4, #0]
 8003842:	e004      	b.n	800384e <_malloc_r+0x72>
 8003844:	6863      	ldr	r3, [r4, #4]
 8003846:	42a2      	cmp	r2, r4
 8003848:	bf0c      	ite	eq
 800384a:	600b      	streq	r3, [r1, #0]
 800384c:	6053      	strne	r3, [r2, #4]
 800384e:	4630      	mov	r0, r6
 8003850:	f000 fbbc 	bl	8003fcc <__malloc_unlock>
 8003854:	f104 000b 	add.w	r0, r4, #11
 8003858:	1d23      	adds	r3, r4, #4
 800385a:	f020 0007 	bic.w	r0, r0, #7
 800385e:	1ac2      	subs	r2, r0, r3
 8003860:	d0cc      	beq.n	80037fc <_malloc_r+0x20>
 8003862:	1a1b      	subs	r3, r3, r0
 8003864:	50a3      	str	r3, [r4, r2]
 8003866:	e7c9      	b.n	80037fc <_malloc_r+0x20>
 8003868:	4622      	mov	r2, r4
 800386a:	6864      	ldr	r4, [r4, #4]
 800386c:	e7cc      	b.n	8003808 <_malloc_r+0x2c>
 800386e:	1cc4      	adds	r4, r0, #3
 8003870:	f024 0403 	bic.w	r4, r4, #3
 8003874:	42a0      	cmp	r0, r4
 8003876:	d0e3      	beq.n	8003840 <_malloc_r+0x64>
 8003878:	1a21      	subs	r1, r4, r0
 800387a:	4630      	mov	r0, r6
 800387c:	f000 faf6 	bl	8003e6c <_sbrk_r>
 8003880:	3001      	adds	r0, #1
 8003882:	d1dd      	bne.n	8003840 <_malloc_r+0x64>
 8003884:	e7cf      	b.n	8003826 <_malloc_r+0x4a>
 8003886:	bf00      	nop
 8003888:	20000094 	.word	0x20000094
 800388c:	20000098 	.word	0x20000098

08003890 <__sfputc_r>:
 8003890:	6893      	ldr	r3, [r2, #8]
 8003892:	3b01      	subs	r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	b410      	push	{r4}
 8003898:	6093      	str	r3, [r2, #8]
 800389a:	da08      	bge.n	80038ae <__sfputc_r+0x1e>
 800389c:	6994      	ldr	r4, [r2, #24]
 800389e:	42a3      	cmp	r3, r4
 80038a0:	db01      	blt.n	80038a6 <__sfputc_r+0x16>
 80038a2:	290a      	cmp	r1, #10
 80038a4:	d103      	bne.n	80038ae <__sfputc_r+0x1e>
 80038a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038aa:	f7ff bc69 	b.w	8003180 <__swbuf_r>
 80038ae:	6813      	ldr	r3, [r2, #0]
 80038b0:	1c58      	adds	r0, r3, #1
 80038b2:	6010      	str	r0, [r2, #0]
 80038b4:	7019      	strb	r1, [r3, #0]
 80038b6:	4608      	mov	r0, r1
 80038b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038bc:	4770      	bx	lr

080038be <__sfputs_r>:
 80038be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c0:	4606      	mov	r6, r0
 80038c2:	460f      	mov	r7, r1
 80038c4:	4614      	mov	r4, r2
 80038c6:	18d5      	adds	r5, r2, r3
 80038c8:	42ac      	cmp	r4, r5
 80038ca:	d101      	bne.n	80038d0 <__sfputs_r+0x12>
 80038cc:	2000      	movs	r0, #0
 80038ce:	e007      	b.n	80038e0 <__sfputs_r+0x22>
 80038d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038d4:	463a      	mov	r2, r7
 80038d6:	4630      	mov	r0, r6
 80038d8:	f7ff ffda 	bl	8003890 <__sfputc_r>
 80038dc:	1c43      	adds	r3, r0, #1
 80038de:	d1f3      	bne.n	80038c8 <__sfputs_r+0xa>
 80038e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038e4 <_vfiprintf_r>:
 80038e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e8:	460d      	mov	r5, r1
 80038ea:	b09d      	sub	sp, #116	; 0x74
 80038ec:	4614      	mov	r4, r2
 80038ee:	4698      	mov	r8, r3
 80038f0:	4606      	mov	r6, r0
 80038f2:	b118      	cbz	r0, 80038fc <_vfiprintf_r+0x18>
 80038f4:	6983      	ldr	r3, [r0, #24]
 80038f6:	b90b      	cbnz	r3, 80038fc <_vfiprintf_r+0x18>
 80038f8:	f7ff fe1c 	bl	8003534 <__sinit>
 80038fc:	4b89      	ldr	r3, [pc, #548]	; (8003b24 <_vfiprintf_r+0x240>)
 80038fe:	429d      	cmp	r5, r3
 8003900:	d11b      	bne.n	800393a <_vfiprintf_r+0x56>
 8003902:	6875      	ldr	r5, [r6, #4]
 8003904:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003906:	07d9      	lsls	r1, r3, #31
 8003908:	d405      	bmi.n	8003916 <_vfiprintf_r+0x32>
 800390a:	89ab      	ldrh	r3, [r5, #12]
 800390c:	059a      	lsls	r2, r3, #22
 800390e:	d402      	bmi.n	8003916 <_vfiprintf_r+0x32>
 8003910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003912:	f7ff fead 	bl	8003670 <__retarget_lock_acquire_recursive>
 8003916:	89ab      	ldrh	r3, [r5, #12]
 8003918:	071b      	lsls	r3, r3, #28
 800391a:	d501      	bpl.n	8003920 <_vfiprintf_r+0x3c>
 800391c:	692b      	ldr	r3, [r5, #16]
 800391e:	b9eb      	cbnz	r3, 800395c <_vfiprintf_r+0x78>
 8003920:	4629      	mov	r1, r5
 8003922:	4630      	mov	r0, r6
 8003924:	f7ff fc7e 	bl	8003224 <__swsetup_r>
 8003928:	b1c0      	cbz	r0, 800395c <_vfiprintf_r+0x78>
 800392a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800392c:	07dc      	lsls	r4, r3, #31
 800392e:	d50e      	bpl.n	800394e <_vfiprintf_r+0x6a>
 8003930:	f04f 30ff 	mov.w	r0, #4294967295
 8003934:	b01d      	add	sp, #116	; 0x74
 8003936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800393a:	4b7b      	ldr	r3, [pc, #492]	; (8003b28 <_vfiprintf_r+0x244>)
 800393c:	429d      	cmp	r5, r3
 800393e:	d101      	bne.n	8003944 <_vfiprintf_r+0x60>
 8003940:	68b5      	ldr	r5, [r6, #8]
 8003942:	e7df      	b.n	8003904 <_vfiprintf_r+0x20>
 8003944:	4b79      	ldr	r3, [pc, #484]	; (8003b2c <_vfiprintf_r+0x248>)
 8003946:	429d      	cmp	r5, r3
 8003948:	bf08      	it	eq
 800394a:	68f5      	ldreq	r5, [r6, #12]
 800394c:	e7da      	b.n	8003904 <_vfiprintf_r+0x20>
 800394e:	89ab      	ldrh	r3, [r5, #12]
 8003950:	0598      	lsls	r0, r3, #22
 8003952:	d4ed      	bmi.n	8003930 <_vfiprintf_r+0x4c>
 8003954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003956:	f7ff fe8c 	bl	8003672 <__retarget_lock_release_recursive>
 800395a:	e7e9      	b.n	8003930 <_vfiprintf_r+0x4c>
 800395c:	2300      	movs	r3, #0
 800395e:	9309      	str	r3, [sp, #36]	; 0x24
 8003960:	2320      	movs	r3, #32
 8003962:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003966:	f8cd 800c 	str.w	r8, [sp, #12]
 800396a:	2330      	movs	r3, #48	; 0x30
 800396c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b30 <_vfiprintf_r+0x24c>
 8003970:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003974:	f04f 0901 	mov.w	r9, #1
 8003978:	4623      	mov	r3, r4
 800397a:	469a      	mov	sl, r3
 800397c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003980:	b10a      	cbz	r2, 8003986 <_vfiprintf_r+0xa2>
 8003982:	2a25      	cmp	r2, #37	; 0x25
 8003984:	d1f9      	bne.n	800397a <_vfiprintf_r+0x96>
 8003986:	ebba 0b04 	subs.w	fp, sl, r4
 800398a:	d00b      	beq.n	80039a4 <_vfiprintf_r+0xc0>
 800398c:	465b      	mov	r3, fp
 800398e:	4622      	mov	r2, r4
 8003990:	4629      	mov	r1, r5
 8003992:	4630      	mov	r0, r6
 8003994:	f7ff ff93 	bl	80038be <__sfputs_r>
 8003998:	3001      	adds	r0, #1
 800399a:	f000 80aa 	beq.w	8003af2 <_vfiprintf_r+0x20e>
 800399e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039a0:	445a      	add	r2, fp
 80039a2:	9209      	str	r2, [sp, #36]	; 0x24
 80039a4:	f89a 3000 	ldrb.w	r3, [sl]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80a2 	beq.w	8003af2 <_vfiprintf_r+0x20e>
 80039ae:	2300      	movs	r3, #0
 80039b0:	f04f 32ff 	mov.w	r2, #4294967295
 80039b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039b8:	f10a 0a01 	add.w	sl, sl, #1
 80039bc:	9304      	str	r3, [sp, #16]
 80039be:	9307      	str	r3, [sp, #28]
 80039c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039c4:	931a      	str	r3, [sp, #104]	; 0x68
 80039c6:	4654      	mov	r4, sl
 80039c8:	2205      	movs	r2, #5
 80039ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ce:	4858      	ldr	r0, [pc, #352]	; (8003b30 <_vfiprintf_r+0x24c>)
 80039d0:	f7fc fc06 	bl	80001e0 <memchr>
 80039d4:	9a04      	ldr	r2, [sp, #16]
 80039d6:	b9d8      	cbnz	r0, 8003a10 <_vfiprintf_r+0x12c>
 80039d8:	06d1      	lsls	r1, r2, #27
 80039da:	bf44      	itt	mi
 80039dc:	2320      	movmi	r3, #32
 80039de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039e2:	0713      	lsls	r3, r2, #28
 80039e4:	bf44      	itt	mi
 80039e6:	232b      	movmi	r3, #43	; 0x2b
 80039e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039ec:	f89a 3000 	ldrb.w	r3, [sl]
 80039f0:	2b2a      	cmp	r3, #42	; 0x2a
 80039f2:	d015      	beq.n	8003a20 <_vfiprintf_r+0x13c>
 80039f4:	9a07      	ldr	r2, [sp, #28]
 80039f6:	4654      	mov	r4, sl
 80039f8:	2000      	movs	r0, #0
 80039fa:	f04f 0c0a 	mov.w	ip, #10
 80039fe:	4621      	mov	r1, r4
 8003a00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a04:	3b30      	subs	r3, #48	; 0x30
 8003a06:	2b09      	cmp	r3, #9
 8003a08:	d94e      	bls.n	8003aa8 <_vfiprintf_r+0x1c4>
 8003a0a:	b1b0      	cbz	r0, 8003a3a <_vfiprintf_r+0x156>
 8003a0c:	9207      	str	r2, [sp, #28]
 8003a0e:	e014      	b.n	8003a3a <_vfiprintf_r+0x156>
 8003a10:	eba0 0308 	sub.w	r3, r0, r8
 8003a14:	fa09 f303 	lsl.w	r3, r9, r3
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	9304      	str	r3, [sp, #16]
 8003a1c:	46a2      	mov	sl, r4
 8003a1e:	e7d2      	b.n	80039c6 <_vfiprintf_r+0xe2>
 8003a20:	9b03      	ldr	r3, [sp, #12]
 8003a22:	1d19      	adds	r1, r3, #4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	9103      	str	r1, [sp, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bfbb      	ittet	lt
 8003a2c:	425b      	neglt	r3, r3
 8003a2e:	f042 0202 	orrlt.w	r2, r2, #2
 8003a32:	9307      	strge	r3, [sp, #28]
 8003a34:	9307      	strlt	r3, [sp, #28]
 8003a36:	bfb8      	it	lt
 8003a38:	9204      	strlt	r2, [sp, #16]
 8003a3a:	7823      	ldrb	r3, [r4, #0]
 8003a3c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a3e:	d10c      	bne.n	8003a5a <_vfiprintf_r+0x176>
 8003a40:	7863      	ldrb	r3, [r4, #1]
 8003a42:	2b2a      	cmp	r3, #42	; 0x2a
 8003a44:	d135      	bne.n	8003ab2 <_vfiprintf_r+0x1ce>
 8003a46:	9b03      	ldr	r3, [sp, #12]
 8003a48:	1d1a      	adds	r2, r3, #4
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	9203      	str	r2, [sp, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	bfb8      	it	lt
 8003a52:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a56:	3402      	adds	r4, #2
 8003a58:	9305      	str	r3, [sp, #20]
 8003a5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b40 <_vfiprintf_r+0x25c>
 8003a5e:	7821      	ldrb	r1, [r4, #0]
 8003a60:	2203      	movs	r2, #3
 8003a62:	4650      	mov	r0, sl
 8003a64:	f7fc fbbc 	bl	80001e0 <memchr>
 8003a68:	b140      	cbz	r0, 8003a7c <_vfiprintf_r+0x198>
 8003a6a:	2340      	movs	r3, #64	; 0x40
 8003a6c:	eba0 000a 	sub.w	r0, r0, sl
 8003a70:	fa03 f000 	lsl.w	r0, r3, r0
 8003a74:	9b04      	ldr	r3, [sp, #16]
 8003a76:	4303      	orrs	r3, r0
 8003a78:	3401      	adds	r4, #1
 8003a7a:	9304      	str	r3, [sp, #16]
 8003a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a80:	482c      	ldr	r0, [pc, #176]	; (8003b34 <_vfiprintf_r+0x250>)
 8003a82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a86:	2206      	movs	r2, #6
 8003a88:	f7fc fbaa 	bl	80001e0 <memchr>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d03f      	beq.n	8003b10 <_vfiprintf_r+0x22c>
 8003a90:	4b29      	ldr	r3, [pc, #164]	; (8003b38 <_vfiprintf_r+0x254>)
 8003a92:	bb1b      	cbnz	r3, 8003adc <_vfiprintf_r+0x1f8>
 8003a94:	9b03      	ldr	r3, [sp, #12]
 8003a96:	3307      	adds	r3, #7
 8003a98:	f023 0307 	bic.w	r3, r3, #7
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	9303      	str	r3, [sp, #12]
 8003aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa2:	443b      	add	r3, r7
 8003aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa6:	e767      	b.n	8003978 <_vfiprintf_r+0x94>
 8003aa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003aac:	460c      	mov	r4, r1
 8003aae:	2001      	movs	r0, #1
 8003ab0:	e7a5      	b.n	80039fe <_vfiprintf_r+0x11a>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	3401      	adds	r4, #1
 8003ab6:	9305      	str	r3, [sp, #20]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	f04f 0c0a 	mov.w	ip, #10
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ac4:	3a30      	subs	r2, #48	; 0x30
 8003ac6:	2a09      	cmp	r2, #9
 8003ac8:	d903      	bls.n	8003ad2 <_vfiprintf_r+0x1ee>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0c5      	beq.n	8003a5a <_vfiprintf_r+0x176>
 8003ace:	9105      	str	r1, [sp, #20]
 8003ad0:	e7c3      	b.n	8003a5a <_vfiprintf_r+0x176>
 8003ad2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e7f0      	b.n	8003abe <_vfiprintf_r+0x1da>
 8003adc:	ab03      	add	r3, sp, #12
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	462a      	mov	r2, r5
 8003ae2:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <_vfiprintf_r+0x258>)
 8003ae4:	a904      	add	r1, sp, #16
 8003ae6:	4630      	mov	r0, r6
 8003ae8:	f3af 8000 	nop.w
 8003aec:	4607      	mov	r7, r0
 8003aee:	1c78      	adds	r0, r7, #1
 8003af0:	d1d6      	bne.n	8003aa0 <_vfiprintf_r+0x1bc>
 8003af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003af4:	07d9      	lsls	r1, r3, #31
 8003af6:	d405      	bmi.n	8003b04 <_vfiprintf_r+0x220>
 8003af8:	89ab      	ldrh	r3, [r5, #12]
 8003afa:	059a      	lsls	r2, r3, #22
 8003afc:	d402      	bmi.n	8003b04 <_vfiprintf_r+0x220>
 8003afe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b00:	f7ff fdb7 	bl	8003672 <__retarget_lock_release_recursive>
 8003b04:	89ab      	ldrh	r3, [r5, #12]
 8003b06:	065b      	lsls	r3, r3, #25
 8003b08:	f53f af12 	bmi.w	8003930 <_vfiprintf_r+0x4c>
 8003b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b0e:	e711      	b.n	8003934 <_vfiprintf_r+0x50>
 8003b10:	ab03      	add	r3, sp, #12
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	462a      	mov	r2, r5
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <_vfiprintf_r+0x258>)
 8003b18:	a904      	add	r1, sp, #16
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	f000 f880 	bl	8003c20 <_printf_i>
 8003b20:	e7e4      	b.n	8003aec <_vfiprintf_r+0x208>
 8003b22:	bf00      	nop
 8003b24:	08004074 	.word	0x08004074
 8003b28:	08004094 	.word	0x08004094
 8003b2c:	08004054 	.word	0x08004054
 8003b30:	080040b4 	.word	0x080040b4
 8003b34:	080040be 	.word	0x080040be
 8003b38:	00000000 	.word	0x00000000
 8003b3c:	080038bf 	.word	0x080038bf
 8003b40:	080040ba 	.word	0x080040ba

08003b44 <_printf_common>:
 8003b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b48:	4616      	mov	r6, r2
 8003b4a:	4699      	mov	r9, r3
 8003b4c:	688a      	ldr	r2, [r1, #8]
 8003b4e:	690b      	ldr	r3, [r1, #16]
 8003b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b54:	4293      	cmp	r3, r2
 8003b56:	bfb8      	it	lt
 8003b58:	4613      	movlt	r3, r2
 8003b5a:	6033      	str	r3, [r6, #0]
 8003b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b60:	4607      	mov	r7, r0
 8003b62:	460c      	mov	r4, r1
 8003b64:	b10a      	cbz	r2, 8003b6a <_printf_common+0x26>
 8003b66:	3301      	adds	r3, #1
 8003b68:	6033      	str	r3, [r6, #0]
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	0699      	lsls	r1, r3, #26
 8003b6e:	bf42      	ittt	mi
 8003b70:	6833      	ldrmi	r3, [r6, #0]
 8003b72:	3302      	addmi	r3, #2
 8003b74:	6033      	strmi	r3, [r6, #0]
 8003b76:	6825      	ldr	r5, [r4, #0]
 8003b78:	f015 0506 	ands.w	r5, r5, #6
 8003b7c:	d106      	bne.n	8003b8c <_printf_common+0x48>
 8003b7e:	f104 0a19 	add.w	sl, r4, #25
 8003b82:	68e3      	ldr	r3, [r4, #12]
 8003b84:	6832      	ldr	r2, [r6, #0]
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	42ab      	cmp	r3, r5
 8003b8a:	dc26      	bgt.n	8003bda <_printf_common+0x96>
 8003b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b90:	1e13      	subs	r3, r2, #0
 8003b92:	6822      	ldr	r2, [r4, #0]
 8003b94:	bf18      	it	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	0692      	lsls	r2, r2, #26
 8003b9a:	d42b      	bmi.n	8003bf4 <_printf_common+0xb0>
 8003b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	47c0      	blx	r8
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	d01e      	beq.n	8003be8 <_printf_common+0xa4>
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	68e5      	ldr	r5, [r4, #12]
 8003bae:	6832      	ldr	r2, [r6, #0]
 8003bb0:	f003 0306 	and.w	r3, r3, #6
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	bf08      	it	eq
 8003bb8:	1aad      	subeq	r5, r5, r2
 8003bba:	68a3      	ldr	r3, [r4, #8]
 8003bbc:	6922      	ldr	r2, [r4, #16]
 8003bbe:	bf0c      	ite	eq
 8003bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bc4:	2500      	movne	r5, #0
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	bfc4      	itt	gt
 8003bca:	1a9b      	subgt	r3, r3, r2
 8003bcc:	18ed      	addgt	r5, r5, r3
 8003bce:	2600      	movs	r6, #0
 8003bd0:	341a      	adds	r4, #26
 8003bd2:	42b5      	cmp	r5, r6
 8003bd4:	d11a      	bne.n	8003c0c <_printf_common+0xc8>
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	e008      	b.n	8003bec <_printf_common+0xa8>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	4652      	mov	r2, sl
 8003bde:	4649      	mov	r1, r9
 8003be0:	4638      	mov	r0, r7
 8003be2:	47c0      	blx	r8
 8003be4:	3001      	adds	r0, #1
 8003be6:	d103      	bne.n	8003bf0 <_printf_common+0xac>
 8003be8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf0:	3501      	adds	r5, #1
 8003bf2:	e7c6      	b.n	8003b82 <_printf_common+0x3e>
 8003bf4:	18e1      	adds	r1, r4, r3
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	2030      	movs	r0, #48	; 0x30
 8003bfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bfe:	4422      	add	r2, r4
 8003c00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c08:	3302      	adds	r3, #2
 8003c0a:	e7c7      	b.n	8003b9c <_printf_common+0x58>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	4622      	mov	r2, r4
 8003c10:	4649      	mov	r1, r9
 8003c12:	4638      	mov	r0, r7
 8003c14:	47c0      	blx	r8
 8003c16:	3001      	adds	r0, #1
 8003c18:	d0e6      	beq.n	8003be8 <_printf_common+0xa4>
 8003c1a:	3601      	adds	r6, #1
 8003c1c:	e7d9      	b.n	8003bd2 <_printf_common+0x8e>
	...

08003c20 <_printf_i>:
 8003c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c24:	460c      	mov	r4, r1
 8003c26:	4691      	mov	r9, r2
 8003c28:	7e27      	ldrb	r7, [r4, #24]
 8003c2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c2c:	2f78      	cmp	r7, #120	; 0x78
 8003c2e:	4680      	mov	r8, r0
 8003c30:	469a      	mov	sl, r3
 8003c32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c36:	d807      	bhi.n	8003c48 <_printf_i+0x28>
 8003c38:	2f62      	cmp	r7, #98	; 0x62
 8003c3a:	d80a      	bhi.n	8003c52 <_printf_i+0x32>
 8003c3c:	2f00      	cmp	r7, #0
 8003c3e:	f000 80d8 	beq.w	8003df2 <_printf_i+0x1d2>
 8003c42:	2f58      	cmp	r7, #88	; 0x58
 8003c44:	f000 80a3 	beq.w	8003d8e <_printf_i+0x16e>
 8003c48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c50:	e03a      	b.n	8003cc8 <_printf_i+0xa8>
 8003c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c56:	2b15      	cmp	r3, #21
 8003c58:	d8f6      	bhi.n	8003c48 <_printf_i+0x28>
 8003c5a:	a001      	add	r0, pc, #4	; (adr r0, 8003c60 <_printf_i+0x40>)
 8003c5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003c60:	08003cb9 	.word	0x08003cb9
 8003c64:	08003ccd 	.word	0x08003ccd
 8003c68:	08003c49 	.word	0x08003c49
 8003c6c:	08003c49 	.word	0x08003c49
 8003c70:	08003c49 	.word	0x08003c49
 8003c74:	08003c49 	.word	0x08003c49
 8003c78:	08003ccd 	.word	0x08003ccd
 8003c7c:	08003c49 	.word	0x08003c49
 8003c80:	08003c49 	.word	0x08003c49
 8003c84:	08003c49 	.word	0x08003c49
 8003c88:	08003c49 	.word	0x08003c49
 8003c8c:	08003dd9 	.word	0x08003dd9
 8003c90:	08003cfd 	.word	0x08003cfd
 8003c94:	08003dbb 	.word	0x08003dbb
 8003c98:	08003c49 	.word	0x08003c49
 8003c9c:	08003c49 	.word	0x08003c49
 8003ca0:	08003dfb 	.word	0x08003dfb
 8003ca4:	08003c49 	.word	0x08003c49
 8003ca8:	08003cfd 	.word	0x08003cfd
 8003cac:	08003c49 	.word	0x08003c49
 8003cb0:	08003c49 	.word	0x08003c49
 8003cb4:	08003dc3 	.word	0x08003dc3
 8003cb8:	680b      	ldr	r3, [r1, #0]
 8003cba:	1d1a      	adds	r2, r3, #4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	600a      	str	r2, [r1, #0]
 8003cc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0a3      	b.n	8003e14 <_printf_i+0x1f4>
 8003ccc:	6825      	ldr	r5, [r4, #0]
 8003cce:	6808      	ldr	r0, [r1, #0]
 8003cd0:	062e      	lsls	r6, r5, #24
 8003cd2:	f100 0304 	add.w	r3, r0, #4
 8003cd6:	d50a      	bpl.n	8003cee <_printf_i+0xce>
 8003cd8:	6805      	ldr	r5, [r0, #0]
 8003cda:	600b      	str	r3, [r1, #0]
 8003cdc:	2d00      	cmp	r5, #0
 8003cde:	da03      	bge.n	8003ce8 <_printf_i+0xc8>
 8003ce0:	232d      	movs	r3, #45	; 0x2d
 8003ce2:	426d      	negs	r5, r5
 8003ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ce8:	485e      	ldr	r0, [pc, #376]	; (8003e64 <_printf_i+0x244>)
 8003cea:	230a      	movs	r3, #10
 8003cec:	e019      	b.n	8003d22 <_printf_i+0x102>
 8003cee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003cf2:	6805      	ldr	r5, [r0, #0]
 8003cf4:	600b      	str	r3, [r1, #0]
 8003cf6:	bf18      	it	ne
 8003cf8:	b22d      	sxthne	r5, r5
 8003cfa:	e7ef      	b.n	8003cdc <_printf_i+0xbc>
 8003cfc:	680b      	ldr	r3, [r1, #0]
 8003cfe:	6825      	ldr	r5, [r4, #0]
 8003d00:	1d18      	adds	r0, r3, #4
 8003d02:	6008      	str	r0, [r1, #0]
 8003d04:	0628      	lsls	r0, r5, #24
 8003d06:	d501      	bpl.n	8003d0c <_printf_i+0xec>
 8003d08:	681d      	ldr	r5, [r3, #0]
 8003d0a:	e002      	b.n	8003d12 <_printf_i+0xf2>
 8003d0c:	0669      	lsls	r1, r5, #25
 8003d0e:	d5fb      	bpl.n	8003d08 <_printf_i+0xe8>
 8003d10:	881d      	ldrh	r5, [r3, #0]
 8003d12:	4854      	ldr	r0, [pc, #336]	; (8003e64 <_printf_i+0x244>)
 8003d14:	2f6f      	cmp	r7, #111	; 0x6f
 8003d16:	bf0c      	ite	eq
 8003d18:	2308      	moveq	r3, #8
 8003d1a:	230a      	movne	r3, #10
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d22:	6866      	ldr	r6, [r4, #4]
 8003d24:	60a6      	str	r6, [r4, #8]
 8003d26:	2e00      	cmp	r6, #0
 8003d28:	bfa2      	ittt	ge
 8003d2a:	6821      	ldrge	r1, [r4, #0]
 8003d2c:	f021 0104 	bicge.w	r1, r1, #4
 8003d30:	6021      	strge	r1, [r4, #0]
 8003d32:	b90d      	cbnz	r5, 8003d38 <_printf_i+0x118>
 8003d34:	2e00      	cmp	r6, #0
 8003d36:	d04d      	beq.n	8003dd4 <_printf_i+0x1b4>
 8003d38:	4616      	mov	r6, r2
 8003d3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d3e:	fb03 5711 	mls	r7, r3, r1, r5
 8003d42:	5dc7      	ldrb	r7, [r0, r7]
 8003d44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d48:	462f      	mov	r7, r5
 8003d4a:	42bb      	cmp	r3, r7
 8003d4c:	460d      	mov	r5, r1
 8003d4e:	d9f4      	bls.n	8003d3a <_printf_i+0x11a>
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d10b      	bne.n	8003d6c <_printf_i+0x14c>
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	07df      	lsls	r7, r3, #31
 8003d58:	d508      	bpl.n	8003d6c <_printf_i+0x14c>
 8003d5a:	6923      	ldr	r3, [r4, #16]
 8003d5c:	6861      	ldr	r1, [r4, #4]
 8003d5e:	4299      	cmp	r1, r3
 8003d60:	bfde      	ittt	le
 8003d62:	2330      	movle	r3, #48	; 0x30
 8003d64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d6c:	1b92      	subs	r2, r2, r6
 8003d6e:	6122      	str	r2, [r4, #16]
 8003d70:	f8cd a000 	str.w	sl, [sp]
 8003d74:	464b      	mov	r3, r9
 8003d76:	aa03      	add	r2, sp, #12
 8003d78:	4621      	mov	r1, r4
 8003d7a:	4640      	mov	r0, r8
 8003d7c:	f7ff fee2 	bl	8003b44 <_printf_common>
 8003d80:	3001      	adds	r0, #1
 8003d82:	d14c      	bne.n	8003e1e <_printf_i+0x1fe>
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295
 8003d88:	b004      	add	sp, #16
 8003d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8e:	4835      	ldr	r0, [pc, #212]	; (8003e64 <_printf_i+0x244>)
 8003d90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	680e      	ldr	r6, [r1, #0]
 8003d98:	061f      	lsls	r7, r3, #24
 8003d9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003d9e:	600e      	str	r6, [r1, #0]
 8003da0:	d514      	bpl.n	8003dcc <_printf_i+0x1ac>
 8003da2:	07d9      	lsls	r1, r3, #31
 8003da4:	bf44      	itt	mi
 8003da6:	f043 0320 	orrmi.w	r3, r3, #32
 8003daa:	6023      	strmi	r3, [r4, #0]
 8003dac:	b91d      	cbnz	r5, 8003db6 <_printf_i+0x196>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	f023 0320 	bic.w	r3, r3, #32
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	2310      	movs	r3, #16
 8003db8:	e7b0      	b.n	8003d1c <_printf_i+0xfc>
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	f043 0320 	orr.w	r3, r3, #32
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	2378      	movs	r3, #120	; 0x78
 8003dc4:	4828      	ldr	r0, [pc, #160]	; (8003e68 <_printf_i+0x248>)
 8003dc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dca:	e7e3      	b.n	8003d94 <_printf_i+0x174>
 8003dcc:	065e      	lsls	r6, r3, #25
 8003dce:	bf48      	it	mi
 8003dd0:	b2ad      	uxthmi	r5, r5
 8003dd2:	e7e6      	b.n	8003da2 <_printf_i+0x182>
 8003dd4:	4616      	mov	r6, r2
 8003dd6:	e7bb      	b.n	8003d50 <_printf_i+0x130>
 8003dd8:	680b      	ldr	r3, [r1, #0]
 8003dda:	6826      	ldr	r6, [r4, #0]
 8003ddc:	6960      	ldr	r0, [r4, #20]
 8003dde:	1d1d      	adds	r5, r3, #4
 8003de0:	600d      	str	r5, [r1, #0]
 8003de2:	0635      	lsls	r5, r6, #24
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	d501      	bpl.n	8003dec <_printf_i+0x1cc>
 8003de8:	6018      	str	r0, [r3, #0]
 8003dea:	e002      	b.n	8003df2 <_printf_i+0x1d2>
 8003dec:	0671      	lsls	r1, r6, #25
 8003dee:	d5fb      	bpl.n	8003de8 <_printf_i+0x1c8>
 8003df0:	8018      	strh	r0, [r3, #0]
 8003df2:	2300      	movs	r3, #0
 8003df4:	6123      	str	r3, [r4, #16]
 8003df6:	4616      	mov	r6, r2
 8003df8:	e7ba      	b.n	8003d70 <_printf_i+0x150>
 8003dfa:	680b      	ldr	r3, [r1, #0]
 8003dfc:	1d1a      	adds	r2, r3, #4
 8003dfe:	600a      	str	r2, [r1, #0]
 8003e00:	681e      	ldr	r6, [r3, #0]
 8003e02:	6862      	ldr	r2, [r4, #4]
 8003e04:	2100      	movs	r1, #0
 8003e06:	4630      	mov	r0, r6
 8003e08:	f7fc f9ea 	bl	80001e0 <memchr>
 8003e0c:	b108      	cbz	r0, 8003e12 <_printf_i+0x1f2>
 8003e0e:	1b80      	subs	r0, r0, r6
 8003e10:	6060      	str	r0, [r4, #4]
 8003e12:	6863      	ldr	r3, [r4, #4]
 8003e14:	6123      	str	r3, [r4, #16]
 8003e16:	2300      	movs	r3, #0
 8003e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e1c:	e7a8      	b.n	8003d70 <_printf_i+0x150>
 8003e1e:	6923      	ldr	r3, [r4, #16]
 8003e20:	4632      	mov	r2, r6
 8003e22:	4649      	mov	r1, r9
 8003e24:	4640      	mov	r0, r8
 8003e26:	47d0      	blx	sl
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d0ab      	beq.n	8003d84 <_printf_i+0x164>
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	079b      	lsls	r3, r3, #30
 8003e30:	d413      	bmi.n	8003e5a <_printf_i+0x23a>
 8003e32:	68e0      	ldr	r0, [r4, #12]
 8003e34:	9b03      	ldr	r3, [sp, #12]
 8003e36:	4298      	cmp	r0, r3
 8003e38:	bfb8      	it	lt
 8003e3a:	4618      	movlt	r0, r3
 8003e3c:	e7a4      	b.n	8003d88 <_printf_i+0x168>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	4632      	mov	r2, r6
 8003e42:	4649      	mov	r1, r9
 8003e44:	4640      	mov	r0, r8
 8003e46:	47d0      	blx	sl
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d09b      	beq.n	8003d84 <_printf_i+0x164>
 8003e4c:	3501      	adds	r5, #1
 8003e4e:	68e3      	ldr	r3, [r4, #12]
 8003e50:	9903      	ldr	r1, [sp, #12]
 8003e52:	1a5b      	subs	r3, r3, r1
 8003e54:	42ab      	cmp	r3, r5
 8003e56:	dcf2      	bgt.n	8003e3e <_printf_i+0x21e>
 8003e58:	e7eb      	b.n	8003e32 <_printf_i+0x212>
 8003e5a:	2500      	movs	r5, #0
 8003e5c:	f104 0619 	add.w	r6, r4, #25
 8003e60:	e7f5      	b.n	8003e4e <_printf_i+0x22e>
 8003e62:	bf00      	nop
 8003e64:	080040c5 	.word	0x080040c5
 8003e68:	080040d6 	.word	0x080040d6

08003e6c <_sbrk_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4d06      	ldr	r5, [pc, #24]	; (8003e88 <_sbrk_r+0x1c>)
 8003e70:	2300      	movs	r3, #0
 8003e72:	4604      	mov	r4, r0
 8003e74:	4608      	mov	r0, r1
 8003e76:	602b      	str	r3, [r5, #0]
 8003e78:	f7fc ff9a 	bl	8000db0 <_sbrk>
 8003e7c:	1c43      	adds	r3, r0, #1
 8003e7e:	d102      	bne.n	8003e86 <_sbrk_r+0x1a>
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	b103      	cbz	r3, 8003e86 <_sbrk_r+0x1a>
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	bd38      	pop	{r3, r4, r5, pc}
 8003e88:	20000234 	.word	0x20000234

08003e8c <__sread>:
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	460c      	mov	r4, r1
 8003e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e94:	f000 f8a0 	bl	8003fd8 <_read_r>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	bfab      	itete	ge
 8003e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8003ea0:	181b      	addge	r3, r3, r0
 8003ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ea6:	bfac      	ite	ge
 8003ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003eaa:	81a3      	strhlt	r3, [r4, #12]
 8003eac:	bd10      	pop	{r4, pc}

08003eae <__swrite>:
 8003eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb2:	461f      	mov	r7, r3
 8003eb4:	898b      	ldrh	r3, [r1, #12]
 8003eb6:	05db      	lsls	r3, r3, #23
 8003eb8:	4605      	mov	r5, r0
 8003eba:	460c      	mov	r4, r1
 8003ebc:	4616      	mov	r6, r2
 8003ebe:	d505      	bpl.n	8003ecc <__swrite+0x1e>
 8003ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f000 f868 	bl	8003f9c <_lseek_r>
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ed6:	81a3      	strh	r3, [r4, #12]
 8003ed8:	4632      	mov	r2, r6
 8003eda:	463b      	mov	r3, r7
 8003edc:	4628      	mov	r0, r5
 8003ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee2:	f000 b817 	b.w	8003f14 <_write_r>

08003ee6 <__sseek>:
 8003ee6:	b510      	push	{r4, lr}
 8003ee8:	460c      	mov	r4, r1
 8003eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eee:	f000 f855 	bl	8003f9c <_lseek_r>
 8003ef2:	1c43      	adds	r3, r0, #1
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	bf15      	itete	ne
 8003ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f02:	81a3      	strheq	r3, [r4, #12]
 8003f04:	bf18      	it	ne
 8003f06:	81a3      	strhne	r3, [r4, #12]
 8003f08:	bd10      	pop	{r4, pc}

08003f0a <__sclose>:
 8003f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f0e:	f000 b813 	b.w	8003f38 <_close_r>
	...

08003f14 <_write_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4d07      	ldr	r5, [pc, #28]	; (8003f34 <_write_r+0x20>)
 8003f18:	4604      	mov	r4, r0
 8003f1a:	4608      	mov	r0, r1
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	2200      	movs	r2, #0
 8003f20:	602a      	str	r2, [r5, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f7fc fdf8 	bl	8000b18 <_write>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d102      	bne.n	8003f32 <_write_r+0x1e>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	b103      	cbz	r3, 8003f32 <_write_r+0x1e>
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	bd38      	pop	{r3, r4, r5, pc}
 8003f34:	20000234 	.word	0x20000234

08003f38 <_close_r>:
 8003f38:	b538      	push	{r3, r4, r5, lr}
 8003f3a:	4d06      	ldr	r5, [pc, #24]	; (8003f54 <_close_r+0x1c>)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	4604      	mov	r4, r0
 8003f40:	4608      	mov	r0, r1
 8003f42:	602b      	str	r3, [r5, #0]
 8003f44:	f7fc feff 	bl	8000d46 <_close>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d102      	bne.n	8003f52 <_close_r+0x1a>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	b103      	cbz	r3, 8003f52 <_close_r+0x1a>
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
 8003f54:	20000234 	.word	0x20000234

08003f58 <_fstat_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	4d07      	ldr	r5, [pc, #28]	; (8003f78 <_fstat_r+0x20>)
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	4604      	mov	r4, r0
 8003f60:	4608      	mov	r0, r1
 8003f62:	4611      	mov	r1, r2
 8003f64:	602b      	str	r3, [r5, #0]
 8003f66:	f7fc fefa 	bl	8000d5e <_fstat>
 8003f6a:	1c43      	adds	r3, r0, #1
 8003f6c:	d102      	bne.n	8003f74 <_fstat_r+0x1c>
 8003f6e:	682b      	ldr	r3, [r5, #0]
 8003f70:	b103      	cbz	r3, 8003f74 <_fstat_r+0x1c>
 8003f72:	6023      	str	r3, [r4, #0]
 8003f74:	bd38      	pop	{r3, r4, r5, pc}
 8003f76:	bf00      	nop
 8003f78:	20000234 	.word	0x20000234

08003f7c <_isatty_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4d06      	ldr	r5, [pc, #24]	; (8003f98 <_isatty_r+0x1c>)
 8003f80:	2300      	movs	r3, #0
 8003f82:	4604      	mov	r4, r0
 8003f84:	4608      	mov	r0, r1
 8003f86:	602b      	str	r3, [r5, #0]
 8003f88:	f7fc fef9 	bl	8000d7e <_isatty>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d102      	bne.n	8003f96 <_isatty_r+0x1a>
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	b103      	cbz	r3, 8003f96 <_isatty_r+0x1a>
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	20000234 	.word	0x20000234

08003f9c <_lseek_r>:
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	4d07      	ldr	r5, [pc, #28]	; (8003fbc <_lseek_r+0x20>)
 8003fa0:	4604      	mov	r4, r0
 8003fa2:	4608      	mov	r0, r1
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	602a      	str	r2, [r5, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f7fc fef2 	bl	8000d94 <_lseek>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d102      	bne.n	8003fba <_lseek_r+0x1e>
 8003fb4:	682b      	ldr	r3, [r5, #0]
 8003fb6:	b103      	cbz	r3, 8003fba <_lseek_r+0x1e>
 8003fb8:	6023      	str	r3, [r4, #0]
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	20000234 	.word	0x20000234

08003fc0 <__malloc_lock>:
 8003fc0:	4801      	ldr	r0, [pc, #4]	; (8003fc8 <__malloc_lock+0x8>)
 8003fc2:	f7ff bb55 	b.w	8003670 <__retarget_lock_acquire_recursive>
 8003fc6:	bf00      	nop
 8003fc8:	2000022c 	.word	0x2000022c

08003fcc <__malloc_unlock>:
 8003fcc:	4801      	ldr	r0, [pc, #4]	; (8003fd4 <__malloc_unlock+0x8>)
 8003fce:	f7ff bb50 	b.w	8003672 <__retarget_lock_release_recursive>
 8003fd2:	bf00      	nop
 8003fd4:	2000022c 	.word	0x2000022c

08003fd8 <_read_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	4d07      	ldr	r5, [pc, #28]	; (8003ff8 <_read_r+0x20>)
 8003fdc:	4604      	mov	r4, r0
 8003fde:	4608      	mov	r0, r1
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	602a      	str	r2, [r5, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f7fc fe90 	bl	8000d0c <_read>
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	d102      	bne.n	8003ff6 <_read_r+0x1e>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	b103      	cbz	r3, 8003ff6 <_read_r+0x1e>
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	bd38      	pop	{r3, r4, r5, pc}
 8003ff8:	20000234 	.word	0x20000234

08003ffc <_init>:
 8003ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffe:	bf00      	nop
 8004000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004002:	bc08      	pop	{r3}
 8004004:	469e      	mov	lr, r3
 8004006:	4770      	bx	lr

08004008 <_fini>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	bf00      	nop
 800400c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400e:	bc08      	pop	{r3}
 8004010:	469e      	mov	lr, r3
 8004012:	4770      	bx	lr
