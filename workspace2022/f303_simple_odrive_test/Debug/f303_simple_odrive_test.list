
f303_simple_odrive_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005080  08005080  00015080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b8  080051b8  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080051b8  080051b8  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051b8  080051b8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080051c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000244  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c8  200002c8  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df2e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f61  00000000  00000000  0002dfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  0002ff48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000898  00000000  00000000  00030898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b80f  00000000  00000000  00031130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b931  00000000  00000000  0004c93f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eed2  00000000  00000000  00058270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000f7142  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d04  00000000  00000000  000f7198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005068 	.word	0x08005068

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08005068 	.word	0x08005068

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	HAL_UART_Transmit(&huart2,tx_data,sizeof(tx_data),0xFFFF);
 8000274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000278:	2210      	movs	r2, #16
 800027a:	4955      	ldr	r1, [pc, #340]	; (80003d0 <main+0x160>)
 800027c:	4855      	ldr	r0, [pc, #340]	; (80003d4 <main+0x164>)
 800027e:	f002 ffd1 	bl	8003224 <HAL_UART_Transmit>
	printf("start can test\r\n");
 8000282:	4855      	ldr	r0, [pc, #340]	; (80003d8 <main+0x168>)
 8000284:	f003 ffaa 	bl	80041dc <puts>
	  sFilterConfig.FilterBank = 0;
 8000288:	4b54      	ldr	r3, [pc, #336]	; (80003dc <main+0x16c>)
 800028a:	2200      	movs	r2, #0
 800028c:	615a      	str	r2, [r3, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800028e:	4b53      	ldr	r3, [pc, #332]	; (80003dc <main+0x16c>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000294:	4b51      	ldr	r3, [pc, #324]	; (80003dc <main+0x16c>)
 8000296:	2201      	movs	r2, #1
 8000298:	61da      	str	r2, [r3, #28]
	  sFilterConfig.FilterIdHigh = 0x0000;
 800029a:	4b50      	ldr	r3, [pc, #320]	; (80003dc <main+0x16c>)
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIdLow = 0x0000;
 80002a0:	4b4e      	ldr	r3, [pc, #312]	; (80003dc <main+0x16c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80002a6:	4b4d      	ldr	r3, [pc, #308]	; (80003dc <main+0x16c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterMaskIdLow = 0x0000;
 80002ac:	4b4b      	ldr	r3, [pc, #300]	; (80003dc <main+0x16c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80002b2:	4b4a      	ldr	r3, [pc, #296]	; (80003dc <main+0x16c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterActivation=ENABLE;
 80002b8:	4b48      	ldr	r3, [pc, #288]	; (80003dc <main+0x16c>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	621a      	str	r2, [r3, #32]
	  sFilterConfig.SlaveStartFilterBank=14;
 80002be:	4b47      	ldr	r3, [pc, #284]	; (80003dc <main+0x16c>)
 80002c0:	220e      	movs	r2, #14
 80002c2:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan,&sFilterConfig) != HAL_OK)
 80002c4:	4945      	ldr	r1, [pc, #276]	; (80003dc <main+0x16c>)
 80002c6:	4846      	ldr	r0, [pc, #280]	; (80003e0 <main+0x170>)
 80002c8:	f000 fd93 	bl	8000df2 <HAL_CAN_ConfigFilter>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <main+0x66>
	{
	  Error_Handler();
 80002d2:	f000 fa11 	bl	80006f8 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan)!=HAL_OK)
 80002d6:	4842      	ldr	r0, [pc, #264]	; (80003e0 <main+0x170>)
 80002d8:	f000 fe55 	bl	8000f86 <HAL_CAN_Start>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <main+0x76>
	{
	  Error_Handler2();
 80002e2:	f000 f9f5 	bl	80006d0 <Error_Handler2>
	}
	if(HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80002e6:	2103      	movs	r1, #3
 80002e8:	483d      	ldr	r0, [pc, #244]	; (80003e0 <main+0x170>)
 80002ea:	f001 f8b2 	bl	8001452 <HAL_CAN_ActivateNotification>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <main+0x88>
	{
		  Error_Handler3();
 80002f4:	f000 f9f6 	bl	80006e4 <Error_Handler3>
	}

	TxHeader.StdId=(motor_num << 5) + (control_mode);
 80002f8:	4b3a      	ldr	r3, [pc, #232]	; (80003e4 <main+0x174>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	015b      	lsls	r3, r3, #5
 80002fe:	4a3a      	ldr	r2, [pc, #232]	; (80003e8 <main+0x178>)
 8000300:	7812      	ldrb	r2, [r2, #0]
 8000302:	4413      	add	r3, r2
 8000304:	461a      	mov	r2, r3
 8000306:	4b39      	ldr	r3, [pc, #228]	; (80003ec <main+0x17c>)
 8000308:	601a      	str	r2, [r3, #0]
	//  TxHeader.RTR = 2;//read data
	TxHeader.RTR = 1;//pos,state,request input(レシーブいらな?��?とき�?
 800030a:	4b38      	ldr	r3, [pc, #224]	; (80003ec <main+0x17c>)
 800030c:	2201      	movs	r2, #1
 800030e:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8000310:	4b36      	ldr	r3, [pc, #216]	; (80003ec <main+0x17c>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 8000316:	4b35      	ldr	r3, [pc, #212]	; (80003ec <main+0x17c>)
 8000318:	2208      	movs	r2, #8
 800031a:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 800031c:	4b33      	ldr	r3, [pc, #204]	; (80003ec <main+0x17c>)
 800031e:	2200      	movs	r2, #0
 8000320:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000322:	f000 fbe1 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000326:	f000 f869 	bl	80003fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032a:	f000 f90d 	bl	8000548 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800032e:	f000 f8db 	bl	80004e8 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000332:	f000 f8a3 	bl	800047c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  TxData[0] = 0x8;
 8000336:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <main+0x180>)
 8000338:	2208      	movs	r2, #8
 800033a:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0;
 800033c:	4b2c      	ldr	r3, [pc, #176]	; (80003f0 <main+0x180>)
 800033e:	2200      	movs	r2, #0
 8000340:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0;
 8000342:	4b2b      	ldr	r3, [pc, #172]	; (80003f0 <main+0x180>)
 8000344:	2200      	movs	r2, #0
 8000346:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0;
 8000348:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <main+0x180>)
 800034a:	2200      	movs	r2, #0
 800034c:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0;
 800034e:	4b28      	ldr	r3, [pc, #160]	; (80003f0 <main+0x180>)
 8000350:	2200      	movs	r2, #0
 8000352:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0;
 8000354:	4b26      	ldr	r3, [pc, #152]	; (80003f0 <main+0x180>)
 8000356:	2200      	movs	r2, #0
 8000358:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0;
 800035a:	4b25      	ldr	r3, [pc, #148]	; (80003f0 <main+0x180>)
 800035c:	2200      	movs	r2, #0
 800035e:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0;
 8000360:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <main+0x180>)
 8000362:	2200      	movs	r2, #0
 8000364:	71da      	strb	r2, [r3, #7]

  printf("mailbox data :  %d\r\n",HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8000366:	481e      	ldr	r0, [pc, #120]	; (80003e0 <main+0x170>)
 8000368:	f000 ff2c 	bl	80011c4 <HAL_CAN_GetTxMailboxesFreeLevel>
 800036c:	4603      	mov	r3, r0
 800036e:	4619      	mov	r1, r3
 8000370:	4820      	ldr	r0, [pc, #128]	; (80003f4 <main+0x184>)
 8000372:	f003 fead 	bl	80040d0 <iprintf>
  if (HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox) != HAL_OK)
 8000376:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <main+0x188>)
 8000378:	4a1d      	ldr	r2, [pc, #116]	; (80003f0 <main+0x180>)
 800037a:	491c      	ldr	r1, [pc, #112]	; (80003ec <main+0x17c>)
 800037c:	4818      	ldr	r0, [pc, #96]	; (80003e0 <main+0x170>)
 800037e:	f000 fe46 	bl	800100e <HAL_CAN_AddTxMessage>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <main+0x11c>
  {
	Error_Handler ();
 8000388:	f000 f9b6 	bl	80006f8 <Error_Handler>
  }

  HAL_Delay(1000);
 800038c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000390:	f000 fc10 	bl	8000bb4 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf("mailbox data :  %d\r\n",HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8000394:	4812      	ldr	r0, [pc, #72]	; (80003e0 <main+0x170>)
 8000396:	f000 ff15 	bl	80011c4 <HAL_CAN_GetTxMailboxesFreeLevel>
 800039a:	4603      	mov	r3, r0
 800039c:	4619      	mov	r1, r3
 800039e:	4815      	ldr	r0, [pc, #84]	; (80003f4 <main+0x184>)
 80003a0:	f003 fe96 	bl	80040d0 <iprintf>
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80003a4:	480e      	ldr	r0, [pc, #56]	; (80003e0 <main+0x170>)
 80003a6:	f000 ff0d 	bl	80011c4 <HAL_CAN_GetTxMailboxesFreeLevel>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d00a      	beq.n	80003c6 <main+0x156>
		if (HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox) != HAL_OK)
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <main+0x188>)
 80003b2:	4a0f      	ldr	r2, [pc, #60]	; (80003f0 <main+0x180>)
 80003b4:	490d      	ldr	r1, [pc, #52]	; (80003ec <main+0x17c>)
 80003b6:	480a      	ldr	r0, [pc, #40]	; (80003e0 <main+0x170>)
 80003b8:	f000 fe29 	bl	800100e <HAL_CAN_AddTxMessage>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <main+0x156>
		{
			Error_Handler ();
 80003c2:	f000 f999 	bl	80006f8 <Error_Handler>
		}
	}

	  HAL_Delay(1000);
 80003c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ca:	f000 fbf3 	bl	8000bb4 <HAL_Delay>
	printf("mailbox data :  %d\r\n",HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 80003ce:	e7e1      	b.n	8000394 <main+0x124>
 80003d0:	20000004 	.word	0x20000004
 80003d4:	20000218 	.word	0x20000218
 80003d8:	08005080 	.word	0x08005080
 80003dc:	200000b8 	.word	0x200000b8
 80003e0:	200000e4 	.word	0x200000e4
 80003e4:	20000000 	.word	0x20000000
 80003e8:	20000001 	.word	0x20000001
 80003ec:	2000029c 	.word	0x2000029c
 80003f0:	2000020c 	.word	0x2000020c
 80003f4:	08005090 	.word	0x08005090
 80003f8:	20000214 	.word	0x20000214

080003fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b090      	sub	sp, #64	; 0x40
 8000400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000402:	f107 0318 	add.w	r3, r7, #24
 8000406:	2228      	movs	r2, #40	; 0x28
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f003 fe58 	bl	80040c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041e:	2302      	movs	r3, #2
 8000420:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000422:	2301      	movs	r3, #1
 8000424:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000426:	2310      	movs	r3, #16
 8000428:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042a:	2302      	movs	r3, #2
 800042c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800042e:	2300      	movs	r3, #0
 8000430:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000432:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000436:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000438:	f107 0318 	add.w	r3, r7, #24
 800043c:	4618      	mov	r0, r3
 800043e:	f001 fd65 	bl	8001f0c <HAL_RCC_OscConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000448:	f000 f956 	bl	80006f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044c:	230f      	movs	r3, #15
 800044e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000450:	2302      	movs	r3, #2
 8000452:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2101      	movs	r1, #1
 8000464:	4618      	mov	r0, r3
 8000466:	f002 fc59 	bl	8002d1c <HAL_RCC_ClockConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000470:	f000 f942 	bl	80006f8 <Error_Handler>
  }
}
 8000474:	bf00      	nop
 8000476:	3740      	adds	r7, #64	; 0x40
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <MX_CAN_Init+0x64>)
 8000482:	4a18      	ldr	r2, [pc, #96]	; (80004e4 <MX_CAN_Init+0x68>)
 8000484:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8000486:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <MX_CAN_Init+0x64>)
 8000488:	2206      	movs	r2, #6
 800048a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800048c:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <MX_CAN_Init+0x64>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000492:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <MX_CAN_Init+0x64>)
 8000494:	2200      	movs	r2, #0
 8000496:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <MX_CAN_Init+0x64>)
 800049a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800049e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <MX_CAN_Init+0x64>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <MX_CAN_Init+0x64>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_CAN_Init+0x64>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <MX_CAN_Init+0x64>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_CAN_Init+0x64>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MX_CAN_Init+0x64>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <MX_CAN_Init+0x64>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <MX_CAN_Init+0x64>)
 80004cc:	f000 fb96 	bl	8000bfc <HAL_CAN_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80004d6:	f000 f90f 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	200000e4 	.word	0x200000e4
 80004e4:	40006400 	.word	0x40006400

080004e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <MX_USART2_UART_Init+0x58>)
 80004ee:	4a15      	ldr	r2, [pc, #84]	; (8000544 <MX_USART2_UART_Init+0x5c>)
 80004f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004f2:	4b13      	ldr	r3, [pc, #76]	; (8000540 <MX_USART2_UART_Init+0x58>)
 80004f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <MX_USART2_UART_Init+0x58>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <MX_USART2_UART_Init+0x58>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <MX_USART2_UART_Init+0x58>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_USART2_UART_Init+0x58>)
 800050e:	220c      	movs	r2, #12
 8000510:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <MX_USART2_UART_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_USART2_UART_Init+0x58>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_USART2_UART_Init+0x58>)
 8000520:	2200      	movs	r2, #0
 8000522:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <MX_USART2_UART_Init+0x58>)
 8000526:	2200      	movs	r2, #0
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <MX_USART2_UART_Init+0x58>)
 800052c:	f002 fe2c 	bl	8003188 <HAL_UART_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000536:	f000 f8df 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000218 	.word	0x20000218
 8000544:	40004400 	.word	0x40004400

08000548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <MX_GPIO_Init+0x8c>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a1c      	ldr	r2, [pc, #112]	; (80005d4 <MX_GPIO_Init+0x8c>)
 8000564:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <MX_GPIO_Init+0x8c>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <MX_GPIO_Init+0x8c>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <MX_GPIO_Init+0x8c>)
 800057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_GPIO_Init+0x8c>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_GPIO_Init+0x8c>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <MX_GPIO_Init+0x8c>)
 8000594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_GPIO_Init+0x8c>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2108      	movs	r1, #8
 80005aa:	480b      	ldr	r0, [pc, #44]	; (80005d8 <MX_GPIO_Init+0x90>)
 80005ac:	f001 fc96 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005b0:	2308      	movs	r3, #8
 80005b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005b8:	2302      	movs	r3, #2
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	4619      	mov	r1, r3
 80005c6:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MX_GPIO_Init+0x90>)
 80005c8:	f001 fb16 	bl	8001bf8 <HAL_GPIO_Init>

}
 80005cc:	bf00      	nop
 80005ce:	3720      	adds	r7, #32
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000400 	.word	0x48000400

080005dc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,50);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2332      	movs	r3, #50	; 0x32
 80005ee:	68b9      	ldr	r1, [r7, #8]
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <_write+0x24>)
 80005f2:	f002 fe17 	bl	8003224 <HAL_UART_Transmit>
  return len;
 80005f6:	687b      	ldr	r3, [r7, #4]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000218 	.word	0x20000218

08000604 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	flag=!flag;
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <HAL_CAN_TxMailbox0CompleteCallback+0x40>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf0c      	ite	eq
 8000614:	2301      	moveq	r3, #1
 8000616:	2300      	movne	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_CAN_TxMailbox0CompleteCallback+0x40>)
 800061e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,flag);
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_CAN_TxMailbox0CompleteCallback+0x40>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	2108      	movs	r1, #8
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <HAL_CAN_TxMailbox0CompleteCallback+0x44>)
 800062a:	f001 fc57 	bl	8001edc <HAL_GPIO_WritePin>
	printf("tx_data : %d\r\n",TxData[0]);
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	4619      	mov	r1, r3
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <HAL_CAN_TxMailbox0CompleteCallback+0x4c>)
 8000636:	f003 fd4b 	bl	80040d0 <iprintf>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200000a8 	.word	0x200000a8
 8000648:	48000400 	.word	0x48000400
 800064c:	2000020c 	.word	0x2000020c
 8000650:	080050a8 	.word	0x080050a8

08000654 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef RxHeader;
  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800065c:	f107 020c 	add.w	r2, r7, #12
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000662:	2100      	movs	r1, #0
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000666:	f000 fde2 	bl	800122e <HAL_CAN_GetRxMessage>
  if (RxData[0]!=0){
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d022      	beq.n	80006b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
	enc_data=RxData[4] & 0xFF;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	461a      	mov	r2, r3
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800067a:	601a      	str	r2, [r3, #0]
	enc_data+=(RxData[5] & 0xFF) <<8;
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800067e:	795b      	ldrb	r3, [r3, #5]
 8000680:	021a      	lsls	r2, r3, #8
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800068a:	6013      	str	r3, [r2, #0]
	enc_data+=(RxData[6] & 0xFF)<<16;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800068e:	799b      	ldrb	r3, [r3, #6]
 8000690:	041a      	lsls	r2, r3, #16
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4413      	add	r3, r2
 8000698:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800069a:	6013      	str	r3, [r2, #0]
	enc_data+=(RxData[7] & 0xFF)<<24;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800069e:	79db      	ldrb	r3, [r3, #7]
 80006a0:	061a      	lsls	r2, r3, #24
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80006aa:	6013      	str	r3, [r2, #0]
	printf("enc_data : %d\r\n",enc_data);
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80006b4:	f003 fd0c 	bl	80040d0 <iprintf>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000a0 	.word	0x200000a0
 80006c4:	200000e4 	.word	0x200000e4
 80006c8:	200000e0 	.word	0x200000e0
 80006cc:	080050b8 	.word	0x080050b8

080006d0 <Error_Handler2>:
void Error_Handler2(void){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	printf("error2\r\n");
 80006d4:	4802      	ldr	r0, [pc, #8]	; (80006e0 <Error_Handler2+0x10>)
 80006d6:	f003 fd81 	bl	80041dc <puts>
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	080050c8 	.word	0x080050c8

080006e4 <Error_Handler3>:
void Error_Handler3(void){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	printf("error3\r\n");
 80006e8:	4802      	ldr	r0, [pc, #8]	; (80006f4 <Error_Handler3+0x10>)
 80006ea:	f003 fd77 	bl	80041dc <puts>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	080050d0 	.word	0x080050d0

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("anothererror\r\n");
 80006fc:	4806      	ldr	r0, [pc, #24]	; (8000718 <Error_Handler+0x20>)
 80006fe:	f003 fd6d 	bl	80041dc <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000702:	b672      	cpsid	i
}
 8000704:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_UART_Transmit(&huart2,tx_data,sizeof(tx_data),0xFFFF);
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	2210      	movs	r2, #16
 800070c:	4903      	ldr	r1, [pc, #12]	; (800071c <Error_Handler+0x24>)
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <Error_Handler+0x28>)
 8000710:	f002 fd88 	bl	8003224 <HAL_UART_Transmit>
 8000714:	e7f7      	b.n	8000706 <Error_Handler+0xe>
 8000716:	bf00      	nop
 8000718:	080050d8 	.word	0x080050d8
 800071c:	20000004 	.word	0x20000004
 8000720:	20000218 	.word	0x20000218

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_MspInit+0x44>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <HAL_MspInit+0x44>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6193      	str	r3, [r2, #24]
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <HAL_MspInit+0x44>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_MspInit+0x44>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_MspInit+0x44>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074c:	61d3      	str	r3, [r2, #28]
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_MspInit+0x44>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a29      	ldr	r2, [pc, #164]	; (8000830 <HAL_CAN_MspInit+0xc4>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d14b      	bne.n	8000826 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800078e:	4b29      	ldr	r3, [pc, #164]	; (8000834 <HAL_CAN_MspInit+0xc8>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a28      	ldr	r2, [pc, #160]	; (8000834 <HAL_CAN_MspInit+0xc8>)
 8000794:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <HAL_CAN_MspInit+0xc8>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <HAL_CAN_MspInit+0xc8>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a22      	ldr	r2, [pc, #136]	; (8000834 <HAL_CAN_MspInit+0xc8>)
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b0:	6153      	str	r3, [r2, #20]
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <HAL_CAN_MspInit+0xc8>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80007d0:	2309      	movs	r3, #9
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f001 fa0b 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80007f4:	2309      	movs	r3, #9
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000802:	f001 f9f9 	bl	8001bf8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2013      	movs	r0, #19
 800080c:	f001 f947 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8000810:	2013      	movs	r0, #19
 8000812:	f001 f960 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	2014      	movs	r0, #20
 800081c:	f001 f93f 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000820:	2014      	movs	r0, #20
 8000822:	f001 f958 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	; 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40006400 	.word	0x40006400
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <HAL_UART_MspInit+0x90>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d131      	bne.n	80008be <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <HAL_UART_MspInit+0x94>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <HAL_UART_MspInit+0x94>)
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <HAL_UART_MspInit+0x94>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <HAL_UART_MspInit+0x94>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <HAL_UART_MspInit+0x94>)
 8000878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087c:	6153      	str	r3, [r2, #20]
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <HAL_UART_MspInit+0x94>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800088a:	f248 0304 	movw	r3, #32772	; 0x8004
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089c:	2307      	movs	r3, #7
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f001 f9a5 	bl	8001bf8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	2026      	movs	r0, #38	; 0x26
 80008b4:	f001 f8f3 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008b8:	2026      	movs	r0, #38	; 0x26
 80008ba:	f001 f90c 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40004400 	.word	0x40004400
 80008cc:	40021000 	.word	0x40021000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <NMI_Handler+0x4>

080008d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <MemManage_Handler+0x4>

080008e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <UsageFault_Handler+0x4>

080008ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091c:	f000 f92a 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <CAN_TX_IRQHandler+0x10>)
 800092a:	f000 fdb8 	bl	800149e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200000e4 	.word	0x200000e4

08000938 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <CAN_RX0_IRQHandler+0x10>)
 800093e:	f000 fdae 	bl	800149e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000e4 	.word	0x200000e4

0800094c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <USART2_IRQHandler+0x10>)
 8000952:	f002 fcfb 	bl	800334c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000218 	.word	0x20000218

08000960 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	e00a      	b.n	8000988 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000972:	f3af 8000 	nop.w
 8000976:	4601      	mov	r1, r0
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	60ba      	str	r2, [r7, #8]
 800097e:	b2ca      	uxtb	r2, r1
 8000980:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	3301      	adds	r3, #1
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	429a      	cmp	r2, r3
 800098e:	dbf0      	blt.n	8000972 <_read+0x12>
	}

return len;
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <_close>:
	}
	return len;
}

int _close(int file)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
	return -1;
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c2:	605a      	str	r2, [r3, #4]
	return 0;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <_isatty>:

int _isatty(int file)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
	return 1;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
	return 0;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a0c:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <_sbrk+0x5c>)
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <_sbrk+0x60>)
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d102      	bne.n	8000a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <_sbrk+0x64>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <_sbrk+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d207      	bcs.n	8000a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a34:	f003 fb1a 	bl	800406c <__errno>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	e009      	b.n	8000a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <_sbrk+0x64>)
 8000a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a56:	68fb      	ldr	r3, [r7, #12]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20003000 	.word	0x20003000
 8000a64:	00000400 	.word	0x00000400
 8000a68:	200000ac 	.word	0x200000ac
 8000a6c:	200002c8 	.word	0x200002c8

08000a70 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a9a:	490e      	ldr	r1, [pc, #56]	; (8000ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <LoopForever+0xe>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab0:	4c0b      	ldr	r4, [pc, #44]	; (8000ae0 <LoopForever+0x16>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000abe:	f7ff ffd7 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f003 fad9 	bl	8004078 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ac6:	f7ff fbd3 	bl	8000270 <main>

08000aca <LoopForever>:

LoopForever:
    b LoopForever
 8000aca:	e7fe      	b.n	8000aca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000acc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000ad8:	080051c0 	.word	0x080051c0
  ldr r2, =_sbss
 8000adc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000ae0:	200002c8 	.word	0x200002c8

08000ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC1_2_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_Init+0x28>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_Init+0x28>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 ffc5 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f000 f808 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff fe0e 	bl	8000724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40022000 	.word	0x40022000

08000b14 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x54>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x58>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 ffdd 	bl	8001af2 <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 ffa5 	bl	8001a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <HAL_InitTick+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000014 	.word	0x20000014
 8000b6c:	2000001c 	.word	0x2000001c
 8000b70:	20000018 	.word	0x20000018

08000b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	2000001c 	.word	0x2000001c
 8000b98:	200002b4 	.word	0x200002b4

08000b9c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200002b4 	.word	0x200002b4

08000bb4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bbc:	f7ff ffee 	bl	8000b9c <HAL_GetTick>
 8000bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bcc:	d005      	beq.n	8000bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_Delay+0x44>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bda:	bf00      	nop
 8000bdc:	f7ff ffde 	bl	8000b9c <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d8f7      	bhi.n	8000bdc <HAL_Delay+0x28>
  {
  }
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000001c 	.word	0x2000001c

08000bfc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e0ed      	b.n	8000dea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d102      	bne.n	8000c20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fda6 	bl	800076c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 0201 	orr.w	r2, r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c30:	f7ff ffb4 	bl	8000b9c <HAL_GetTick>
 8000c34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c36:	e012      	b.n	8000c5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c38:	f7ff ffb0 	bl	8000b9c <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b0a      	cmp	r3, #10
 8000c44:	d90b      	bls.n	8000c5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2205      	movs	r2, #5
 8000c56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e0c5      	b.n	8000dea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0e5      	beq.n	8000c38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0202 	bic.w	r2, r2, #2
 8000c7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c7c:	f7ff ff8e 	bl	8000b9c <HAL_GetTick>
 8000c80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c82:	e012      	b.n	8000caa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c84:	f7ff ff8a 	bl	8000b9c <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b0a      	cmp	r3, #10
 8000c90:	d90b      	bls.n	8000caa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2205      	movs	r2, #5
 8000ca2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e09f      	b.n	8000dea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1e5      	bne.n	8000c84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7e1b      	ldrb	r3, [r3, #24]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d108      	bne.n	8000cd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	e007      	b.n	8000ce2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ce0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	7e5b      	ldrb	r3, [r3, #25]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d108      	bne.n	8000cfc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	e007      	b.n	8000d0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	7e9b      	ldrb	r3, [r3, #26]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d108      	bne.n	8000d26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f042 0220 	orr.w	r2, r2, #32
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	e007      	b.n	8000d36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0220 	bic.w	r2, r2, #32
 8000d34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7edb      	ldrb	r3, [r3, #27]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d108      	bne.n	8000d50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 0210 	bic.w	r2, r2, #16
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	e007      	b.n	8000d60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f042 0210 	orr.w	r2, r2, #16
 8000d5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7f1b      	ldrb	r3, [r3, #28]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d108      	bne.n	8000d7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0208 	orr.w	r2, r2, #8
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	e007      	b.n	8000d8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0208 	bic.w	r2, r2, #8
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7f5b      	ldrb	r3, [r3, #29]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d108      	bne.n	8000da4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f042 0204 	orr.w	r2, r2, #4
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	e007      	b.n	8000db4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0204 	bic.w	r2, r2, #4
 8000db2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	ea42 0103 	orr.w	r1, r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	1e5a      	subs	r2, r3, #1
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b087      	sub	sp, #28
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e08:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e0a:	7cfb      	ldrb	r3, [r7, #19]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d003      	beq.n	8000e18 <HAL_CAN_ConfigFilter+0x26>
 8000e10:	7cfb      	ldrb	r3, [r7, #19]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	f040 80aa 	bne.w	8000f6c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e1e:	f043 0201 	orr.w	r2, r3, #1
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	f003 031f 	and.w	r3, r3, #31
 8000e30:	2201      	movs	r2, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d123      	bne.n	8000e9a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e74:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3248      	adds	r2, #72	; 0x48
 8000e7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e8e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e90:	6979      	ldr	r1, [r7, #20]
 8000e92:	3348      	adds	r3, #72	; 0x48
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	440b      	add	r3, r1
 8000e98:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d122      	bne.n	8000ee8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ec2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3248      	adds	r2, #72	; 0x48
 8000ec8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000edc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ede:	6979      	ldr	r1, [r7, #20]
 8000ee0:	3348      	adds	r3, #72	; 0x48
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	440b      	add	r3, r1
 8000ee6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d109      	bne.n	8000f04 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f02:	e007      	b.n	8000f14 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d109      	bne.n	8000f30 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f2e:	e007      	b.n	8000f40 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d107      	bne.n	8000f58 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	431a      	orrs	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f5e:	f023 0201 	bic.w	r2, r3, #1
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e006      	b.n	8000f7a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
  }
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	371c      	adds	r7, #28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b084      	sub	sp, #16
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d12e      	bne.n	8000ff8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fb2:	f7ff fdf3 	bl	8000b9c <HAL_GetTick>
 8000fb6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fb8:	e012      	b.n	8000fe0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fba:	f7ff fdef 	bl	8000b9c <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b0a      	cmp	r3, #10
 8000fc6:	d90b      	bls.n	8000fe0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2205      	movs	r2, #5
 8000fd8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e012      	b.n	8001006 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1e5      	bne.n	8000fba <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e006      	b.n	8001006 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
  }
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800100e:	b480      	push	{r7}
 8001010:	b089      	sub	sp, #36	; 0x24
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001022:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800102c:	7ffb      	ldrb	r3, [r7, #31]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d003      	beq.n	800103a <HAL_CAN_AddTxMessage+0x2c>
 8001032:	7ffb      	ldrb	r3, [r7, #31]
 8001034:	2b02      	cmp	r3, #2
 8001036:	f040 80b8 	bne.w	80011aa <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10a      	bne.n	800105a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800104a:	2b00      	cmp	r3, #0
 800104c:	d105      	bne.n	800105a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80a0 	beq.w	800119a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	0e1b      	lsrs	r3, r3, #24
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d907      	bls.n	800107a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e09e      	b.n	80011b8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800107a:	2201      	movs	r2, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10d      	bne.n	80010a8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001096:	68f9      	ldr	r1, [r7, #12]
 8001098:	6809      	ldr	r1, [r1, #0]
 800109a:	431a      	orrs	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3318      	adds	r3, #24
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	440b      	add	r3, r1
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e00f      	b.n	80010c8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010b2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010b8:	68f9      	ldr	r1, [r7, #12]
 80010ba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80010bc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3318      	adds	r3, #24
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	440b      	add	r3, r1
 80010c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6819      	ldr	r1, [r3, #0]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3318      	adds	r3, #24
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	440b      	add	r3, r1
 80010d8:	3304      	adds	r3, #4
 80010da:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	7d1b      	ldrb	r3, [r3, #20]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d111      	bne.n	8001108 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3318      	adds	r3, #24
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	3304      	adds	r3, #4
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	6811      	ldr	r1, [r2, #0]
 80010f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3318      	adds	r3, #24
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	440b      	add	r3, r1
 8001104:	3304      	adds	r3, #4
 8001106:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3307      	adds	r3, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	061a      	lsls	r2, r3, #24
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3306      	adds	r3, #6
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	041b      	lsls	r3, r3, #16
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3305      	adds	r3, #5
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	4313      	orrs	r3, r2
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	3204      	adds	r2, #4
 8001128:	7812      	ldrb	r2, [r2, #0]
 800112a:	4610      	mov	r0, r2
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	6811      	ldr	r1, [r2, #0]
 8001130:	ea43 0200 	orr.w	r2, r3, r0
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	440b      	add	r3, r1
 800113a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800113e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3303      	adds	r3, #3
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	061a      	lsls	r2, r3, #24
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3302      	adds	r3, #2
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	041b      	lsls	r3, r3, #16
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3301      	adds	r3, #1
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	4313      	orrs	r3, r2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	7812      	ldrb	r2, [r2, #0]
 8001160:	4610      	mov	r0, r2
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	6811      	ldr	r1, [r2, #0]
 8001166:	ea43 0200 	orr.w	r2, r3, r0
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	440b      	add	r3, r1
 8001170:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001174:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3318      	adds	r3, #24
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	4413      	add	r3, r2
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	6811      	ldr	r1, [r2, #0]
 8001188:	f043 0201 	orr.w	r2, r3, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	3318      	adds	r3, #24
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	440b      	add	r3, r1
 8001194:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	e00e      	b.n	80011b8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e006      	b.n	80011b8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
  }
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3724      	adds	r7, #36	; 0x24
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80011d8:	7afb      	ldrb	r3, [r7, #11]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d002      	beq.n	80011e4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d11d      	bne.n	8001220 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3301      	adds	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3301      	adds	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001220:	68fb      	ldr	r3, [r7, #12]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800122e:	b480      	push	{r7}
 8001230:	b087      	sub	sp, #28
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001242:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d003      	beq.n	8001252 <HAL_CAN_GetRxMessage+0x24>
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	2b02      	cmp	r3, #2
 800124e:	f040 80f3 	bne.w	8001438 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10e      	bne.n	8001276 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d116      	bne.n	8001294 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e0e7      	b.n	8001446 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d107      	bne.n	8001294 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0d8      	b.n	8001446 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	331b      	adds	r3, #27
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	4413      	add	r3, r2
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0204 	and.w	r2, r3, #4
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10c      	bne.n	80012cc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	331b      	adds	r3, #27
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	4413      	add	r3, r2
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	0d5b      	lsrs	r3, r3, #21
 80012c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	331b      	adds	r3, #27
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	4413      	add	r3, r2
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	331b      	adds	r3, #27
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4413      	add	r3, r2
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0202 	and.w	r2, r3, #2
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	331b      	adds	r3, #27
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	4413      	add	r3, r2
 8001306:	3304      	adds	r3, #4
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 020f 	and.w	r2, r3, #15
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	331b      	adds	r3, #27
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	4413      	add	r3, r2
 800131e:	3304      	adds	r3, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	0a1b      	lsrs	r3, r3, #8
 8001324:	b2da      	uxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	331b      	adds	r3, #27
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	4413      	add	r3, r2
 8001336:	3304      	adds	r3, #4
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	0c1b      	lsrs	r3, r3, #16
 800133c:	b29a      	uxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	4413      	add	r3, r2
 800134c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	4413      	add	r3, r2
 8001362:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0a1a      	lsrs	r2, r3, #8
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	4413      	add	r3, r2
 800137c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	0c1a      	lsrs	r2, r3, #16
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	3302      	adds	r3, #2
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	4413      	add	r3, r2
 8001396:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	0e1a      	lsrs	r2, r3, #24
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	3303      	adds	r3, #3
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	4413      	add	r3, r2
 80013b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3304      	adds	r3, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	4413      	add	r3, r2
 80013c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	0a1a      	lsrs	r2, r3, #8
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	3305      	adds	r3, #5
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	4413      	add	r3, r2
 80013e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	0c1a      	lsrs	r2, r3, #16
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	3306      	adds	r3, #6
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	4413      	add	r3, r2
 80013fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	0e1a      	lsrs	r2, r3, #24
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3307      	adds	r3, #7
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d108      	bne.n	8001424 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f042 0220 	orr.w	r2, r2, #32
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	e007      	b.n	8001434 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0220 	orr.w	r2, r2, #32
 8001432:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	e006      	b.n	8001446 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
  }
}
 8001446:	4618      	mov	r0, r3
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001452:	b480      	push	{r7}
 8001454:	b085      	sub	sp, #20
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001462:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d002      	beq.n	8001470 <HAL_CAN_ActivateNotification+0x1e>
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d109      	bne.n	8001484 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6959      	ldr	r1, [r3, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	e006      	b.n	8001492 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
  }
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b08a      	sub	sp, #40	; 0x28
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d07c      	beq.n	80015de <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d023      	beq.n	8001536 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2201      	movs	r2, #1
 80014f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff f87f 	bl	8000604 <HAL_CAN_TxMailbox0CompleteCallback>
 8001506:	e016      	b.n	8001536 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b00      	cmp	r3, #0
 8001510:	d004      	beq.n	800151c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
 800151a:	e00c      	b.n	8001536 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
 800152e:	e002      	b.n	8001536 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f97f 	bl	8001834 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153c:	2b00      	cmp	r3, #0
 800153e:	d024      	beq.n	800158a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001548:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f959 	bl	800180c <HAL_CAN_TxMailbox1CompleteCallback>
 800155a:	e016      	b.n	800158a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	e00c      	b.n	800158a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
 8001582:	e002      	b.n	800158a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f95f 	bl	8001848 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d024      	beq.n	80015de <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800159c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f939 	bl	8001820 <HAL_CAN_TxMailbox2CompleteCallback>
 80015ae:	e016      	b.n	80015de <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
 80015c2:	e00c      	b.n	80015de <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
 80015d6:	e002      	b.n	80015de <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f93f 	bl	800185c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00c      	beq.n	8001602 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2210      	movs	r2, #16
 8001600:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00b      	beq.n	8001624 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d006      	beq.n	8001624 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2208      	movs	r2, #8
 800161c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f926 	bl	8001870 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff f809 	bl	8000654 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00c      	beq.n	8001666 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	2b00      	cmp	r3, #0
 8001654:	d007      	beq.n	8001666 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2210      	movs	r2, #16
 8001664:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	f003 0320 	and.w	r3, r3, #32
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00b      	beq.n	8001688 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2208      	movs	r2, #8
 8001680:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f908 	bl	8001898 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f8ef 	bl	8001884 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d006      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2210      	movs	r2, #16
 80016c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f8f2 	bl	80018ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2208      	movs	r2, #8
 80016e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f8eb 	bl	80018c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d07b      	beq.n	80017ec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d072      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001720:	2b00      	cmp	r3, #0
 8001722:	d008      	beq.n	8001736 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001758:	2b00      	cmp	r3, #0
 800175a:	d043      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001762:	2b00      	cmp	r3, #0
 8001764:	d03e      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800176c:	2b60      	cmp	r3, #96	; 0x60
 800176e:	d02b      	beq.n	80017c8 <HAL_CAN_IRQHandler+0x32a>
 8001770:	2b60      	cmp	r3, #96	; 0x60
 8001772:	d82e      	bhi.n	80017d2 <HAL_CAN_IRQHandler+0x334>
 8001774:	2b50      	cmp	r3, #80	; 0x50
 8001776:	d022      	beq.n	80017be <HAL_CAN_IRQHandler+0x320>
 8001778:	2b50      	cmp	r3, #80	; 0x50
 800177a:	d82a      	bhi.n	80017d2 <HAL_CAN_IRQHandler+0x334>
 800177c:	2b40      	cmp	r3, #64	; 0x40
 800177e:	d019      	beq.n	80017b4 <HAL_CAN_IRQHandler+0x316>
 8001780:	2b40      	cmp	r3, #64	; 0x40
 8001782:	d826      	bhi.n	80017d2 <HAL_CAN_IRQHandler+0x334>
 8001784:	2b30      	cmp	r3, #48	; 0x30
 8001786:	d010      	beq.n	80017aa <HAL_CAN_IRQHandler+0x30c>
 8001788:	2b30      	cmp	r3, #48	; 0x30
 800178a:	d822      	bhi.n	80017d2 <HAL_CAN_IRQHandler+0x334>
 800178c:	2b10      	cmp	r3, #16
 800178e:	d002      	beq.n	8001796 <HAL_CAN_IRQHandler+0x2f8>
 8001790:	2b20      	cmp	r3, #32
 8001792:	d005      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001794:	e01d      	b.n	80017d2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	f043 0308 	orr.w	r3, r3, #8
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800179e:	e019      	b.n	80017d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017a8:	e014      	b.n	80017d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	f043 0320 	orr.w	r3, r3, #32
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017b2:	e00f      	b.n	80017d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017bc:	e00a      	b.n	80017d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017c6:	e005      	b.n	80017d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017d0:	e000      	b.n	80017d4 <HAL_CAN_IRQHandler+0x336>
            break;
 80017d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699a      	ldr	r2, [r3, #24]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2204      	movs	r2, #4
 80017ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d008      	beq.n	8001804 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f868 	bl	80018d4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001804:	bf00      	nop
 8001806:	3728      	adds	r7, #40	; 0x28
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191a:	4a04      	ldr	r2, [pc, #16]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	60d3      	str	r3, [r2, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <__NVIC_GetPriorityGrouping+0x18>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0307 	and.w	r3, r3, #7
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	db0b      	blt.n	8001976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	4907      	ldr	r1, [pc, #28]	; (8001984 <__NVIC_EnableIRQ+0x38>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2001      	movs	r0, #1
 800196e:	fa00 f202 	lsl.w	r2, r0, r2
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	; (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	; (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a54:	d301      	bcc.n	8001a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00f      	b.n	8001a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <SysTick_Config+0x40>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a62:	210f      	movs	r1, #15
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f7ff ff8e 	bl	8001988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <SysTick_Config+0x40>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <SysTick_Config+0x40>)
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	e000e010 	.word	0xe000e010

08001a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff29 	bl	80018e8 <__NVIC_SetPriorityGrouping>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab0:	f7ff ff3e 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	6978      	ldr	r0, [r7, #20]
 8001abc:	f7ff ff8e 	bl	80019dc <NVIC_EncodePriority>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff5d 	bl	8001988 <__NVIC_SetPriority>
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff31 	bl	800194c <__NVIC_EnableIRQ>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffa2 	bl	8001a44 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d008      	beq.n	8001b2e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2204      	movs	r2, #4
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e020      	b.n	8001b70 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 020e 	bic.w	r2, r2, #14
 8001b3c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0201 	bic.w	r2, r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b56:	2101      	movs	r1, #1
 8001b58:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d005      	beq.n	8001b9e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2204      	movs	r2, #4
 8001b96:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	e027      	b.n	8001bee <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 020e 	bic.w	r2, r2, #14
 8001bac:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0201 	bic.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bcc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	4798      	blx	r3
    } 
  }
  return status;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c06:	e14e      	b.n	8001ea6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	4013      	ands	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 8140 	beq.w	8001ea0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d005      	beq.n	8001c38 <HAL_GPIO_Init+0x40>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d130      	bne.n	8001c9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c6e:	2201      	movs	r2, #1
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	091b      	lsrs	r3, r3, #4
 8001c84:	f003 0201 	and.w	r2, r3, #1
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d017      	beq.n	8001cd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d123      	bne.n	8001d2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	08da      	lsrs	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3208      	adds	r2, #8
 8001cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	08da      	lsrs	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3208      	adds	r2, #8
 8001d24:	6939      	ldr	r1, [r7, #16]
 8001d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0203 	and.w	r2, r3, #3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 809a 	beq.w	8001ea0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6c:	4b55      	ldr	r3, [pc, #340]	; (8001ec4 <HAL_GPIO_Init+0x2cc>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a54      	ldr	r2, [pc, #336]	; (8001ec4 <HAL_GPIO_Init+0x2cc>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b52      	ldr	r3, [pc, #328]	; (8001ec4 <HAL_GPIO_Init+0x2cc>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d84:	4a50      	ldr	r2, [pc, #320]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dae:	d013      	beq.n	8001dd8 <HAL_GPIO_Init+0x1e0>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a46      	ldr	r2, [pc, #280]	; (8001ecc <HAL_GPIO_Init+0x2d4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00d      	beq.n	8001dd4 <HAL_GPIO_Init+0x1dc>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a45      	ldr	r2, [pc, #276]	; (8001ed0 <HAL_GPIO_Init+0x2d8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d007      	beq.n	8001dd0 <HAL_GPIO_Init+0x1d8>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a44      	ldr	r2, [pc, #272]	; (8001ed4 <HAL_GPIO_Init+0x2dc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_GPIO_Init+0x1d4>
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e006      	b.n	8001dda <HAL_GPIO_Init+0x1e2>
 8001dcc:	2305      	movs	r3, #5
 8001dce:	e004      	b.n	8001dda <HAL_GPIO_Init+0x1e2>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e002      	b.n	8001dda <HAL_GPIO_Init+0x1e2>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_GPIO_Init+0x1e2>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	f002 0203 	and.w	r2, r2, #3
 8001de0:	0092      	lsls	r2, r2, #2
 8001de2:	4093      	lsls	r3, r2
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dea:	4937      	ldr	r1, [pc, #220]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df8:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <HAL_GPIO_Init+0x2e0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e1c:	4a2e      	ldr	r2, [pc, #184]	; (8001ed8 <HAL_GPIO_Init+0x2e0>)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e22:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <HAL_GPIO_Init+0x2e0>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e46:	4a24      	ldr	r2, [pc, #144]	; (8001ed8 <HAL_GPIO_Init+0x2e0>)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e4c:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <HAL_GPIO_Init+0x2e0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <HAL_GPIO_Init+0x2e0>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_GPIO_Init+0x2e0>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <HAL_GPIO_Init+0x2e0>)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f47f aea9 	bne.w	8001c08 <HAL_GPIO_Init+0x10>
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	bf00      	nop
 8001eba:	371c      	adds	r7, #28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	48000400 	.word	0x48000400
 8001ed0:	48000800 	.word	0x48000800
 8001ed4:	48000c00 	.word	0x48000c00
 8001ed8:	40010400 	.word	0x40010400

08001edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ef8:	e002      	b.n	8001f00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f000 bef4 	b.w	8002d0e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 816a 	beq.w	800220a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f36:	4bb3      	ldr	r3, [pc, #716]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d00c      	beq.n	8001f5c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f42:	4bb0      	ldr	r3, [pc, #704]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d159      	bne.n	8002002 <HAL_RCC_OscConfig+0xf6>
 8001f4e:	4bad      	ldr	r3, [pc, #692]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5a:	d152      	bne.n	8002002 <HAL_RCC_OscConfig+0xf6>
 8001f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f60:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f70:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d102      	bne.n	8001f8e <HAL_RCC_OscConfig+0x82>
 8001f88:	4b9e      	ldr	r3, [pc, #632]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	e015      	b.n	8001fba <HAL_RCC_OscConfig+0xae>
 8001f8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f92:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001fa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001faa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001fb6:	4b93      	ldr	r3, [pc, #588]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fbe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001fc2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001fc6:	fa92 f2a2 	rbit	r2, r2
 8001fca:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001fce:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001fd2:	fab2 f282 	clz	r2, r2
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	f042 0220 	orr.w	r2, r2, #32
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	f002 021f 	and.w	r2, r2, #31
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 810c 	beq.w	8002208 <HAL_RCC_OscConfig+0x2fc>
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 8106 	bne.w	8002208 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f000 be86 	b.w	8002d0e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200c:	d106      	bne.n	800201c <HAL_RCC_OscConfig+0x110>
 800200e:	4b7d      	ldr	r3, [pc, #500]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7c      	ldr	r2, [pc, #496]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e030      	b.n	800207e <HAL_RCC_OscConfig+0x172>
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0x134>
 8002026:	4b77      	ldr	r3, [pc, #476]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a76      	ldr	r2, [pc, #472]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 800202c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b74      	ldr	r3, [pc, #464]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a73      	ldr	r2, [pc, #460]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8002038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e01e      	b.n	800207e <HAL_RCC_OscConfig+0x172>
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800204a:	d10c      	bne.n	8002066 <HAL_RCC_OscConfig+0x15a>
 800204c:	4b6d      	ldr	r3, [pc, #436]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a6c      	ldr	r2, [pc, #432]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8002052:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b6a      	ldr	r3, [pc, #424]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a69      	ldr	r2, [pc, #420]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	e00b      	b.n	800207e <HAL_RCC_OscConfig+0x172>
 8002066:	4b67      	ldr	r3, [pc, #412]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a66      	ldr	r2, [pc, #408]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 800206c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b64      	ldr	r3, [pc, #400]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a63      	ldr	r2, [pc, #396]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8002078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800207e:	4b61      	ldr	r3, [pc, #388]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	f023 020f 	bic.w	r2, r3, #15
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	495d      	ldr	r1, [pc, #372]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 800208e:	4313      	orrs	r3, r2
 8002090:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d059      	beq.n	8002150 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7fe fd7e 	bl	8000b9c <HAL_GetTick>
 80020a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a6:	f7fe fd79 	bl	8000b9c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d902      	bls.n	80020bc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	f000 be29 	b.w	8002d0e <HAL_RCC_OscConfig+0xe02>
 80020bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80020d0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d102      	bne.n	80020ee <HAL_RCC_OscConfig+0x1e2>
 80020e8:	4b46      	ldr	r3, [pc, #280]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	e015      	b.n	800211a <HAL_RCC_OscConfig+0x20e>
 80020ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002102:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002106:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800210a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002116:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800211e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002122:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002126:	fa92 f2a2 	rbit	r2, r2
 800212a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800212e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002132:	fab2 f282 	clz	r2, r2
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	f042 0220 	orr.w	r2, r2, #32
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	f002 021f 	and.w	r2, r2, #31
 8002142:	2101      	movs	r1, #1
 8002144:	fa01 f202 	lsl.w	r2, r1, r2
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0ab      	beq.n	80020a6 <HAL_RCC_OscConfig+0x19a>
 800214e:	e05c      	b.n	800220a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7fe fd24 	bl	8000b9c <HAL_GetTick>
 8002154:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800215a:	f7fe fd1f 	bl	8000b9c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d902      	bls.n	8002170 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	f000 bdcf 	b.w	8002d0e <HAL_RCC_OscConfig+0xe02>
 8002170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002174:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002184:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d102      	bne.n	80021a2 <HAL_RCC_OscConfig+0x296>
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	e015      	b.n	80021ce <HAL_RCC_OscConfig+0x2c2>
 80021a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80021b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ba:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80021be:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_RCC_OscConfig+0x2f8>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021d2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80021d6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80021da:	fa92 f2a2 	rbit	r2, r2
 80021de:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80021e2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80021e6:	fab2 f282 	clz	r2, r2
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f042 0220 	orr.w	r2, r2, #32
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f002 021f 	and.w	r2, r2, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ab      	bne.n	800215a <HAL_RCC_OscConfig+0x24e>
 8002202:	e002      	b.n	800220a <HAL_RCC_OscConfig+0x2fe>
 8002204:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 816f 	beq.w	80024f8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800221a:	4bd0      	ldr	r3, [pc, #832]	; (800255c <HAL_RCC_OscConfig+0x650>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002226:	4bcd      	ldr	r3, [pc, #820]	; (800255c <HAL_RCC_OscConfig+0x650>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b08      	cmp	r3, #8
 8002230:	d16c      	bne.n	800230c <HAL_RCC_OscConfig+0x400>
 8002232:	4bca      	ldr	r3, [pc, #808]	; (800255c <HAL_RCC_OscConfig+0x650>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d166      	bne.n	800230c <HAL_RCC_OscConfig+0x400>
 800223e:	2302      	movs	r3, #2
 8002240:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002250:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d102      	bne.n	800226e <HAL_RCC_OscConfig+0x362>
 8002268:	4bbc      	ldr	r3, [pc, #752]	; (800255c <HAL_RCC_OscConfig+0x650>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	e013      	b.n	8002296 <HAL_RCC_OscConfig+0x38a>
 800226e:	2302      	movs	r3, #2
 8002270:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002280:	2302      	movs	r3, #2
 8002282:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002286:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002292:	4bb2      	ldr	r3, [pc, #712]	; (800255c <HAL_RCC_OscConfig+0x650>)
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	2202      	movs	r2, #2
 8002298:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800229c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80022a0:	fa92 f2a2 	rbit	r2, r2
 80022a4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80022a8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80022ac:	fab2 f282 	clz	r2, r2
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	f042 0220 	orr.w	r2, r2, #32
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	f002 021f 	and.w	r2, r2, #31
 80022bc:	2101      	movs	r1, #1
 80022be:	fa01 f202 	lsl.w	r2, r1, r2
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <HAL_RCC_OscConfig+0x3cc>
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d002      	beq.n	80022d8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f000 bd1b 	b.w	8002d0e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d8:	4ba0      	ldr	r3, [pc, #640]	; (800255c <HAL_RCC_OscConfig+0x650>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	21f8      	movs	r1, #248	; 0xf8
 80022e8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80022f0:	fa91 f1a1 	rbit	r1, r1
 80022f4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80022f8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80022fc:	fab1 f181 	clz	r1, r1
 8002300:	b2c9      	uxtb	r1, r1
 8002302:	408b      	lsls	r3, r1
 8002304:	4995      	ldr	r1, [pc, #596]	; (800255c <HAL_RCC_OscConfig+0x650>)
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230a:	e0f5      	b.n	80024f8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8085 	beq.w	8002422 <HAL_RCC_OscConfig+0x516>
 8002318:	2301      	movs	r3, #1
 800231a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800232a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002338:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	461a      	mov	r2, r3
 8002340:	2301      	movs	r3, #1
 8002342:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7fe fc2a 	bl	8000b9c <HAL_GetTick>
 8002348:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800234e:	f7fe fc25 	bl	8000b9c <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d902      	bls.n	8002364 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	f000 bcd5 	b.w	8002d0e <HAL_RCC_OscConfig+0xe02>
 8002364:	2302      	movs	r3, #2
 8002366:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002376:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d102      	bne.n	8002394 <HAL_RCC_OscConfig+0x488>
 800238e:	4b73      	ldr	r3, [pc, #460]	; (800255c <HAL_RCC_OscConfig+0x650>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	e013      	b.n	80023bc <HAL_RCC_OscConfig+0x4b0>
 8002394:	2302      	movs	r3, #2
 8002396:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023a6:	2302      	movs	r3, #2
 80023a8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80023b8:	4b68      	ldr	r3, [pc, #416]	; (800255c <HAL_RCC_OscConfig+0x650>)
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	2202      	movs	r2, #2
 80023be:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80023c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80023c6:	fa92 f2a2 	rbit	r2, r2
 80023ca:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80023ce:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80023d2:	fab2 f282 	clz	r2, r2
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	f042 0220 	orr.w	r2, r2, #32
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	f002 021f 	and.w	r2, r2, #31
 80023e2:	2101      	movs	r1, #1
 80023e4:	fa01 f202 	lsl.w	r2, r1, r2
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0af      	beq.n	800234e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	4b5b      	ldr	r3, [pc, #364]	; (800255c <HAL_RCC_OscConfig+0x650>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	21f8      	movs	r1, #248	; 0xf8
 80023fe:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002406:	fa91 f1a1 	rbit	r1, r1
 800240a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800240e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002412:	fab1 f181 	clz	r1, r1
 8002416:	b2c9      	uxtb	r1, r1
 8002418:	408b      	lsls	r3, r1
 800241a:	4950      	ldr	r1, [pc, #320]	; (800255c <HAL_RCC_OscConfig+0x650>)
 800241c:	4313      	orrs	r3, r2
 800241e:	600b      	str	r3, [r1, #0]
 8002420:	e06a      	b.n	80024f8 <HAL_RCC_OscConfig+0x5ec>
 8002422:	2301      	movs	r3, #1
 8002424:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002434:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002442:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	461a      	mov	r2, r3
 800244a:	2300      	movs	r3, #0
 800244c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244e:	f7fe fba5 	bl	8000b9c <HAL_GetTick>
 8002452:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002456:	e00a      	b.n	800246e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002458:	f7fe fba0 	bl	8000b9c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d902      	bls.n	800246e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	f000 bc50 	b.w	8002d0e <HAL_RCC_OscConfig+0xe02>
 800246e:	2302      	movs	r3, #2
 8002470:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d102      	bne.n	800249e <HAL_RCC_OscConfig+0x592>
 8002498:	4b30      	ldr	r3, [pc, #192]	; (800255c <HAL_RCC_OscConfig+0x650>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	e013      	b.n	80024c6 <HAL_RCC_OscConfig+0x5ba>
 800249e:	2302      	movs	r3, #2
 80024a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80024b0:	2302      	movs	r3, #2
 80024b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80024b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80024c2:	4b26      	ldr	r3, [pc, #152]	; (800255c <HAL_RCC_OscConfig+0x650>)
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	2202      	movs	r2, #2
 80024c8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80024cc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80024d0:	fa92 f2a2 	rbit	r2, r2
 80024d4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80024d8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80024dc:	fab2 f282 	clz	r2, r2
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f042 0220 	orr.w	r2, r2, #32
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	f002 021f 	and.w	r2, r2, #31
 80024ec:	2101      	movs	r1, #1
 80024ee:	fa01 f202 	lsl.w	r2, r1, r2
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1af      	bne.n	8002458 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80da 	beq.w	80026bc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d069      	beq.n	80025e6 <HAL_RCC_OscConfig+0x6da>
 8002512:	2301      	movs	r3, #1
 8002514:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_OscConfig+0x654>)
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	461a      	mov	r2, r3
 8002538:	2301      	movs	r3, #1
 800253a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253c:	f7fe fb2e 	bl	8000b9c <HAL_GetTick>
 8002540:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002544:	e00e      	b.n	8002564 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002546:	f7fe fb29 	bl	8000b9c <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d906      	bls.n	8002564 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e3d9      	b.n	8002d0e <HAL_RCC_OscConfig+0xe02>
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	10908120 	.word	0x10908120
 8002564:	2302      	movs	r3, #2
 8002566:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002576:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800257a:	2202      	movs	r2, #2
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002592:	2202      	movs	r2, #2
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fa93 f2a3 	rbit	r2, r3
 80025a0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80025a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a6:	4ba5      	ldr	r3, [pc, #660]	; (800283c <HAL_RCC_OscConfig+0x930>)
 80025a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80025ae:	2102      	movs	r1, #2
 80025b0:	6019      	str	r1, [r3, #0]
 80025b2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fa93 f1a3 	rbit	r1, r3
 80025bc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025c0:	6019      	str	r1, [r3, #0]
  return result;
 80025c2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0b0      	beq.n	8002546 <HAL_RCC_OscConfig+0x63a>
 80025e4:	e06a      	b.n	80026bc <HAL_RCC_OscConfig+0x7b0>
 80025e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	fa93 f2a3 	rbit	r2, r3
 80025f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80025fc:	601a      	str	r2, [r3, #0]
  return result;
 80025fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002602:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	4b8c      	ldr	r3, [pc, #560]	; (8002840 <HAL_RCC_OscConfig+0x934>)
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	461a      	mov	r2, r3
 8002614:	2300      	movs	r3, #0
 8002616:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002618:	f7fe fac0 	bl	8000b9c <HAL_GetTick>
 800261c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002620:	e009      	b.n	8002636 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002622:	f7fe fabb 	bl	8000b9c <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e36b      	b.n	8002d0e <HAL_RCC_OscConfig+0xe02>
 8002636:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800263a:	2202      	movs	r2, #2
 800263c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	fa93 f2a3 	rbit	r2, r3
 8002648:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002652:	2202      	movs	r2, #2
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	fa93 f2a3 	rbit	r2, r3
 8002660:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800266a:	2202      	movs	r2, #2
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	fa93 f2a3 	rbit	r2, r3
 8002678:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800267c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267e:	4b6f      	ldr	r3, [pc, #444]	; (800283c <HAL_RCC_OscConfig+0x930>)
 8002680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002682:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002686:	2102      	movs	r1, #2
 8002688:	6019      	str	r1, [r3, #0]
 800268a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	fa93 f1a3 	rbit	r1, r3
 8002694:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002698:	6019      	str	r1, [r3, #0]
  return result;
 800269a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2101      	movs	r1, #1
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1b2      	bne.n	8002622 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8158 	beq.w	800297c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d2:	4b5a      	ldr	r3, [pc, #360]	; (800283c <HAL_RCC_OscConfig+0x930>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d112      	bne.n	8002704 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	4b57      	ldr	r3, [pc, #348]	; (800283c <HAL_RCC_OscConfig+0x930>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	4a56      	ldr	r2, [pc, #344]	; (800283c <HAL_RCC_OscConfig+0x930>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e8:	61d3      	str	r3, [r2, #28]
 80026ea:	4b54      	ldr	r3, [pc, #336]	; (800283c <HAL_RCC_OscConfig+0x930>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80026f2:	f107 0308 	add.w	r3, r7, #8
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f107 0308 	add.w	r3, r7, #8
 80026fc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026fe:	2301      	movs	r3, #1
 8002700:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	4b4f      	ldr	r3, [pc, #316]	; (8002844 <HAL_RCC_OscConfig+0x938>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11a      	bne.n	8002746 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002710:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <HAL_RCC_OscConfig+0x938>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a4b      	ldr	r2, [pc, #300]	; (8002844 <HAL_RCC_OscConfig+0x938>)
 8002716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271c:	f7fe fa3e 	bl	8000b9c <HAL_GetTick>
 8002720:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	e009      	b.n	800273a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7fe fa39 	bl	8000b9c <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	; 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e2e9      	b.n	8002d0e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273a:	4b42      	ldr	r3, [pc, #264]	; (8002844 <HAL_RCC_OscConfig+0x938>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ef      	beq.n	8002726 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d106      	bne.n	800275e <HAL_RCC_OscConfig+0x852>
 8002750:	4b3a      	ldr	r3, [pc, #232]	; (800283c <HAL_RCC_OscConfig+0x930>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4a39      	ldr	r2, [pc, #228]	; (800283c <HAL_RCC_OscConfig+0x930>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6213      	str	r3, [r2, #32]
 800275c:	e02f      	b.n	80027be <HAL_RCC_OscConfig+0x8b2>
 800275e:	1d3b      	adds	r3, r7, #4
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10c      	bne.n	8002782 <HAL_RCC_OscConfig+0x876>
 8002768:	4b34      	ldr	r3, [pc, #208]	; (800283c <HAL_RCC_OscConfig+0x930>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4a33      	ldr	r2, [pc, #204]	; (800283c <HAL_RCC_OscConfig+0x930>)
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	6213      	str	r3, [r2, #32]
 8002774:	4b31      	ldr	r3, [pc, #196]	; (800283c <HAL_RCC_OscConfig+0x930>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4a30      	ldr	r2, [pc, #192]	; (800283c <HAL_RCC_OscConfig+0x930>)
 800277a:	f023 0304 	bic.w	r3, r3, #4
 800277e:	6213      	str	r3, [r2, #32]
 8002780:	e01d      	b.n	80027be <HAL_RCC_OscConfig+0x8b2>
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2b05      	cmp	r3, #5
 800278a:	d10c      	bne.n	80027a6 <HAL_RCC_OscConfig+0x89a>
 800278c:	4b2b      	ldr	r3, [pc, #172]	; (800283c <HAL_RCC_OscConfig+0x930>)
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	4a2a      	ldr	r2, [pc, #168]	; (800283c <HAL_RCC_OscConfig+0x930>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	6213      	str	r3, [r2, #32]
 8002798:	4b28      	ldr	r3, [pc, #160]	; (800283c <HAL_RCC_OscConfig+0x930>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	4a27      	ldr	r2, [pc, #156]	; (800283c <HAL_RCC_OscConfig+0x930>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6213      	str	r3, [r2, #32]
 80027a4:	e00b      	b.n	80027be <HAL_RCC_OscConfig+0x8b2>
 80027a6:	4b25      	ldr	r3, [pc, #148]	; (800283c <HAL_RCC_OscConfig+0x930>)
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4a24      	ldr	r2, [pc, #144]	; (800283c <HAL_RCC_OscConfig+0x930>)
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	6213      	str	r3, [r2, #32]
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <HAL_RCC_OscConfig+0x930>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4a21      	ldr	r2, [pc, #132]	; (800283c <HAL_RCC_OscConfig+0x930>)
 80027b8:	f023 0304 	bic.w	r3, r3, #4
 80027bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d06b      	beq.n	80028a0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c8:	f7fe f9e8 	bl	8000b9c <HAL_GetTick>
 80027cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d0:	e00b      	b.n	80027ea <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fe f9e3 	bl	8000b9c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e291      	b.n	8002d0e <HAL_RCC_OscConfig+0xe02>
 80027ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80027ee:	2202      	movs	r2, #2
 80027f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	fa93 f2a3 	rbit	r2, r3
 80027fc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002806:	2202      	movs	r2, #2
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	fa93 f2a3 	rbit	r2, r3
 8002814:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002818:	601a      	str	r2, [r3, #0]
  return result;
 800281a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800281e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f043 0302 	orr.w	r3, r3, #2
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d109      	bne.n	8002848 <HAL_RCC_OscConfig+0x93c>
 8002834:	4b01      	ldr	r3, [pc, #4]	; (800283c <HAL_RCC_OscConfig+0x930>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	e014      	b.n	8002864 <HAL_RCC_OscConfig+0x958>
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	10908120 	.word	0x10908120
 8002844:	40007000 	.word	0x40007000
 8002848:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800284c:	2202      	movs	r2, #2
 800284e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	4bbb      	ldr	r3, [pc, #748]	; (8002b50 <HAL_RCC_OscConfig+0xc44>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002868:	2102      	movs	r1, #2
 800286a:	6011      	str	r1, [r2, #0]
 800286c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	fa92 f1a2 	rbit	r1, r2
 8002876:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800287a:	6011      	str	r1, [r2, #0]
  return result;
 800287c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	fab2 f282 	clz	r2, r2
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	f002 021f 	and.w	r2, r2, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f202 	lsl.w	r2, r1, r2
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d099      	beq.n	80027d2 <HAL_RCC_OscConfig+0x8c6>
 800289e:	e063      	b.n	8002968 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a0:	f7fe f97c 	bl	8000b9c <HAL_GetTick>
 80028a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a8:	e00b      	b.n	80028c2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7fe f977 	bl	8000b9c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e225      	b.n	8002d0e <HAL_RCC_OscConfig+0xe02>
 80028c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80028c6:	2202      	movs	r2, #2
 80028c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	fa93 f2a3 	rbit	r2, r3
 80028d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80028de:	2202      	movs	r2, #2
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	fa93 f2a3 	rbit	r2, r3
 80028ec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80028f0:	601a      	str	r2, [r3, #0]
  return result;
 80028f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80028f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f8:	fab3 f383 	clz	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f043 0302 	orr.w	r3, r3, #2
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d102      	bne.n	8002912 <HAL_RCC_OscConfig+0xa06>
 800290c:	4b90      	ldr	r3, [pc, #576]	; (8002b50 <HAL_RCC_OscConfig+0xc44>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	e00d      	b.n	800292e <HAL_RCC_OscConfig+0xa22>
 8002912:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002916:	2202      	movs	r2, #2
 8002918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	fa93 f2a3 	rbit	r2, r3
 8002924:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	4b89      	ldr	r3, [pc, #548]	; (8002b50 <HAL_RCC_OscConfig+0xc44>)
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002932:	2102      	movs	r1, #2
 8002934:	6011      	str	r1, [r2, #0]
 8002936:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	fa92 f1a2 	rbit	r1, r2
 8002940:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002944:	6011      	str	r1, [r2, #0]
  return result;
 8002946:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	fab2 f282 	clz	r2, r2
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	f002 021f 	and.w	r2, r2, #31
 800295c:	2101      	movs	r1, #1
 800295e:	fa01 f202 	lsl.w	r2, r1, r2
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1a0      	bne.n	80028aa <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002968:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800296c:	2b01      	cmp	r3, #1
 800296e:	d105      	bne.n	800297c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002970:	4b77      	ldr	r3, [pc, #476]	; (8002b50 <HAL_RCC_OscConfig+0xc44>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	4a76      	ldr	r2, [pc, #472]	; (8002b50 <HAL_RCC_OscConfig+0xc44>)
 8002976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 81c2 	beq.w	8002d0c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002988:	4b71      	ldr	r3, [pc, #452]	; (8002b50 <HAL_RCC_OscConfig+0xc44>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b08      	cmp	r3, #8
 8002992:	f000 819c 	beq.w	8002cce <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	2b02      	cmp	r3, #2
 800299e:	f040 8114 	bne.w	8002bca <HAL_RCC_OscConfig+0xcbe>
 80029a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80029a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	fa93 f2a3 	rbit	r2, r3
 80029b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80029ba:	601a      	str	r2, [r3, #0]
  return result;
 80029bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80029c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	461a      	mov	r2, r3
 80029d4:	2300      	movs	r3, #0
 80029d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe f8e0 	bl	8000b9c <HAL_GetTick>
 80029dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e0:	e009      	b.n	80029f6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e2:	f7fe f8db 	bl	8000b9c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e18b      	b.n	8002d0e <HAL_RCC_OscConfig+0xe02>
 80029f6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80029fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	fa93 f2a3 	rbit	r2, r3
 8002a0a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a0e:	601a      	str	r2, [r3, #0]
  return result;
 8002a10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d102      	bne.n	8002a30 <HAL_RCC_OscConfig+0xb24>
 8002a2a:	4b49      	ldr	r3, [pc, #292]	; (8002b50 <HAL_RCC_OscConfig+0xc44>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	e01b      	b.n	8002a68 <HAL_RCC_OscConfig+0xb5c>
 8002a30:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	fa93 f2a3 	rbit	r2, r3
 8002a44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	fa93 f2a3 	rbit	r2, r3
 8002a5e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	4b3a      	ldr	r3, [pc, #232]	; (8002b50 <HAL_RCC_OscConfig+0xc44>)
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a70:	6011      	str	r1, [r2, #0]
 8002a72:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	fa92 f1a2 	rbit	r1, r2
 8002a7c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002a80:	6011      	str	r1, [r2, #0]
  return result;
 8002a82:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	fab2 f282 	clz	r2, r2
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	f042 0220 	orr.w	r2, r2, #32
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	f002 021f 	and.w	r2, r2, #31
 8002a98:	2101      	movs	r1, #1
 8002a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d19e      	bne.n	80029e2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <HAL_RCC_OscConfig+0xc44>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	4925      	ldr	r1, [pc, #148]	; (8002b50 <HAL_RCC_OscConfig+0xc44>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
 8002ac0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ac4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	fa93 f2a3 	rbit	r2, r3
 8002ad4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ad8:	601a      	str	r2, [r3, #0]
  return result;
 8002ada:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ade:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	461a      	mov	r2, r3
 8002af2:	2301      	movs	r3, #1
 8002af4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe f851 	bl	8000b9c <HAL_GetTick>
 8002afa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002afe:	e009      	b.n	8002b14 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe f84c 	bl	8000b9c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0fc      	b.n	8002d0e <HAL_RCC_OscConfig+0xe02>
 8002b14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	fa93 f2a3 	rbit	r2, r3
 8002b28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b2c:	601a      	str	r2, [r3, #0]
  return result;
 8002b2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_RCC_OscConfig+0xc48>
 8002b48:	4b01      	ldr	r3, [pc, #4]	; (8002b50 <HAL_RCC_OscConfig+0xc44>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	e01e      	b.n	8002b8c <HAL_RCC_OscConfig+0xc80>
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	fa93 f2a3 	rbit	r2, r3
 8002b68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	fa93 f2a3 	rbit	r2, r3
 8002b82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	4b63      	ldr	r3, [pc, #396]	; (8002d18 <HAL_RCC_OscConfig+0xe0c>)
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b94:	6011      	str	r1, [r2, #0]
 8002b96:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	fa92 f1a2 	rbit	r1, r2
 8002ba0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ba4:	6011      	str	r1, [r2, #0]
  return result;
 8002ba6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	fab2 f282 	clz	r2, r2
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	f042 0220 	orr.w	r2, r2, #32
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	f002 021f 	and.w	r2, r2, #31
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d09b      	beq.n	8002b00 <HAL_RCC_OscConfig+0xbf4>
 8002bc8:	e0a0      	b.n	8002d0c <HAL_RCC_OscConfig+0xe00>
 8002bca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	fa93 f2a3 	rbit	r2, r3
 8002bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002be2:	601a      	str	r2, [r3, #0]
  return result;
 8002be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002be8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fd ffcc 	bl	8000b9c <HAL_GetTick>
 8002c04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c08:	e009      	b.n	8002c1e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c0a:	f7fd ffc7 	bl	8000b9c <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e077      	b.n	8002d0e <HAL_RCC_OscConfig+0xe02>
 8002c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	fa93 f2a3 	rbit	r2, r3
 8002c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c36:	601a      	str	r2, [r3, #0]
  return result;
 8002c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d102      	bne.n	8002c58 <HAL_RCC_OscConfig+0xd4c>
 8002c52:	4b31      	ldr	r3, [pc, #196]	; (8002d18 <HAL_RCC_OscConfig+0xe0c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	e01b      	b.n	8002c90 <HAL_RCC_OscConfig+0xd84>
 8002c58:	f107 0320 	add.w	r3, r7, #32
 8002c5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	f107 0320 	add.w	r3, r7, #32
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	fa93 f2a3 	rbit	r2, r3
 8002c6c:	f107 031c 	add.w	r3, r7, #28
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f107 0318 	add.w	r3, r7, #24
 8002c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	f107 0318 	add.w	r3, r7, #24
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	fa93 f2a3 	rbit	r2, r3
 8002c86:	f107 0314 	add.w	r3, r7, #20
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <HAL_RCC_OscConfig+0xe0c>)
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	f107 0210 	add.w	r2, r7, #16
 8002c94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c98:	6011      	str	r1, [r2, #0]
 8002c9a:	f107 0210 	add.w	r2, r7, #16
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	fa92 f1a2 	rbit	r1, r2
 8002ca4:	f107 020c 	add.w	r2, r7, #12
 8002ca8:	6011      	str	r1, [r2, #0]
  return result;
 8002caa:	f107 020c 	add.w	r2, r7, #12
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	fab2 f282 	clz	r2, r2
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	f042 0220 	orr.w	r2, r2, #32
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	f002 021f 	and.w	r2, r2, #31
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d19e      	bne.n	8002c0a <HAL_RCC_OscConfig+0xcfe>
 8002ccc:	e01e      	b.n	8002d0c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e018      	b.n	8002d0e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <HAL_RCC_OscConfig+0xe0c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ce4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ce8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cec:	1d3b      	adds	r3, r7, #4
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d108      	bne.n	8002d08 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002cf6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002cfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000

08002d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b09e      	sub	sp, #120	; 0x78
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e162      	b.n	8002ffa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d34:	4b90      	ldr	r3, [pc, #576]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d910      	bls.n	8002d64 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b8d      	ldr	r3, [pc, #564]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 0207 	bic.w	r2, r3, #7
 8002d4a:	498b      	ldr	r1, [pc, #556]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b89      	ldr	r3, [pc, #548]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e14a      	b.n	8002ffa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b82      	ldr	r3, [pc, #520]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	497f      	ldr	r1, [pc, #508]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 80dc 	beq.w	8002f48 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d13c      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xf6>
 8002d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d9c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da8:	fab3 f383 	clz	r3, r3
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d102      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xa6>
 8002dbc:	4b6f      	ldr	r3, [pc, #444]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	e00f      	b.n	8002de2 <HAL_RCC_ClockConfig+0xc6>
 8002dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dc6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	667b      	str	r3, [r7, #100]	; 0x64
 8002dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8002dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dde:	4b67      	ldr	r3, [pc, #412]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002de6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002de8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dea:	fa92 f2a2 	rbit	r2, r2
 8002dee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002df0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002df2:	fab2 f282 	clz	r2, r2
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	f042 0220 	orr.w	r2, r2, #32
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	f002 021f 	and.w	r2, r2, #31
 8002e02:	2101      	movs	r1, #1
 8002e04:	fa01 f202 	lsl.w	r2, r1, r2
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d17b      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0f3      	b.n	8002ffa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d13c      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x178>
 8002e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d102      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x128>
 8002e3e:	4b4f      	ldr	r3, [pc, #316]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	e00f      	b.n	8002e64 <HAL_RCC_ClockConfig+0x148>
 8002e44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	647b      	str	r3, [r7, #68]	; 0x44
 8002e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e56:	643b      	str	r3, [r7, #64]	; 0x40
 8002e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e60:	4b46      	ldr	r3, [pc, #280]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e68:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e6c:	fa92 f2a2 	rbit	r2, r2
 8002e70:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e74:	fab2 f282 	clz	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	f042 0220 	orr.w	r2, r2, #32
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	f002 021f 	and.w	r2, r2, #31
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d13a      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0b2      	b.n	8002ffa <HAL_RCC_ClockConfig+0x2de>
 8002e94:	2302      	movs	r3, #2
 8002e96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d102      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x1a0>
 8002eb6:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	e00d      	b.n	8002ed8 <HAL_RCC_ClockConfig+0x1bc>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec8:	2302      	movs	r3, #2
 8002eca:	623b      	str	r3, [r7, #32]
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	2202      	movs	r2, #2
 8002eda:	61ba      	str	r2, [r7, #24]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	fa92 f2a2 	rbit	r2, r2
 8002ee2:	617a      	str	r2, [r7, #20]
  return result;
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	fab2 f282 	clz	r2, r2
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	f042 0220 	orr.w	r2, r2, #32
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	f002 021f 	and.w	r2, r2, #31
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e079      	b.n	8002ffa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f06:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f023 0203 	bic.w	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	491a      	ldr	r1, [pc, #104]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f18:	f7fd fe40 	bl	8000b9c <HAL_GetTick>
 8002f1c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f20:	f7fd fe3c 	bl	8000b9c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e061      	b.n	8002ffa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 020c 	and.w	r2, r3, #12
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d1eb      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d214      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 0207 	bic.w	r2, r3, #7
 8002f5e:	4906      	ldr	r1, [pc, #24]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e040      	b.n	8002ffa <HAL_RCC_ClockConfig+0x2de>
 8002f78:	40022000 	.word	0x40022000
 8002f7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_RCC_ClockConfig+0x2e8>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	491a      	ldr	r1, [pc, #104]	; (8003004 <HAL_RCC_ClockConfig+0x2e8>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <HAL_RCC_ClockConfig+0x2e8>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4912      	ldr	r1, [pc, #72]	; (8003004 <HAL_RCC_ClockConfig+0x2e8>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002fbe:	f000 f829 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 8002fc2:	4601      	mov	r1, r0
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <HAL_RCC_ClockConfig+0x2e8>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fcc:	22f0      	movs	r2, #240	; 0xf0
 8002fce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	fa92 f2a2 	rbit	r2, r2
 8002fd6:	60fa      	str	r2, [r7, #12]
  return result;
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	fab2 f282 	clz	r2, r2
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	40d3      	lsrs	r3, r2
 8002fe2:	4a09      	ldr	r2, [pc, #36]	; (8003008 <HAL_RCC_ClockConfig+0x2ec>)
 8002fe4:	5cd3      	ldrb	r3, [r2, r3]
 8002fe6:	fa21 f303 	lsr.w	r3, r1, r3
 8002fea:	4a08      	ldr	r2, [pc, #32]	; (800300c <HAL_RCC_ClockConfig+0x2f0>)
 8002fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002fee:	4b08      	ldr	r3, [pc, #32]	; (8003010 <HAL_RCC_ClockConfig+0x2f4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd fd8e 	bl	8000b14 <HAL_InitTick>
  
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3778      	adds	r7, #120	; 0x78
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	080050e8 	.word	0x080050e8
 800300c:	20000014 	.word	0x20000014
 8003010:	20000018 	.word	0x20000018

08003014 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003014:	b480      	push	{r7}
 8003016:	b08b      	sub	sp, #44	; 0x2c
 8003018:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	2300      	movs	r3, #0
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800302e:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b04      	cmp	r3, #4
 800303c:	d002      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x30>
 800303e:	2b08      	cmp	r3, #8
 8003040:	d003      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0x36>
 8003042:	e03c      	b.n	80030be <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003044:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003046:	623b      	str	r3, [r7, #32]
      break;
 8003048:	e03c      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003050:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003054:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	fa92 f2a2 	rbit	r2, r2
 800305c:	607a      	str	r2, [r7, #4]
  return result;
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	fab2 f282 	clz	r2, r2
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	40d3      	lsrs	r3, r2
 8003068:	4a1c      	ldr	r2, [pc, #112]	; (80030dc <HAL_RCC_GetSysClockFreq+0xc8>)
 800306a:	5cd3      	ldrb	r3, [r2, r3]
 800306c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800306e:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	220f      	movs	r2, #15
 8003078:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	fa92 f2a2 	rbit	r2, r2
 8003080:	60fa      	str	r2, [r7, #12]
  return result;
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	fab2 f282 	clz	r2, r2
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	40d3      	lsrs	r3, r2
 800308c:	4a14      	ldr	r2, [pc, #80]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800308e:	5cd3      	ldrb	r3, [r2, r3]
 8003090:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800309c:	4a0e      	ldr	r2, [pc, #56]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
 80030ac:	e004      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	4a0c      	ldr	r2, [pc, #48]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	623b      	str	r3, [r7, #32]
      break;
 80030bc:	e002      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030c0:	623b      	str	r3, [r7, #32]
      break;
 80030c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c4:	6a3b      	ldr	r3, [r7, #32]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	372c      	adds	r7, #44	; 0x2c
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000
 80030d8:	007a1200 	.word	0x007a1200
 80030dc:	08005100 	.word	0x08005100
 80030e0:	08005110 	.word	0x08005110
 80030e4:	003d0900 	.word	0x003d0900

080030e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ec:	4b03      	ldr	r3, [pc, #12]	; (80030fc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000014 	.word	0x20000014

08003100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003106:	f7ff ffef 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 800310a:	4601      	mov	r1, r0
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003114:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003118:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	fa92 f2a2 	rbit	r2, r2
 8003120:	603a      	str	r2, [r7, #0]
  return result;
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	fab2 f282 	clz	r2, r2
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	40d3      	lsrs	r3, r2
 800312c:	4a04      	ldr	r2, [pc, #16]	; (8003140 <HAL_RCC_GetPCLK1Freq+0x40>)
 800312e:	5cd3      	ldrb	r3, [r2, r3]
 8003130:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40021000 	.word	0x40021000
 8003140:	080050f8 	.word	0x080050f8

08003144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800314a:	f7ff ffcd 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 800314e:	4601      	mov	r1, r0
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003158:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800315c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	fa92 f2a2 	rbit	r2, r2
 8003164:	603a      	str	r2, [r7, #0]
  return result;
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	fab2 f282 	clz	r2, r2
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	40d3      	lsrs	r3, r2
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003172:	5cd3      	ldrb	r3, [r2, r3]
 8003174:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	080050f8 	.word	0x080050f8

08003188 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e040      	b.n	800321c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fd fb44 	bl	8000838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2224      	movs	r2, #36	; 0x24
 80031b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fbbe 	bl	8003948 <UART_SetConfig>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e022      	b.n	800321c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fce8 	bl	8003bb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003202:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fd6f 	bl	8003cf8 <UART_CheckIdleState>
 800321a:	4603      	mov	r3, r0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003238:	2b20      	cmp	r3, #32
 800323a:	f040 8082 	bne.w	8003342 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HAL_UART_Transmit+0x26>
 8003244:	88fb      	ldrh	r3, [r7, #6]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e07a      	b.n	8003344 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_UART_Transmit+0x38>
 8003258:	2302      	movs	r3, #2
 800325a:	e073      	b.n	8003344 <HAL_UART_Transmit+0x120>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2221      	movs	r2, #33	; 0x21
 8003270:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003272:	f7fd fc93 	bl	8000b9c <HAL_GetTick>
 8003276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	88fa      	ldrh	r2, [r7, #6]
 800327c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	88fa      	ldrh	r2, [r7, #6]
 8003284:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003290:	d108      	bne.n	80032a4 <HAL_UART_Transmit+0x80>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d104      	bne.n	80032a4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	e003      	b.n	80032ac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80032b4:	e02d      	b.n	8003312 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2200      	movs	r2, #0
 80032be:	2180      	movs	r1, #128	; 0x80
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fd62 	bl	8003d8a <UART_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e039      	b.n	8003344 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	881a      	ldrh	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032e2:	b292      	uxth	r2, r2
 80032e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	3302      	adds	r3, #2
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	e008      	b.n	8003300 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	b292      	uxth	r2, r2
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3301      	adds	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1cb      	bne.n	80032b6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2200      	movs	r2, #0
 8003326:	2140      	movs	r1, #64	; 0x40
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fd2e 	bl	8003d8a <UART_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e005      	b.n	8003344 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e000      	b.n	8003344 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003342:	2302      	movs	r3, #2
  }
}
 8003344:	4618      	mov	r0, r3
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b0ba      	sub	sp, #232	; 0xe8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003372:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003376:	f640 030f 	movw	r3, #2063	; 0x80f
 800337a:	4013      	ands	r3, r2
 800337c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003380:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d115      	bne.n	80033b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00f      	beq.n	80033b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d009      	beq.n	80033b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 82a3 	beq.w	80038f0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	4798      	blx	r3
      }
      return;
 80033b2:	e29d      	b.n	80038f0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80033b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8117 	beq.w	80035ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80033be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80033ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80033ce:	4b85      	ldr	r3, [pc, #532]	; (80035e4 <HAL_UART_IRQHandler+0x298>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 810a 	beq.w	80035ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d011      	beq.n	8003408 <HAL_UART_IRQHandler+0xbc>
 80033e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00b      	beq.n	8003408 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2201      	movs	r2, #1
 80033f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fe:	f043 0201 	orr.w	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d011      	beq.n	8003438 <HAL_UART_IRQHandler+0xec>
 8003414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00b      	beq.n	8003438 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2202      	movs	r2, #2
 8003426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342e:	f043 0204 	orr.w	r2, r3, #4
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d011      	beq.n	8003468 <HAL_UART_IRQHandler+0x11c>
 8003444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00b      	beq.n	8003468 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2204      	movs	r2, #4
 8003456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800345e:	f043 0202 	orr.w	r2, r3, #2
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d017      	beq.n	80034a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003484:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00b      	beq.n	80034a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2208      	movs	r2, #8
 8003492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800349a:	f043 0208 	orr.w	r2, r3, #8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80034a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d012      	beq.n	80034d6 <HAL_UART_IRQHandler+0x18a>
 80034b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00c      	beq.n	80034d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034cc:	f043 0220 	orr.w	r2, r3, #32
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8209 	beq.w	80038f4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00d      	beq.n	800350a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003510:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351e:	2b40      	cmp	r3, #64	; 0x40
 8003520:	d005      	beq.n	800352e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003526:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800352a:	2b00      	cmp	r3, #0
 800352c:	d04f      	beq.n	80035ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fcef 	bl	8003f12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353e:	2b40      	cmp	r3, #64	; 0x40
 8003540:	d141      	bne.n	80035c6 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3308      	adds	r3, #8
 8003548:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003558:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800355c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3308      	adds	r3, #8
 800356a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800356e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003572:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800357a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800357e:	e841 2300 	strex	r3, r2, [r1]
 8003582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1d9      	bne.n	8003542 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	2b00      	cmp	r3, #0
 8003594:	d013      	beq.n	80035be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <HAL_UART_IRQHandler+0x29c>)
 800359c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe faea 	bl	8001b7c <HAL_DMA_Abort_IT>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d017      	beq.n	80035de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80035b8:	4610      	mov	r0, r2
 80035ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035bc:	e00f      	b.n	80035de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f9ac 	bl	800391c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c4:	e00b      	b.n	80035de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f9a8 	bl	800391c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035cc:	e007      	b.n	80035de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f9a4 	bl	800391c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80035dc:	e18a      	b.n	80038f4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035de:	bf00      	nop
    return;
 80035e0:	e188      	b.n	80038f4 <HAL_UART_IRQHandler+0x5a8>
 80035e2:	bf00      	nop
 80035e4:	04000120 	.word	0x04000120
 80035e8:	08003fd9 	.word	0x08003fd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	f040 8143 	bne.w	800387c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 813c 	beq.w	800387c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8135 	beq.w	800387c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2210      	movs	r2, #16
 8003618:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003624:	2b40      	cmp	r3, #64	; 0x40
 8003626:	f040 80b1 	bne.w	800378c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003636:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 815c 	beq.w	80038f8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800364a:	429a      	cmp	r2, r3
 800364c:	f080 8154 	bcs.w	80038f8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003656:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	2b20      	cmp	r3, #32
 8003662:	f000 8085 	beq.w	8003770 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800367a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800367e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003682:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003690:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003694:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003698:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800369c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1da      	bne.n	8003666 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3308      	adds	r3, #8
 80036b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ba:	e853 3f00 	ldrex	r3, [r3]
 80036be:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3308      	adds	r3, #8
 80036d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036d4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036e0:	e841 2300 	strex	r3, r2, [r1]
 80036e4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e1      	bne.n	80036b0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3308      	adds	r3, #8
 80036f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036f6:	e853 3f00 	ldrex	r3, [r3]
 80036fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003702:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3308      	adds	r3, #8
 800370c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003710:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003712:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003714:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003716:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003718:	e841 2300 	strex	r3, r2, [r1]
 800371c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800371e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e3      	bne.n	80036ec <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800373e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003740:	f023 0310 	bic.w	r3, r3, #16
 8003744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003752:	65bb      	str	r3, [r7, #88]	; 0x58
 8003754:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e4      	bne.n	8003730 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe f9cd 	bl	8001b0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800377c:	b29b      	uxth	r3, r3
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	b29b      	uxth	r3, r3
 8003782:	4619      	mov	r1, r3
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f8d3 	bl	8003930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800378a:	e0b5      	b.n	80038f8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003798:	b29b      	uxth	r3, r3
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80a7 	beq.w	80038fc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80037ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80a2 	beq.w	80038fc <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037da:	647b      	str	r3, [r7, #68]	; 0x44
 80037dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e4      	bne.n	80037b8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3308      	adds	r3, #8
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	623b      	str	r3, [r7, #32]
   return(result);
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3308      	adds	r3, #8
 800380e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003812:	633a      	str	r2, [r7, #48]	; 0x30
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e3      	bne.n	80037ee <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	60fb      	str	r3, [r7, #12]
   return(result);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f023 0310 	bic.w	r3, r3, #16
 800384c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800385a:	61fb      	str	r3, [r7, #28]
 800385c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	69b9      	ldr	r1, [r7, #24]
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	617b      	str	r3, [r7, #20]
   return(result);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e4      	bne.n	8003838 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800386e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003872:	4619      	mov	r1, r3
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f85b 	bl	8003930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800387a:	e03f      	b.n	80038fc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800387c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00e      	beq.n	80038a6 <HAL_UART_IRQHandler+0x55a>
 8003888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800388c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800389c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fbda 	bl	8004058 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038a4:	e02d      	b.n	8003902 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00e      	beq.n	80038d0 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80038b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01c      	beq.n	8003900 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
    }
    return;
 80038ce:	e017      	b.n	8003900 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d012      	beq.n	8003902 <HAL_UART_IRQHandler+0x5b6>
 80038dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00c      	beq.n	8003902 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fb8b 	bl	8004004 <UART_EndTransmit_IT>
    return;
 80038ee:	e008      	b.n	8003902 <HAL_UART_IRQHandler+0x5b6>
      return;
 80038f0:	bf00      	nop
 80038f2:	e006      	b.n	8003902 <HAL_UART_IRQHandler+0x5b6>
    return;
 80038f4:	bf00      	nop
 80038f6:	e004      	b.n	8003902 <HAL_UART_IRQHandler+0x5b6>
      return;
 80038f8:	bf00      	nop
 80038fa:	e002      	b.n	8003902 <HAL_UART_IRQHandler+0x5b6>
      return;
 80038fc:	bf00      	nop
 80038fe:	e000      	b.n	8003902 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003900:	bf00      	nop
  }

}
 8003902:	37e8      	adds	r7, #232	; 0xe8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	4b8a      	ldr	r3, [pc, #552]	; (8003b9c <UART_SetConfig+0x254>)
 8003974:	4013      	ands	r3, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	6979      	ldr	r1, [r7, #20]
 800397c:	430b      	orrs	r3, r1
 800397e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a78      	ldr	r2, [pc, #480]	; (8003ba0 <UART_SetConfig+0x258>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d120      	bne.n	8003a06 <UART_SetConfig+0xbe>
 80039c4:	4b77      	ldr	r3, [pc, #476]	; (8003ba4 <UART_SetConfig+0x25c>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d817      	bhi.n	8003a00 <UART_SetConfig+0xb8>
 80039d0:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <UART_SetConfig+0x90>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	080039e9 	.word	0x080039e9
 80039dc:	080039f5 	.word	0x080039f5
 80039e0:	080039fb 	.word	0x080039fb
 80039e4:	080039ef 	.word	0x080039ef
 80039e8:	2300      	movs	r3, #0
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e01d      	b.n	8003a2a <UART_SetConfig+0xe2>
 80039ee:	2302      	movs	r3, #2
 80039f0:	77fb      	strb	r3, [r7, #31]
 80039f2:	e01a      	b.n	8003a2a <UART_SetConfig+0xe2>
 80039f4:	2304      	movs	r3, #4
 80039f6:	77fb      	strb	r3, [r7, #31]
 80039f8:	e017      	b.n	8003a2a <UART_SetConfig+0xe2>
 80039fa:	2308      	movs	r3, #8
 80039fc:	77fb      	strb	r3, [r7, #31]
 80039fe:	e014      	b.n	8003a2a <UART_SetConfig+0xe2>
 8003a00:	2310      	movs	r3, #16
 8003a02:	77fb      	strb	r3, [r7, #31]
 8003a04:	e011      	b.n	8003a2a <UART_SetConfig+0xe2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a67      	ldr	r2, [pc, #412]	; (8003ba8 <UART_SetConfig+0x260>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d102      	bne.n	8003a16 <UART_SetConfig+0xce>
 8003a10:	2300      	movs	r3, #0
 8003a12:	77fb      	strb	r3, [r7, #31]
 8003a14:	e009      	b.n	8003a2a <UART_SetConfig+0xe2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a64      	ldr	r2, [pc, #400]	; (8003bac <UART_SetConfig+0x264>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d102      	bne.n	8003a26 <UART_SetConfig+0xde>
 8003a20:	2300      	movs	r3, #0
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e001      	b.n	8003a2a <UART_SetConfig+0xe2>
 8003a26:	2310      	movs	r3, #16
 8003a28:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a32:	d15b      	bne.n	8003aec <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003a34:	7ffb      	ldrb	r3, [r7, #31]
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d827      	bhi.n	8003a8a <UART_SetConfig+0x142>
 8003a3a:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <UART_SetConfig+0xf8>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a65 	.word	0x08003a65
 8003a44:	08003a6d 	.word	0x08003a6d
 8003a48:	08003a75 	.word	0x08003a75
 8003a4c:	08003a8b 	.word	0x08003a8b
 8003a50:	08003a7b 	.word	0x08003a7b
 8003a54:	08003a8b 	.word	0x08003a8b
 8003a58:	08003a8b 	.word	0x08003a8b
 8003a5c:	08003a8b 	.word	0x08003a8b
 8003a60:	08003a83 	.word	0x08003a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a64:	f7ff fb4c 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8003a68:	61b8      	str	r0, [r7, #24]
        break;
 8003a6a:	e013      	b.n	8003a94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a6c:	f7ff fb6a 	bl	8003144 <HAL_RCC_GetPCLK2Freq>
 8003a70:	61b8      	str	r0, [r7, #24]
        break;
 8003a72:	e00f      	b.n	8003a94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a74:	4b4e      	ldr	r3, [pc, #312]	; (8003bb0 <UART_SetConfig+0x268>)
 8003a76:	61bb      	str	r3, [r7, #24]
        break;
 8003a78:	e00c      	b.n	8003a94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a7a:	f7ff facb 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 8003a7e:	61b8      	str	r0, [r7, #24]
        break;
 8003a80:	e008      	b.n	8003a94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a86:	61bb      	str	r3, [r7, #24]
        break;
 8003a88:	e004      	b.n	8003a94 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	77bb      	strb	r3, [r7, #30]
        break;
 8003a92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d074      	beq.n	8003b84 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	005a      	lsls	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	441a      	add	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b0f      	cmp	r3, #15
 8003ab6:	d916      	bls.n	8003ae6 <UART_SetConfig+0x19e>
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abe:	d212      	bcs.n	8003ae6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f023 030f 	bic.w	r3, r3, #15
 8003ac8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	89fb      	ldrh	r3, [r7, #14]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	89fa      	ldrh	r2, [r7, #14]
 8003ae2:	60da      	str	r2, [r3, #12]
 8003ae4:	e04e      	b.n	8003b84 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	77bb      	strb	r3, [r7, #30]
 8003aea:	e04b      	b.n	8003b84 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aec:	7ffb      	ldrb	r3, [r7, #31]
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d827      	bhi.n	8003b42 <UART_SetConfig+0x1fa>
 8003af2:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <UART_SetConfig+0x1b0>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b25 	.word	0x08003b25
 8003b00:	08003b2d 	.word	0x08003b2d
 8003b04:	08003b43 	.word	0x08003b43
 8003b08:	08003b33 	.word	0x08003b33
 8003b0c:	08003b43 	.word	0x08003b43
 8003b10:	08003b43 	.word	0x08003b43
 8003b14:	08003b43 	.word	0x08003b43
 8003b18:	08003b3b 	.word	0x08003b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f7ff faf0 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8003b20:	61b8      	str	r0, [r7, #24]
        break;
 8003b22:	e013      	b.n	8003b4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b24:	f7ff fb0e 	bl	8003144 <HAL_RCC_GetPCLK2Freq>
 8003b28:	61b8      	str	r0, [r7, #24]
        break;
 8003b2a:	e00f      	b.n	8003b4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b2c:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <UART_SetConfig+0x268>)
 8003b2e:	61bb      	str	r3, [r7, #24]
        break;
 8003b30:	e00c      	b.n	8003b4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b32:	f7ff fa6f 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 8003b36:	61b8      	str	r0, [r7, #24]
        break;
 8003b38:	e008      	b.n	8003b4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b3e:	61bb      	str	r3, [r7, #24]
        break;
 8003b40:	e004      	b.n	8003b4c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	77bb      	strb	r3, [r7, #30]
        break;
 8003b4a:	bf00      	nop
    }

    if (pclk != 0U)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d018      	beq.n	8003b84 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	085a      	lsrs	r2, r3, #1
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	441a      	add	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	d908      	bls.n	8003b80 <UART_SetConfig+0x238>
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b74:	d204      	bcs.n	8003b80 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	e001      	b.n	8003b84 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b90:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	efff69f3 	.word	0xefff69f3
 8003ba0:	40013800 	.word	0x40013800
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40004400 	.word	0x40004400
 8003bac:	40004800 	.word	0x40004800
 8003bb0:	007a1200 	.word	0x007a1200

08003bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01a      	beq.n	8003cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cb2:	d10a      	bne.n	8003cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	605a      	str	r2, [r3, #4]
  }
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d08:	f7fc ff48 	bl	8000b9c <HAL_GetTick>
 8003d0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d10e      	bne.n	8003d3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f82d 	bl	8003d8a <UART_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e023      	b.n	8003d82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d10e      	bne.n	8003d66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f817 	bl	8003d8a <UART_WaitOnFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e00d      	b.n	8003d82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b09c      	sub	sp, #112	; 0x70
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	4613      	mov	r3, r2
 8003d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9a:	e0a5      	b.n	8003ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	f000 80a1 	beq.w	8003ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da6:	f7fc fef9 	bl	8000b9c <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d302      	bcc.n	8003dbc <UART_WaitOnFlagUntilTimeout+0x32>
 8003db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d13e      	bne.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ddc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003de0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e6      	bne.n	8003dbc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3308      	adds	r3, #8
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	663b      	str	r3, [r7, #96]	; 0x60
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e5      	bne.n	8003dee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e067      	b.n	8003f0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d04f      	beq.n	8003ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e56:	d147      	bne.n	8003ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e80:	637b      	str	r3, [r7, #52]	; 0x34
 8003e82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e6      	bne.n	8003e62 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3308      	adds	r3, #8
 8003e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003eb4:	623a      	str	r2, [r7, #32]
 8003eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb8:	69f9      	ldr	r1, [r7, #28]
 8003eba:	6a3a      	ldr	r2, [r7, #32]
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e5      	bne.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e010      	b.n	8003f0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69da      	ldr	r2, [r3, #28]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	bf0c      	ite	eq
 8003ef8:	2301      	moveq	r3, #1
 8003efa:	2300      	movne	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	f43f af4a 	beq.w	8003d9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3770      	adds	r7, #112	; 0x70
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b095      	sub	sp, #84	; 0x54
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f38:	643b      	str	r3, [r7, #64]	; 0x40
 8003f3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e6      	bne.n	8003f1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3308      	adds	r3, #8
 8003f52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	e853 3f00 	ldrex	r3, [r3]
 8003f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f023 0301 	bic.w	r3, r3, #1
 8003f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e5      	bne.n	8003f4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d118      	bne.n	8003fba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f023 0310 	bic.w	r3, r3, #16
 8003f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa6:	61bb      	str	r3, [r7, #24]
 8003fa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6979      	ldr	r1, [r7, #20]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e6      	bne.n	8003f88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003fcc:	bf00      	nop
 8003fce:	3754      	adds	r7, #84	; 0x54
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff fc90 	bl	800391c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	60bb      	str	r3, [r7, #8]
   return(result);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402e:	6979      	ldr	r1, [r7, #20]
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	613b      	str	r3, [r7, #16]
   return(result);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e6      	bne.n	800400c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff fc5c 	bl	8003908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004050:	bf00      	nop
 8004052:	3720      	adds	r7, #32
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <__errno>:
 800406c:	4b01      	ldr	r3, [pc, #4]	; (8004074 <__errno+0x8>)
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000020 	.word	0x20000020

08004078 <__libc_init_array>:
 8004078:	b570      	push	{r4, r5, r6, lr}
 800407a:	4d0d      	ldr	r5, [pc, #52]	; (80040b0 <__libc_init_array+0x38>)
 800407c:	4c0d      	ldr	r4, [pc, #52]	; (80040b4 <__libc_init_array+0x3c>)
 800407e:	1b64      	subs	r4, r4, r5
 8004080:	10a4      	asrs	r4, r4, #2
 8004082:	2600      	movs	r6, #0
 8004084:	42a6      	cmp	r6, r4
 8004086:	d109      	bne.n	800409c <__libc_init_array+0x24>
 8004088:	4d0b      	ldr	r5, [pc, #44]	; (80040b8 <__libc_init_array+0x40>)
 800408a:	4c0c      	ldr	r4, [pc, #48]	; (80040bc <__libc_init_array+0x44>)
 800408c:	f000 ffec 	bl	8005068 <_init>
 8004090:	1b64      	subs	r4, r4, r5
 8004092:	10a4      	asrs	r4, r4, #2
 8004094:	2600      	movs	r6, #0
 8004096:	42a6      	cmp	r6, r4
 8004098:	d105      	bne.n	80040a6 <__libc_init_array+0x2e>
 800409a:	bd70      	pop	{r4, r5, r6, pc}
 800409c:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a0:	4798      	blx	r3
 80040a2:	3601      	adds	r6, #1
 80040a4:	e7ee      	b.n	8004084 <__libc_init_array+0xc>
 80040a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040aa:	4798      	blx	r3
 80040ac:	3601      	adds	r6, #1
 80040ae:	e7f2      	b.n	8004096 <__libc_init_array+0x1e>
 80040b0:	080051b8 	.word	0x080051b8
 80040b4:	080051b8 	.word	0x080051b8
 80040b8:	080051b8 	.word	0x080051b8
 80040bc:	080051bc 	.word	0x080051bc

080040c0 <memset>:
 80040c0:	4402      	add	r2, r0
 80040c2:	4603      	mov	r3, r0
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d100      	bne.n	80040ca <memset+0xa>
 80040c8:	4770      	bx	lr
 80040ca:	f803 1b01 	strb.w	r1, [r3], #1
 80040ce:	e7f9      	b.n	80040c4 <memset+0x4>

080040d0 <iprintf>:
 80040d0:	b40f      	push	{r0, r1, r2, r3}
 80040d2:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <iprintf+0x2c>)
 80040d4:	b513      	push	{r0, r1, r4, lr}
 80040d6:	681c      	ldr	r4, [r3, #0]
 80040d8:	b124      	cbz	r4, 80040e4 <iprintf+0x14>
 80040da:	69a3      	ldr	r3, [r4, #24]
 80040dc:	b913      	cbnz	r3, 80040e4 <iprintf+0x14>
 80040de:	4620      	mov	r0, r4
 80040e0:	f000 fa5e 	bl	80045a0 <__sinit>
 80040e4:	ab05      	add	r3, sp, #20
 80040e6:	9a04      	ldr	r2, [sp, #16]
 80040e8:	68a1      	ldr	r1, [r4, #8]
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	4620      	mov	r0, r4
 80040ee:	f000 fc2f 	bl	8004950 <_vfiprintf_r>
 80040f2:	b002      	add	sp, #8
 80040f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040f8:	b004      	add	sp, #16
 80040fa:	4770      	bx	lr
 80040fc:	20000020 	.word	0x20000020

08004100 <_puts_r>:
 8004100:	b570      	push	{r4, r5, r6, lr}
 8004102:	460e      	mov	r6, r1
 8004104:	4605      	mov	r5, r0
 8004106:	b118      	cbz	r0, 8004110 <_puts_r+0x10>
 8004108:	6983      	ldr	r3, [r0, #24]
 800410a:	b90b      	cbnz	r3, 8004110 <_puts_r+0x10>
 800410c:	f000 fa48 	bl	80045a0 <__sinit>
 8004110:	69ab      	ldr	r3, [r5, #24]
 8004112:	68ac      	ldr	r4, [r5, #8]
 8004114:	b913      	cbnz	r3, 800411c <_puts_r+0x1c>
 8004116:	4628      	mov	r0, r5
 8004118:	f000 fa42 	bl	80045a0 <__sinit>
 800411c:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <_puts_r+0xd0>)
 800411e:	429c      	cmp	r4, r3
 8004120:	d120      	bne.n	8004164 <_puts_r+0x64>
 8004122:	686c      	ldr	r4, [r5, #4]
 8004124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004126:	07db      	lsls	r3, r3, #31
 8004128:	d405      	bmi.n	8004136 <_puts_r+0x36>
 800412a:	89a3      	ldrh	r3, [r4, #12]
 800412c:	0598      	lsls	r0, r3, #22
 800412e:	d402      	bmi.n	8004136 <_puts_r+0x36>
 8004130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004132:	f000 fad3 	bl	80046dc <__retarget_lock_acquire_recursive>
 8004136:	89a3      	ldrh	r3, [r4, #12]
 8004138:	0719      	lsls	r1, r3, #28
 800413a:	d51d      	bpl.n	8004178 <_puts_r+0x78>
 800413c:	6923      	ldr	r3, [r4, #16]
 800413e:	b1db      	cbz	r3, 8004178 <_puts_r+0x78>
 8004140:	3e01      	subs	r6, #1
 8004142:	68a3      	ldr	r3, [r4, #8]
 8004144:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004148:	3b01      	subs	r3, #1
 800414a:	60a3      	str	r3, [r4, #8]
 800414c:	bb39      	cbnz	r1, 800419e <_puts_r+0x9e>
 800414e:	2b00      	cmp	r3, #0
 8004150:	da38      	bge.n	80041c4 <_puts_r+0xc4>
 8004152:	4622      	mov	r2, r4
 8004154:	210a      	movs	r1, #10
 8004156:	4628      	mov	r0, r5
 8004158:	f000 f848 	bl	80041ec <__swbuf_r>
 800415c:	3001      	adds	r0, #1
 800415e:	d011      	beq.n	8004184 <_puts_r+0x84>
 8004160:	250a      	movs	r5, #10
 8004162:	e011      	b.n	8004188 <_puts_r+0x88>
 8004164:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <_puts_r+0xd4>)
 8004166:	429c      	cmp	r4, r3
 8004168:	d101      	bne.n	800416e <_puts_r+0x6e>
 800416a:	68ac      	ldr	r4, [r5, #8]
 800416c:	e7da      	b.n	8004124 <_puts_r+0x24>
 800416e:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <_puts_r+0xd8>)
 8004170:	429c      	cmp	r4, r3
 8004172:	bf08      	it	eq
 8004174:	68ec      	ldreq	r4, [r5, #12]
 8004176:	e7d5      	b.n	8004124 <_puts_r+0x24>
 8004178:	4621      	mov	r1, r4
 800417a:	4628      	mov	r0, r5
 800417c:	f000 f888 	bl	8004290 <__swsetup_r>
 8004180:	2800      	cmp	r0, #0
 8004182:	d0dd      	beq.n	8004140 <_puts_r+0x40>
 8004184:	f04f 35ff 	mov.w	r5, #4294967295
 8004188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800418a:	07da      	lsls	r2, r3, #31
 800418c:	d405      	bmi.n	800419a <_puts_r+0x9a>
 800418e:	89a3      	ldrh	r3, [r4, #12]
 8004190:	059b      	lsls	r3, r3, #22
 8004192:	d402      	bmi.n	800419a <_puts_r+0x9a>
 8004194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004196:	f000 faa2 	bl	80046de <__retarget_lock_release_recursive>
 800419a:	4628      	mov	r0, r5
 800419c:	bd70      	pop	{r4, r5, r6, pc}
 800419e:	2b00      	cmp	r3, #0
 80041a0:	da04      	bge.n	80041ac <_puts_r+0xac>
 80041a2:	69a2      	ldr	r2, [r4, #24]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	dc06      	bgt.n	80041b6 <_puts_r+0xb6>
 80041a8:	290a      	cmp	r1, #10
 80041aa:	d004      	beq.n	80041b6 <_puts_r+0xb6>
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	6022      	str	r2, [r4, #0]
 80041b2:	7019      	strb	r1, [r3, #0]
 80041b4:	e7c5      	b.n	8004142 <_puts_r+0x42>
 80041b6:	4622      	mov	r2, r4
 80041b8:	4628      	mov	r0, r5
 80041ba:	f000 f817 	bl	80041ec <__swbuf_r>
 80041be:	3001      	adds	r0, #1
 80041c0:	d1bf      	bne.n	8004142 <_puts_r+0x42>
 80041c2:	e7df      	b.n	8004184 <_puts_r+0x84>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	250a      	movs	r5, #10
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	6022      	str	r2, [r4, #0]
 80041cc:	701d      	strb	r5, [r3, #0]
 80041ce:	e7db      	b.n	8004188 <_puts_r+0x88>
 80041d0:	08005144 	.word	0x08005144
 80041d4:	08005164 	.word	0x08005164
 80041d8:	08005124 	.word	0x08005124

080041dc <puts>:
 80041dc:	4b02      	ldr	r3, [pc, #8]	; (80041e8 <puts+0xc>)
 80041de:	4601      	mov	r1, r0
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	f7ff bf8d 	b.w	8004100 <_puts_r>
 80041e6:	bf00      	nop
 80041e8:	20000020 	.word	0x20000020

080041ec <__swbuf_r>:
 80041ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ee:	460e      	mov	r6, r1
 80041f0:	4614      	mov	r4, r2
 80041f2:	4605      	mov	r5, r0
 80041f4:	b118      	cbz	r0, 80041fe <__swbuf_r+0x12>
 80041f6:	6983      	ldr	r3, [r0, #24]
 80041f8:	b90b      	cbnz	r3, 80041fe <__swbuf_r+0x12>
 80041fa:	f000 f9d1 	bl	80045a0 <__sinit>
 80041fe:	4b21      	ldr	r3, [pc, #132]	; (8004284 <__swbuf_r+0x98>)
 8004200:	429c      	cmp	r4, r3
 8004202:	d12b      	bne.n	800425c <__swbuf_r+0x70>
 8004204:	686c      	ldr	r4, [r5, #4]
 8004206:	69a3      	ldr	r3, [r4, #24]
 8004208:	60a3      	str	r3, [r4, #8]
 800420a:	89a3      	ldrh	r3, [r4, #12]
 800420c:	071a      	lsls	r2, r3, #28
 800420e:	d52f      	bpl.n	8004270 <__swbuf_r+0x84>
 8004210:	6923      	ldr	r3, [r4, #16]
 8004212:	b36b      	cbz	r3, 8004270 <__swbuf_r+0x84>
 8004214:	6923      	ldr	r3, [r4, #16]
 8004216:	6820      	ldr	r0, [r4, #0]
 8004218:	1ac0      	subs	r0, r0, r3
 800421a:	6963      	ldr	r3, [r4, #20]
 800421c:	b2f6      	uxtb	r6, r6
 800421e:	4283      	cmp	r3, r0
 8004220:	4637      	mov	r7, r6
 8004222:	dc04      	bgt.n	800422e <__swbuf_r+0x42>
 8004224:	4621      	mov	r1, r4
 8004226:	4628      	mov	r0, r5
 8004228:	f000 f926 	bl	8004478 <_fflush_r>
 800422c:	bb30      	cbnz	r0, 800427c <__swbuf_r+0x90>
 800422e:	68a3      	ldr	r3, [r4, #8]
 8004230:	3b01      	subs	r3, #1
 8004232:	60a3      	str	r3, [r4, #8]
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	6022      	str	r2, [r4, #0]
 800423a:	701e      	strb	r6, [r3, #0]
 800423c:	6963      	ldr	r3, [r4, #20]
 800423e:	3001      	adds	r0, #1
 8004240:	4283      	cmp	r3, r0
 8004242:	d004      	beq.n	800424e <__swbuf_r+0x62>
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	07db      	lsls	r3, r3, #31
 8004248:	d506      	bpl.n	8004258 <__swbuf_r+0x6c>
 800424a:	2e0a      	cmp	r6, #10
 800424c:	d104      	bne.n	8004258 <__swbuf_r+0x6c>
 800424e:	4621      	mov	r1, r4
 8004250:	4628      	mov	r0, r5
 8004252:	f000 f911 	bl	8004478 <_fflush_r>
 8004256:	b988      	cbnz	r0, 800427c <__swbuf_r+0x90>
 8004258:	4638      	mov	r0, r7
 800425a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <__swbuf_r+0x9c>)
 800425e:	429c      	cmp	r4, r3
 8004260:	d101      	bne.n	8004266 <__swbuf_r+0x7a>
 8004262:	68ac      	ldr	r4, [r5, #8]
 8004264:	e7cf      	b.n	8004206 <__swbuf_r+0x1a>
 8004266:	4b09      	ldr	r3, [pc, #36]	; (800428c <__swbuf_r+0xa0>)
 8004268:	429c      	cmp	r4, r3
 800426a:	bf08      	it	eq
 800426c:	68ec      	ldreq	r4, [r5, #12]
 800426e:	e7ca      	b.n	8004206 <__swbuf_r+0x1a>
 8004270:	4621      	mov	r1, r4
 8004272:	4628      	mov	r0, r5
 8004274:	f000 f80c 	bl	8004290 <__swsetup_r>
 8004278:	2800      	cmp	r0, #0
 800427a:	d0cb      	beq.n	8004214 <__swbuf_r+0x28>
 800427c:	f04f 37ff 	mov.w	r7, #4294967295
 8004280:	e7ea      	b.n	8004258 <__swbuf_r+0x6c>
 8004282:	bf00      	nop
 8004284:	08005144 	.word	0x08005144
 8004288:	08005164 	.word	0x08005164
 800428c:	08005124 	.word	0x08005124

08004290 <__swsetup_r>:
 8004290:	4b32      	ldr	r3, [pc, #200]	; (800435c <__swsetup_r+0xcc>)
 8004292:	b570      	push	{r4, r5, r6, lr}
 8004294:	681d      	ldr	r5, [r3, #0]
 8004296:	4606      	mov	r6, r0
 8004298:	460c      	mov	r4, r1
 800429a:	b125      	cbz	r5, 80042a6 <__swsetup_r+0x16>
 800429c:	69ab      	ldr	r3, [r5, #24]
 800429e:	b913      	cbnz	r3, 80042a6 <__swsetup_r+0x16>
 80042a0:	4628      	mov	r0, r5
 80042a2:	f000 f97d 	bl	80045a0 <__sinit>
 80042a6:	4b2e      	ldr	r3, [pc, #184]	; (8004360 <__swsetup_r+0xd0>)
 80042a8:	429c      	cmp	r4, r3
 80042aa:	d10f      	bne.n	80042cc <__swsetup_r+0x3c>
 80042ac:	686c      	ldr	r4, [r5, #4]
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042b4:	0719      	lsls	r1, r3, #28
 80042b6:	d42c      	bmi.n	8004312 <__swsetup_r+0x82>
 80042b8:	06dd      	lsls	r5, r3, #27
 80042ba:	d411      	bmi.n	80042e0 <__swsetup_r+0x50>
 80042bc:	2309      	movs	r3, #9
 80042be:	6033      	str	r3, [r6, #0]
 80042c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042c4:	81a3      	strh	r3, [r4, #12]
 80042c6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ca:	e03e      	b.n	800434a <__swsetup_r+0xba>
 80042cc:	4b25      	ldr	r3, [pc, #148]	; (8004364 <__swsetup_r+0xd4>)
 80042ce:	429c      	cmp	r4, r3
 80042d0:	d101      	bne.n	80042d6 <__swsetup_r+0x46>
 80042d2:	68ac      	ldr	r4, [r5, #8]
 80042d4:	e7eb      	b.n	80042ae <__swsetup_r+0x1e>
 80042d6:	4b24      	ldr	r3, [pc, #144]	; (8004368 <__swsetup_r+0xd8>)
 80042d8:	429c      	cmp	r4, r3
 80042da:	bf08      	it	eq
 80042dc:	68ec      	ldreq	r4, [r5, #12]
 80042de:	e7e6      	b.n	80042ae <__swsetup_r+0x1e>
 80042e0:	0758      	lsls	r0, r3, #29
 80042e2:	d512      	bpl.n	800430a <__swsetup_r+0x7a>
 80042e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042e6:	b141      	cbz	r1, 80042fa <__swsetup_r+0x6a>
 80042e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042ec:	4299      	cmp	r1, r3
 80042ee:	d002      	beq.n	80042f6 <__swsetup_r+0x66>
 80042f0:	4630      	mov	r0, r6
 80042f2:	f000 fa59 	bl	80047a8 <_free_r>
 80042f6:	2300      	movs	r3, #0
 80042f8:	6363      	str	r3, [r4, #52]	; 0x34
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004300:	81a3      	strh	r3, [r4, #12]
 8004302:	2300      	movs	r3, #0
 8004304:	6063      	str	r3, [r4, #4]
 8004306:	6923      	ldr	r3, [r4, #16]
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	f043 0308 	orr.w	r3, r3, #8
 8004310:	81a3      	strh	r3, [r4, #12]
 8004312:	6923      	ldr	r3, [r4, #16]
 8004314:	b94b      	cbnz	r3, 800432a <__swsetup_r+0x9a>
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800431c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004320:	d003      	beq.n	800432a <__swsetup_r+0x9a>
 8004322:	4621      	mov	r1, r4
 8004324:	4630      	mov	r0, r6
 8004326:	f000 f9ff 	bl	8004728 <__smakebuf_r>
 800432a:	89a0      	ldrh	r0, [r4, #12]
 800432c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004330:	f010 0301 	ands.w	r3, r0, #1
 8004334:	d00a      	beq.n	800434c <__swsetup_r+0xbc>
 8004336:	2300      	movs	r3, #0
 8004338:	60a3      	str	r3, [r4, #8]
 800433a:	6963      	ldr	r3, [r4, #20]
 800433c:	425b      	negs	r3, r3
 800433e:	61a3      	str	r3, [r4, #24]
 8004340:	6923      	ldr	r3, [r4, #16]
 8004342:	b943      	cbnz	r3, 8004356 <__swsetup_r+0xc6>
 8004344:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004348:	d1ba      	bne.n	80042c0 <__swsetup_r+0x30>
 800434a:	bd70      	pop	{r4, r5, r6, pc}
 800434c:	0781      	lsls	r1, r0, #30
 800434e:	bf58      	it	pl
 8004350:	6963      	ldrpl	r3, [r4, #20]
 8004352:	60a3      	str	r3, [r4, #8]
 8004354:	e7f4      	b.n	8004340 <__swsetup_r+0xb0>
 8004356:	2000      	movs	r0, #0
 8004358:	e7f7      	b.n	800434a <__swsetup_r+0xba>
 800435a:	bf00      	nop
 800435c:	20000020 	.word	0x20000020
 8004360:	08005144 	.word	0x08005144
 8004364:	08005164 	.word	0x08005164
 8004368:	08005124 	.word	0x08005124

0800436c <__sflush_r>:
 800436c:	898a      	ldrh	r2, [r1, #12]
 800436e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004372:	4605      	mov	r5, r0
 8004374:	0710      	lsls	r0, r2, #28
 8004376:	460c      	mov	r4, r1
 8004378:	d458      	bmi.n	800442c <__sflush_r+0xc0>
 800437a:	684b      	ldr	r3, [r1, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	dc05      	bgt.n	800438c <__sflush_r+0x20>
 8004380:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004382:	2b00      	cmp	r3, #0
 8004384:	dc02      	bgt.n	800438c <__sflush_r+0x20>
 8004386:	2000      	movs	r0, #0
 8004388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800438c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800438e:	2e00      	cmp	r6, #0
 8004390:	d0f9      	beq.n	8004386 <__sflush_r+0x1a>
 8004392:	2300      	movs	r3, #0
 8004394:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004398:	682f      	ldr	r7, [r5, #0]
 800439a:	602b      	str	r3, [r5, #0]
 800439c:	d032      	beq.n	8004404 <__sflush_r+0x98>
 800439e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	075a      	lsls	r2, r3, #29
 80043a4:	d505      	bpl.n	80043b2 <__sflush_r+0x46>
 80043a6:	6863      	ldr	r3, [r4, #4]
 80043a8:	1ac0      	subs	r0, r0, r3
 80043aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043ac:	b10b      	cbz	r3, 80043b2 <__sflush_r+0x46>
 80043ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043b0:	1ac0      	subs	r0, r0, r3
 80043b2:	2300      	movs	r3, #0
 80043b4:	4602      	mov	r2, r0
 80043b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043b8:	6a21      	ldr	r1, [r4, #32]
 80043ba:	4628      	mov	r0, r5
 80043bc:	47b0      	blx	r6
 80043be:	1c43      	adds	r3, r0, #1
 80043c0:	89a3      	ldrh	r3, [r4, #12]
 80043c2:	d106      	bne.n	80043d2 <__sflush_r+0x66>
 80043c4:	6829      	ldr	r1, [r5, #0]
 80043c6:	291d      	cmp	r1, #29
 80043c8:	d82c      	bhi.n	8004424 <__sflush_r+0xb8>
 80043ca:	4a2a      	ldr	r2, [pc, #168]	; (8004474 <__sflush_r+0x108>)
 80043cc:	40ca      	lsrs	r2, r1
 80043ce:	07d6      	lsls	r6, r2, #31
 80043d0:	d528      	bpl.n	8004424 <__sflush_r+0xb8>
 80043d2:	2200      	movs	r2, #0
 80043d4:	6062      	str	r2, [r4, #4]
 80043d6:	04d9      	lsls	r1, r3, #19
 80043d8:	6922      	ldr	r2, [r4, #16]
 80043da:	6022      	str	r2, [r4, #0]
 80043dc:	d504      	bpl.n	80043e8 <__sflush_r+0x7c>
 80043de:	1c42      	adds	r2, r0, #1
 80043e0:	d101      	bne.n	80043e6 <__sflush_r+0x7a>
 80043e2:	682b      	ldr	r3, [r5, #0]
 80043e4:	b903      	cbnz	r3, 80043e8 <__sflush_r+0x7c>
 80043e6:	6560      	str	r0, [r4, #84]	; 0x54
 80043e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ea:	602f      	str	r7, [r5, #0]
 80043ec:	2900      	cmp	r1, #0
 80043ee:	d0ca      	beq.n	8004386 <__sflush_r+0x1a>
 80043f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043f4:	4299      	cmp	r1, r3
 80043f6:	d002      	beq.n	80043fe <__sflush_r+0x92>
 80043f8:	4628      	mov	r0, r5
 80043fa:	f000 f9d5 	bl	80047a8 <_free_r>
 80043fe:	2000      	movs	r0, #0
 8004400:	6360      	str	r0, [r4, #52]	; 0x34
 8004402:	e7c1      	b.n	8004388 <__sflush_r+0x1c>
 8004404:	6a21      	ldr	r1, [r4, #32]
 8004406:	2301      	movs	r3, #1
 8004408:	4628      	mov	r0, r5
 800440a:	47b0      	blx	r6
 800440c:	1c41      	adds	r1, r0, #1
 800440e:	d1c7      	bne.n	80043a0 <__sflush_r+0x34>
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0c4      	beq.n	80043a0 <__sflush_r+0x34>
 8004416:	2b1d      	cmp	r3, #29
 8004418:	d001      	beq.n	800441e <__sflush_r+0xb2>
 800441a:	2b16      	cmp	r3, #22
 800441c:	d101      	bne.n	8004422 <__sflush_r+0xb6>
 800441e:	602f      	str	r7, [r5, #0]
 8004420:	e7b1      	b.n	8004386 <__sflush_r+0x1a>
 8004422:	89a3      	ldrh	r3, [r4, #12]
 8004424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004428:	81a3      	strh	r3, [r4, #12]
 800442a:	e7ad      	b.n	8004388 <__sflush_r+0x1c>
 800442c:	690f      	ldr	r7, [r1, #16]
 800442e:	2f00      	cmp	r7, #0
 8004430:	d0a9      	beq.n	8004386 <__sflush_r+0x1a>
 8004432:	0793      	lsls	r3, r2, #30
 8004434:	680e      	ldr	r6, [r1, #0]
 8004436:	bf08      	it	eq
 8004438:	694b      	ldreq	r3, [r1, #20]
 800443a:	600f      	str	r7, [r1, #0]
 800443c:	bf18      	it	ne
 800443e:	2300      	movne	r3, #0
 8004440:	eba6 0807 	sub.w	r8, r6, r7
 8004444:	608b      	str	r3, [r1, #8]
 8004446:	f1b8 0f00 	cmp.w	r8, #0
 800444a:	dd9c      	ble.n	8004386 <__sflush_r+0x1a>
 800444c:	6a21      	ldr	r1, [r4, #32]
 800444e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004450:	4643      	mov	r3, r8
 8004452:	463a      	mov	r2, r7
 8004454:	4628      	mov	r0, r5
 8004456:	47b0      	blx	r6
 8004458:	2800      	cmp	r0, #0
 800445a:	dc06      	bgt.n	800446a <__sflush_r+0xfe>
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004462:	81a3      	strh	r3, [r4, #12]
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	e78e      	b.n	8004388 <__sflush_r+0x1c>
 800446a:	4407      	add	r7, r0
 800446c:	eba8 0800 	sub.w	r8, r8, r0
 8004470:	e7e9      	b.n	8004446 <__sflush_r+0xda>
 8004472:	bf00      	nop
 8004474:	20400001 	.word	0x20400001

08004478 <_fflush_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	690b      	ldr	r3, [r1, #16]
 800447c:	4605      	mov	r5, r0
 800447e:	460c      	mov	r4, r1
 8004480:	b913      	cbnz	r3, 8004488 <_fflush_r+0x10>
 8004482:	2500      	movs	r5, #0
 8004484:	4628      	mov	r0, r5
 8004486:	bd38      	pop	{r3, r4, r5, pc}
 8004488:	b118      	cbz	r0, 8004492 <_fflush_r+0x1a>
 800448a:	6983      	ldr	r3, [r0, #24]
 800448c:	b90b      	cbnz	r3, 8004492 <_fflush_r+0x1a>
 800448e:	f000 f887 	bl	80045a0 <__sinit>
 8004492:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <_fflush_r+0x6c>)
 8004494:	429c      	cmp	r4, r3
 8004496:	d11b      	bne.n	80044d0 <_fflush_r+0x58>
 8004498:	686c      	ldr	r4, [r5, #4]
 800449a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0ef      	beq.n	8004482 <_fflush_r+0xa>
 80044a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044a4:	07d0      	lsls	r0, r2, #31
 80044a6:	d404      	bmi.n	80044b2 <_fflush_r+0x3a>
 80044a8:	0599      	lsls	r1, r3, #22
 80044aa:	d402      	bmi.n	80044b2 <_fflush_r+0x3a>
 80044ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ae:	f000 f915 	bl	80046dc <__retarget_lock_acquire_recursive>
 80044b2:	4628      	mov	r0, r5
 80044b4:	4621      	mov	r1, r4
 80044b6:	f7ff ff59 	bl	800436c <__sflush_r>
 80044ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044bc:	07da      	lsls	r2, r3, #31
 80044be:	4605      	mov	r5, r0
 80044c0:	d4e0      	bmi.n	8004484 <_fflush_r+0xc>
 80044c2:	89a3      	ldrh	r3, [r4, #12]
 80044c4:	059b      	lsls	r3, r3, #22
 80044c6:	d4dd      	bmi.n	8004484 <_fflush_r+0xc>
 80044c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ca:	f000 f908 	bl	80046de <__retarget_lock_release_recursive>
 80044ce:	e7d9      	b.n	8004484 <_fflush_r+0xc>
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <_fflush_r+0x70>)
 80044d2:	429c      	cmp	r4, r3
 80044d4:	d101      	bne.n	80044da <_fflush_r+0x62>
 80044d6:	68ac      	ldr	r4, [r5, #8]
 80044d8:	e7df      	b.n	800449a <_fflush_r+0x22>
 80044da:	4b04      	ldr	r3, [pc, #16]	; (80044ec <_fflush_r+0x74>)
 80044dc:	429c      	cmp	r4, r3
 80044de:	bf08      	it	eq
 80044e0:	68ec      	ldreq	r4, [r5, #12]
 80044e2:	e7da      	b.n	800449a <_fflush_r+0x22>
 80044e4:	08005144 	.word	0x08005144
 80044e8:	08005164 	.word	0x08005164
 80044ec:	08005124 	.word	0x08005124

080044f0 <std>:
 80044f0:	2300      	movs	r3, #0
 80044f2:	b510      	push	{r4, lr}
 80044f4:	4604      	mov	r4, r0
 80044f6:	e9c0 3300 	strd	r3, r3, [r0]
 80044fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044fe:	6083      	str	r3, [r0, #8]
 8004500:	8181      	strh	r1, [r0, #12]
 8004502:	6643      	str	r3, [r0, #100]	; 0x64
 8004504:	81c2      	strh	r2, [r0, #14]
 8004506:	6183      	str	r3, [r0, #24]
 8004508:	4619      	mov	r1, r3
 800450a:	2208      	movs	r2, #8
 800450c:	305c      	adds	r0, #92	; 0x5c
 800450e:	f7ff fdd7 	bl	80040c0 <memset>
 8004512:	4b05      	ldr	r3, [pc, #20]	; (8004528 <std+0x38>)
 8004514:	6263      	str	r3, [r4, #36]	; 0x24
 8004516:	4b05      	ldr	r3, [pc, #20]	; (800452c <std+0x3c>)
 8004518:	62a3      	str	r3, [r4, #40]	; 0x28
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <std+0x40>)
 800451c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <std+0x44>)
 8004520:	6224      	str	r4, [r4, #32]
 8004522:	6323      	str	r3, [r4, #48]	; 0x30
 8004524:	bd10      	pop	{r4, pc}
 8004526:	bf00      	nop
 8004528:	08004ef9 	.word	0x08004ef9
 800452c:	08004f1b 	.word	0x08004f1b
 8004530:	08004f53 	.word	0x08004f53
 8004534:	08004f77 	.word	0x08004f77

08004538 <_cleanup_r>:
 8004538:	4901      	ldr	r1, [pc, #4]	; (8004540 <_cleanup_r+0x8>)
 800453a:	f000 b8af 	b.w	800469c <_fwalk_reent>
 800453e:	bf00      	nop
 8004540:	08004479 	.word	0x08004479

08004544 <__sfmoreglue>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	1e4a      	subs	r2, r1, #1
 8004548:	2568      	movs	r5, #104	; 0x68
 800454a:	4355      	muls	r5, r2
 800454c:	460e      	mov	r6, r1
 800454e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004552:	f000 f979 	bl	8004848 <_malloc_r>
 8004556:	4604      	mov	r4, r0
 8004558:	b140      	cbz	r0, 800456c <__sfmoreglue+0x28>
 800455a:	2100      	movs	r1, #0
 800455c:	e9c0 1600 	strd	r1, r6, [r0]
 8004560:	300c      	adds	r0, #12
 8004562:	60a0      	str	r0, [r4, #8]
 8004564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004568:	f7ff fdaa 	bl	80040c0 <memset>
 800456c:	4620      	mov	r0, r4
 800456e:	bd70      	pop	{r4, r5, r6, pc}

08004570 <__sfp_lock_acquire>:
 8004570:	4801      	ldr	r0, [pc, #4]	; (8004578 <__sfp_lock_acquire+0x8>)
 8004572:	f000 b8b3 	b.w	80046dc <__retarget_lock_acquire_recursive>
 8004576:	bf00      	nop
 8004578:	200002c0 	.word	0x200002c0

0800457c <__sfp_lock_release>:
 800457c:	4801      	ldr	r0, [pc, #4]	; (8004584 <__sfp_lock_release+0x8>)
 800457e:	f000 b8ae 	b.w	80046de <__retarget_lock_release_recursive>
 8004582:	bf00      	nop
 8004584:	200002c0 	.word	0x200002c0

08004588 <__sinit_lock_acquire>:
 8004588:	4801      	ldr	r0, [pc, #4]	; (8004590 <__sinit_lock_acquire+0x8>)
 800458a:	f000 b8a7 	b.w	80046dc <__retarget_lock_acquire_recursive>
 800458e:	bf00      	nop
 8004590:	200002bb 	.word	0x200002bb

08004594 <__sinit_lock_release>:
 8004594:	4801      	ldr	r0, [pc, #4]	; (800459c <__sinit_lock_release+0x8>)
 8004596:	f000 b8a2 	b.w	80046de <__retarget_lock_release_recursive>
 800459a:	bf00      	nop
 800459c:	200002bb 	.word	0x200002bb

080045a0 <__sinit>:
 80045a0:	b510      	push	{r4, lr}
 80045a2:	4604      	mov	r4, r0
 80045a4:	f7ff fff0 	bl	8004588 <__sinit_lock_acquire>
 80045a8:	69a3      	ldr	r3, [r4, #24]
 80045aa:	b11b      	cbz	r3, 80045b4 <__sinit+0x14>
 80045ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045b0:	f7ff bff0 	b.w	8004594 <__sinit_lock_release>
 80045b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80045b8:	6523      	str	r3, [r4, #80]	; 0x50
 80045ba:	4b13      	ldr	r3, [pc, #76]	; (8004608 <__sinit+0x68>)
 80045bc:	4a13      	ldr	r2, [pc, #76]	; (800460c <__sinit+0x6c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80045c2:	42a3      	cmp	r3, r4
 80045c4:	bf04      	itt	eq
 80045c6:	2301      	moveq	r3, #1
 80045c8:	61a3      	streq	r3, [r4, #24]
 80045ca:	4620      	mov	r0, r4
 80045cc:	f000 f820 	bl	8004610 <__sfp>
 80045d0:	6060      	str	r0, [r4, #4]
 80045d2:	4620      	mov	r0, r4
 80045d4:	f000 f81c 	bl	8004610 <__sfp>
 80045d8:	60a0      	str	r0, [r4, #8]
 80045da:	4620      	mov	r0, r4
 80045dc:	f000 f818 	bl	8004610 <__sfp>
 80045e0:	2200      	movs	r2, #0
 80045e2:	60e0      	str	r0, [r4, #12]
 80045e4:	2104      	movs	r1, #4
 80045e6:	6860      	ldr	r0, [r4, #4]
 80045e8:	f7ff ff82 	bl	80044f0 <std>
 80045ec:	68a0      	ldr	r0, [r4, #8]
 80045ee:	2201      	movs	r2, #1
 80045f0:	2109      	movs	r1, #9
 80045f2:	f7ff ff7d 	bl	80044f0 <std>
 80045f6:	68e0      	ldr	r0, [r4, #12]
 80045f8:	2202      	movs	r2, #2
 80045fa:	2112      	movs	r1, #18
 80045fc:	f7ff ff78 	bl	80044f0 <std>
 8004600:	2301      	movs	r3, #1
 8004602:	61a3      	str	r3, [r4, #24]
 8004604:	e7d2      	b.n	80045ac <__sinit+0xc>
 8004606:	bf00      	nop
 8004608:	08005120 	.word	0x08005120
 800460c:	08004539 	.word	0x08004539

08004610 <__sfp>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	4607      	mov	r7, r0
 8004614:	f7ff ffac 	bl	8004570 <__sfp_lock_acquire>
 8004618:	4b1e      	ldr	r3, [pc, #120]	; (8004694 <__sfp+0x84>)
 800461a:	681e      	ldr	r6, [r3, #0]
 800461c:	69b3      	ldr	r3, [r6, #24]
 800461e:	b913      	cbnz	r3, 8004626 <__sfp+0x16>
 8004620:	4630      	mov	r0, r6
 8004622:	f7ff ffbd 	bl	80045a0 <__sinit>
 8004626:	3648      	adds	r6, #72	; 0x48
 8004628:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800462c:	3b01      	subs	r3, #1
 800462e:	d503      	bpl.n	8004638 <__sfp+0x28>
 8004630:	6833      	ldr	r3, [r6, #0]
 8004632:	b30b      	cbz	r3, 8004678 <__sfp+0x68>
 8004634:	6836      	ldr	r6, [r6, #0]
 8004636:	e7f7      	b.n	8004628 <__sfp+0x18>
 8004638:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800463c:	b9d5      	cbnz	r5, 8004674 <__sfp+0x64>
 800463e:	4b16      	ldr	r3, [pc, #88]	; (8004698 <__sfp+0x88>)
 8004640:	60e3      	str	r3, [r4, #12]
 8004642:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004646:	6665      	str	r5, [r4, #100]	; 0x64
 8004648:	f000 f847 	bl	80046da <__retarget_lock_init_recursive>
 800464c:	f7ff ff96 	bl	800457c <__sfp_lock_release>
 8004650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004658:	6025      	str	r5, [r4, #0]
 800465a:	61a5      	str	r5, [r4, #24]
 800465c:	2208      	movs	r2, #8
 800465e:	4629      	mov	r1, r5
 8004660:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004664:	f7ff fd2c 	bl	80040c0 <memset>
 8004668:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800466c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004670:	4620      	mov	r0, r4
 8004672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004674:	3468      	adds	r4, #104	; 0x68
 8004676:	e7d9      	b.n	800462c <__sfp+0x1c>
 8004678:	2104      	movs	r1, #4
 800467a:	4638      	mov	r0, r7
 800467c:	f7ff ff62 	bl	8004544 <__sfmoreglue>
 8004680:	4604      	mov	r4, r0
 8004682:	6030      	str	r0, [r6, #0]
 8004684:	2800      	cmp	r0, #0
 8004686:	d1d5      	bne.n	8004634 <__sfp+0x24>
 8004688:	f7ff ff78 	bl	800457c <__sfp_lock_release>
 800468c:	230c      	movs	r3, #12
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	e7ee      	b.n	8004670 <__sfp+0x60>
 8004692:	bf00      	nop
 8004694:	08005120 	.word	0x08005120
 8004698:	ffff0001 	.word	0xffff0001

0800469c <_fwalk_reent>:
 800469c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046a0:	4606      	mov	r6, r0
 80046a2:	4688      	mov	r8, r1
 80046a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046a8:	2700      	movs	r7, #0
 80046aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046ae:	f1b9 0901 	subs.w	r9, r9, #1
 80046b2:	d505      	bpl.n	80046c0 <_fwalk_reent+0x24>
 80046b4:	6824      	ldr	r4, [r4, #0]
 80046b6:	2c00      	cmp	r4, #0
 80046b8:	d1f7      	bne.n	80046aa <_fwalk_reent+0xe>
 80046ba:	4638      	mov	r0, r7
 80046bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046c0:	89ab      	ldrh	r3, [r5, #12]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d907      	bls.n	80046d6 <_fwalk_reent+0x3a>
 80046c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046ca:	3301      	adds	r3, #1
 80046cc:	d003      	beq.n	80046d6 <_fwalk_reent+0x3a>
 80046ce:	4629      	mov	r1, r5
 80046d0:	4630      	mov	r0, r6
 80046d2:	47c0      	blx	r8
 80046d4:	4307      	orrs	r7, r0
 80046d6:	3568      	adds	r5, #104	; 0x68
 80046d8:	e7e9      	b.n	80046ae <_fwalk_reent+0x12>

080046da <__retarget_lock_init_recursive>:
 80046da:	4770      	bx	lr

080046dc <__retarget_lock_acquire_recursive>:
 80046dc:	4770      	bx	lr

080046de <__retarget_lock_release_recursive>:
 80046de:	4770      	bx	lr

080046e0 <__swhatbuf_r>:
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	460e      	mov	r6, r1
 80046e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e8:	2900      	cmp	r1, #0
 80046ea:	b096      	sub	sp, #88	; 0x58
 80046ec:	4614      	mov	r4, r2
 80046ee:	461d      	mov	r5, r3
 80046f0:	da07      	bge.n	8004702 <__swhatbuf_r+0x22>
 80046f2:	2300      	movs	r3, #0
 80046f4:	602b      	str	r3, [r5, #0]
 80046f6:	89b3      	ldrh	r3, [r6, #12]
 80046f8:	061a      	lsls	r2, r3, #24
 80046fa:	d410      	bmi.n	800471e <__swhatbuf_r+0x3e>
 80046fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004700:	e00e      	b.n	8004720 <__swhatbuf_r+0x40>
 8004702:	466a      	mov	r2, sp
 8004704:	f000 fc5e 	bl	8004fc4 <_fstat_r>
 8004708:	2800      	cmp	r0, #0
 800470a:	dbf2      	blt.n	80046f2 <__swhatbuf_r+0x12>
 800470c:	9a01      	ldr	r2, [sp, #4]
 800470e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004712:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004716:	425a      	negs	r2, r3
 8004718:	415a      	adcs	r2, r3
 800471a:	602a      	str	r2, [r5, #0]
 800471c:	e7ee      	b.n	80046fc <__swhatbuf_r+0x1c>
 800471e:	2340      	movs	r3, #64	; 0x40
 8004720:	2000      	movs	r0, #0
 8004722:	6023      	str	r3, [r4, #0]
 8004724:	b016      	add	sp, #88	; 0x58
 8004726:	bd70      	pop	{r4, r5, r6, pc}

08004728 <__smakebuf_r>:
 8004728:	898b      	ldrh	r3, [r1, #12]
 800472a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800472c:	079d      	lsls	r5, r3, #30
 800472e:	4606      	mov	r6, r0
 8004730:	460c      	mov	r4, r1
 8004732:	d507      	bpl.n	8004744 <__smakebuf_r+0x1c>
 8004734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	6123      	str	r3, [r4, #16]
 800473c:	2301      	movs	r3, #1
 800473e:	6163      	str	r3, [r4, #20]
 8004740:	b002      	add	sp, #8
 8004742:	bd70      	pop	{r4, r5, r6, pc}
 8004744:	ab01      	add	r3, sp, #4
 8004746:	466a      	mov	r2, sp
 8004748:	f7ff ffca 	bl	80046e0 <__swhatbuf_r>
 800474c:	9900      	ldr	r1, [sp, #0]
 800474e:	4605      	mov	r5, r0
 8004750:	4630      	mov	r0, r6
 8004752:	f000 f879 	bl	8004848 <_malloc_r>
 8004756:	b948      	cbnz	r0, 800476c <__smakebuf_r+0x44>
 8004758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800475c:	059a      	lsls	r2, r3, #22
 800475e:	d4ef      	bmi.n	8004740 <__smakebuf_r+0x18>
 8004760:	f023 0303 	bic.w	r3, r3, #3
 8004764:	f043 0302 	orr.w	r3, r3, #2
 8004768:	81a3      	strh	r3, [r4, #12]
 800476a:	e7e3      	b.n	8004734 <__smakebuf_r+0xc>
 800476c:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <__smakebuf_r+0x7c>)
 800476e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004770:	89a3      	ldrh	r3, [r4, #12]
 8004772:	6020      	str	r0, [r4, #0]
 8004774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004778:	81a3      	strh	r3, [r4, #12]
 800477a:	9b00      	ldr	r3, [sp, #0]
 800477c:	6163      	str	r3, [r4, #20]
 800477e:	9b01      	ldr	r3, [sp, #4]
 8004780:	6120      	str	r0, [r4, #16]
 8004782:	b15b      	cbz	r3, 800479c <__smakebuf_r+0x74>
 8004784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004788:	4630      	mov	r0, r6
 800478a:	f000 fc2d 	bl	8004fe8 <_isatty_r>
 800478e:	b128      	cbz	r0, 800479c <__smakebuf_r+0x74>
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	f023 0303 	bic.w	r3, r3, #3
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	81a3      	strh	r3, [r4, #12]
 800479c:	89a0      	ldrh	r0, [r4, #12]
 800479e:	4305      	orrs	r5, r0
 80047a0:	81a5      	strh	r5, [r4, #12]
 80047a2:	e7cd      	b.n	8004740 <__smakebuf_r+0x18>
 80047a4:	08004539 	.word	0x08004539

080047a8 <_free_r>:
 80047a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047aa:	2900      	cmp	r1, #0
 80047ac:	d048      	beq.n	8004840 <_free_r+0x98>
 80047ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b2:	9001      	str	r0, [sp, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f1a1 0404 	sub.w	r4, r1, #4
 80047ba:	bfb8      	it	lt
 80047bc:	18e4      	addlt	r4, r4, r3
 80047be:	f000 fc35 	bl	800502c <__malloc_lock>
 80047c2:	4a20      	ldr	r2, [pc, #128]	; (8004844 <_free_r+0x9c>)
 80047c4:	9801      	ldr	r0, [sp, #4]
 80047c6:	6813      	ldr	r3, [r2, #0]
 80047c8:	4615      	mov	r5, r2
 80047ca:	b933      	cbnz	r3, 80047da <_free_r+0x32>
 80047cc:	6063      	str	r3, [r4, #4]
 80047ce:	6014      	str	r4, [r2, #0]
 80047d0:	b003      	add	sp, #12
 80047d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047d6:	f000 bc2f 	b.w	8005038 <__malloc_unlock>
 80047da:	42a3      	cmp	r3, r4
 80047dc:	d90b      	bls.n	80047f6 <_free_r+0x4e>
 80047de:	6821      	ldr	r1, [r4, #0]
 80047e0:	1862      	adds	r2, r4, r1
 80047e2:	4293      	cmp	r3, r2
 80047e4:	bf04      	itt	eq
 80047e6:	681a      	ldreq	r2, [r3, #0]
 80047e8:	685b      	ldreq	r3, [r3, #4]
 80047ea:	6063      	str	r3, [r4, #4]
 80047ec:	bf04      	itt	eq
 80047ee:	1852      	addeq	r2, r2, r1
 80047f0:	6022      	streq	r2, [r4, #0]
 80047f2:	602c      	str	r4, [r5, #0]
 80047f4:	e7ec      	b.n	80047d0 <_free_r+0x28>
 80047f6:	461a      	mov	r2, r3
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	b10b      	cbz	r3, 8004800 <_free_r+0x58>
 80047fc:	42a3      	cmp	r3, r4
 80047fe:	d9fa      	bls.n	80047f6 <_free_r+0x4e>
 8004800:	6811      	ldr	r1, [r2, #0]
 8004802:	1855      	adds	r5, r2, r1
 8004804:	42a5      	cmp	r5, r4
 8004806:	d10b      	bne.n	8004820 <_free_r+0x78>
 8004808:	6824      	ldr	r4, [r4, #0]
 800480a:	4421      	add	r1, r4
 800480c:	1854      	adds	r4, r2, r1
 800480e:	42a3      	cmp	r3, r4
 8004810:	6011      	str	r1, [r2, #0]
 8004812:	d1dd      	bne.n	80047d0 <_free_r+0x28>
 8004814:	681c      	ldr	r4, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	6053      	str	r3, [r2, #4]
 800481a:	4421      	add	r1, r4
 800481c:	6011      	str	r1, [r2, #0]
 800481e:	e7d7      	b.n	80047d0 <_free_r+0x28>
 8004820:	d902      	bls.n	8004828 <_free_r+0x80>
 8004822:	230c      	movs	r3, #12
 8004824:	6003      	str	r3, [r0, #0]
 8004826:	e7d3      	b.n	80047d0 <_free_r+0x28>
 8004828:	6825      	ldr	r5, [r4, #0]
 800482a:	1961      	adds	r1, r4, r5
 800482c:	428b      	cmp	r3, r1
 800482e:	bf04      	itt	eq
 8004830:	6819      	ldreq	r1, [r3, #0]
 8004832:	685b      	ldreq	r3, [r3, #4]
 8004834:	6063      	str	r3, [r4, #4]
 8004836:	bf04      	itt	eq
 8004838:	1949      	addeq	r1, r1, r5
 800483a:	6021      	streq	r1, [r4, #0]
 800483c:	6054      	str	r4, [r2, #4]
 800483e:	e7c7      	b.n	80047d0 <_free_r+0x28>
 8004840:	b003      	add	sp, #12
 8004842:	bd30      	pop	{r4, r5, pc}
 8004844:	200000b0 	.word	0x200000b0

08004848 <_malloc_r>:
 8004848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484a:	1ccd      	adds	r5, r1, #3
 800484c:	f025 0503 	bic.w	r5, r5, #3
 8004850:	3508      	adds	r5, #8
 8004852:	2d0c      	cmp	r5, #12
 8004854:	bf38      	it	cc
 8004856:	250c      	movcc	r5, #12
 8004858:	2d00      	cmp	r5, #0
 800485a:	4606      	mov	r6, r0
 800485c:	db01      	blt.n	8004862 <_malloc_r+0x1a>
 800485e:	42a9      	cmp	r1, r5
 8004860:	d903      	bls.n	800486a <_malloc_r+0x22>
 8004862:	230c      	movs	r3, #12
 8004864:	6033      	str	r3, [r6, #0]
 8004866:	2000      	movs	r0, #0
 8004868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800486a:	f000 fbdf 	bl	800502c <__malloc_lock>
 800486e:	4921      	ldr	r1, [pc, #132]	; (80048f4 <_malloc_r+0xac>)
 8004870:	680a      	ldr	r2, [r1, #0]
 8004872:	4614      	mov	r4, r2
 8004874:	b99c      	cbnz	r4, 800489e <_malloc_r+0x56>
 8004876:	4f20      	ldr	r7, [pc, #128]	; (80048f8 <_malloc_r+0xb0>)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	b923      	cbnz	r3, 8004886 <_malloc_r+0x3e>
 800487c:	4621      	mov	r1, r4
 800487e:	4630      	mov	r0, r6
 8004880:	f000 fb2a 	bl	8004ed8 <_sbrk_r>
 8004884:	6038      	str	r0, [r7, #0]
 8004886:	4629      	mov	r1, r5
 8004888:	4630      	mov	r0, r6
 800488a:	f000 fb25 	bl	8004ed8 <_sbrk_r>
 800488e:	1c43      	adds	r3, r0, #1
 8004890:	d123      	bne.n	80048da <_malloc_r+0x92>
 8004892:	230c      	movs	r3, #12
 8004894:	6033      	str	r3, [r6, #0]
 8004896:	4630      	mov	r0, r6
 8004898:	f000 fbce 	bl	8005038 <__malloc_unlock>
 800489c:	e7e3      	b.n	8004866 <_malloc_r+0x1e>
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	1b5b      	subs	r3, r3, r5
 80048a2:	d417      	bmi.n	80048d4 <_malloc_r+0x8c>
 80048a4:	2b0b      	cmp	r3, #11
 80048a6:	d903      	bls.n	80048b0 <_malloc_r+0x68>
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	441c      	add	r4, r3
 80048ac:	6025      	str	r5, [r4, #0]
 80048ae:	e004      	b.n	80048ba <_malloc_r+0x72>
 80048b0:	6863      	ldr	r3, [r4, #4]
 80048b2:	42a2      	cmp	r2, r4
 80048b4:	bf0c      	ite	eq
 80048b6:	600b      	streq	r3, [r1, #0]
 80048b8:	6053      	strne	r3, [r2, #4]
 80048ba:	4630      	mov	r0, r6
 80048bc:	f000 fbbc 	bl	8005038 <__malloc_unlock>
 80048c0:	f104 000b 	add.w	r0, r4, #11
 80048c4:	1d23      	adds	r3, r4, #4
 80048c6:	f020 0007 	bic.w	r0, r0, #7
 80048ca:	1ac2      	subs	r2, r0, r3
 80048cc:	d0cc      	beq.n	8004868 <_malloc_r+0x20>
 80048ce:	1a1b      	subs	r3, r3, r0
 80048d0:	50a3      	str	r3, [r4, r2]
 80048d2:	e7c9      	b.n	8004868 <_malloc_r+0x20>
 80048d4:	4622      	mov	r2, r4
 80048d6:	6864      	ldr	r4, [r4, #4]
 80048d8:	e7cc      	b.n	8004874 <_malloc_r+0x2c>
 80048da:	1cc4      	adds	r4, r0, #3
 80048dc:	f024 0403 	bic.w	r4, r4, #3
 80048e0:	42a0      	cmp	r0, r4
 80048e2:	d0e3      	beq.n	80048ac <_malloc_r+0x64>
 80048e4:	1a21      	subs	r1, r4, r0
 80048e6:	4630      	mov	r0, r6
 80048e8:	f000 faf6 	bl	8004ed8 <_sbrk_r>
 80048ec:	3001      	adds	r0, #1
 80048ee:	d1dd      	bne.n	80048ac <_malloc_r+0x64>
 80048f0:	e7cf      	b.n	8004892 <_malloc_r+0x4a>
 80048f2:	bf00      	nop
 80048f4:	200000b0 	.word	0x200000b0
 80048f8:	200000b4 	.word	0x200000b4

080048fc <__sfputc_r>:
 80048fc:	6893      	ldr	r3, [r2, #8]
 80048fe:	3b01      	subs	r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	b410      	push	{r4}
 8004904:	6093      	str	r3, [r2, #8]
 8004906:	da08      	bge.n	800491a <__sfputc_r+0x1e>
 8004908:	6994      	ldr	r4, [r2, #24]
 800490a:	42a3      	cmp	r3, r4
 800490c:	db01      	blt.n	8004912 <__sfputc_r+0x16>
 800490e:	290a      	cmp	r1, #10
 8004910:	d103      	bne.n	800491a <__sfputc_r+0x1e>
 8004912:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004916:	f7ff bc69 	b.w	80041ec <__swbuf_r>
 800491a:	6813      	ldr	r3, [r2, #0]
 800491c:	1c58      	adds	r0, r3, #1
 800491e:	6010      	str	r0, [r2, #0]
 8004920:	7019      	strb	r1, [r3, #0]
 8004922:	4608      	mov	r0, r1
 8004924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004928:	4770      	bx	lr

0800492a <__sfputs_r>:
 800492a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492c:	4606      	mov	r6, r0
 800492e:	460f      	mov	r7, r1
 8004930:	4614      	mov	r4, r2
 8004932:	18d5      	adds	r5, r2, r3
 8004934:	42ac      	cmp	r4, r5
 8004936:	d101      	bne.n	800493c <__sfputs_r+0x12>
 8004938:	2000      	movs	r0, #0
 800493a:	e007      	b.n	800494c <__sfputs_r+0x22>
 800493c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004940:	463a      	mov	r2, r7
 8004942:	4630      	mov	r0, r6
 8004944:	f7ff ffda 	bl	80048fc <__sfputc_r>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	d1f3      	bne.n	8004934 <__sfputs_r+0xa>
 800494c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004950 <_vfiprintf_r>:
 8004950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004954:	460d      	mov	r5, r1
 8004956:	b09d      	sub	sp, #116	; 0x74
 8004958:	4614      	mov	r4, r2
 800495a:	4698      	mov	r8, r3
 800495c:	4606      	mov	r6, r0
 800495e:	b118      	cbz	r0, 8004968 <_vfiprintf_r+0x18>
 8004960:	6983      	ldr	r3, [r0, #24]
 8004962:	b90b      	cbnz	r3, 8004968 <_vfiprintf_r+0x18>
 8004964:	f7ff fe1c 	bl	80045a0 <__sinit>
 8004968:	4b89      	ldr	r3, [pc, #548]	; (8004b90 <_vfiprintf_r+0x240>)
 800496a:	429d      	cmp	r5, r3
 800496c:	d11b      	bne.n	80049a6 <_vfiprintf_r+0x56>
 800496e:	6875      	ldr	r5, [r6, #4]
 8004970:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004972:	07d9      	lsls	r1, r3, #31
 8004974:	d405      	bmi.n	8004982 <_vfiprintf_r+0x32>
 8004976:	89ab      	ldrh	r3, [r5, #12]
 8004978:	059a      	lsls	r2, r3, #22
 800497a:	d402      	bmi.n	8004982 <_vfiprintf_r+0x32>
 800497c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800497e:	f7ff fead 	bl	80046dc <__retarget_lock_acquire_recursive>
 8004982:	89ab      	ldrh	r3, [r5, #12]
 8004984:	071b      	lsls	r3, r3, #28
 8004986:	d501      	bpl.n	800498c <_vfiprintf_r+0x3c>
 8004988:	692b      	ldr	r3, [r5, #16]
 800498a:	b9eb      	cbnz	r3, 80049c8 <_vfiprintf_r+0x78>
 800498c:	4629      	mov	r1, r5
 800498e:	4630      	mov	r0, r6
 8004990:	f7ff fc7e 	bl	8004290 <__swsetup_r>
 8004994:	b1c0      	cbz	r0, 80049c8 <_vfiprintf_r+0x78>
 8004996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004998:	07dc      	lsls	r4, r3, #31
 800499a:	d50e      	bpl.n	80049ba <_vfiprintf_r+0x6a>
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	b01d      	add	sp, #116	; 0x74
 80049a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a6:	4b7b      	ldr	r3, [pc, #492]	; (8004b94 <_vfiprintf_r+0x244>)
 80049a8:	429d      	cmp	r5, r3
 80049aa:	d101      	bne.n	80049b0 <_vfiprintf_r+0x60>
 80049ac:	68b5      	ldr	r5, [r6, #8]
 80049ae:	e7df      	b.n	8004970 <_vfiprintf_r+0x20>
 80049b0:	4b79      	ldr	r3, [pc, #484]	; (8004b98 <_vfiprintf_r+0x248>)
 80049b2:	429d      	cmp	r5, r3
 80049b4:	bf08      	it	eq
 80049b6:	68f5      	ldreq	r5, [r6, #12]
 80049b8:	e7da      	b.n	8004970 <_vfiprintf_r+0x20>
 80049ba:	89ab      	ldrh	r3, [r5, #12]
 80049bc:	0598      	lsls	r0, r3, #22
 80049be:	d4ed      	bmi.n	800499c <_vfiprintf_r+0x4c>
 80049c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049c2:	f7ff fe8c 	bl	80046de <__retarget_lock_release_recursive>
 80049c6:	e7e9      	b.n	800499c <_vfiprintf_r+0x4c>
 80049c8:	2300      	movs	r3, #0
 80049ca:	9309      	str	r3, [sp, #36]	; 0x24
 80049cc:	2320      	movs	r3, #32
 80049ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80049d6:	2330      	movs	r3, #48	; 0x30
 80049d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b9c <_vfiprintf_r+0x24c>
 80049dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049e0:	f04f 0901 	mov.w	r9, #1
 80049e4:	4623      	mov	r3, r4
 80049e6:	469a      	mov	sl, r3
 80049e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049ec:	b10a      	cbz	r2, 80049f2 <_vfiprintf_r+0xa2>
 80049ee:	2a25      	cmp	r2, #37	; 0x25
 80049f0:	d1f9      	bne.n	80049e6 <_vfiprintf_r+0x96>
 80049f2:	ebba 0b04 	subs.w	fp, sl, r4
 80049f6:	d00b      	beq.n	8004a10 <_vfiprintf_r+0xc0>
 80049f8:	465b      	mov	r3, fp
 80049fa:	4622      	mov	r2, r4
 80049fc:	4629      	mov	r1, r5
 80049fe:	4630      	mov	r0, r6
 8004a00:	f7ff ff93 	bl	800492a <__sfputs_r>
 8004a04:	3001      	adds	r0, #1
 8004a06:	f000 80aa 	beq.w	8004b5e <_vfiprintf_r+0x20e>
 8004a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a0c:	445a      	add	r2, fp
 8004a0e:	9209      	str	r2, [sp, #36]	; 0x24
 8004a10:	f89a 3000 	ldrb.w	r3, [sl]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80a2 	beq.w	8004b5e <_vfiprintf_r+0x20e>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a24:	f10a 0a01 	add.w	sl, sl, #1
 8004a28:	9304      	str	r3, [sp, #16]
 8004a2a:	9307      	str	r3, [sp, #28]
 8004a2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a30:	931a      	str	r3, [sp, #104]	; 0x68
 8004a32:	4654      	mov	r4, sl
 8004a34:	2205      	movs	r2, #5
 8004a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a3a:	4858      	ldr	r0, [pc, #352]	; (8004b9c <_vfiprintf_r+0x24c>)
 8004a3c:	f7fb fbc8 	bl	80001d0 <memchr>
 8004a40:	9a04      	ldr	r2, [sp, #16]
 8004a42:	b9d8      	cbnz	r0, 8004a7c <_vfiprintf_r+0x12c>
 8004a44:	06d1      	lsls	r1, r2, #27
 8004a46:	bf44      	itt	mi
 8004a48:	2320      	movmi	r3, #32
 8004a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a4e:	0713      	lsls	r3, r2, #28
 8004a50:	bf44      	itt	mi
 8004a52:	232b      	movmi	r3, #43	; 0x2b
 8004a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a58:	f89a 3000 	ldrb.w	r3, [sl]
 8004a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a5e:	d015      	beq.n	8004a8c <_vfiprintf_r+0x13c>
 8004a60:	9a07      	ldr	r2, [sp, #28]
 8004a62:	4654      	mov	r4, sl
 8004a64:	2000      	movs	r0, #0
 8004a66:	f04f 0c0a 	mov.w	ip, #10
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a70:	3b30      	subs	r3, #48	; 0x30
 8004a72:	2b09      	cmp	r3, #9
 8004a74:	d94e      	bls.n	8004b14 <_vfiprintf_r+0x1c4>
 8004a76:	b1b0      	cbz	r0, 8004aa6 <_vfiprintf_r+0x156>
 8004a78:	9207      	str	r2, [sp, #28]
 8004a7a:	e014      	b.n	8004aa6 <_vfiprintf_r+0x156>
 8004a7c:	eba0 0308 	sub.w	r3, r0, r8
 8004a80:	fa09 f303 	lsl.w	r3, r9, r3
 8004a84:	4313      	orrs	r3, r2
 8004a86:	9304      	str	r3, [sp, #16]
 8004a88:	46a2      	mov	sl, r4
 8004a8a:	e7d2      	b.n	8004a32 <_vfiprintf_r+0xe2>
 8004a8c:	9b03      	ldr	r3, [sp, #12]
 8004a8e:	1d19      	adds	r1, r3, #4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	9103      	str	r1, [sp, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bfbb      	ittet	lt
 8004a98:	425b      	neglt	r3, r3
 8004a9a:	f042 0202 	orrlt.w	r2, r2, #2
 8004a9e:	9307      	strge	r3, [sp, #28]
 8004aa0:	9307      	strlt	r3, [sp, #28]
 8004aa2:	bfb8      	it	lt
 8004aa4:	9204      	strlt	r2, [sp, #16]
 8004aa6:	7823      	ldrb	r3, [r4, #0]
 8004aa8:	2b2e      	cmp	r3, #46	; 0x2e
 8004aaa:	d10c      	bne.n	8004ac6 <_vfiprintf_r+0x176>
 8004aac:	7863      	ldrb	r3, [r4, #1]
 8004aae:	2b2a      	cmp	r3, #42	; 0x2a
 8004ab0:	d135      	bne.n	8004b1e <_vfiprintf_r+0x1ce>
 8004ab2:	9b03      	ldr	r3, [sp, #12]
 8004ab4:	1d1a      	adds	r2, r3, #4
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	9203      	str	r2, [sp, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bfb8      	it	lt
 8004abe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ac2:	3402      	adds	r4, #2
 8004ac4:	9305      	str	r3, [sp, #20]
 8004ac6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004bac <_vfiprintf_r+0x25c>
 8004aca:	7821      	ldrb	r1, [r4, #0]
 8004acc:	2203      	movs	r2, #3
 8004ace:	4650      	mov	r0, sl
 8004ad0:	f7fb fb7e 	bl	80001d0 <memchr>
 8004ad4:	b140      	cbz	r0, 8004ae8 <_vfiprintf_r+0x198>
 8004ad6:	2340      	movs	r3, #64	; 0x40
 8004ad8:	eba0 000a 	sub.w	r0, r0, sl
 8004adc:	fa03 f000 	lsl.w	r0, r3, r0
 8004ae0:	9b04      	ldr	r3, [sp, #16]
 8004ae2:	4303      	orrs	r3, r0
 8004ae4:	3401      	adds	r4, #1
 8004ae6:	9304      	str	r3, [sp, #16]
 8004ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aec:	482c      	ldr	r0, [pc, #176]	; (8004ba0 <_vfiprintf_r+0x250>)
 8004aee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004af2:	2206      	movs	r2, #6
 8004af4:	f7fb fb6c 	bl	80001d0 <memchr>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d03f      	beq.n	8004b7c <_vfiprintf_r+0x22c>
 8004afc:	4b29      	ldr	r3, [pc, #164]	; (8004ba4 <_vfiprintf_r+0x254>)
 8004afe:	bb1b      	cbnz	r3, 8004b48 <_vfiprintf_r+0x1f8>
 8004b00:	9b03      	ldr	r3, [sp, #12]
 8004b02:	3307      	adds	r3, #7
 8004b04:	f023 0307 	bic.w	r3, r3, #7
 8004b08:	3308      	adds	r3, #8
 8004b0a:	9303      	str	r3, [sp, #12]
 8004b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b0e:	443b      	add	r3, r7
 8004b10:	9309      	str	r3, [sp, #36]	; 0x24
 8004b12:	e767      	b.n	80049e4 <_vfiprintf_r+0x94>
 8004b14:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b18:	460c      	mov	r4, r1
 8004b1a:	2001      	movs	r0, #1
 8004b1c:	e7a5      	b.n	8004a6a <_vfiprintf_r+0x11a>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	3401      	adds	r4, #1
 8004b22:	9305      	str	r3, [sp, #20]
 8004b24:	4619      	mov	r1, r3
 8004b26:	f04f 0c0a 	mov.w	ip, #10
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b30:	3a30      	subs	r2, #48	; 0x30
 8004b32:	2a09      	cmp	r2, #9
 8004b34:	d903      	bls.n	8004b3e <_vfiprintf_r+0x1ee>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0c5      	beq.n	8004ac6 <_vfiprintf_r+0x176>
 8004b3a:	9105      	str	r1, [sp, #20]
 8004b3c:	e7c3      	b.n	8004ac6 <_vfiprintf_r+0x176>
 8004b3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b42:	4604      	mov	r4, r0
 8004b44:	2301      	movs	r3, #1
 8004b46:	e7f0      	b.n	8004b2a <_vfiprintf_r+0x1da>
 8004b48:	ab03      	add	r3, sp, #12
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	462a      	mov	r2, r5
 8004b4e:	4b16      	ldr	r3, [pc, #88]	; (8004ba8 <_vfiprintf_r+0x258>)
 8004b50:	a904      	add	r1, sp, #16
 8004b52:	4630      	mov	r0, r6
 8004b54:	f3af 8000 	nop.w
 8004b58:	4607      	mov	r7, r0
 8004b5a:	1c78      	adds	r0, r7, #1
 8004b5c:	d1d6      	bne.n	8004b0c <_vfiprintf_r+0x1bc>
 8004b5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b60:	07d9      	lsls	r1, r3, #31
 8004b62:	d405      	bmi.n	8004b70 <_vfiprintf_r+0x220>
 8004b64:	89ab      	ldrh	r3, [r5, #12]
 8004b66:	059a      	lsls	r2, r3, #22
 8004b68:	d402      	bmi.n	8004b70 <_vfiprintf_r+0x220>
 8004b6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b6c:	f7ff fdb7 	bl	80046de <__retarget_lock_release_recursive>
 8004b70:	89ab      	ldrh	r3, [r5, #12]
 8004b72:	065b      	lsls	r3, r3, #25
 8004b74:	f53f af12 	bmi.w	800499c <_vfiprintf_r+0x4c>
 8004b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b7a:	e711      	b.n	80049a0 <_vfiprintf_r+0x50>
 8004b7c:	ab03      	add	r3, sp, #12
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	462a      	mov	r2, r5
 8004b82:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <_vfiprintf_r+0x258>)
 8004b84:	a904      	add	r1, sp, #16
 8004b86:	4630      	mov	r0, r6
 8004b88:	f000 f880 	bl	8004c8c <_printf_i>
 8004b8c:	e7e4      	b.n	8004b58 <_vfiprintf_r+0x208>
 8004b8e:	bf00      	nop
 8004b90:	08005144 	.word	0x08005144
 8004b94:	08005164 	.word	0x08005164
 8004b98:	08005124 	.word	0x08005124
 8004b9c:	08005184 	.word	0x08005184
 8004ba0:	0800518e 	.word	0x0800518e
 8004ba4:	00000000 	.word	0x00000000
 8004ba8:	0800492b 	.word	0x0800492b
 8004bac:	0800518a 	.word	0x0800518a

08004bb0 <_printf_common>:
 8004bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb4:	4616      	mov	r6, r2
 8004bb6:	4699      	mov	r9, r3
 8004bb8:	688a      	ldr	r2, [r1, #8]
 8004bba:	690b      	ldr	r3, [r1, #16]
 8004bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	bfb8      	it	lt
 8004bc4:	4613      	movlt	r3, r2
 8004bc6:	6033      	str	r3, [r6, #0]
 8004bc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bcc:	4607      	mov	r7, r0
 8004bce:	460c      	mov	r4, r1
 8004bd0:	b10a      	cbz	r2, 8004bd6 <_printf_common+0x26>
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	6033      	str	r3, [r6, #0]
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	0699      	lsls	r1, r3, #26
 8004bda:	bf42      	ittt	mi
 8004bdc:	6833      	ldrmi	r3, [r6, #0]
 8004bde:	3302      	addmi	r3, #2
 8004be0:	6033      	strmi	r3, [r6, #0]
 8004be2:	6825      	ldr	r5, [r4, #0]
 8004be4:	f015 0506 	ands.w	r5, r5, #6
 8004be8:	d106      	bne.n	8004bf8 <_printf_common+0x48>
 8004bea:	f104 0a19 	add.w	sl, r4, #25
 8004bee:	68e3      	ldr	r3, [r4, #12]
 8004bf0:	6832      	ldr	r2, [r6, #0]
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	42ab      	cmp	r3, r5
 8004bf6:	dc26      	bgt.n	8004c46 <_printf_common+0x96>
 8004bf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bfc:	1e13      	subs	r3, r2, #0
 8004bfe:	6822      	ldr	r2, [r4, #0]
 8004c00:	bf18      	it	ne
 8004c02:	2301      	movne	r3, #1
 8004c04:	0692      	lsls	r2, r2, #26
 8004c06:	d42b      	bmi.n	8004c60 <_printf_common+0xb0>
 8004c08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c0c:	4649      	mov	r1, r9
 8004c0e:	4638      	mov	r0, r7
 8004c10:	47c0      	blx	r8
 8004c12:	3001      	adds	r0, #1
 8004c14:	d01e      	beq.n	8004c54 <_printf_common+0xa4>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	68e5      	ldr	r5, [r4, #12]
 8004c1a:	6832      	ldr	r2, [r6, #0]
 8004c1c:	f003 0306 	and.w	r3, r3, #6
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	bf08      	it	eq
 8004c24:	1aad      	subeq	r5, r5, r2
 8004c26:	68a3      	ldr	r3, [r4, #8]
 8004c28:	6922      	ldr	r2, [r4, #16]
 8004c2a:	bf0c      	ite	eq
 8004c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c30:	2500      	movne	r5, #0
 8004c32:	4293      	cmp	r3, r2
 8004c34:	bfc4      	itt	gt
 8004c36:	1a9b      	subgt	r3, r3, r2
 8004c38:	18ed      	addgt	r5, r5, r3
 8004c3a:	2600      	movs	r6, #0
 8004c3c:	341a      	adds	r4, #26
 8004c3e:	42b5      	cmp	r5, r6
 8004c40:	d11a      	bne.n	8004c78 <_printf_common+0xc8>
 8004c42:	2000      	movs	r0, #0
 8004c44:	e008      	b.n	8004c58 <_printf_common+0xa8>
 8004c46:	2301      	movs	r3, #1
 8004c48:	4652      	mov	r2, sl
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	47c0      	blx	r8
 8004c50:	3001      	adds	r0, #1
 8004c52:	d103      	bne.n	8004c5c <_printf_common+0xac>
 8004c54:	f04f 30ff 	mov.w	r0, #4294967295
 8004c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5c:	3501      	adds	r5, #1
 8004c5e:	e7c6      	b.n	8004bee <_printf_common+0x3e>
 8004c60:	18e1      	adds	r1, r4, r3
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	2030      	movs	r0, #48	; 0x30
 8004c66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c6a:	4422      	add	r2, r4
 8004c6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c74:	3302      	adds	r3, #2
 8004c76:	e7c7      	b.n	8004c08 <_printf_common+0x58>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4622      	mov	r2, r4
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	4638      	mov	r0, r7
 8004c80:	47c0      	blx	r8
 8004c82:	3001      	adds	r0, #1
 8004c84:	d0e6      	beq.n	8004c54 <_printf_common+0xa4>
 8004c86:	3601      	adds	r6, #1
 8004c88:	e7d9      	b.n	8004c3e <_printf_common+0x8e>
	...

08004c8c <_printf_i>:
 8004c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c90:	460c      	mov	r4, r1
 8004c92:	4691      	mov	r9, r2
 8004c94:	7e27      	ldrb	r7, [r4, #24]
 8004c96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c98:	2f78      	cmp	r7, #120	; 0x78
 8004c9a:	4680      	mov	r8, r0
 8004c9c:	469a      	mov	sl, r3
 8004c9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ca2:	d807      	bhi.n	8004cb4 <_printf_i+0x28>
 8004ca4:	2f62      	cmp	r7, #98	; 0x62
 8004ca6:	d80a      	bhi.n	8004cbe <_printf_i+0x32>
 8004ca8:	2f00      	cmp	r7, #0
 8004caa:	f000 80d8 	beq.w	8004e5e <_printf_i+0x1d2>
 8004cae:	2f58      	cmp	r7, #88	; 0x58
 8004cb0:	f000 80a3 	beq.w	8004dfa <_printf_i+0x16e>
 8004cb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cbc:	e03a      	b.n	8004d34 <_printf_i+0xa8>
 8004cbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cc2:	2b15      	cmp	r3, #21
 8004cc4:	d8f6      	bhi.n	8004cb4 <_printf_i+0x28>
 8004cc6:	a001      	add	r0, pc, #4	; (adr r0, 8004ccc <_printf_i+0x40>)
 8004cc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ccc:	08004d25 	.word	0x08004d25
 8004cd0:	08004d39 	.word	0x08004d39
 8004cd4:	08004cb5 	.word	0x08004cb5
 8004cd8:	08004cb5 	.word	0x08004cb5
 8004cdc:	08004cb5 	.word	0x08004cb5
 8004ce0:	08004cb5 	.word	0x08004cb5
 8004ce4:	08004d39 	.word	0x08004d39
 8004ce8:	08004cb5 	.word	0x08004cb5
 8004cec:	08004cb5 	.word	0x08004cb5
 8004cf0:	08004cb5 	.word	0x08004cb5
 8004cf4:	08004cb5 	.word	0x08004cb5
 8004cf8:	08004e45 	.word	0x08004e45
 8004cfc:	08004d69 	.word	0x08004d69
 8004d00:	08004e27 	.word	0x08004e27
 8004d04:	08004cb5 	.word	0x08004cb5
 8004d08:	08004cb5 	.word	0x08004cb5
 8004d0c:	08004e67 	.word	0x08004e67
 8004d10:	08004cb5 	.word	0x08004cb5
 8004d14:	08004d69 	.word	0x08004d69
 8004d18:	08004cb5 	.word	0x08004cb5
 8004d1c:	08004cb5 	.word	0x08004cb5
 8004d20:	08004e2f 	.word	0x08004e2f
 8004d24:	680b      	ldr	r3, [r1, #0]
 8004d26:	1d1a      	adds	r2, r3, #4
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	600a      	str	r2, [r1, #0]
 8004d2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0a3      	b.n	8004e80 <_printf_i+0x1f4>
 8004d38:	6825      	ldr	r5, [r4, #0]
 8004d3a:	6808      	ldr	r0, [r1, #0]
 8004d3c:	062e      	lsls	r6, r5, #24
 8004d3e:	f100 0304 	add.w	r3, r0, #4
 8004d42:	d50a      	bpl.n	8004d5a <_printf_i+0xce>
 8004d44:	6805      	ldr	r5, [r0, #0]
 8004d46:	600b      	str	r3, [r1, #0]
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	da03      	bge.n	8004d54 <_printf_i+0xc8>
 8004d4c:	232d      	movs	r3, #45	; 0x2d
 8004d4e:	426d      	negs	r5, r5
 8004d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d54:	485e      	ldr	r0, [pc, #376]	; (8004ed0 <_printf_i+0x244>)
 8004d56:	230a      	movs	r3, #10
 8004d58:	e019      	b.n	8004d8e <_printf_i+0x102>
 8004d5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d5e:	6805      	ldr	r5, [r0, #0]
 8004d60:	600b      	str	r3, [r1, #0]
 8004d62:	bf18      	it	ne
 8004d64:	b22d      	sxthne	r5, r5
 8004d66:	e7ef      	b.n	8004d48 <_printf_i+0xbc>
 8004d68:	680b      	ldr	r3, [r1, #0]
 8004d6a:	6825      	ldr	r5, [r4, #0]
 8004d6c:	1d18      	adds	r0, r3, #4
 8004d6e:	6008      	str	r0, [r1, #0]
 8004d70:	0628      	lsls	r0, r5, #24
 8004d72:	d501      	bpl.n	8004d78 <_printf_i+0xec>
 8004d74:	681d      	ldr	r5, [r3, #0]
 8004d76:	e002      	b.n	8004d7e <_printf_i+0xf2>
 8004d78:	0669      	lsls	r1, r5, #25
 8004d7a:	d5fb      	bpl.n	8004d74 <_printf_i+0xe8>
 8004d7c:	881d      	ldrh	r5, [r3, #0]
 8004d7e:	4854      	ldr	r0, [pc, #336]	; (8004ed0 <_printf_i+0x244>)
 8004d80:	2f6f      	cmp	r7, #111	; 0x6f
 8004d82:	bf0c      	ite	eq
 8004d84:	2308      	moveq	r3, #8
 8004d86:	230a      	movne	r3, #10
 8004d88:	2100      	movs	r1, #0
 8004d8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d8e:	6866      	ldr	r6, [r4, #4]
 8004d90:	60a6      	str	r6, [r4, #8]
 8004d92:	2e00      	cmp	r6, #0
 8004d94:	bfa2      	ittt	ge
 8004d96:	6821      	ldrge	r1, [r4, #0]
 8004d98:	f021 0104 	bicge.w	r1, r1, #4
 8004d9c:	6021      	strge	r1, [r4, #0]
 8004d9e:	b90d      	cbnz	r5, 8004da4 <_printf_i+0x118>
 8004da0:	2e00      	cmp	r6, #0
 8004da2:	d04d      	beq.n	8004e40 <_printf_i+0x1b4>
 8004da4:	4616      	mov	r6, r2
 8004da6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004daa:	fb03 5711 	mls	r7, r3, r1, r5
 8004dae:	5dc7      	ldrb	r7, [r0, r7]
 8004db0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004db4:	462f      	mov	r7, r5
 8004db6:	42bb      	cmp	r3, r7
 8004db8:	460d      	mov	r5, r1
 8004dba:	d9f4      	bls.n	8004da6 <_printf_i+0x11a>
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d10b      	bne.n	8004dd8 <_printf_i+0x14c>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	07df      	lsls	r7, r3, #31
 8004dc4:	d508      	bpl.n	8004dd8 <_printf_i+0x14c>
 8004dc6:	6923      	ldr	r3, [r4, #16]
 8004dc8:	6861      	ldr	r1, [r4, #4]
 8004dca:	4299      	cmp	r1, r3
 8004dcc:	bfde      	ittt	le
 8004dce:	2330      	movle	r3, #48	; 0x30
 8004dd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dd8:	1b92      	subs	r2, r2, r6
 8004dda:	6122      	str	r2, [r4, #16]
 8004ddc:	f8cd a000 	str.w	sl, [sp]
 8004de0:	464b      	mov	r3, r9
 8004de2:	aa03      	add	r2, sp, #12
 8004de4:	4621      	mov	r1, r4
 8004de6:	4640      	mov	r0, r8
 8004de8:	f7ff fee2 	bl	8004bb0 <_printf_common>
 8004dec:	3001      	adds	r0, #1
 8004dee:	d14c      	bne.n	8004e8a <_printf_i+0x1fe>
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295
 8004df4:	b004      	add	sp, #16
 8004df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfa:	4835      	ldr	r0, [pc, #212]	; (8004ed0 <_printf_i+0x244>)
 8004dfc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	680e      	ldr	r6, [r1, #0]
 8004e04:	061f      	lsls	r7, r3, #24
 8004e06:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e0a:	600e      	str	r6, [r1, #0]
 8004e0c:	d514      	bpl.n	8004e38 <_printf_i+0x1ac>
 8004e0e:	07d9      	lsls	r1, r3, #31
 8004e10:	bf44      	itt	mi
 8004e12:	f043 0320 	orrmi.w	r3, r3, #32
 8004e16:	6023      	strmi	r3, [r4, #0]
 8004e18:	b91d      	cbnz	r5, 8004e22 <_printf_i+0x196>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	f023 0320 	bic.w	r3, r3, #32
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	2310      	movs	r3, #16
 8004e24:	e7b0      	b.n	8004d88 <_printf_i+0xfc>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	f043 0320 	orr.w	r3, r3, #32
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	2378      	movs	r3, #120	; 0x78
 8004e30:	4828      	ldr	r0, [pc, #160]	; (8004ed4 <_printf_i+0x248>)
 8004e32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e36:	e7e3      	b.n	8004e00 <_printf_i+0x174>
 8004e38:	065e      	lsls	r6, r3, #25
 8004e3a:	bf48      	it	mi
 8004e3c:	b2ad      	uxthmi	r5, r5
 8004e3e:	e7e6      	b.n	8004e0e <_printf_i+0x182>
 8004e40:	4616      	mov	r6, r2
 8004e42:	e7bb      	b.n	8004dbc <_printf_i+0x130>
 8004e44:	680b      	ldr	r3, [r1, #0]
 8004e46:	6826      	ldr	r6, [r4, #0]
 8004e48:	6960      	ldr	r0, [r4, #20]
 8004e4a:	1d1d      	adds	r5, r3, #4
 8004e4c:	600d      	str	r5, [r1, #0]
 8004e4e:	0635      	lsls	r5, r6, #24
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	d501      	bpl.n	8004e58 <_printf_i+0x1cc>
 8004e54:	6018      	str	r0, [r3, #0]
 8004e56:	e002      	b.n	8004e5e <_printf_i+0x1d2>
 8004e58:	0671      	lsls	r1, r6, #25
 8004e5a:	d5fb      	bpl.n	8004e54 <_printf_i+0x1c8>
 8004e5c:	8018      	strh	r0, [r3, #0]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	6123      	str	r3, [r4, #16]
 8004e62:	4616      	mov	r6, r2
 8004e64:	e7ba      	b.n	8004ddc <_printf_i+0x150>
 8004e66:	680b      	ldr	r3, [r1, #0]
 8004e68:	1d1a      	adds	r2, r3, #4
 8004e6a:	600a      	str	r2, [r1, #0]
 8004e6c:	681e      	ldr	r6, [r3, #0]
 8004e6e:	6862      	ldr	r2, [r4, #4]
 8004e70:	2100      	movs	r1, #0
 8004e72:	4630      	mov	r0, r6
 8004e74:	f7fb f9ac 	bl	80001d0 <memchr>
 8004e78:	b108      	cbz	r0, 8004e7e <_printf_i+0x1f2>
 8004e7a:	1b80      	subs	r0, r0, r6
 8004e7c:	6060      	str	r0, [r4, #4]
 8004e7e:	6863      	ldr	r3, [r4, #4]
 8004e80:	6123      	str	r3, [r4, #16]
 8004e82:	2300      	movs	r3, #0
 8004e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e88:	e7a8      	b.n	8004ddc <_printf_i+0x150>
 8004e8a:	6923      	ldr	r3, [r4, #16]
 8004e8c:	4632      	mov	r2, r6
 8004e8e:	4649      	mov	r1, r9
 8004e90:	4640      	mov	r0, r8
 8004e92:	47d0      	blx	sl
 8004e94:	3001      	adds	r0, #1
 8004e96:	d0ab      	beq.n	8004df0 <_printf_i+0x164>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	079b      	lsls	r3, r3, #30
 8004e9c:	d413      	bmi.n	8004ec6 <_printf_i+0x23a>
 8004e9e:	68e0      	ldr	r0, [r4, #12]
 8004ea0:	9b03      	ldr	r3, [sp, #12]
 8004ea2:	4298      	cmp	r0, r3
 8004ea4:	bfb8      	it	lt
 8004ea6:	4618      	movlt	r0, r3
 8004ea8:	e7a4      	b.n	8004df4 <_printf_i+0x168>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4632      	mov	r2, r6
 8004eae:	4649      	mov	r1, r9
 8004eb0:	4640      	mov	r0, r8
 8004eb2:	47d0      	blx	sl
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d09b      	beq.n	8004df0 <_printf_i+0x164>
 8004eb8:	3501      	adds	r5, #1
 8004eba:	68e3      	ldr	r3, [r4, #12]
 8004ebc:	9903      	ldr	r1, [sp, #12]
 8004ebe:	1a5b      	subs	r3, r3, r1
 8004ec0:	42ab      	cmp	r3, r5
 8004ec2:	dcf2      	bgt.n	8004eaa <_printf_i+0x21e>
 8004ec4:	e7eb      	b.n	8004e9e <_printf_i+0x212>
 8004ec6:	2500      	movs	r5, #0
 8004ec8:	f104 0619 	add.w	r6, r4, #25
 8004ecc:	e7f5      	b.n	8004eba <_printf_i+0x22e>
 8004ece:	bf00      	nop
 8004ed0:	08005195 	.word	0x08005195
 8004ed4:	080051a6 	.word	0x080051a6

08004ed8 <_sbrk_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4d06      	ldr	r5, [pc, #24]	; (8004ef4 <_sbrk_r+0x1c>)
 8004edc:	2300      	movs	r3, #0
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	602b      	str	r3, [r5, #0]
 8004ee4:	f7fb fd8e 	bl	8000a04 <_sbrk>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_sbrk_r+0x1a>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_sbrk_r+0x1a>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	200002c4 	.word	0x200002c4

08004ef8 <__sread>:
 8004ef8:	b510      	push	{r4, lr}
 8004efa:	460c      	mov	r4, r1
 8004efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f00:	f000 f8a0 	bl	8005044 <_read_r>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	bfab      	itete	ge
 8004f08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f0c:	181b      	addge	r3, r3, r0
 8004f0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f12:	bfac      	ite	ge
 8004f14:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f16:	81a3      	strhlt	r3, [r4, #12]
 8004f18:	bd10      	pop	{r4, pc}

08004f1a <__swrite>:
 8004f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f1e:	461f      	mov	r7, r3
 8004f20:	898b      	ldrh	r3, [r1, #12]
 8004f22:	05db      	lsls	r3, r3, #23
 8004f24:	4605      	mov	r5, r0
 8004f26:	460c      	mov	r4, r1
 8004f28:	4616      	mov	r6, r2
 8004f2a:	d505      	bpl.n	8004f38 <__swrite+0x1e>
 8004f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f30:	2302      	movs	r3, #2
 8004f32:	2200      	movs	r2, #0
 8004f34:	f000 f868 	bl	8005008 <_lseek_r>
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f42:	81a3      	strh	r3, [r4, #12]
 8004f44:	4632      	mov	r2, r6
 8004f46:	463b      	mov	r3, r7
 8004f48:	4628      	mov	r0, r5
 8004f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f4e:	f000 b817 	b.w	8004f80 <_write_r>

08004f52 <__sseek>:
 8004f52:	b510      	push	{r4, lr}
 8004f54:	460c      	mov	r4, r1
 8004f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f5a:	f000 f855 	bl	8005008 <_lseek_r>
 8004f5e:	1c43      	adds	r3, r0, #1
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	bf15      	itete	ne
 8004f64:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f6e:	81a3      	strheq	r3, [r4, #12]
 8004f70:	bf18      	it	ne
 8004f72:	81a3      	strhne	r3, [r4, #12]
 8004f74:	bd10      	pop	{r4, pc}

08004f76 <__sclose>:
 8004f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f7a:	f000 b813 	b.w	8004fa4 <_close_r>
	...

08004f80 <_write_r>:
 8004f80:	b538      	push	{r3, r4, r5, lr}
 8004f82:	4d07      	ldr	r5, [pc, #28]	; (8004fa0 <_write_r+0x20>)
 8004f84:	4604      	mov	r4, r0
 8004f86:	4608      	mov	r0, r1
 8004f88:	4611      	mov	r1, r2
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	602a      	str	r2, [r5, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f7fb fb24 	bl	80005dc <_write>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d102      	bne.n	8004f9e <_write_r+0x1e>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	b103      	cbz	r3, 8004f9e <_write_r+0x1e>
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
 8004fa0:	200002c4 	.word	0x200002c4

08004fa4 <_close_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4d06      	ldr	r5, [pc, #24]	; (8004fc0 <_close_r+0x1c>)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	4604      	mov	r4, r0
 8004fac:	4608      	mov	r0, r1
 8004fae:	602b      	str	r3, [r5, #0]
 8004fb0:	f7fb fcf3 	bl	800099a <_close>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d102      	bne.n	8004fbe <_close_r+0x1a>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	b103      	cbz	r3, 8004fbe <_close_r+0x1a>
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}
 8004fc0:	200002c4 	.word	0x200002c4

08004fc4 <_fstat_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	4d07      	ldr	r5, [pc, #28]	; (8004fe4 <_fstat_r+0x20>)
 8004fc8:	2300      	movs	r3, #0
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4608      	mov	r0, r1
 8004fce:	4611      	mov	r1, r2
 8004fd0:	602b      	str	r3, [r5, #0]
 8004fd2:	f7fb fcee 	bl	80009b2 <_fstat>
 8004fd6:	1c43      	adds	r3, r0, #1
 8004fd8:	d102      	bne.n	8004fe0 <_fstat_r+0x1c>
 8004fda:	682b      	ldr	r3, [r5, #0]
 8004fdc:	b103      	cbz	r3, 8004fe0 <_fstat_r+0x1c>
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	bd38      	pop	{r3, r4, r5, pc}
 8004fe2:	bf00      	nop
 8004fe4:	200002c4 	.word	0x200002c4

08004fe8 <_isatty_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4d06      	ldr	r5, [pc, #24]	; (8005004 <_isatty_r+0x1c>)
 8004fec:	2300      	movs	r3, #0
 8004fee:	4604      	mov	r4, r0
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	602b      	str	r3, [r5, #0]
 8004ff4:	f7fb fced 	bl	80009d2 <_isatty>
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	d102      	bne.n	8005002 <_isatty_r+0x1a>
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	b103      	cbz	r3, 8005002 <_isatty_r+0x1a>
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	bd38      	pop	{r3, r4, r5, pc}
 8005004:	200002c4 	.word	0x200002c4

08005008 <_lseek_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4d07      	ldr	r5, [pc, #28]	; (8005028 <_lseek_r+0x20>)
 800500c:	4604      	mov	r4, r0
 800500e:	4608      	mov	r0, r1
 8005010:	4611      	mov	r1, r2
 8005012:	2200      	movs	r2, #0
 8005014:	602a      	str	r2, [r5, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	f7fb fce6 	bl	80009e8 <_lseek>
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	d102      	bne.n	8005026 <_lseek_r+0x1e>
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	b103      	cbz	r3, 8005026 <_lseek_r+0x1e>
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	200002c4 	.word	0x200002c4

0800502c <__malloc_lock>:
 800502c:	4801      	ldr	r0, [pc, #4]	; (8005034 <__malloc_lock+0x8>)
 800502e:	f7ff bb55 	b.w	80046dc <__retarget_lock_acquire_recursive>
 8005032:	bf00      	nop
 8005034:	200002bc 	.word	0x200002bc

08005038 <__malloc_unlock>:
 8005038:	4801      	ldr	r0, [pc, #4]	; (8005040 <__malloc_unlock+0x8>)
 800503a:	f7ff bb50 	b.w	80046de <__retarget_lock_release_recursive>
 800503e:	bf00      	nop
 8005040:	200002bc 	.word	0x200002bc

08005044 <_read_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4d07      	ldr	r5, [pc, #28]	; (8005064 <_read_r+0x20>)
 8005048:	4604      	mov	r4, r0
 800504a:	4608      	mov	r0, r1
 800504c:	4611      	mov	r1, r2
 800504e:	2200      	movs	r2, #0
 8005050:	602a      	str	r2, [r5, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	f7fb fc84 	bl	8000960 <_read>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d102      	bne.n	8005062 <_read_r+0x1e>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	b103      	cbz	r3, 8005062 <_read_r+0x1e>
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	200002c4 	.word	0x200002c4

08005068 <_init>:
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	bf00      	nop
 800506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506e:	bc08      	pop	{r3}
 8005070:	469e      	mov	lr, r3
 8005072:	4770      	bx	lr

08005074 <_fini>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr
